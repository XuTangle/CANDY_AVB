
candy_avb_test.elf:     file format elf32-littlenios2
candy_avb_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00800244

Program Header:
    LOAD off    0x00001020 vaddr 0x00800020 paddr 0x00800020 align 2**12
         filesz 0x000162e4 memsz 0x0001786c flags rwx
    LOAD off    0x00018000 vaddr 0x01040000 paddr 0x01040000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  01040000  01040000  00018000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00800020  00800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00013c18  00800244  00800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000570  00813e5c  00813e5c  00014e5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001f34  008143d0  008143d0  000153d0  2**4
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001588  00816304  00816304  00017304  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  0081788c  0081788c  00018000  2**0
                  CONTENTS
  7 .onchip_flash_0_data 00000000  01040020  01040020  00018000  2**0
                  CONTENTS
  8 .descriptor_memory 00000000  01080000  01080000  00018000  2**0
                  CONTENTS
  9 .comment      00000023  00000000  00000000  00018000  2**0
                  CONTENTS, READONLY
 10 .debug_aranges 00001010  00000000  00000000  00018028  2**3
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_info   000282fd  00000000  00000000  00019038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 0000a06f  00000000  00000000  00041335  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0000cab3  00000000  00000000  0004b3a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002cec  00000000  00000000  00057e58  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000050ea  00000000  00000000  0005ab44  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_loc    00017be2  00000000  00000000  0005fc2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_alt_sim_info 00000050  00000000  00000000  00077810  2**2
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_ranges 00001900  00000000  00000000  00077860  2**3
                  CONTENTS, READONLY, DEBUGGING
 19 .thread_model 00000003  00000000  00000000  0007da42  2**0
                  CONTENTS, READONLY
 20 .cpu          00000007  00000000  00000000  0007da45  2**0
                  CONTENTS, READONLY
 21 .qsys         00000001  00000000  00000000  0007da4c  2**0
                  CONTENTS, READONLY
 22 .simulation_enabled 00000001  00000000  00000000  0007da4d  2**0
                  CONTENTS, READONLY
 23 .sysid_hash   00000004  00000000  00000000  0007da4e  2**0
                  CONTENTS, READONLY
 24 .sysid_base   00000004  00000000  00000000  0007da52  2**0
                  CONTENTS, READONLY
 25 .sysid_time   00000004  00000000  00000000  0007da56  2**0
                  CONTENTS, READONLY
 26 .stderr_dev   0000000a  00000000  00000000  0007da5a  2**0
                  CONTENTS, READONLY
 27 .stdin_dev    0000000a  00000000  00000000  0007da64  2**0
                  CONTENTS, READONLY
 28 .stdout_dev   0000000a  00000000  00000000  0007da6e  2**0
                  CONTENTS, READONLY
 29 .sopc_system_name 00000013  00000000  00000000  0007da78  2**0
                  CONTENTS, READONLY
 30 .quartus_project_dir 0000003a  00000000  00000000  0007da8b  2**0
                  CONTENTS, READONLY
 31 .jdi          00005501  00000000  00000000  0007dac5  2**0
                  CONTENTS, READONLY
 32 .sopcinfo     000c4663  00000000  00000000  00082fc6  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
01040000 l    d  .entry	00000000 .entry
00800020 l    d  .exceptions	00000000 .exceptions
00800244 l    d  .text	00000000 .text
00813e5c l    d  .rodata	00000000 .rodata
008143d0 l    d  .rwdata	00000000 .rwdata
00816304 l    d  .bss	00000000 .bss
0081788c l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
01040020 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
01080000 l    d  .descriptor_memory	00000000 .descriptor_memory
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../candy_avb_test_bsp//obj/HAL/src/crt0.o
00800288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SigmaStudioFW.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 i2c.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
00813fbe l     O .rodata	00000010 zeroes.4404
00803598 l     F .text	000000bc __sbprintf
00813fce l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
008037a8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
008052d8 l     F .text	00000008 __fp_unlock
008052ec l     F .text	0000019c __sinit.part.1
00805488 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0081452c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
00814970 l     O .rwdata	00000020 lc_ctype_charset
00814950 l     O .rwdata	00000020 lc_message_charset
00814990 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
00814000 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00807c78 l     F .text	000000fc __sprint_r.part.0
00814134 l     O .rodata	00000010 blanks.4348
00814124 l     O .rodata	00000010 zeroes.4349
00809204 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
0080d9d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0080dae4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0080db10 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0080dbfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
0080dcdc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0080deb0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
008162dc l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0080e12c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0080e260 l     F .text	00000034 alt_dev_reg
00814f80 l     O .rwdata	00001060 jtaguart_0
00815fe0 l     O .rwdata	000000c4 uart_0
008160b0 l     O .rwdata	00000060 tse_0_dma_rx
00816110 l     O .rwdata	00000060 tse_0_dma_tx
00816170 l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0080e5dc l     F .text	0000020c altera_avalon_jtag_uart_irq
0080e7e8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0080ee20 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
0080f0d0 l     F .text	0000009c altera_avalon_uart_irq
0080f16c l     F .text	000000e4 altera_avalon_uart_rxirq
0080f250 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
0080f3ec l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0080f604 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_msgdma.c
0080f7ec l     F .text	0000003c alt_get_errno
0080f828 l     F .text	00000094 alt_msgdma_write_standard_descriptor
0080f8bc l     F .text	0000012c alt_msgdma_write_extended_descriptor
0080f9e8 l     F .text	00000184 alt_msgdma_irq
0080fb6c l     F .text	0000008c alt_msgdma_construct_standard_descriptor
0080fbf8 l     F .text	00000154 alt_msgdma_construct_extended_descriptor
0080fd4c l     F .text	000002d0 alt_msgdma_descriptor_async_transfer
0081001c l     F .text	00000378 alt_msgdma_descriptor_sync_transfer
00810664 l     F .text	000000a4 alt_msgdma_construct_prefetcher_standard_descriptor
00810708 l     F .text	00000194 alt_msgdma_construct_prefetcher_extended_descriptor
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
0081178c l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
008129c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00812f54 l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00813094 l     F .text	0000003c alt_get_errno
008130d0 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_printf.c
00000000 l    df *ABS*	00000000 alt_putchar.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0081635c g     O .bss	00000004 alt_instruction_exception_handler
0081169c g     F .text	0000003c alt_msgdma_standard_descriptor_async_transfer
00807788 g     F .text	00000074 _mprec_log10
00807874 g     F .text	0000008c __any_on
00809c5c g     F .text	00000054 _isatty_r
0081400c g     O .rodata	00000028 __mprec_tinytens
0080ddec g     F .text	0000007c alt_main
0081778c g     O .bss	00000100 alt_irq
00816297 g     O .rwdata	00000005 R22_CRC_REGISTERS_IC_1_Default
00809cb0 g     F .text	00000060 _lseek_r
00816318 g     O .bss	00000004 itest
0080c568 g     F .text	00000088 .hidden __eqdf2
00810444 g     F .text	00000058 alt_msgdma_construct_standard_mm_to_mm_descriptor
0081788c g       *ABS*	00000000 __alt_heap_start
00801348 g     F .text	0000003c printf
00800c6c g     F .text	00000094 i2c_send_byte
0080a588 g     F .text	0000009c _wcrtomb_r
00807aa0 g     F .text	0000005c __sseek
00805628 g     F .text	00000010 __sinit
0080028c g     F .text	00000090 SIGMA_WRITE_REGISTER_BLOCK
0080a430 g     F .text	00000140 __swbuf_r
00805c34 g     F .text	0000007c _setlocale_r
00805490 g     F .text	00000068 __sfmoreglue
008144ed g     O .rwdata	00000030 Param_Data_IC_1
0080de8c g     F .text	00000024 __malloc_unlock
008162a7 g     O .rwdata	00000001 R37_DSP_RUN_REGISTER_IC_1_Default
00816311 g     O .bss	00000001 R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default
00809d10 g     F .text	0000015c memmove
00805610 g     F .text	00000018 _cleanup
00806904 g     F .text	000000a8 _Balloc
00810394 g     F .text	00000058 alt_msgdma_construct_standard_st_to_mm_descriptor
0080c5f0 g     F .text	000000dc .hidden __gtdf2
008136f4 g     F .text	00000024 altera_nios2_gen2_irq_init
00816360 g     O .bss	00001402 i2c_write_data
01040000 g     F .entry	00000000 __reset
00809744 g     F .text	0000005c _fstat_r
00816340 g     O .bss	00000004 errno
00807a1c g     F .text	00000008 __seofread
00816348 g     O .bss	00000004 alt_argv
0081e270 g       *ABS*	00000000 _gp
0080e0fc g     F .text	00000030 usleep
0081263c g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
0080044c g     F .text	000000f4 SIGMA_SAFELOAD_WRITE_DATA
00810f28 g     F .text	00000144 alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits
00816309 g     O .bss	00000001 R7_MICCTRLREGISTER_IC_1_Default
00816270 g     O .rwdata	00000008 NON_MODULO_RAM_Data_IC_1
00814df8 g     O .rwdata	00000180 alt_fd_list
0081629c g     O .rwdata	00000002 R24_NON_MODULO_REGISTERS_IC_1_Default
0081627a g     O .rwdata	00000006 R3_PLLCRLREGISTER_IC_1_Default
00812b68 g     F .text	00000090 alt_find_dev
008067bc g     F .text	00000148 memcpy
00800d00 g     F .text	000000a8 i2c_receive_byte
01040000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
008052e0 g     F .text	0000000c _cleanup_r
0080d854 g     F .text	000000dc .hidden __floatsidf
00813018 g     F .text	0000007c alt_io_redirect
0081631c g     O .bss	00000004 ftest
0080c6cc g     F .text	000000f4 .hidden __ltdf2
00800da8 g     F .text	00000144 i2c_multiple_write
00813e5c g       *ABS*	00000000 __DTOR_END__
008113d8 g     F .text	000000ac alt_msgdma_start_prefetcher_with_extd_desc_list
008116d8 g     F .text	0000003c alt_msgdma_extended_descriptor_async_transfer
00811648 g     F .text	00000054 alt_msgdma_register_callback
008138c4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
00807900 g     F .text	00000074 __fpclassifyd
008076e4 g     F .text	000000a4 __ratio
008091e8 g     F .text	0000001c __vfiprintf_internal
0080e9e0 g     F .text	0000021c altera_avalon_jtag_uart_read
00810b94 g     F .text	000000f0 alt_msgdma_prefetcher_add_standard_desc_to_list
00801318 g     F .text	00000030 _printf_r
0080b318 g     F .text	00000064 .hidden __udivsi3
0080dc38 g     F .text	000000a4 isatty
008125ac g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
0081405c g     O .rodata	000000c8 __mprec_tens
00805cb0 g     F .text	0000000c __locale_charset
0081628f g     O .rwdata	00000003 R12_DAC_CONTROL_REGISTERS_IC_1_Default
0081633c g     O .bss	00000004 __malloc_top_pad
008162e8 g     O .rwdata	00000008 altera_onchip_flash_list
008162b4 g     O .rwdata	00000004 __mb_cur_max
00805ce0 g     F .text	0000000c _localeconv_r
008097a0 g     F .text	000004bc __sfvwrite_r
00806d10 g     F .text	0000003c __i2b
00816282 g     O .rwdata	00000002 R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default
00807974 g     F .text	00000054 _sbrk_r
00809e6c g     F .text	00000060 _read_r
00812950 g     F .text	00000078 alt_dcache_flush
00811928 g     F .text	00000168 alt_onchip_flash_erase_block
008162d4 g     O .rwdata	00000004 alt_max_fd
00809438 g     F .text	000000f0 _fclose_r
008052a8 g     F .text	00000030 fflush
00816338 g     O .bss	00000004 __malloc_max_sbrked_mem
0080107c g     F .text	00000110 .hidden __extendsfdf2
0080b3d4 g     F .text	000008ac .hidden __adddf3
00800b54 g     F .text	00000098 i2c_send_bit
0080748c g     F .text	0000010c __b2d
008108f4 g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor
0080ace8 g     F .text	00000538 .hidden __umoddi3
0080dd18 g     F .text	000000d4 lseek
008162ac g     O .rwdata	00000004 _global_impure_ptr
00809ecc g     F .text	00000564 _realloc_r
0081788c g       *ABS*	00000000 __bss_end
0081451d g     O .rwdata	0000000e R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default
00812e64 g     F .text	000000f0 alt_iic_isr_register
008135ec g     F .text	00000108 alt_tick
00816284 g     O .rwdata	00000008 R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default
008114dc g     F .text	0000016c alt_msgdma_init
0080a770 g     F .text	00000578 .hidden __udivdi3
008096a0 g     F .text	00000024 _fputwc_r
00814034 g     O .rodata	00000028 __mprec_bigtens
00806af4 g     F .text	00000104 __s2b
0080d930 g     F .text	000000a8 .hidden __floatunsidf
008003ac g     F .text	000000a0 SIGMA_SAFELOAD_WRITE_ADDR
008071cc g     F .text	00000060 __mcmp
0080f024 g     F .text	000000ac altera_avalon_uart_init
00811750 g     F .text	0000003c alt_msgdma_extended_descriptor_sync_transfer
00805648 g     F .text	00000018 __fp_lock_all
00812e18 g     F .text	0000004c alt_ic_irq_enabled
00800540 g     F .text	00000094 SIGMA_SAFELOAD_WRITE_TRANSFER_BIT
00813550 g     F .text	0000009c alt_alarm_stop
01080000 g       *ABS*	00000000 __alt_mem_descriptor_memory
00816350 g     O .bss	00000004 alt_irq_active
00816295 g     O .rwdata	00000001 R15_JACKREGISTER_IC_1_Default
008000fc g     F .exceptions	000000d4 alt_irq_handler
00814dd0 g     O .rwdata	00000028 alt_dev_null
0081052c g     F .text	00000090 alt_msgdma_construct_extended_mm_to_st_descriptor
00800a50 g     F .text	0000008c i2c_start
00816304 g     O .bss	00000001 R1_DSP_RUN_REGISTER_IC_1_Default
0081132c g     F .text	000000ac alt_msgdma_start_prefetcher_with_std_desc_list
00806bf8 g     F .text	00000068 __hi0bits
00816312 g     O .bss	00000001 R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default
0080d7d4 g     F .text	00000080 .hidden __fixdfsi
008162cc g     O .rwdata	00000008 alt_dev_list
0080e168 g     F .text	000000f8 write
00813a28 g     F .text	000000a0 _putc_r
0080031c g     F .text	00000090 SIGMA_WRITE_REGISTER_CONTROL
0080db4c g     F .text	000000b0 fstat
008143d0 g     O .rwdata	0000011d Program_Data_IC_1
0080c6cc g     F .text	000000f4 .hidden __ledf2
00806f44 g     F .text	00000140 __pow5mult
00807d8c g     F .text	0000145c ___vfiprintf_internal_r
00816330 g     O .bss	00000004 __nlocale_changed
0080b37c g     F .text	00000058 .hidden __umodsi3
0081094c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor
0081788c g       *ABS*	00000000 end
0080f640 g     F .text	000001ac altera_avalon_uart_write
0080e51c g     F .text	000000c0 altera_avalon_jtag_uart_init
008001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
00813e5c g       *ABS*	00000000 __CTOR_LIST__
01000000 g       *ABS*	00000000 __alt_stack_pointer
0080ee98 g     F .text	0000007c alt_avalon_timer_sc_init
0080ef74 g     F .text	00000060 altera_avalon_uart_write_fd
0080118c g     F .text	00000064 .hidden __clzsi2
0080efd4 g     F .text	00000050 altera_avalon_uart_close_fd
0080ebfc g     F .text	00000224 altera_avalon_jtag_uart_write
00805638 g     F .text	00000004 __sfp_lock_acquire
008066d8 g     F .text	000000e4 memchr
00801384 g     F .text	000021f8 ___vfprintf_internal_r
0081188c g     F .text	0000009c alt_onchip_flash_get_info
0080579c g     F .text	00000310 _free_r
008132e8 g     F .text	0000022c alt_printf
00805cbc g     F .text	00000010 __locale_mb_cur_max
00813ca8 g     F .text	00000180 __call_exitprocs
0081632c g     O .bss	00000004 __mlocale_changed
008162b8 g     O .rwdata	00000004 __malloc_sbrk_base
00800244 g     F .text	00000048 _start
00816354 g     O .bss	00000004 _alt_tick_rate
00807084 g     F .text	00000148 __lshift
00816358 g     O .bss	00000004 _alt_nticks
008103ec g     F .text	00000058 alt_msgdma_construct_standard_mm_to_st_descriptor
0080deec g     F .text	000000fc read
0080e2cc g     F .text	000000ec alt_sys_init
00816310 g     O .bss	00000001 R27_ROUTING_MATRIX_INPUTS_IC_1_Default
00813b90 g     F .text	00000118 __register_exitproc
00806d4c g     F .text	000001f8 __multiply
0080e888 g     F .text	00000068 altera_avalon_jtag_uart_close
00817764 g     O .bss	00000028 __malloc_current_mallinfo
00807598 g     F .text	0000014c __d2b
00816313 g     O .bss	00000001 R30_DSP_SLEW_MODES_IC_1_Default
0080e3b8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
00813820 g     F .text	000000a4 alt_get_fd
008127f8 g     F .text	00000158 alt_busy_sleep
00809320 g     F .text	00000054 _close_r
0081089c g     F .text	00000058 alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor
008139ac g     F .text	0000007c memcmp
0080e478 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0081788c g       *ABS*	00000000 __alt_stack_base
008162a8 g     O .rwdata	00000001 R39_DEJITTER_REGISTER_CONTROL_IC_1_Default
0080e4c8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
00816315 g     O .bss	00000001 R38_DEJITTER_REGISTER_CONTROL_IC_1_Default
008109a4 g     F .text	000000a0 alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor
0081630a g     O .bss	00000002 R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default
00803654 g     F .text	00000154 __swsetup_r
0080bc80 g     F .text	000008e8 .hidden __divdf3
008117c0 g     F .text	000000cc alt_onchip_flash_read
008054f8 g     F .text	00000118 __sfp
008077fc g     F .text	00000078 __copybits
008149c8 g     O .rwdata	00000408 __malloc_av_
00805644 g     F .text	00000004 __sinit_lock_release
00800adc g     F .text	00000078 i2c_stop
0080c7c0 g     F .text	00000718 .hidden __muldf3
008079c8 g     F .text	00000054 __sread
00813718 g     F .text	00000108 alt_find_file
00812a04 g     F .text	000000a4 alt_dev_llist_insert
0080de68 g     F .text	00000024 __malloc_lock
0080e04c g     F .text	000000b0 sbrk
0080524c g     F .text	0000005c _fflush_r
00809374 g     F .text	000000c4 _calloc_r
008162f0 g     O .rwdata	00000008 alt_flash_dev_list
00816304 g       *ABS*	00000000 __bss_start
00816305 g     O .bss	00000004 R6_ALC_CONTROL_REGISTERS_IC_1_Default
008011f0 g     F .text	00000128 memset
00811484 g     F .text	00000058 alt_msgdma_open
00800928 g     F .text	00000128 main
00816292 g     O .rwdata	00000001 R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default
0081634c g     O .bss	00000004 alt_envp
00816334 g     O .bss	00000004 __malloc_max_total_mem
00810c84 g     F .text	00000198 alt_msgdma_prefetcher_add_extended_desc_to_list
0080e418 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0080a570 g     F .text	00000018 __swbuf
00816280 g     O .rwdata	00000002 R4_DELAY_IC_1_Default
00807afc g     F .text	00000008 __sclose
01000000 g       *ABS*	00000000 __alt_heap_limit
00809528 g     F .text	00000014 fclose
008039a8 g     F .text	00001688 _dtoa_r
0081106c g     F .text	000002c0 alt_msgdma_start_prefetcher_with_list_addr
00805ecc g     F .text	0000080c _malloc_r
0080a6e4 g     F .text	00000030 __ascii_wctomb
008162d8 g     O .rwdata	00000004 alt_errno
00810adc g     F .text	000000b8 alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor
0081251c g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
0081628c g     O .rwdata	00000003 R9_ADC_CONTROL_REGISTERS_IC_1_Default
00805aac g     F .text	000000c4 _fwalk
00813ac8 g     F .text	000000c8 putc
0080b220 g     F .text	00000084 .hidden __divsi3
008162a6 g     O .rwdata	00000001 R36_SAMPLE_RATE_SETTING_IC_1_Default
00805678 g     F .text	00000124 _malloc_trim_r
00813e5c g       *ABS*	00000000 __CTOR_END__
00812040 g     F .text	000004dc altera_onchip_flash_init
00807b04 g     F .text	000000dc strcmp
00813e5c g       *ABS*	00000000 __DTOR_LIST__
0080c568 g     F .text	00000088 .hidden __nedf2
0080e294 g     F .text	00000038 alt_irq_init
0080dfe8 g     F .text	00000064 alt_release_fd
00811714 g     F .text	0000003c alt_msgdma_standard_descriptor_sync_transfer
008162a4 g     O .rwdata	00000002 R32_CLOCK_ENABLE_REGISTERS_IC_1_Default
00813e7b g     O .rodata	00000100 .hidden __clz_tab
00816328 g     O .bss	00000004 _PathLocale
00813960 g     F .text	00000014 atexit
008092c0 g     F .text	00000060 _write_r
00805cec g     F .text	00000018 setlocale
00810a44 g     F .text	00000098 alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor
00816293 g     O .rwdata	00000002 R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default
008162b0 g     O .rwdata	00000004 _impure_ptr
00816344 g     O .bss	00000004 alt_argc
00805030 g     F .text	0000021c __sflush_r
00812b08 g     F .text	00000060 _do_dtors
00805cd8 g     F .text	00000008 __locale_cjk_lang
00800020 g       .exceptions	00000000 alt_irq_entry
008162a3 g     O .rwdata	00000001 R26_SAMPLE_RATE_SETTING_IC_1_Default
00807428 g     F .text	00000064 __ulp
00805660 g     F .text	00000018 __fp_unlock_all
008162c4 g     O .rwdata	00000008 alt_fs_list
00811a90 g     F .text	000002d8 alt_onchip_flash_write_block
00805d04 g     F .text	0000000c localeconv
00816296 g     O .rwdata	00000001 R21_DSP_ENABLE_REGISTER_IC_1_Default
00800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
0081630c g     O .bss	00000004 R23_GPIO_REGISTERS_IC_1_Default
00812cb4 g     F .text	00000050 alt_ic_isr_register
00816304 g       *ABS*	00000000 _edata
0080ef14 g     F .text	00000060 altera_avalon_uart_read_fd
00811d68 g     F .text	000002d8 alt_onchip_flash_write
0081788c g       *ABS*	00000000 _end
00812bf8 g     F .text	00000068 alt_flash_open_dev
00800bec g     F .text	00000080 i2c_receive_bit
0080953c g     F .text	00000164 __fputwc
0080e8f0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0081629e g     O .rwdata	00000005 R25_WATCHDOG_REGISTERS_IC_1_Default
00812d8c g     F .text	0000008c alt_ic_irq_disable
00807a24 g     F .text	0000007c __swrite
008162bc g     O .rwdata	00000004 __malloc_trim_threshold
00805ccc g     F .text	0000000c __locale_msgcharset
00813974 g     F .text	00000038 exit
00805b70 g     F .text	000000c4 _fwalk_reent
00810e1c g     F .text	0000010c alt_msgdma_prefetcher_set_std_list_own_by_hw_bits
0080722c g     F .text	000001fc __mdiff
00812c60 g     F .text	00000054 alt_flash_close_dev
0080b2a4 g     F .text	00000074 .hidden __modsi3
01000000 g       *ABS*	00000000 __alt_data_end
00800020 g     F .exceptions	00000000 alt_exception
0080563c g     F .text	00000004 __sfp_lock_release
008105bc g     F .text	000000a8 alt_msgdma_construct_extended_mm_to_mm_descriptor
00800eec g     F .text	00000190 i2c_multiple_read
0081049c g     F .text	00000090 alt_msgdma_construct_extended_st_to_mm_descriptor
0080f398 g     F .text	00000054 altera_avalon_uart_close
00813e28 g     F .text	00000034 _exit
008126cc g     F .text	0000012c alt_alarm_start
00816279 g     O .rwdata	00000001 R2_CLKCTRLREGISTER_IC_1_Default
00805d10 g     F .text	000001bc __smakebuf_r
008162e0 g     O .rwdata	00000008 alt_msgdma_list
00807be0 g     F .text	00000098 strlen
00813194 g     F .text	00000154 open
0080c5f0 g     F .text	000000dc .hidden __gedf2
00813514 g     F .text	0000003c alt_putchar
008162c0 g     O .rwdata	00000004 __wctomb
00807d74 g     F .text	00000018 __sprint_r
008162f8 g     O .rwdata	00000004 alt_priority_mask
00812d04 g     F .text	00000088 alt_ic_irq_enable
0080357c g     F .text	0000001c __vfprintf_internal
0080f428 g     F .text	000001dc altera_avalon_uart_read
0080a714 g     F .text	0000005c _wctomb_r
008005d4 g     F .text	00000354 default_download_IC_1
0080ced8 g     F .text	000008fc .hidden __subdf3
00816320 g     O .bss	00000008 dtest
00806c60 g     F .text	000000b0 __lo0bits
008162fc g     O .rwdata	00000008 alt_alarm_list
00812aa8 g     F .text	00000060 _do_ctors
0080a624 g     F .text	000000c0 wcrtomb
00816278 g     O .rwdata	00000001 R0_SAMPLE_RATE_SETTING_IC_1_Default
0080da14 g     F .text	000000d0 close
008096c4 g     F .text	00000080 fputwc
00805640 g     F .text	00000004 __sinit_lock_acquire
00816314 g     O .bss	00000001 R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default
008069d4 g     F .text	00000120 __multadd
008069ac g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

00800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
  800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
  800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
  800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
  80002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
  800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
  800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
  800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
  80003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
  800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
  800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
  800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
  80004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
  800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
  800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
  800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
  80005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
  800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
  800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
  800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
  80006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
  800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
  800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
  80007c:	10000326 	beq	r2,zero,80008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
  800080:	20000226 	beq	r4,zero,80008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
  800084:	08000fc0 	call	8000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
  800088:	00000706 	br	8000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
  80008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
  800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
  800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
  800098:	08001d00 	call	8001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
  80009c:	1000021e 	bne	r2,zero,8000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
  8000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
  8000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
  8000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
  8000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
  8000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
  8000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
  8000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
  8000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
  8000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
  8000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
  8000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
  8000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
  8000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
  8000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
  8000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
  8000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
  8000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
  8000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
  8000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
  8000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
  8000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
  8000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
  8000f8:	ef80083a 	eret

008000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
  8000fc:	defff904 	addi	sp,sp,-28
  800100:	dfc00615 	stw	ra,24(sp)
  800104:	df000515 	stw	fp,20(sp)
  800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
  80010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  800110:	0005313a 	rdctl	r2,ipending
  800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
  800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
  80011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
  800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
  800124:	00800044 	movi	r2,1
  800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
  80012c:	e0fffb17 	ldw	r3,-20(fp)
  800130:	e0bffc17 	ldw	r2,-16(fp)
  800134:	1884703a 	and	r2,r3,r2
  800138:	10001426 	beq	r2,zero,80018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
  80013c:	00802074 	movhi	r2,129
  800140:	109de304 	addi	r2,r2,30604
  800144:	e0fffd17 	ldw	r3,-12(fp)
  800148:	180690fa 	slli	r3,r3,3
  80014c:	10c5883a 	add	r2,r2,r3
  800150:	10c00017 	ldw	r3,0(r2)
  800154:	00802074 	movhi	r2,129
  800158:	109de304 	addi	r2,r2,30604
  80015c:	e13ffd17 	ldw	r4,-12(fp)
  800160:	200890fa 	slli	r4,r4,3
  800164:	1105883a 	add	r2,r2,r4
  800168:	10800104 	addi	r2,r2,4
  80016c:	10800017 	ldw	r2,0(r2)
  800170:	1009883a 	mov	r4,r2
  800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
  800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
  80017c:	0005313a 	rdctl	r2,ipending
  800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
  800184:	e0bfff17 	ldw	r2,-4(fp)
  800188:	00000706 	br	8001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
  80018c:	e0bffc17 	ldw	r2,-16(fp)
  800190:	1085883a 	add	r2,r2,r2
  800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
  800198:	e0bffd17 	ldw	r2,-12(fp)
  80019c:	10800044 	addi	r2,r2,1
  8001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
  8001a4:	003fe106 	br	80012c <__alt_mem_descriptor_memory+0xff78012c>

    active = alt_irq_pending ();
  8001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
  8001ac:	e0bffb17 	ldw	r2,-20(fp)
  8001b0:	103fdb1e 	bne	r2,zero,800120 <__alt_mem_descriptor_memory+0xff780120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
  8001b4:	0001883a 	nop
}
  8001b8:	0001883a 	nop
  8001bc:	e037883a 	mov	sp,fp
  8001c0:	dfc00117 	ldw	ra,4(sp)
  8001c4:	df000017 	ldw	fp,0(sp)
  8001c8:	dec00204 	addi	sp,sp,8
  8001cc:	f800283a 	ret

008001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
  8001d0:	defffb04 	addi	sp,sp,-20
  8001d4:	dfc00415 	stw	ra,16(sp)
  8001d8:	df000315 	stw	fp,12(sp)
  8001dc:	df000304 	addi	fp,sp,12
  8001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
  8001e4:	000531fa 	rdctl	r2,exception
  8001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
  8001ec:	e0bffd17 	ldw	r2,-12(fp)
  8001f0:	10801f0c 	andi	r2,r2,124
  8001f4:	1004d0ba 	srli	r2,r2,2
  8001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
  8001fc:	0005333a 	rdctl	r2,badaddr
  800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
  800204:	d0a03b17 	ldw	r2,-32532(gp)
  800208:	10000726 	beq	r2,zero,800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
  80020c:	d0a03b17 	ldw	r2,-32532(gp)
  800210:	e0fffd17 	ldw	r3,-12(fp)
  800214:	e1bffe17 	ldw	r6,-8(fp)
  800218:	e17fff17 	ldw	r5,-4(fp)
  80021c:	1809883a 	mov	r4,r3
  800220:	103ee83a 	callr	r2
  800224:	00000206 	br	800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
  800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
  80022c:	0005883a 	mov	r2,zero
}
  800230:	e037883a 	mov	sp,fp
  800234:	dfc00117 	ldw	ra,4(sp)
  800238:	df000017 	ldw	fp,0(sp)
  80023c:	dec00204 	addi	sp,sp,8
  800240:	f800283a 	ret

Disassembly of section .text:

00800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
  800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
  800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
  80024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
  800250:	00bffd16 	blt	zero,r2,800248 <__alt_mem_descriptor_memory+0xff780248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  800254:	06c04034 	movhi	sp,256
    ori sp, sp, %lo(__alt_stack_pointer)
  800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
  80025c:	06802074 	movhi	gp,129
    ori gp, gp, %lo(_gp)
  800260:	d6b89c14 	ori	gp,gp,57968
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  800264:	00802074 	movhi	r2,129
    ori r2, r2, %lo(__bss_start)
  800268:	1098c114 	ori	r2,r2,25348

    movhi r3, %hi(__bss_end)
  80026c:	00c02074 	movhi	r3,129
    ori r3, r3, %lo(__bss_end)
  800270:	18de2314 	ori	r3,r3,30860

    beq r2, r3, 1f
  800274:	10c00326 	beq	r2,r3,800284 <_start+0x40>

0:
    stw zero, (r2)
  800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  80027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  800280:	10fffd36 	bltu	r2,r3,800278 <__alt_mem_descriptor_memory+0xff780278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  800284:	080ddec0 	call	80ddec <alt_main>

00800288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  800288:	003fff06 	br	800288 <__alt_mem_descriptor_memory+0xff780288>

0080028c <SIGMA_WRITE_REGISTER_BLOCK>:
#include "SigmaStudioFW.h"

uint8_t i2c_write_data[5120 + 2] = {0x00};

bool SIGMA_WRITE_REGISTER_BLOCK(uint8_t devAddress, uint16_t address, uint16_t length, ADI_REG_TYPE *pData)
{
  80028c:	defff704 	addi	sp,sp,-36
  800290:	dfc00815 	stw	ra,32(sp)
  800294:	df000715 	stw	fp,28(sp)
  800298:	df000704 	addi	fp,sp,28
  80029c:	2807883a 	mov	r3,r5
  8002a0:	3005883a 	mov	r2,r6
  8002a4:	e1ffff15 	stw	r7,-4(fp)
  8002a8:	e13ffc05 	stb	r4,-16(fp)
  8002ac:	e0fffd0d 	sth	r3,-12(fp)
  8002b0:	e0bffe0d 	sth	r2,-8(fp)
  seq.buf[1].len  = 0;

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, pData, length);
  8002b4:	e0fffc03 	ldbu	r3,-16(fp)
  8002b8:	e13ffd0b 	ldhu	r4,-12(fp)
  8002bc:	e0bffe0b 	ldhu	r2,-8(fp)
  8002c0:	d8800115 	stw	r2,4(sp)
  8002c4:	e0bfff17 	ldw	r2,-4(fp)
  8002c8:	d8800015 	stw	r2,0(sp)
  8002cc:	200f883a 	mov	r7,r4
  8002d0:	180d883a 	mov	r6,r3
  8002d4:	01404234 	movhi	r5,264
  8002d8:	29494004 	addi	r5,r5,9472
  8002dc:	01004234 	movhi	r4,264
  8002e0:	21094404 	addi	r4,r4,9488
  8002e4:	0800da80 	call	800da8 <i2c_multiple_write>
  8002e8:	e0bffb05 	stb	r2,-20(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
  8002ec:	e0bffb03 	ldbu	r2,-20(fp)
  8002f0:	1080005c 	xori	r2,r2,1
  8002f4:	10803fcc 	andi	r2,r2,255
  8002f8:	10000226 	beq	r2,zero,800304 <SIGMA_WRITE_REGISTER_BLOCK+0x78>
  {
    //return((uint32_t) ret);
	  return false;
  8002fc:	0005883a 	mov	r2,zero
  800300:	00000106 	br	800308 <SIGMA_WRITE_REGISTER_BLOCK+0x7c>
  }

  //return((uint32_t) 0);
  return true;
  800304:	00800044 	movi	r2,1
}
  800308:	e037883a 	mov	sp,fp
  80030c:	dfc00117 	ldw	ra,4(sp)
  800310:	df000017 	ldw	fp,0(sp)
  800314:	dec00204 	addi	sp,sp,8
  800318:	f800283a 	ret

0080031c <SIGMA_WRITE_REGISTER_CONTROL>:

bool SIGMA_WRITE_REGISTER_CONTROL(uint8_t devAddress, uint16_t address, uint16_t length, ADI_REG_U8 *pData)
{
  80031c:	defff704 	addi	sp,sp,-36
  800320:	dfc00815 	stw	ra,32(sp)
  800324:	df000715 	stw	fp,28(sp)
  800328:	df000704 	addi	fp,sp,28
  80032c:	2807883a 	mov	r3,r5
  800330:	3005883a 	mov	r2,r6
  800334:	e1ffff15 	stw	r7,-4(fp)
  800338:	e13ffc05 	stb	r4,-16(fp)
  80033c:	e0fffd0d 	sth	r3,-12(fp)
  800340:	e0bffe0d 	sth	r2,-8(fp)
  seq.buf[1].len  = 0;

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, pData, length);
  800344:	e0fffc03 	ldbu	r3,-16(fp)
  800348:	e13ffd0b 	ldhu	r4,-12(fp)
  80034c:	e0bffe0b 	ldhu	r2,-8(fp)
  800350:	d8800115 	stw	r2,4(sp)
  800354:	e0bfff17 	ldw	r2,-4(fp)
  800358:	d8800015 	stw	r2,0(sp)
  80035c:	200f883a 	mov	r7,r4
  800360:	180d883a 	mov	r6,r3
  800364:	01404234 	movhi	r5,264
  800368:	29494004 	addi	r5,r5,9472
  80036c:	01004234 	movhi	r4,264
  800370:	21094404 	addi	r4,r4,9488
  800374:	0800da80 	call	800da8 <i2c_multiple_write>
  800378:	e0bffb05 	stb	r2,-20(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
  80037c:	e0bffb03 	ldbu	r2,-20(fp)
  800380:	1080005c 	xori	r2,r2,1
  800384:	10803fcc 	andi	r2,r2,255
  800388:	10000226 	beq	r2,zero,800394 <SIGMA_WRITE_REGISTER_CONTROL+0x78>
  {
    //return((uint32_t) ret);
	  return false;
  80038c:	0005883a 	mov	r2,zero
  800390:	00000106 	br	800398 <SIGMA_WRITE_REGISTER_CONTROL+0x7c>
  }

  //free(i2c_write_data);

  //return((uint32_t) 0);
  return true;
  800394:	00800044 	movi	r2,1
}
  800398:	e037883a 	mov	sp,fp
  80039c:	dfc00117 	ldw	ra,4(sp)
  8003a0:	df000017 	ldw	fp,0(sp)
  8003a4:	dec00204 	addi	sp,sp,8
  8003a8:	f800283a 	ret

008003ac <SIGMA_SAFELOAD_WRITE_ADDR>:

bool SIGMA_SAFELOAD_WRITE_ADDR(uint8_t devAddress, uint16_t addrAddress, uint16_t address)
{
  8003ac:	defff804 	addi	sp,sp,-32
  8003b0:	dfc00715 	stw	ra,28(sp)
  8003b4:	df000615 	stw	fp,24(sp)
  8003b8:	df000604 	addi	fp,sp,24
  8003bc:	2807883a 	mov	r3,r5
  8003c0:	3005883a 	mov	r2,r6
  8003c4:	e13ffd05 	stb	r4,-12(fp)
  8003c8:	e0fffe0d 	sth	r3,-8(fp)
  8003cc:	e0bfff0d 	sth	r2,-4(fp)
  seq.buf[1].len  = 0;

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  wdata[0] = (address >> 8) & 0x00FF;
  8003d0:	e0bfff0b 	ldhu	r2,-4(fp)
  8003d4:	1004d23a 	srli	r2,r2,8
  8003d8:	e0bffc45 	stb	r2,-15(fp)
  wdata[1] = address & 0x00FF;
  8003dc:	e0bfff0b 	ldhu	r2,-4(fp)
  8003e0:	e0bffc85 	stb	r2,-14(fp)
  ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, wdata, 2);
  8003e4:	e0fffd03 	ldbu	r3,-12(fp)
  8003e8:	e13fff0b 	ldhu	r4,-4(fp)
  8003ec:	00800084 	movi	r2,2
  8003f0:	d8800115 	stw	r2,4(sp)
  8003f4:	e0bffc44 	addi	r2,fp,-15
  8003f8:	d8800015 	stw	r2,0(sp)
  8003fc:	200f883a 	mov	r7,r4
  800400:	180d883a 	mov	r6,r3
  800404:	01404234 	movhi	r5,264
  800408:	29494004 	addi	r5,r5,9472
  80040c:	01004234 	movhi	r4,264
  800410:	21094404 	addi	r4,r4,9488
  800414:	0800da80 	call	800da8 <i2c_multiple_write>
  800418:	e0bffc05 	stb	r2,-16(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
  80041c:	e0bffc03 	ldbu	r2,-16(fp)
  800420:	1080005c 	xori	r2,r2,1
  800424:	10803fcc 	andi	r2,r2,255
  800428:	10000226 	beq	r2,zero,800434 <SIGMA_SAFELOAD_WRITE_ADDR+0x88>
  {
    //return((uint32_t) ret);
	  return false;
  80042c:	0005883a 	mov	r2,zero
  800430:	00000106 	br	800438 <SIGMA_SAFELOAD_WRITE_ADDR+0x8c>
  }

  //return((uint32_t) 0);
  return true;
  800434:	00800044 	movi	r2,1
}
  800438:	e037883a 	mov	sp,fp
  80043c:	dfc00117 	ldw	ra,4(sp)
  800440:	df000017 	ldw	fp,0(sp)
  800444:	dec00204 	addi	sp,sp,8
  800448:	f800283a 	ret

0080044c <SIGMA_SAFELOAD_WRITE_DATA>:

bool SIGMA_SAFELOAD_WRITE_DATA(uint8_t devAddress, uint16_t dataAddress, uint16_t length, ADI_REG_U8 *pData)
{
  80044c:	defff204 	addi	sp,sp,-56
  800450:	dfc00d15 	stw	ra,52(sp)
  800454:	df000c15 	stw	fp,48(sp)
  800458:	df000c04 	addi	fp,sp,48
  80045c:	2807883a 	mov	r3,r5
  800460:	3005883a 	mov	r2,r6
  800464:	e1ffff15 	stw	r7,-4(fp)
  800468:	e13ffc05 	stb	r4,-16(fp)
  80046c:	e0fffd0d 	sth	r3,-12(fp)
  800470:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint8_t wdata[16] = {0};
  800474:	e0bff744 	addi	r2,fp,-35
  800478:	00c00404 	movi	r3,16
  80047c:	180d883a 	mov	r6,r3
  800480:	000b883a 	mov	r5,zero
  800484:	1009883a 	mov	r4,r2
  800488:	08011f00 	call	8011f0 <memset>
  for (int i = 0; i < length; i++)
  80048c:	e03ff615 	stw	zero,-40(fp)
  800490:	00000c06 	br	8004c4 <SIGMA_SAFELOAD_WRITE_DATA+0x78>
  {
	  wdata[i + 1] = pData[i];
  800494:	e0bff617 	ldw	r2,-40(fp)
  800498:	10800044 	addi	r2,r2,1
  80049c:	e0fff617 	ldw	r3,-40(fp)
  8004a0:	e13fff17 	ldw	r4,-4(fp)
  8004a4:	20c7883a 	add	r3,r4,r3
  8004a8:	18c00003 	ldbu	r3,0(r3)
  8004ac:	e13ff744 	addi	r4,fp,-35
  8004b0:	2085883a 	add	r2,r4,r2
  8004b4:	10c00005 	stb	r3,0(r2)
  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint8_t wdata[16] = {0};
  for (int i = 0; i < length; i++)
  8004b8:	e0bff617 	ldw	r2,-40(fp)
  8004bc:	10800044 	addi	r2,r2,1
  8004c0:	e0bff615 	stw	r2,-40(fp)
  8004c4:	e0bffe0b 	ldhu	r2,-8(fp)
  8004c8:	e0fff617 	ldw	r3,-40(fp)
  8004cc:	18bff116 	blt	r3,r2,800494 <__alt_mem_descriptor_memory+0xff780494>
  {
	  wdata[i + 1] = pData[i];
  }

  ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, dataAddress, wdata, length + 1);
  8004d0:	e0fffc03 	ldbu	r3,-16(fp)
  8004d4:	e13ffd0b 	ldhu	r4,-12(fp)
  8004d8:	e0bffe0b 	ldhu	r2,-8(fp)
  8004dc:	10800044 	addi	r2,r2,1
  8004e0:	10bfffcc 	andi	r2,r2,65535
  8004e4:	d8800115 	stw	r2,4(sp)
  8004e8:	e0bff744 	addi	r2,fp,-35
  8004ec:	d8800015 	stw	r2,0(sp)
  8004f0:	200f883a 	mov	r7,r4
  8004f4:	180d883a 	mov	r6,r3
  8004f8:	01404234 	movhi	r5,264
  8004fc:	29494004 	addi	r5,r5,9472
  800500:	01004234 	movhi	r4,264
  800504:	21094404 	addi	r4,r4,9488
  800508:	0800da80 	call	800da8 <i2c_multiple_write>
  80050c:	e0bff705 	stb	r2,-36(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
  800510:	e0bff703 	ldbu	r2,-36(fp)
  800514:	1080005c 	xori	r2,r2,1
  800518:	10803fcc 	andi	r2,r2,255
  80051c:	10000226 	beq	r2,zero,800528 <SIGMA_SAFELOAD_WRITE_DATA+0xdc>
  {
    //return((uint32_t) ret);
	  return false;
  800520:	0005883a 	mov	r2,zero
  800524:	00000106 	br	80052c <SIGMA_SAFELOAD_WRITE_DATA+0xe0>
  }

  //return((uint32_t) 0);
  return true;
  800528:	00800044 	movi	r2,1
}
  80052c:	e037883a 	mov	sp,fp
  800530:	dfc00117 	ldw	ra,4(sp)
  800534:	df000017 	ldw	fp,0(sp)
  800538:	dec00204 	addi	sp,sp,8
  80053c:	f800283a 	ret

00800540 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT>:

bool SIGMA_SAFELOAD_WRITE_TRANSFER_BIT(uint8_t devAddress)
{
  800540:	defff904 	addi	sp,sp,-28
  800544:	dfc00615 	stw	ra,24(sp)
  800548:	df000515 	stw	fp,20(sp)
  80054c:	df000504 	addi	fp,sp,20
  800550:	2005883a 	mov	r2,r4
  800554:	e0bfff05 	stb	r2,-4(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint16_t address = 0x081C;
  800558:	00820704 	movi	r2,2076
  80055c:	e0bffd0d 	sth	r2,-12(fp)
  uint8_t wdata[2] = {0x00, 0x3C};
  800560:	e03ffdc5 	stb	zero,-9(fp)
  800564:	00800f04 	movi	r2,60
  800568:	e0bffe05 	stb	r2,-8(fp)
  ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, wdata, 2);
  80056c:	e0ffff03 	ldbu	r3,-4(fp)
  800570:	e13ffd0b 	ldhu	r4,-12(fp)
  800574:	00800084 	movi	r2,2
  800578:	d8800115 	stw	r2,4(sp)
  80057c:	e0bffdc4 	addi	r2,fp,-9
  800580:	d8800015 	stw	r2,0(sp)
  800584:	200f883a 	mov	r7,r4
  800588:	180d883a 	mov	r6,r3
  80058c:	01404234 	movhi	r5,264
  800590:	29494004 	addi	r5,r5,9472
  800594:	01004234 	movhi	r4,264
  800598:	21094404 	addi	r4,r4,9488
  80059c:	0800da80 	call	800da8 <i2c_multiple_write>
  8005a0:	e0bffd85 	stb	r2,-10(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
  8005a4:	e0bffd83 	ldbu	r2,-10(fp)
  8005a8:	1080005c 	xori	r2,r2,1
  8005ac:	10803fcc 	andi	r2,r2,255
  8005b0:	10000226 	beq	r2,zero,8005bc <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT+0x7c>
  {
    //return((uint32_t) ret);
	  return false;
  8005b4:	0005883a 	mov	r2,zero
  8005b8:	00000106 	br	8005c0 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT+0x80>
  }

  //return((uint32_t) 0);
  return true;
  8005bc:	00800044 	movi	r2,1
}
  8005c0:	e037883a 	mov	sp,fp
  8005c4:	dfc00117 	ldw	ra,4(sp)
  8005c8:	df000017 	ldw	fp,0(sp)
  8005cc:	dec00204 	addi	sp,sp,8
  8005d0:	f800283a 	ret

008005d4 <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 40

void default_download_IC_1() {
  8005d4:	defffe04 	addi	sp,sp,-8
  8005d8:	dfc00115 	stw	ra,4(sp)
  8005dc:	df000015 	stw	fp,0(sp)
  8005e0:	d839883a 	mov	fp,sp
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R0_SAMPLE_RATE_SETTING_IC_1_Default );
  8005e4:	d1e00204 	addi	r7,gp,-32760
  8005e8:	01800044 	movi	r6,1
  8005ec:	01503ac4 	movi	r5,16619
  8005f0:	01001c04 	movi	r4,112
  8005f4:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R1_DSP_RUN_REGISTER_IC_1_Default );
  8005f8:	d1e02504 	addi	r7,gp,-32620
  8005fc:	01800044 	movi	r6,1
  800600:	01503d84 	movi	r5,16630
  800604:	01001c04 	movi	r4,112
  800608:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLKCTRLREGISTER_IC_1_ADDR, REG_CLKCTRLREGISTER_IC_1_BYTE, R2_CLKCTRLREGISTER_IC_1_Default );
  80060c:	d1e00244 	addi	r7,gp,-32759
  800610:	01800044 	movi	r6,1
  800614:	01500004 	movi	r5,16384
  800618:	01001c04 	movi	r4,112
  80061c:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLLCRLREGISTER_IC_1_ADDR, REG_PLLCRLREGISTER_IC_1_BYTE, R3_PLLCRLREGISTER_IC_1_Default );
  800620:	d1e00284 	addi	r7,gp,-32758
  800624:	01800184 	movi	r6,6
  800628:	01500084 	movi	r5,16386
  80062c:	01001c04 	movi	r4,112
  800630:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R4_DELAY_IC_1_SIZE, R4_DELAY_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR , R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE, R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default );
  800634:	d1e00484 	addi	r7,gp,-32750
  800638:	01800084 	movi	r6,2
  80063c:	01500544 	movi	r5,16405
  800640:	01001c04 	movi	r4,112
  800644:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ALC_CONTROL_0_IC_1_ADDR , R6_ALC_CONTROL_REGISTERS_IC_1_SIZE, R6_ALC_CONTROL_REGISTERS_IC_1_Default );
  800648:	d1e02544 	addi	r7,gp,-32619
  80064c:	01800104 	movi	r6,4
  800650:	01500444 	movi	r5,16401
  800654:	01001c04 	movi	r4,112
  800658:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MICCTRLREGISTER_IC_1_ADDR, REG_MICCTRLREGISTER_IC_1_BYTE, R7_MICCTRLREGISTER_IC_1_Default );
  80065c:	d1e02644 	addi	r7,gp,-32615
  800660:	01800044 	movi	r6,1
  800664:	01500204 	movi	r5,16392
  800668:	01001c04 	movi	r4,112
  80066c:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR , R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
  800670:	d1e00504 	addi	r7,gp,-32748
  800674:	01800204 	movi	r6,8
  800678:	01500244 	movi	r5,16393
  80067c:	01001c04 	movi	r4,112
  800680:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ADC_CONTROL_0_IC_1_ADDR , R9_ADC_CONTROL_REGISTERS_IC_1_SIZE, R9_ADC_CONTROL_REGISTERS_IC_1_Default );
  800684:	d1e00704 	addi	r7,gp,-32740
  800688:	018000c4 	movi	r6,3
  80068c:	01500644 	movi	r5,16409
  800690:	01001c04 	movi	r4,112
  800694:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR , R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
  800698:	01c02074 	movhi	r7,129
  80069c:	39d14744 	addi	r7,r7,17693
  8006a0:	01800384 	movi	r6,14
  8006a4:	01500704 	movi	r5,16412
  8006a8:	01001c04 	movi	r4,112
  8006ac:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CONVERTER_CTRL_0_IC_1_ADDR , R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE, R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default );
  8006b0:	d1e02684 	addi	r7,gp,-32614
  8006b4:	01800084 	movi	r6,2
  8006b8:	015005c4 	movi	r5,16407
  8006bc:	01001c04 	movi	r4,112
  8006c0:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DAC_CONTROL_0_IC_1_ADDR , R12_DAC_CONTROL_REGISTERS_IC_1_SIZE, R12_DAC_CONTROL_REGISTERS_IC_1_Default );
  8006c4:	d1e007c4 	addi	r7,gp,-32737
  8006c8:	018000c4 	movi	r6,3
  8006cc:	01500a84 	movi	r5,16426
  8006d0:	01001c04 	movi	r4,112
  8006d4:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR , R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
  8006d8:	d1e00884 	addi	r7,gp,-32734
  8006dc:	01800044 	movi	r6,1
  8006e0:	01500b44 	movi	r5,16429
  8006e4:	01001c04 	movi	r4,112
  8006e8:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR , R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
  8006ec:	d1e008c4 	addi	r7,gp,-32733
  8006f0:	01800084 	movi	r6,2
  8006f4:	01500bc4 	movi	r5,16431
  8006f8:	01001c04 	movi	r4,112
  8006fc:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_JACKREGISTER_IC_1_ADDR, REG_JACKREGISTER_IC_1_BYTE, R15_JACKREGISTER_IC_1_Default );
  800700:	d1e00944 	addi	r7,gp,-32731
  800704:	01800044 	movi	r6,1
  800708:	01500c44 	movi	r5,16433
  80070c:	01001c04 	movi	r4,112
  800710:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  800714:	01c02074 	movhi	r7,129
  800718:	39d0f404 	addi	r7,r7,17360
  80071c:	01804744 	movi	r6,285
  800720:	01420004 	movi	r5,2048
  800724:	01001c04 	movi	r4,112
  800728:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  80072c:	01c02074 	movhi	r7,129
  800730:	39d0f404 	addi	r7,r7,17360
  800734:	01804744 	movi	r6,285
  800738:	01420004 	movi	r5,2048
  80073c:	01001c04 	movi	r4,112
  800740:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  800744:	01c02074 	movhi	r7,129
  800748:	39d0f404 	addi	r7,r7,17360
  80074c:	01804744 	movi	r6,285
  800750:	01420004 	movi	r5,2048
  800754:	01001c04 	movi	r4,112
  800758:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  80075c:	01c02074 	movhi	r7,129
  800760:	39d0f404 	addi	r7,r7,17360
  800764:	01804744 	movi	r6,285
  800768:	01420004 	movi	r5,2048
  80076c:	01001c04 	movi	r4,112
  800770:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  800774:	01c02074 	movhi	r7,129
  800778:	39d0f404 	addi	r7,r7,17360
  80077c:	01804744 	movi	r6,285
  800780:	01420004 	movi	r5,2048
  800784:	01001c04 	movi	r4,112
  800788:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_ENABLE_REGISTER_IC_1_ADDR, REG_DSP_ENABLE_REGISTER_IC_1_BYTE, R21_DSP_ENABLE_REGISTER_IC_1_Default );
  80078c:	d1e00984 	addi	r7,gp,-32730
  800790:	01800044 	movi	r6,1
  800794:	01503d44 	movi	r5,16629
  800798:	01001c04 	movi	r4,112
  80079c:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CRC_IDEAL_1_IC_1_ADDR , R22_CRC_REGISTERS_IC_1_SIZE, R22_CRC_REGISTERS_IC_1_Default );
  8007a0:	d1e009c4 	addi	r7,gp,-32729
  8007a4:	01800144 	movi	r6,5
  8007a8:	01503004 	movi	r5,16576
  8007ac:	01001c04 	movi	r4,112
  8007b0:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_GPIO_0_CONTROL_IC_1_ADDR , R23_GPIO_REGISTERS_IC_1_SIZE, R23_GPIO_REGISTERS_IC_1_Default );
  8007b4:	d1e02704 	addi	r7,gp,-32612
  8007b8:	01800104 	movi	r6,4
  8007bc:	01503184 	movi	r5,16582
  8007c0:	01001c04 	movi	r4,112
  8007c4:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_NON_MODULO_RAM_1_IC_1_ADDR , R24_NON_MODULO_REGISTERS_IC_1_SIZE, R24_NON_MODULO_REGISTERS_IC_1_Default );
  8007c8:	d1e00b04 	addi	r7,gp,-32724
  8007cc:	01800084 	movi	r6,2
  8007d0:	01503a44 	movi	r5,16617
  8007d4:	01001c04 	movi	r4,112
  8007d8:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_WATCHDOG_ENABLE_IC_1_ADDR , R25_WATCHDOG_REGISTERS_IC_1_SIZE, R25_WATCHDOG_REGISTERS_IC_1_Default );
  8007dc:	d1e00b84 	addi	r7,gp,-32722
  8007e0:	01800144 	movi	r6,5
  8007e4:	01503404 	movi	r5,16592
  8007e8:	01001c04 	movi	r4,112
  8007ec:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R26_SAMPLE_RATE_SETTING_IC_1_Default );
  8007f0:	d1e00cc4 	addi	r7,gp,-32717
  8007f4:	01800044 	movi	r6,1
  8007f8:	01503ac4 	movi	r5,16619
  8007fc:	01001c04 	movi	r4,112
  800800:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE, R27_ROUTING_MATRIX_INPUTS_IC_1_Default );
  800804:	d1e02804 	addi	r7,gp,-32608
  800808:	01800044 	movi	r6,1
  80080c:	01503c84 	movi	r5,16626
  800810:	01001c04 	movi	r4,112
  800814:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE, R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default );
  800818:	d1e02844 	addi	r7,gp,-32607
  80081c:	01800044 	movi	r6,1
  800820:	01503cc4 	movi	r5,16627
  800824:	01001c04 	movi	r4,112
  800828:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE, R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default );
  80082c:	d1e02884 	addi	r7,gp,-32606
  800830:	01800044 	movi	r6,1
  800834:	01503d04 	movi	r5,16628
  800838:	01001c04 	movi	r4,112
  80083c:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_SLEW_MODES_IC_1_ADDR, REG_DSP_SLEW_MODES_IC_1_BYTE, R30_DSP_SLEW_MODES_IC_1_Default );
  800840:	d1e028c4 	addi	r7,gp,-32605
  800844:	01800044 	movi	r6,1
  800848:	01503dc4 	movi	r5,16631
  80084c:	01001c04 	movi	r4,112
  800850:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE, R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default );
  800854:	d1e02904 	addi	r7,gp,-32604
  800858:	01800044 	movi	r6,1
  80085c:	01503e04 	movi	r5,16632
  800860:	01001c04 	movi	r4,112
  800864:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLOCK_ENABLE_REG_0_IC_1_ADDR , R32_CLOCK_ENABLE_REGISTERS_IC_1_SIZE, R32_CLOCK_ENABLE_REGISTERS_IC_1_Default );
  800868:	d1e00d04 	addi	r7,gp,-32716
  80086c:	01800084 	movi	r6,2
  800870:	01503e44 	movi	r5,16633
  800874:	01001c04 	movi	r4,112
  800878:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
  80087c:	01c02074 	movhi	r7,129
  800880:	39d0f404 	addi	r7,r7,17360
  800884:	01804744 	movi	r6,285
  800888:	01420004 	movi	r5,2048
  80088c:	01001c04 	movi	r4,112
  800890:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
  800894:	01c02074 	movhi	r7,129
  800898:	39d13b44 	addi	r7,r7,17645
  80089c:	01800c04 	movi	r6,48
  8008a0:	000b883a 	mov	r5,zero
  8008a4:	01001c04 	movi	r4,112
  8008a8:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, NON_MODULO_RAM_ADDR_IC_1, NON_MODULO_RAM_SIZE_IC_1, NON_MODULO_RAM_Data_IC_1 );
  8008ac:	d1e00004 	addi	r7,gp,-32768
  8008b0:	01800204 	movi	r6,8
  8008b4:	0147ff84 	movi	r5,8190
  8008b8:	01001c04 	movi	r4,112
  8008bc:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R36_SAMPLE_RATE_SETTING_IC_1_Default );
  8008c0:	d1e00d84 	addi	r7,gp,-32714
  8008c4:	01800044 	movi	r6,1
  8008c8:	01503ac4 	movi	r5,16619
  8008cc:	01001c04 	movi	r4,112
  8008d0:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R37_DSP_RUN_REGISTER_IC_1_Default );
  8008d4:	d1e00dc4 	addi	r7,gp,-32713
  8008d8:	01800044 	movi	r6,1
  8008dc:	01503d84 	movi	r5,16630
  8008e0:	01001c04 	movi	r4,112
  8008e4:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R38_DEJITTER_REGISTER_CONTROL_IC_1_Default );
  8008e8:	d1e02944 	addi	r7,gp,-32603
  8008ec:	01800044 	movi	r6,1
  8008f0:	01500d84 	movi	r5,16438
  8008f4:	01001c04 	movi	r4,112
  8008f8:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R39_DEJITTER_REGISTER_CONTROL_IC_1_Default );
  8008fc:	d1e00e04 	addi	r7,gp,-32712
  800900:	01800044 	movi	r6,1
  800904:	01500d84 	movi	r5,16438
  800908:	01001c04 	movi	r4,112
  80090c:	080028c0 	call	80028c <SIGMA_WRITE_REGISTER_BLOCK>
}
  800910:	0001883a 	nop
  800914:	e037883a 	mov	sp,fp
  800918:	dfc00117 	ldw	ra,4(sp)
  80091c:	df000017 	ldw	fp,0(sp)
  800920:	dec00204 	addi	sp,sp,8
  800924:	f800283a 	ret

00800928 <main>:
int itest = 0;
float ftest = 0.0f;
double dtest = 0.0;

int main()
{
  800928:	defff904 	addi	sp,sp,-28
  80092c:	dfc00615 	stw	ra,24(sp)
  800930:	df000515 	stw	fp,20(sp)
  800934:	dc000415 	stw	r16,16(sp)
  800938:	df000504 	addi	fp,sp,20
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_4_BASE, 1);
  80093c:	00c00044 	movi	r3,1
  800940:	00800104 	movi	r2,4
  800944:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 0);
  800948:	0007883a 	mov	r3,zero
  80094c:	0005883a 	mov	r2,zero
  800950:	10c00035 	stwio	r3,0(r2)
	usleep(1000);
  800954:	0100fa04 	movi	r4,1000
  800958:	080e0fc0 	call	80e0fc <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 1);
  80095c:	00800044 	movi	r2,1
  800960:	0007883a 	mov	r3,zero
  800964:	18800035 	stwio	r2,0(r3)
	//default_download_IC_1();

	//usleep(1000);
	//IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_4_BASE, 0);

	itest++;
  800968:	d0a02a17 	ldw	r2,-32600(gp)
  80096c:	10800044 	addi	r2,r2,1
  800970:	d0a02a15 	stw	r2,-32600(gp)
	ftest = 3.14f;
  800974:	00901274 	movhi	r2,16457
  800978:	10bd70c4 	addi	r2,r2,-2621
  80097c:	d0a02b15 	stw	r2,-32596(gp)
	dtest = 3.141594;
  800980:	00823eb4 	movhi	r2,2298
  800984:	109ea144 	addi	r2,r2,31365
  800988:	d0a02c15 	stw	r2,-32592(gp)
  80098c:	00900274 	movhi	r2,16393
  800990:	10887f04 	addi	r2,r2,8700
  800994:	d0a02d15 	stw	r2,-32588(gp)

  printf("Hello from Nios II! %d %f %lf\n", itest, ftest, dtest);
  800998:	d4202a17 	ldw	r16,-32600(gp)
  80099c:	d0a02b17 	ldw	r2,-32596(gp)
  8009a0:	1009883a 	mov	r4,r2
  8009a4:	080107c0 	call	80107c <__extendsfdf2>
  8009a8:	1009883a 	mov	r4,r2
  8009ac:	180b883a 	mov	r5,r3
  8009b0:	d0a02c17 	ldw	r2,-32592(gp)
  8009b4:	d0e02d17 	ldw	r3,-32588(gp)
  8009b8:	d8800015 	stw	r2,0(sp)
  8009bc:	d8c00115 	stw	r3,4(sp)
  8009c0:	200d883a 	mov	r6,r4
  8009c4:	280f883a 	mov	r7,r5
  8009c8:	800b883a 	mov	r5,r16
  8009cc:	01002074 	movhi	r4,129
  8009d0:	210f9704 	addi	r4,r4,15964
  8009d4:	08013480 	call	801348 <printf>

  int test = 0;
  8009d8:	e03ffd15 	stw	zero,-12(fp)

  while (true)
  {
	  switch (test)
  8009dc:	e0bffd17 	ldw	r2,-12(fp)
  8009e0:	10000326 	beq	r2,zero,8009f0 <main+0xc8>
  8009e4:	10800060 	cmpeqi	r2,r2,1
  8009e8:	1000081e 	bne	r2,zero,800a0c <main+0xe4>
  8009ec:	00000d06 	br	800a24 <main+0xfc>
	  {
	  case 0:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0x01);
  8009f0:	00c00044 	movi	r3,1
  8009f4:	00804234 	movhi	r2,264
  8009f8:	10894c04 	addi	r2,r2,9520
  8009fc:	10c00035 	stwio	r3,0(r2)
		  test = 1;
  800a00:	00800044 	movi	r2,1
  800a04:	e0bffd15 	stw	r2,-12(fp)
		  break;
  800a08:	00000606 	br	800a24 <main+0xfc>
	  case 1:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0x02);
  800a0c:	00c00084 	movi	r3,2
  800a10:	00804234 	movhi	r2,264
  800a14:	10894c04 	addi	r2,r2,9520
  800a18:	10c00035 	stwio	r3,0(r2)
		  test = 0;
  800a1c:	e03ffd15 	stw	zero,-12(fp)
		  break;
  800a20:	0001883a 	nop
	  }

	  for (int i = 0; i < 1000; i++)
  800a24:	e03ffe15 	stw	zero,-8(fp)
  800a28:	00000506 	br	800a40 <main+0x118>
	  {
		  usleep(1000);
  800a2c:	0100fa04 	movi	r4,1000
  800a30:	080e0fc0 	call	80e0fc <usleep>
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0x02);
		  test = 0;
		  break;
	  }

	  for (int i = 0; i < 1000; i++)
  800a34:	e0bffe17 	ldw	r2,-8(fp)
  800a38:	10800044 	addi	r2,r2,1
  800a3c:	e0bffe15 	stw	r2,-8(fp)
  800a40:	e0bffe17 	ldw	r2,-8(fp)
  800a44:	1080fa10 	cmplti	r2,r2,1000
  800a48:	103ff81e 	bne	r2,zero,800a2c <__alt_mem_descriptor_memory+0xff780a2c>
	  {
		  usleep(1000);
	  }
  }
  800a4c:	003fe306 	br	8009dc <__alt_mem_descriptor_memory+0xff7809dc>

00800a50 <i2c_start>:
 */

#include "i2c.h"

void i2c_start(long sclk, long sdat)
{
  800a50:	defffc04 	addi	sp,sp,-16
  800a54:	dfc00315 	stw	ra,12(sp)
  800a58:	df000215 	stw	fp,8(sp)
  800a5c:	df000204 	addi	fp,sp,8
  800a60:	e13ffe15 	stw	r4,-8(fp)
  800a64:	e17fff15 	stw	r5,-4(fp)
	//SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 1);
  800a68:	e0bfff17 	ldw	r2,-4(fp)
  800a6c:	10800104 	addi	r2,r2,4
  800a70:	1007883a 	mov	r3,r2
  800a74:	00800044 	movi	r2,1
  800a78:	18800035 	stwio	r2,0(r3)

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 1);
  800a7c:	e0bfff17 	ldw	r2,-4(fp)
  800a80:	00c00044 	movi	r3,1
  800a84:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
  800a88:	e0bffe17 	ldw	r2,-8(fp)
  800a8c:	00c00044 	movi	r3,1
  800a90:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800a94:	01000084 	movi	r4,2
  800a98:	080e0fc0 	call	80e0fc <usleep>

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 0);
  800a9c:	e0bfff17 	ldw	r2,-4(fp)
  800aa0:	0007883a 	mov	r3,zero
  800aa4:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800aa8:	01000084 	movi	r4,2
  800aac:	080e0fc0 	call	80e0fc <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
  800ab0:	e0bffe17 	ldw	r2,-8(fp)
  800ab4:	0007883a 	mov	r3,zero
  800ab8:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800abc:	01000084 	movi	r4,2
  800ac0:	080e0fc0 	call	80e0fc <usleep>
}
  800ac4:	0001883a 	nop
  800ac8:	e037883a 	mov	sp,fp
  800acc:	dfc00117 	ldw	ra,4(sp)
  800ad0:	df000017 	ldw	fp,0(sp)
  800ad4:	dec00204 	addi	sp,sp,8
  800ad8:	f800283a 	ret

00800adc <i2c_stop>:

void i2c_stop(long sclk, long sdat)
{
  800adc:	defffc04 	addi	sp,sp,-16
  800ae0:	dfc00315 	stw	ra,12(sp)
  800ae4:	df000215 	stw	fp,8(sp)
  800ae8:	df000204 	addi	fp,sp,8
  800aec:	e13ffe15 	stw	r4,-8(fp)
  800af0:	e17fff15 	stw	r5,-4(fp)
	//SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 1);
  800af4:	e0bfff17 	ldw	r2,-4(fp)
  800af8:	10800104 	addi	r2,r2,4
  800afc:	1007883a 	mov	r3,r2
  800b00:	00800044 	movi	r2,1
  800b04:	18800035 	stwio	r2,0(r3)

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 0);
  800b08:	e0bfff17 	ldw	r2,-4(fp)
  800b0c:	0007883a 	mov	r3,zero
  800b10:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
  800b14:	e0bffe17 	ldw	r2,-8(fp)
  800b18:	00c00044 	movi	r3,1
  800b1c:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800b20:	01000084 	movi	r4,2
  800b24:	080e0fc0 	call	80e0fc <usleep>

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 1);
  800b28:	e0bfff17 	ldw	r2,-4(fp)
  800b2c:	00c00044 	movi	r3,1
  800b30:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800b34:	01000084 	movi	r4,2
  800b38:	080e0fc0 	call	80e0fc <usleep>
	//IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
}
  800b3c:	0001883a 	nop
  800b40:	e037883a 	mov	sp,fp
  800b44:	dfc00117 	ldw	ra,4(sp)
  800b48:	df000017 	ldw	fp,0(sp)
  800b4c:	dec00204 	addi	sp,sp,8
  800b50:	f800283a 	ret

00800b54 <i2c_send_bit>:

void i2c_send_bit(long sclk, long sdat, int data)
{
  800b54:	defffb04 	addi	sp,sp,-20
  800b58:	dfc00415 	stw	ra,16(sp)
  800b5c:	df000315 	stw	fp,12(sp)
  800b60:	df000304 	addi	fp,sp,12
  800b64:	e13ffd15 	stw	r4,-12(fp)
  800b68:	e17ffe15 	stw	r5,-8(fp)
  800b6c:	e1bfff15 	stw	r6,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
  800b70:	e0bffd17 	ldw	r2,-12(fp)
  800b74:	0007883a 	mov	r3,zero
  800b78:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 1);
  800b7c:	e0bffe17 	ldw	r2,-8(fp)
  800b80:	10800104 	addi	r2,r2,4
  800b84:	1007883a 	mov	r3,r2
  800b88:	00800044 	movi	r2,1
  800b8c:	18800035 	stwio	r2,0(r3)

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, data ? 1 : 0);
  800b90:	e0bffe17 	ldw	r2,-8(fp)
  800b94:	e0ffff17 	ldw	r3,-4(fp)
  800b98:	1806c03a 	cmpne	r3,r3,zero
  800b9c:	18c03fcc 	andi	r3,r3,255
  800ba0:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800ba4:	01000084 	movi	r4,2
  800ba8:	080e0fc0 	call	80e0fc <usleep>

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
  800bac:	e0bffd17 	ldw	r2,-12(fp)
  800bb0:	00c00044 	movi	r3,1
  800bb4:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800bb8:	01000084 	movi	r4,2
  800bbc:	080e0fc0 	call	80e0fc <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
  800bc0:	e0bffd17 	ldw	r2,-12(fp)
  800bc4:	0007883a 	mov	r3,zero
  800bc8:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800bcc:	01000084 	movi	r4,2
  800bd0:	080e0fc0 	call	80e0fc <usleep>
}
  800bd4:	0001883a 	nop
  800bd8:	e037883a 	mov	sp,fp
  800bdc:	dfc00117 	ldw	ra,4(sp)
  800be0:	df000017 	ldw	fp,0(sp)
  800be4:	dec00204 	addi	sp,sp,8
  800be8:	f800283a 	ret

00800bec <i2c_receive_bit>:

int i2c_receive_bit(long sclk, long sdat)
{
  800bec:	defffb04 	addi	sp,sp,-20
  800bf0:	dfc00415 	stw	ra,16(sp)
  800bf4:	df000315 	stw	fp,12(sp)
  800bf8:	df000304 	addi	fp,sp,12
  800bfc:	e13ffe15 	stw	r4,-8(fp)
  800c00:	e17fff15 	stw	r5,-4(fp)
	int data;

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
  800c04:	e0bffe17 	ldw	r2,-8(fp)
  800c08:	0007883a 	mov	r3,zero
  800c0c:	10c00035 	stwio	r3,0(r2)
	SCL_DELAY;
  800c10:	01000084 	movi	r4,2
  800c14:	080e0fc0 	call	80e0fc <usleep>

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
  800c18:	e0bffe17 	ldw	r2,-8(fp)
  800c1c:	00c00044 	movi	r3,1
  800c20:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 0);
  800c24:	e0bfff17 	ldw	r2,-4(fp)
  800c28:	10800104 	addi	r2,r2,4
  800c2c:	0007883a 	mov	r3,zero
  800c30:	10c00035 	stwio	r3,0(r2)
	data = IORD_ALTERA_AVALON_PIO_DATA(sdat);
  800c34:	e0bfff17 	ldw	r2,-4(fp)
  800c38:	10800037 	ldwio	r2,0(r2)
  800c3c:	e0bffd15 	stw	r2,-12(fp)
	SCL_DELAY;
  800c40:	01000084 	movi	r4,2
  800c44:	080e0fc0 	call	80e0fc <usleep>

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
  800c48:	e0bffe17 	ldw	r2,-8(fp)
  800c4c:	0007883a 	mov	r3,zero
  800c50:	10c00035 	stwio	r3,0(r2)

	return data;
  800c54:	e0bffd17 	ldw	r2,-12(fp)
}
  800c58:	e037883a 	mov	sp,fp
  800c5c:	dfc00117 	ldw	ra,4(sp)
  800c60:	df000017 	ldw	fp,0(sp)
  800c64:	dec00204 	addi	sp,sp,8
  800c68:	f800283a 	ret

00800c6c <i2c_send_byte>:

int i2c_send_byte(long sclk, long sdat, unsigned short data)
{
  800c6c:	defff904 	addi	sp,sp,-28
  800c70:	dfc00615 	stw	ra,24(sp)
  800c74:	df000515 	stw	fp,20(sp)
  800c78:	df000504 	addi	fp,sp,20
  800c7c:	e13ffd15 	stw	r4,-12(fp)
  800c80:	e17ffe15 	stw	r5,-8(fp)
  800c84:	3005883a 	mov	r2,r6
  800c88:	e0bfff0d 	sth	r2,-4(fp)
	unsigned short mask = 1 << (8 - 1);
  800c8c:	00802004 	movi	r2,128
  800c90:	e0bffb0d 	sth	r2,-20(fp)
	int i;

	for (i = 0; i < 8; i++)
  800c94:	e03ffc15 	stw	zero,-16(fp)
  800c98:	00000e06 	br	800cd4 <i2c_send_byte+0x68>
	{
		i2c_send_bit(sclk, sdat, data & mask);
  800c9c:	e0ffff0b 	ldhu	r3,-4(fp)
  800ca0:	e0bffb0b 	ldhu	r2,-20(fp)
  800ca4:	1884703a 	and	r2,r3,r2
  800ca8:	10bfffcc 	andi	r2,r2,65535
  800cac:	100d883a 	mov	r6,r2
  800cb0:	e17ffe17 	ldw	r5,-8(fp)
  800cb4:	e13ffd17 	ldw	r4,-12(fp)
  800cb8:	0800b540 	call	800b54 <i2c_send_bit>
		mask >>= 1;
  800cbc:	e0bffb0b 	ldhu	r2,-20(fp)
  800cc0:	1004d07a 	srli	r2,r2,1
  800cc4:	e0bffb0d 	sth	r2,-20(fp)
int i2c_send_byte(long sclk, long sdat, unsigned short data)
{
	unsigned short mask = 1 << (8 - 1);
	int i;

	for (i = 0; i < 8; i++)
  800cc8:	e0bffc17 	ldw	r2,-16(fp)
  800ccc:	10800044 	addi	r2,r2,1
  800cd0:	e0bffc15 	stw	r2,-16(fp)
  800cd4:	e0bffc17 	ldw	r2,-16(fp)
  800cd8:	10800210 	cmplti	r2,r2,8
  800cdc:	103fef1e 	bne	r2,zero,800c9c <__alt_mem_descriptor_memory+0xff780c9c>
	{
		i2c_send_bit(sclk, sdat, data & mask);
		mask >>= 1;
	}

	return i2c_receive_bit(sclk, sdat);
  800ce0:	e17ffe17 	ldw	r5,-8(fp)
  800ce4:	e13ffd17 	ldw	r4,-12(fp)
  800ce8:	0800bec0 	call	800bec <i2c_receive_bit>
}
  800cec:	e037883a 	mov	sp,fp
  800cf0:	dfc00117 	ldw	ra,4(sp)
  800cf4:	df000017 	ldw	fp,0(sp)
  800cf8:	dec00204 	addi	sp,sp,8
  800cfc:	f800283a 	ret

00800d00 <i2c_receive_byte>:

int i2c_receive_byte(long sclk, long sdat, bool bAck)
{
  800d00:	defff904 	addi	sp,sp,-28
  800d04:	dfc00615 	stw	ra,24(sp)
  800d08:	df000515 	stw	fp,20(sp)
  800d0c:	df000504 	addi	fp,sp,20
  800d10:	e13ffd15 	stw	r4,-12(fp)
  800d14:	e17ffe15 	stw	r5,-8(fp)
  800d18:	3005883a 	mov	r2,r6
  800d1c:	e0bfff05 	stb	r2,-4(fp)
	unsigned short data = 0;
  800d20:	e03ffb0d 	sth	zero,-20(fp)
	int i;

	for (i = 0; i < 8; i++)
  800d24:	e03ffc15 	stw	zero,-16(fp)
  800d28:	00000d06 	br	800d60 <i2c_receive_byte+0x60>
	{
		data <<= 1;
  800d2c:	e0bffb0b 	ldhu	r2,-20(fp)
  800d30:	1085883a 	add	r2,r2,r2
  800d34:	e0bffb0d 	sth	r2,-20(fp)
		if (i2c_receive_bit(sclk, sdat))
  800d38:	e17ffe17 	ldw	r5,-8(fp)
  800d3c:	e13ffd17 	ldw	r4,-12(fp)
  800d40:	0800bec0 	call	800bec <i2c_receive_bit>
  800d44:	10000326 	beq	r2,zero,800d54 <i2c_receive_byte+0x54>
		{
			data |= 0x01;
  800d48:	e0bffb0b 	ldhu	r2,-20(fp)
  800d4c:	10800054 	ori	r2,r2,1
  800d50:	e0bffb0d 	sth	r2,-20(fp)
int i2c_receive_byte(long sclk, long sdat, bool bAck)
{
	unsigned short data = 0;
	int i;

	for (i = 0; i < 8; i++)
  800d54:	e0bffc17 	ldw	r2,-16(fp)
  800d58:	10800044 	addi	r2,r2,1
  800d5c:	e0bffc15 	stw	r2,-16(fp)
  800d60:	e0bffc17 	ldw	r2,-16(fp)
  800d64:	10800210 	cmplti	r2,r2,8
  800d68:	103ff01e 	bne	r2,zero,800d2c <__alt_mem_descriptor_memory+0xff780d2c>
		{
			data |= 0x01;
		}
	}

	i2c_send_bit(sclk, sdat, bAck ? 0 : 1);
  800d6c:	e0bfff03 	ldbu	r2,-4(fp)
  800d70:	10000226 	beq	r2,zero,800d7c <i2c_receive_byte+0x7c>
  800d74:	0005883a 	mov	r2,zero
  800d78:	00000106 	br	800d80 <i2c_receive_byte+0x80>
  800d7c:	00800044 	movi	r2,1
  800d80:	100d883a 	mov	r6,r2
  800d84:	e17ffe17 	ldw	r5,-8(fp)
  800d88:	e13ffd17 	ldw	r4,-12(fp)
  800d8c:	0800b540 	call	800b54 <i2c_send_bit>

	return data;
  800d90:	e0bffb0b 	ldhu	r2,-20(fp)
}
  800d94:	e037883a 	mov	sp,fp
  800d98:	dfc00117 	ldw	ra,4(sp)
  800d9c:	df000017 	ldw	fp,0(sp)
  800da0:	dec00204 	addi	sp,sp,8
  800da4:	f800283a 	ret

00800da8 <i2c_multiple_write>:

bool i2c_multiple_write(long sclk, long sdat, uint8_t DeviceAddr, uint16_t ControlAddr, uint8_t szData[], uint16_t len)
{
  800da8:	defff604 	addi	sp,sp,-40
  800dac:	dfc00915 	stw	ra,36(sp)
  800db0:	df000815 	stw	fp,32(sp)
  800db4:	df000804 	addi	fp,sp,32
  800db8:	e13ffb15 	stw	r4,-20(fp)
  800dbc:	e17ffc15 	stw	r5,-16(fp)
  800dc0:	3009883a 	mov	r4,r6
  800dc4:	3807883a 	mov	r3,r7
  800dc8:	e0800317 	ldw	r2,12(fp)
  800dcc:	e13ffd05 	stb	r4,-12(fp)
  800dd0:	e0fffe0d 	sth	r3,-8(fp)
  800dd4:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = true;
  800dd8:	00800044 	movi	r2,1
  800ddc:	e0bff805 	stb	r2,-32(fp)
    uint8_t AddrHigh, AddrLow;
    int i;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
  800de0:	e0bffe0b 	ldhu	r2,-8(fp)
  800de4:	1004d23a 	srli	r2,r2,8
  800de8:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;
  800dec:	e0bffe0b 	ldhu	r2,-8(fp)
  800df0:	e0bffa45 	stb	r2,-23(fp)


    i2c_start(sclk, sdat);
  800df4:	e17ffc17 	ldw	r5,-16(fp)
  800df8:	e13ffb17 	ldw	r4,-20(fp)
  800dfc:	0800a500 	call	800a50 <i2c_start>
    if (!i2c_send_byte(sclk, sdat, DeviceAddr)){  // send ID
  800e00:	e0bffd03 	ldbu	r2,-12(fp)
  800e04:	100d883a 	mov	r6,r2
  800e08:	e17ffc17 	ldw	r5,-16(fp)
  800e0c:	e13ffb17 	ldw	r4,-20(fp)
  800e10:	0800c6c0 	call	800c6c <i2c_send_byte>
  800e14:	1000011e 	bne	r2,zero,800e1c <i2c_multiple_write+0x74>
        bSuccess = false;
  800e18:	e03ff805 	stb	zero,-32(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrHigh)){ // send sub-address
  800e1c:	e0bff803 	ldbu	r2,-32(fp)
  800e20:	10000726 	beq	r2,zero,800e40 <i2c_multiple_write+0x98>
  800e24:	e0bffa03 	ldbu	r2,-24(fp)
  800e28:	100d883a 	mov	r6,r2
  800e2c:	e17ffc17 	ldw	r5,-16(fp)
  800e30:	e13ffb17 	ldw	r4,-20(fp)
  800e34:	0800c6c0 	call	800c6c <i2c_send_byte>
  800e38:	1000011e 	bne	r2,zero,800e40 <i2c_multiple_write+0x98>
        bSuccess = false;
  800e3c:	e03ff805 	stb	zero,-32(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrLow)){ // send sub-address
  800e40:	e0bff803 	ldbu	r2,-32(fp)
  800e44:	10000726 	beq	r2,zero,800e64 <i2c_multiple_write+0xbc>
  800e48:	e0bffa43 	ldbu	r2,-23(fp)
  800e4c:	100d883a 	mov	r6,r2
  800e50:	e17ffc17 	ldw	r5,-16(fp)
  800e54:	e13ffb17 	ldw	r4,-20(fp)
  800e58:	0800c6c0 	call	800c6c <i2c_send_byte>
  800e5c:	1000011e 	bne	r2,zero,800e64 <i2c_multiple_write+0xbc>
        bSuccess = false;
  800e60:	e03ff805 	stb	zero,-32(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
  800e64:	e0bff803 	ldbu	r2,-32(fp)
  800e68:	10001526 	beq	r2,zero,800ec0 <i2c_multiple_write+0x118>
        for(i = 0; i < len && bSuccess; i++){
  800e6c:	e03ff915 	stw	zero,-28(fp)
  800e70:	00000e06 	br	800eac <i2c_multiple_write+0x104>
            bSuccess = i2c_send_byte(sclk, sdat, szData[i]);
  800e74:	e0bff917 	ldw	r2,-28(fp)
  800e78:	e0c00217 	ldw	r3,8(fp)
  800e7c:	1885883a 	add	r2,r3,r2
  800e80:	10800003 	ldbu	r2,0(r2)
  800e84:	10803fcc 	andi	r2,r2,255
  800e88:	100d883a 	mov	r6,r2
  800e8c:	e17ffc17 	ldw	r5,-16(fp)
  800e90:	e13ffb17 	ldw	r4,-20(fp)
  800e94:	0800c6c0 	call	800c6c <i2c_send_byte>
  800e98:	1004c03a 	cmpne	r2,r2,zero
  800e9c:	e0bff805 	stb	r2,-32(fp)
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrLow)){ // send sub-address
        bSuccess = false;
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i = 0; i < len && bSuccess; i++){
  800ea0:	e0bff917 	ldw	r2,-28(fp)
  800ea4:	10800044 	addi	r2,r2,1
  800ea8:	e0bff915 	stw	r2,-28(fp)
  800eac:	e0bfff0b 	ldhu	r2,-4(fp)
  800eb0:	e0fff917 	ldw	r3,-28(fp)
  800eb4:	1880020e 	bge	r3,r2,800ec0 <i2c_multiple_write+0x118>
  800eb8:	e0bff803 	ldbu	r2,-32(fp)
  800ebc:	103fed1e 	bne	r2,zero,800e74 <__alt_mem_descriptor_memory+0xff780e74>
        if (!bSuccess)
        {
            //I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
        }
    }
    i2c_stop(sclk, sdat);
  800ec0:	e17ffc17 	ldw	r5,-16(fp)
  800ec4:	e13ffb17 	ldw	r4,-20(fp)
  800ec8:	0800adc0 	call	800adc <i2c_stop>

    usleep(7 * 1000); // delay to wait EE2 ready (at least 5 ms delay is required)
  800ecc:	0106d604 	movi	r4,7000
  800ed0:	080e0fc0 	call	80e0fc <usleep>

    return bSuccess;
  800ed4:	e0bff803 	ldbu	r2,-32(fp)
}
  800ed8:	e037883a 	mov	sp,fp
  800edc:	dfc00117 	ldw	ra,4(sp)
  800ee0:	df000017 	ldw	fp,0(sp)
  800ee4:	dec00204 	addi	sp,sp,8
  800ee8:	f800283a 	ret

00800eec <i2c_multiple_read>:

bool i2c_multiple_read(long sclk, long sdat, uint8_t DeviceAddr, uint16_t ControlAddr, uint8_t szData[], uint16_t len)
{
  800eec:	defff604 	addi	sp,sp,-40
  800ef0:	dfc00915 	stw	ra,36(sp)
  800ef4:	df000815 	stw	fp,32(sp)
  800ef8:	dc000715 	stw	r16,28(sp)
  800efc:	df000804 	addi	fp,sp,32
  800f00:	e13ffa15 	stw	r4,-24(fp)
  800f04:	e17ffb15 	stw	r5,-20(fp)
  800f08:	3009883a 	mov	r4,r6
  800f0c:	3807883a 	mov	r3,r7
  800f10:	e0800317 	ldw	r2,12(fp)
  800f14:	e13ffc05 	stb	r4,-16(fp)
  800f18:	e0fffd0d 	sth	r3,-12(fp)
  800f1c:	e0bffe0d 	sth	r2,-8(fp)
    int i;
    bool bSuccess = true;
  800f20:	00800044 	movi	r2,1
  800f24:	e0bff905 	stb	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    uint8_t AddrHigh, AddrLow;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
  800f28:	e0bffd0b 	ldhu	r2,-12(fp)
  800f2c:	1004d23a 	srli	r2,r2,8
  800f30:	e0bff945 	stb	r2,-27(fp)
    AddrLow  = ControlAddr & 0xFF;
  800f34:	e0bffd0b 	ldhu	r2,-12(fp)
  800f38:	e0bff985 	stb	r2,-26(fp)


    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(sclk, sdat);
  800f3c:	e17ffb17 	ldw	r5,-20(fp)
  800f40:	e13ffa17 	ldw	r4,-24(fp)
  800f44:	0800a500 	call	800a50 <i2c_start>
    if (!i2c_send_byte(sclk, sdat, DeviceAddr)){  // send ID
  800f48:	e0bffc03 	ldbu	r2,-16(fp)
  800f4c:	100d883a 	mov	r6,r2
  800f50:	e17ffb17 	ldw	r5,-20(fp)
  800f54:	e13ffa17 	ldw	r4,-24(fp)
  800f58:	0800c6c0 	call	800c6c <i2c_send_byte>
  800f5c:	1000011e 	bne	r2,zero,800f64 <i2c_multiple_read+0x78>
        bSuccess = false;
  800f60:	e03ff905 	stb	zero,-28(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrHigh)){ // send sub-address
  800f64:	e0bff903 	ldbu	r2,-28(fp)
  800f68:	10000726 	beq	r2,zero,800f88 <i2c_multiple_read+0x9c>
  800f6c:	e0bff943 	ldbu	r2,-27(fp)
  800f70:	100d883a 	mov	r6,r2
  800f74:	e17ffb17 	ldw	r5,-20(fp)
  800f78:	e13ffa17 	ldw	r4,-24(fp)
  800f7c:	0800c6c0 	call	800c6c <i2c_send_byte>
  800f80:	1000011e 	bne	r2,zero,800f88 <i2c_multiple_read+0x9c>
        bSuccess = false;
  800f84:	e03ff905 	stb	zero,-28(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrLow)){ // send sub-address
  800f88:	e0bff903 	ldbu	r2,-28(fp)
  800f8c:	10000726 	beq	r2,zero,800fac <i2c_multiple_read+0xc0>
  800f90:	e0bff983 	ldbu	r2,-26(fp)
  800f94:	100d883a 	mov	r6,r2
  800f98:	e17ffb17 	ldw	r5,-20(fp)
  800f9c:	e13ffa17 	ldw	r4,-24(fp)
  800fa0:	0800c6c0 	call	800c6c <i2c_send_byte>
  800fa4:	1000011e 	bne	r2,zero,800fac <i2c_multiple_read+0xc0>
        bSuccess = false;
  800fa8:	e03ff905 	stb	zero,-28(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess)
  800fac:	e0bff903 	ldbu	r2,-28(fp)
  800fb0:	10000326 	beq	r2,zero,800fc0 <i2c_multiple_read+0xd4>
        i2c_start(sclk, sdat);  // restart
  800fb4:	e17ffb17 	ldw	r5,-20(fp)
  800fb8:	e13ffa17 	ldw	r4,-24(fp)
  800fbc:	0800a500 	call	800a50 <i2c_start>
    DeviceAddr |= 1; // Read
  800fc0:	e0bffc03 	ldbu	r2,-16(fp)
  800fc4:	10800054 	ori	r2,r2,1
  800fc8:	e0bffc05 	stb	r2,-16(fp)
    if (bSuccess && !i2c_send_byte(sclk, sdat, DeviceAddr)){  // send id
  800fcc:	e0bff903 	ldbu	r2,-28(fp)
  800fd0:	10000726 	beq	r2,zero,800ff0 <i2c_multiple_read+0x104>
  800fd4:	e0bffc03 	ldbu	r2,-16(fp)
  800fd8:	100d883a 	mov	r6,r2
  800fdc:	e17ffb17 	ldw	r5,-20(fp)
  800fe0:	e13ffa17 	ldw	r4,-24(fp)
  800fe4:	0800c6c0 	call	800c6c <i2c_send_byte>
  800fe8:	1000011e 	bne	r2,zero,800ff0 <i2c_multiple_read+0x104>
        bSuccess = false;
  800fec:	e03ff905 	stb	zero,-28(fp)
        //I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
  800ff0:	e0bff903 	ldbu	r2,-28(fp)
  800ff4:	10001726 	beq	r2,zero,801054 <i2c_multiple_read+0x168>
        for (i = 0; i < len && bSuccess; i++){
  800ff8:	e03ff815 	stw	zero,-32(fp)
  800ffc:	00001006 	br	801040 <i2c_multiple_read+0x154>
            szData[i] = i2c_receive_byte(sclk, sdat, (i == (len - 1)) ? false : true);  // read
  801000:	e0bff817 	ldw	r2,-32(fp)
  801004:	e0c00217 	ldw	r3,8(fp)
  801008:	18a1883a 	add	r16,r3,r2
  80100c:	e0bffe0b 	ldhu	r2,-8(fp)
  801010:	10ffffc4 	addi	r3,r2,-1
  801014:	e0bff817 	ldw	r2,-32(fp)
  801018:	1884c03a 	cmpne	r2,r3,r2
  80101c:	10803fcc 	andi	r2,r2,255
  801020:	100d883a 	mov	r6,r2
  801024:	e17ffb17 	ldw	r5,-20(fp)
  801028:	e13ffa17 	ldw	r4,-24(fp)
  80102c:	0800d000 	call	800d00 <i2c_receive_byte>
  801030:	80800005 	stb	r2,0(r16)
        bSuccess = false;
        //I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }

    if (bSuccess){
        for (i = 0; i < len && bSuccess; i++){
  801034:	e0bff817 	ldw	r2,-32(fp)
  801038:	10800044 	addi	r2,r2,1
  80103c:	e0bff815 	stw	r2,-32(fp)
  801040:	e0bffe0b 	ldhu	r2,-8(fp)
  801044:	e0fff817 	ldw	r3,-32(fp)
  801048:	1880020e 	bge	r3,r2,801054 <i2c_multiple_read+0x168>
  80104c:	e0bff903 	ldbu	r2,-28(fp)
  801050:	103feb1e 	bne	r2,zero,801000 <__alt_mem_descriptor_memory+0xff781000>
            szData[i] = i2c_receive_byte(sclk, sdat, (i == (len - 1)) ? false : true);  // read
        }
    }
    i2c_stop(sclk, sdat);
  801054:	e17ffb17 	ldw	r5,-20(fp)
  801058:	e13ffa17 	ldw	r4,-24(fp)
  80105c:	0800adc0 	call	800adc <i2c_stop>

    return bSuccess;
  801060:	e0bff903 	ldbu	r2,-28(fp)
}
  801064:	e6ffff04 	addi	sp,fp,-4
  801068:	dfc00217 	ldw	ra,8(sp)
  80106c:	df000117 	ldw	fp,4(sp)
  801070:	dc000017 	ldw	r16,0(sp)
  801074:	dec00304 	addi	sp,sp,12
  801078:	f800283a 	ret

0080107c <__extendsfdf2>:
  80107c:	200ad5fa 	srli	r5,r4,23
  801080:	defffd04 	addi	sp,sp,-12
  801084:	dc400115 	stw	r17,4(sp)
  801088:	29403fcc 	andi	r5,r5,255
  80108c:	29800044 	addi	r6,r5,1
  801090:	04402034 	movhi	r17,128
  801094:	dc000015 	stw	r16,0(sp)
  801098:	8c7fffc4 	addi	r17,r17,-1
  80109c:	dfc00215 	stw	ra,8(sp)
  8010a0:	31803fcc 	andi	r6,r6,255
  8010a4:	00800044 	movi	r2,1
  8010a8:	8922703a 	and	r17,r17,r4
  8010ac:	2020d7fa 	srli	r16,r4,31
  8010b0:	1180110e 	bge	r2,r6,8010f8 <__extendsfdf2+0x7c>
  8010b4:	880cd0fa 	srli	r6,r17,3
  8010b8:	8822977a 	slli	r17,r17,29
  8010bc:	2940e004 	addi	r5,r5,896
  8010c0:	2941ffcc 	andi	r5,r5,2047
  8010c4:	2804953a 	slli	r2,r5,20
  8010c8:	01400434 	movhi	r5,16
  8010cc:	800697fa 	slli	r3,r16,31
  8010d0:	297fffc4 	addi	r5,r5,-1
  8010d4:	314a703a 	and	r5,r6,r5
  8010d8:	288ab03a 	or	r5,r5,r2
  8010dc:	28c6b03a 	or	r3,r5,r3
  8010e0:	8805883a 	mov	r2,r17
  8010e4:	dfc00217 	ldw	ra,8(sp)
  8010e8:	dc400117 	ldw	r17,4(sp)
  8010ec:	dc000017 	ldw	r16,0(sp)
  8010f0:	dec00304 	addi	sp,sp,12
  8010f4:	f800283a 	ret
  8010f8:	2800111e 	bne	r5,zero,801140 <__extendsfdf2+0xc4>
  8010fc:	88001c26 	beq	r17,zero,801170 <__extendsfdf2+0xf4>
  801100:	8809883a 	mov	r4,r17
  801104:	080118c0 	call	80118c <__clzsi2>
  801108:	00c00284 	movi	r3,10
  80110c:	18801b16 	blt	r3,r2,80117c <__extendsfdf2+0x100>
  801110:	018002c4 	movi	r6,11
  801114:	308dc83a 	sub	r6,r6,r2
  801118:	11000544 	addi	r4,r2,21
  80111c:	8986d83a 	srl	r3,r17,r6
  801120:	8922983a 	sll	r17,r17,r4
  801124:	0180e244 	movi	r6,905
  801128:	01400434 	movhi	r5,16
  80112c:	3085c83a 	sub	r2,r6,r2
  801130:	297fffc4 	addi	r5,r5,-1
  801134:	194c703a 	and	r6,r3,r5
  801138:	1141ffcc 	andi	r5,r2,2047
  80113c:	003fe006 	br	8010c0 <__alt_mem_descriptor_memory+0xff7810c0>
  801140:	88000826 	beq	r17,zero,801164 <__extendsfdf2+0xe8>
  801144:	880cd0fa 	srli	r6,r17,3
  801148:	00800434 	movhi	r2,16
  80114c:	10bfffc4 	addi	r2,r2,-1
  801150:	31800234 	orhi	r6,r6,8
  801154:	8822977a 	slli	r17,r17,29
  801158:	308c703a 	and	r6,r6,r2
  80115c:	0141ffc4 	movi	r5,2047
  801160:	003fd706 	br	8010c0 <__alt_mem_descriptor_memory+0xff7810c0>
  801164:	0141ffc4 	movi	r5,2047
  801168:	000d883a 	mov	r6,zero
  80116c:	003fd406 	br	8010c0 <__alt_mem_descriptor_memory+0xff7810c0>
  801170:	000b883a 	mov	r5,zero
  801174:	000d883a 	mov	r6,zero
  801178:	003fd106 	br	8010c0 <__alt_mem_descriptor_memory+0xff7810c0>
  80117c:	11bffd44 	addi	r6,r2,-11
  801180:	8986983a 	sll	r3,r17,r6
  801184:	0023883a 	mov	r17,zero
  801188:	003fe606 	br	801124 <__alt_mem_descriptor_memory+0xff781124>

0080118c <__clzsi2>:
  80118c:	00bfffd4 	movui	r2,65535
  801190:	11000536 	bltu	r2,r4,8011a8 <__clzsi2+0x1c>
  801194:	00803fc4 	movi	r2,255
  801198:	11000f36 	bltu	r2,r4,8011d8 <__clzsi2+0x4c>
  80119c:	00800804 	movi	r2,32
  8011a0:	0007883a 	mov	r3,zero
  8011a4:	00000506 	br	8011bc <__clzsi2+0x30>
  8011a8:	00804034 	movhi	r2,256
  8011ac:	10bfffc4 	addi	r2,r2,-1
  8011b0:	11000c2e 	bgeu	r2,r4,8011e4 <__clzsi2+0x58>
  8011b4:	00800204 	movi	r2,8
  8011b8:	00c00604 	movi	r3,24
  8011bc:	20c8d83a 	srl	r4,r4,r3
  8011c0:	00c02074 	movhi	r3,129
  8011c4:	18cf9ec4 	addi	r3,r3,15995
  8011c8:	1909883a 	add	r4,r3,r4
  8011cc:	20c00003 	ldbu	r3,0(r4)
  8011d0:	10c5c83a 	sub	r2,r2,r3
  8011d4:	f800283a 	ret
  8011d8:	00800604 	movi	r2,24
  8011dc:	00c00204 	movi	r3,8
  8011e0:	003ff606 	br	8011bc <__alt_mem_descriptor_memory+0xff7811bc>
  8011e4:	00800404 	movi	r2,16
  8011e8:	1007883a 	mov	r3,r2
  8011ec:	003ff306 	br	8011bc <__alt_mem_descriptor_memory+0xff7811bc>

008011f0 <memset>:
  8011f0:	20c000cc 	andi	r3,r4,3
  8011f4:	2005883a 	mov	r2,r4
  8011f8:	18004426 	beq	r3,zero,80130c <memset+0x11c>
  8011fc:	31ffffc4 	addi	r7,r6,-1
  801200:	30004026 	beq	r6,zero,801304 <memset+0x114>
  801204:	2813883a 	mov	r9,r5
  801208:	200d883a 	mov	r6,r4
  80120c:	2007883a 	mov	r3,r4
  801210:	00000406 	br	801224 <memset+0x34>
  801214:	3a3fffc4 	addi	r8,r7,-1
  801218:	31800044 	addi	r6,r6,1
  80121c:	38003926 	beq	r7,zero,801304 <memset+0x114>
  801220:	400f883a 	mov	r7,r8
  801224:	18c00044 	addi	r3,r3,1
  801228:	32400005 	stb	r9,0(r6)
  80122c:	1a0000cc 	andi	r8,r3,3
  801230:	403ff81e 	bne	r8,zero,801214 <__alt_mem_descriptor_memory+0xff781214>
  801234:	010000c4 	movi	r4,3
  801238:	21c02d2e 	bgeu	r4,r7,8012f0 <memset+0x100>
  80123c:	29003fcc 	andi	r4,r5,255
  801240:	200c923a 	slli	r6,r4,8
  801244:	3108b03a 	or	r4,r6,r4
  801248:	200c943a 	slli	r6,r4,16
  80124c:	218cb03a 	or	r6,r4,r6
  801250:	010003c4 	movi	r4,15
  801254:	21c0182e 	bgeu	r4,r7,8012b8 <memset+0xc8>
  801258:	3b3ffc04 	addi	r12,r7,-16
  80125c:	6018d13a 	srli	r12,r12,4
  801260:	1a000104 	addi	r8,r3,4
  801264:	1ac00204 	addi	r11,r3,8
  801268:	6008913a 	slli	r4,r12,4
  80126c:	1a800304 	addi	r10,r3,12
  801270:	1813883a 	mov	r9,r3
  801274:	21000504 	addi	r4,r4,20
  801278:	1909883a 	add	r4,r3,r4
  80127c:	49800015 	stw	r6,0(r9)
  801280:	41800015 	stw	r6,0(r8)
  801284:	59800015 	stw	r6,0(r11)
  801288:	51800015 	stw	r6,0(r10)
  80128c:	42000404 	addi	r8,r8,16
  801290:	4a400404 	addi	r9,r9,16
  801294:	5ac00404 	addi	r11,r11,16
  801298:	52800404 	addi	r10,r10,16
  80129c:	413ff71e 	bne	r8,r4,80127c <__alt_mem_descriptor_memory+0xff78127c>
  8012a0:	63000044 	addi	r12,r12,1
  8012a4:	6018913a 	slli	r12,r12,4
  8012a8:	39c003cc 	andi	r7,r7,15
  8012ac:	010000c4 	movi	r4,3
  8012b0:	1b07883a 	add	r3,r3,r12
  8012b4:	21c00e2e 	bgeu	r4,r7,8012f0 <memset+0x100>
  8012b8:	1813883a 	mov	r9,r3
  8012bc:	3811883a 	mov	r8,r7
  8012c0:	010000c4 	movi	r4,3
  8012c4:	49800015 	stw	r6,0(r9)
  8012c8:	423fff04 	addi	r8,r8,-4
  8012cc:	4a400104 	addi	r9,r9,4
  8012d0:	223ffc36 	bltu	r4,r8,8012c4 <__alt_mem_descriptor_memory+0xff7812c4>
  8012d4:	393fff04 	addi	r4,r7,-4
  8012d8:	2008d0ba 	srli	r4,r4,2
  8012dc:	39c000cc 	andi	r7,r7,3
  8012e0:	21000044 	addi	r4,r4,1
  8012e4:	2109883a 	add	r4,r4,r4
  8012e8:	2109883a 	add	r4,r4,r4
  8012ec:	1907883a 	add	r3,r3,r4
  8012f0:	38000526 	beq	r7,zero,801308 <memset+0x118>
  8012f4:	19cf883a 	add	r7,r3,r7
  8012f8:	19400005 	stb	r5,0(r3)
  8012fc:	18c00044 	addi	r3,r3,1
  801300:	38fffd1e 	bne	r7,r3,8012f8 <__alt_mem_descriptor_memory+0xff7812f8>
  801304:	f800283a 	ret
  801308:	f800283a 	ret
  80130c:	2007883a 	mov	r3,r4
  801310:	300f883a 	mov	r7,r6
  801314:	003fc706 	br	801234 <__alt_mem_descriptor_memory+0xff781234>

00801318 <_printf_r>:
  801318:	defffd04 	addi	sp,sp,-12
  80131c:	2805883a 	mov	r2,r5
  801320:	dfc00015 	stw	ra,0(sp)
  801324:	d9800115 	stw	r6,4(sp)
  801328:	d9c00215 	stw	r7,8(sp)
  80132c:	21400217 	ldw	r5,8(r4)
  801330:	d9c00104 	addi	r7,sp,4
  801334:	100d883a 	mov	r6,r2
  801338:	08013840 	call	801384 <___vfprintf_internal_r>
  80133c:	dfc00017 	ldw	ra,0(sp)
  801340:	dec00304 	addi	sp,sp,12
  801344:	f800283a 	ret

00801348 <printf>:
  801348:	defffc04 	addi	sp,sp,-16
  80134c:	dfc00015 	stw	ra,0(sp)
  801350:	d9400115 	stw	r5,4(sp)
  801354:	d9800215 	stw	r6,8(sp)
  801358:	d9c00315 	stw	r7,12(sp)
  80135c:	00802074 	movhi	r2,129
  801360:	1098ac04 	addi	r2,r2,25264
  801364:	10800017 	ldw	r2,0(r2)
  801368:	200b883a 	mov	r5,r4
  80136c:	d9800104 	addi	r6,sp,4
  801370:	11000217 	ldw	r4,8(r2)
  801374:	080357c0 	call	80357c <__vfprintf_internal>
  801378:	dfc00017 	ldw	ra,0(sp)
  80137c:	dec00404 	addi	sp,sp,16
  801380:	f800283a 	ret

00801384 <___vfprintf_internal_r>:
  801384:	deffb804 	addi	sp,sp,-288
  801388:	dfc04715 	stw	ra,284(sp)
  80138c:	ddc04515 	stw	r23,276(sp)
  801390:	dd404315 	stw	r21,268(sp)
  801394:	d9002c15 	stw	r4,176(sp)
  801398:	282f883a 	mov	r23,r5
  80139c:	302b883a 	mov	r21,r6
  8013a0:	d9c02d15 	stw	r7,180(sp)
  8013a4:	df004615 	stw	fp,280(sp)
  8013a8:	dd804415 	stw	r22,272(sp)
  8013ac:	dd004215 	stw	r20,264(sp)
  8013b0:	dcc04115 	stw	r19,260(sp)
  8013b4:	dc804015 	stw	r18,256(sp)
  8013b8:	dc403f15 	stw	r17,252(sp)
  8013bc:	dc003e15 	stw	r16,248(sp)
  8013c0:	0805ce00 	call	805ce0 <_localeconv_r>
  8013c4:	10800017 	ldw	r2,0(r2)
  8013c8:	1009883a 	mov	r4,r2
  8013cc:	d8803415 	stw	r2,208(sp)
  8013d0:	0807be00 	call	807be0 <strlen>
  8013d4:	d8803715 	stw	r2,220(sp)
  8013d8:	d8802c17 	ldw	r2,176(sp)
  8013dc:	10000226 	beq	r2,zero,8013e8 <___vfprintf_internal_r+0x64>
  8013e0:	10800e17 	ldw	r2,56(r2)
  8013e4:	1000f926 	beq	r2,zero,8017cc <___vfprintf_internal_r+0x448>
  8013e8:	b880030b 	ldhu	r2,12(r23)
  8013ec:	10c8000c 	andi	r3,r2,8192
  8013f0:	1800061e 	bne	r3,zero,80140c <___vfprintf_internal_r+0x88>
  8013f4:	b9001917 	ldw	r4,100(r23)
  8013f8:	00f7ffc4 	movi	r3,-8193
  8013fc:	10880014 	ori	r2,r2,8192
  801400:	20c6703a 	and	r3,r4,r3
  801404:	b880030d 	sth	r2,12(r23)
  801408:	b8c01915 	stw	r3,100(r23)
  80140c:	10c0020c 	andi	r3,r2,8
  801410:	1800c126 	beq	r3,zero,801718 <___vfprintf_internal_r+0x394>
  801414:	b8c00417 	ldw	r3,16(r23)
  801418:	1800bf26 	beq	r3,zero,801718 <___vfprintf_internal_r+0x394>
  80141c:	1080068c 	andi	r2,r2,26
  801420:	00c00284 	movi	r3,10
  801424:	10c0c426 	beq	r2,r3,801738 <___vfprintf_internal_r+0x3b4>
  801428:	d8c00404 	addi	r3,sp,16
  80142c:	05002074 	movhi	r20,129
  801430:	d9001e04 	addi	r4,sp,120
  801434:	a50fef84 	addi	r20,r20,16318
  801438:	d8c01e15 	stw	r3,120(sp)
  80143c:	d8002015 	stw	zero,128(sp)
  801440:	d8001f15 	stw	zero,124(sp)
  801444:	d8003315 	stw	zero,204(sp)
  801448:	d8003615 	stw	zero,216(sp)
  80144c:	d8003815 	stw	zero,224(sp)
  801450:	1811883a 	mov	r8,r3
  801454:	d8003915 	stw	zero,228(sp)
  801458:	d8003a15 	stw	zero,232(sp)
  80145c:	d8002f15 	stw	zero,188(sp)
  801460:	d9002815 	stw	r4,160(sp)
  801464:	a8800007 	ldb	r2,0(r21)
  801468:	10027b26 	beq	r2,zero,801e58 <___vfprintf_internal_r+0xad4>
  80146c:	00c00944 	movi	r3,37
  801470:	a821883a 	mov	r16,r21
  801474:	10c0021e 	bne	r2,r3,801480 <___vfprintf_internal_r+0xfc>
  801478:	00001406 	br	8014cc <___vfprintf_internal_r+0x148>
  80147c:	10c00326 	beq	r2,r3,80148c <___vfprintf_internal_r+0x108>
  801480:	84000044 	addi	r16,r16,1
  801484:	80800007 	ldb	r2,0(r16)
  801488:	103ffc1e 	bne	r2,zero,80147c <__alt_mem_descriptor_memory+0xff78147c>
  80148c:	8563c83a 	sub	r17,r16,r21
  801490:	88000e26 	beq	r17,zero,8014cc <___vfprintf_internal_r+0x148>
  801494:	d8c02017 	ldw	r3,128(sp)
  801498:	d8801f17 	ldw	r2,124(sp)
  80149c:	45400015 	stw	r21,0(r8)
  8014a0:	1c47883a 	add	r3,r3,r17
  8014a4:	10800044 	addi	r2,r2,1
  8014a8:	d8c02015 	stw	r3,128(sp)
  8014ac:	44400115 	stw	r17,4(r8)
  8014b0:	d8801f15 	stw	r2,124(sp)
  8014b4:	00c001c4 	movi	r3,7
  8014b8:	1880a716 	blt	r3,r2,801758 <___vfprintf_internal_r+0x3d4>
  8014bc:	42000204 	addi	r8,r8,8
  8014c0:	d9402f17 	ldw	r5,188(sp)
  8014c4:	2c4b883a 	add	r5,r5,r17
  8014c8:	d9402f15 	stw	r5,188(sp)
  8014cc:	80800007 	ldb	r2,0(r16)
  8014d0:	1000a826 	beq	r2,zero,801774 <___vfprintf_internal_r+0x3f0>
  8014d4:	84400047 	ldb	r17,1(r16)
  8014d8:	00bfffc4 	movi	r2,-1
  8014dc:	85400044 	addi	r21,r16,1
  8014e0:	d8002785 	stb	zero,158(sp)
  8014e4:	0007883a 	mov	r3,zero
  8014e8:	000f883a 	mov	r7,zero
  8014ec:	d8802915 	stw	r2,164(sp)
  8014f0:	d8003115 	stw	zero,196(sp)
  8014f4:	0025883a 	mov	r18,zero
  8014f8:	01401604 	movi	r5,88
  8014fc:	01800244 	movi	r6,9
  801500:	02800a84 	movi	r10,42
  801504:	02401b04 	movi	r9,108
  801508:	ad400044 	addi	r21,r21,1
  80150c:	88bff804 	addi	r2,r17,-32
  801510:	28830436 	bltu	r5,r2,802124 <___vfprintf_internal_r+0xda0>
  801514:	100490ba 	slli	r2,r2,2
  801518:	01002034 	movhi	r4,128
  80151c:	21054b04 	addi	r4,r4,5420
  801520:	1105883a 	add	r2,r2,r4
  801524:	10800017 	ldw	r2,0(r2)
  801528:	1000683a 	jmp	r2
  80152c:	00802044 	movi	r2,129
  801530:	00802124 	muli	r2,zero,132
  801534:	00802124 	muli	r2,zero,132
  801538:	00802064 	muli	r2,zero,129
  80153c:	00802124 	muli	r2,zero,132
  801540:	00802124 	muli	r2,zero,132
  801544:	00802124 	muli	r2,zero,132
  801548:	00802124 	muli	r2,zero,132
  80154c:	00802124 	muli	r2,zero,132
  801550:	00802124 	muli	r2,zero,132
  801554:	008017d8 	cmpnei	r2,zero,95
  801558:	00801f80 	call	801f8 <__alt_mem_new_sdram_controller_0-0x77fe08>
  80155c:	00802124 	muli	r2,zero,132
  801560:	008016a0 	cmpeqi	r2,zero,90
  801564:	00801800 	call	80180 <__alt_mem_new_sdram_controller_0-0x77fe80>
  801568:	00802124 	muli	r2,zero,132
  80156c:	00801840 	call	80184 <__alt_mem_new_sdram_controller_0-0x77fe7c>
  801570:	0080184c 	andi	r2,zero,97
  801574:	0080184c 	andi	r2,zero,97
  801578:	0080184c 	andi	r2,zero,97
  80157c:	0080184c 	andi	r2,zero,97
  801580:	0080184c 	andi	r2,zero,97
  801584:	0080184c 	andi	r2,zero,97
  801588:	0080184c 	andi	r2,zero,97
  80158c:	0080184c 	andi	r2,zero,97
  801590:	0080184c 	andi	r2,zero,97
  801594:	00802124 	muli	r2,zero,132
  801598:	00802124 	muli	r2,zero,132
  80159c:	00802124 	muli	r2,zero,132
  8015a0:	00802124 	muli	r2,zero,132
  8015a4:	00802124 	muli	r2,zero,132
  8015a8:	00802124 	muli	r2,zero,132
  8015ac:	00802124 	muli	r2,zero,132
  8015b0:	00802124 	muli	r2,zero,132
  8015b4:	00802124 	muli	r2,zero,132
  8015b8:	00802124 	muli	r2,zero,132
  8015bc:	00801880 	call	80188 <__alt_mem_new_sdram_controller_0-0x77fe78>
  8015c0:	0080193c 	xorhi	r2,zero,100
  8015c4:	00802124 	muli	r2,zero,132
  8015c8:	0080193c 	xorhi	r2,zero,100
  8015cc:	00802124 	muli	r2,zero,132
  8015d0:	00802124 	muli	r2,zero,132
  8015d4:	00802124 	muli	r2,zero,132
  8015d8:	00802124 	muli	r2,zero,132
  8015dc:	008019dc 	xori	r2,zero,103
  8015e0:	00802124 	muli	r2,zero,132
  8015e4:	00802124 	muli	r2,zero,132
  8015e8:	008019e8 	cmpgeui	r2,zero,103
  8015ec:	00802124 	muli	r2,zero,132
  8015f0:	00802124 	muli	r2,zero,132
  8015f4:	00802124 	muli	r2,zero,132
  8015f8:	00802124 	muli	r2,zero,132
  8015fc:	00802124 	muli	r2,zero,132
  801600:	00801e60 	cmpeqi	r2,zero,121
  801604:	00802124 	muli	r2,zero,132
  801608:	00802124 	muli	r2,zero,132
  80160c:	00801ec0 	call	801ec <__alt_mem_new_sdram_controller_0-0x77fe14>
  801610:	00802124 	muli	r2,zero,132
  801614:	00802124 	muli	r2,zero,132
  801618:	00802124 	muli	r2,zero,132
  80161c:	00802124 	muli	r2,zero,132
  801620:	00802124 	muli	r2,zero,132
  801624:	00802124 	muli	r2,zero,132
  801628:	00802124 	muli	r2,zero,132
  80162c:	00802124 	muli	r2,zero,132
  801630:	00802124 	muli	r2,zero,132
  801634:	00802124 	muli	r2,zero,132
  801638:	008020d0 	cmplti	r2,zero,131
  80163c:	00802070 	cmpltui	r2,zero,129
  801640:	0080193c 	xorhi	r2,zero,100
  801644:	0080193c 	xorhi	r2,zero,100
  801648:	0080193c 	xorhi	r2,zero,100
  80164c:	00802080 	call	80208 <__alt_mem_new_sdram_controller_0-0x77fdf8>
  801650:	00802070 	cmpltui	r2,zero,129
  801654:	00802124 	muli	r2,zero,132
  801658:	00802124 	muli	r2,zero,132
  80165c:	0080208c 	andi	r2,zero,130
  801660:	00802124 	muli	r2,zero,132
  801664:	0080209c 	xori	r2,zero,130
  801668:	00801f70 	cmpltui	r2,zero,125
  80166c:	008016ac 	andhi	r2,zero,90
  801670:	00801f90 	cmplti	r2,zero,126
  801674:	00802124 	muli	r2,zero,132
  801678:	00801f9c 	xori	r2,zero,126
  80167c:	00802124 	muli	r2,zero,132
  801680:	00801ff8 	rdprs	r2,zero,127
  801684:	00802124 	muli	r2,zero,132
  801688:	00802124 	muli	r2,zero,132
  80168c:	00802008 	cmpgei	r2,zero,128
  801690:	d9003117 	ldw	r4,196(sp)
  801694:	d8802d15 	stw	r2,180(sp)
  801698:	0109c83a 	sub	r4,zero,r4
  80169c:	d9003115 	stw	r4,196(sp)
  8016a0:	94800114 	ori	r18,r18,4
  8016a4:	ac400007 	ldb	r17,0(r21)
  8016a8:	003f9706 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  8016ac:	00800c04 	movi	r2,48
  8016b0:	d9002d17 	ldw	r4,180(sp)
  8016b4:	d9402917 	ldw	r5,164(sp)
  8016b8:	d8802705 	stb	r2,156(sp)
  8016bc:	00801e04 	movi	r2,120
  8016c0:	d8802745 	stb	r2,157(sp)
  8016c4:	d8002785 	stb	zero,158(sp)
  8016c8:	20c00104 	addi	r3,r4,4
  8016cc:	24c00017 	ldw	r19,0(r4)
  8016d0:	002d883a 	mov	r22,zero
  8016d4:	90800094 	ori	r2,r18,2
  8016d8:	28029a16 	blt	r5,zero,802144 <___vfprintf_internal_r+0xdc0>
  8016dc:	00bfdfc4 	movi	r2,-129
  8016e0:	90a4703a 	and	r18,r18,r2
  8016e4:	d8c02d15 	stw	r3,180(sp)
  8016e8:	94800094 	ori	r18,r18,2
  8016ec:	9802871e 	bne	r19,zero,80210c <___vfprintf_internal_r+0xd88>
  8016f0:	00802074 	movhi	r2,129
  8016f4:	108fe804 	addi	r2,r2,16288
  8016f8:	d8803915 	stw	r2,228(sp)
  8016fc:	04401e04 	movi	r17,120
  801700:	d8802917 	ldw	r2,164(sp)
  801704:	0039883a 	mov	fp,zero
  801708:	1001e926 	beq	r2,zero,801eb0 <___vfprintf_internal_r+0xb2c>
  80170c:	0027883a 	mov	r19,zero
  801710:	002d883a 	mov	r22,zero
  801714:	00020506 	br	801f2c <___vfprintf_internal_r+0xba8>
  801718:	d9002c17 	ldw	r4,176(sp)
  80171c:	b80b883a 	mov	r5,r23
  801720:	08036540 	call	803654 <__swsetup_r>
  801724:	1005ac1e 	bne	r2,zero,802dd8 <___vfprintf_internal_r+0x1a54>
  801728:	b880030b 	ldhu	r2,12(r23)
  80172c:	00c00284 	movi	r3,10
  801730:	1080068c 	andi	r2,r2,26
  801734:	10ff3c1e 	bne	r2,r3,801428 <__alt_mem_descriptor_memory+0xff781428>
  801738:	b880038f 	ldh	r2,14(r23)
  80173c:	103f3a16 	blt	r2,zero,801428 <__alt_mem_descriptor_memory+0xff781428>
  801740:	d9c02d17 	ldw	r7,180(sp)
  801744:	d9002c17 	ldw	r4,176(sp)
  801748:	a80d883a 	mov	r6,r21
  80174c:	b80b883a 	mov	r5,r23
  801750:	08035980 	call	803598 <__sbprintf>
  801754:	00001106 	br	80179c <___vfprintf_internal_r+0x418>
  801758:	d9002c17 	ldw	r4,176(sp)
  80175c:	d9801e04 	addi	r6,sp,120
  801760:	b80b883a 	mov	r5,r23
  801764:	0807d740 	call	807d74 <__sprint_r>
  801768:	1000081e 	bne	r2,zero,80178c <___vfprintf_internal_r+0x408>
  80176c:	da000404 	addi	r8,sp,16
  801770:	003f5306 	br	8014c0 <__alt_mem_descriptor_memory+0xff7814c0>
  801774:	d8802017 	ldw	r2,128(sp)
  801778:	10000426 	beq	r2,zero,80178c <___vfprintf_internal_r+0x408>
  80177c:	d9002c17 	ldw	r4,176(sp)
  801780:	d9801e04 	addi	r6,sp,120
  801784:	b80b883a 	mov	r5,r23
  801788:	0807d740 	call	807d74 <__sprint_r>
  80178c:	b880030b 	ldhu	r2,12(r23)
  801790:	1080100c 	andi	r2,r2,64
  801794:	1005901e 	bne	r2,zero,802dd8 <___vfprintf_internal_r+0x1a54>
  801798:	d8802f17 	ldw	r2,188(sp)
  80179c:	dfc04717 	ldw	ra,284(sp)
  8017a0:	df004617 	ldw	fp,280(sp)
  8017a4:	ddc04517 	ldw	r23,276(sp)
  8017a8:	dd804417 	ldw	r22,272(sp)
  8017ac:	dd404317 	ldw	r21,268(sp)
  8017b0:	dd004217 	ldw	r20,264(sp)
  8017b4:	dcc04117 	ldw	r19,260(sp)
  8017b8:	dc804017 	ldw	r18,256(sp)
  8017bc:	dc403f17 	ldw	r17,252(sp)
  8017c0:	dc003e17 	ldw	r16,248(sp)
  8017c4:	dec04804 	addi	sp,sp,288
  8017c8:	f800283a 	ret
  8017cc:	d9002c17 	ldw	r4,176(sp)
  8017d0:	08056280 	call	805628 <__sinit>
  8017d4:	003f0406 	br	8013e8 <__alt_mem_descriptor_memory+0xff7813e8>
  8017d8:	d8802d17 	ldw	r2,180(sp)
  8017dc:	d9002d17 	ldw	r4,180(sp)
  8017e0:	10800017 	ldw	r2,0(r2)
  8017e4:	d8803115 	stw	r2,196(sp)
  8017e8:	20800104 	addi	r2,r4,4
  8017ec:	d9003117 	ldw	r4,196(sp)
  8017f0:	203fa716 	blt	r4,zero,801690 <__alt_mem_descriptor_memory+0xff781690>
  8017f4:	d8802d15 	stw	r2,180(sp)
  8017f8:	ac400007 	ldb	r17,0(r21)
  8017fc:	003f4206 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  801800:	ac400007 	ldb	r17,0(r21)
  801804:	aac00044 	addi	r11,r21,1
  801808:	8a872826 	beq	r17,r10,8034ac <___vfprintf_internal_r+0x2128>
  80180c:	88bff404 	addi	r2,r17,-48
  801810:	0009883a 	mov	r4,zero
  801814:	30867d36 	bltu	r6,r2,80320c <___vfprintf_internal_r+0x1e88>
  801818:	5c400007 	ldb	r17,0(r11)
  80181c:	210002a4 	muli	r4,r4,10
  801820:	5d400044 	addi	r21,r11,1
  801824:	a817883a 	mov	r11,r21
  801828:	2089883a 	add	r4,r4,r2
  80182c:	88bff404 	addi	r2,r17,-48
  801830:	30bff92e 	bgeu	r6,r2,801818 <__alt_mem_descriptor_memory+0xff781818>
  801834:	2005c916 	blt	r4,zero,802f5c <___vfprintf_internal_r+0x1bd8>
  801838:	d9002915 	stw	r4,164(sp)
  80183c:	003f3306 	br	80150c <__alt_mem_descriptor_memory+0xff78150c>
  801840:	94802014 	ori	r18,r18,128
  801844:	ac400007 	ldb	r17,0(r21)
  801848:	003f2f06 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  80184c:	a809883a 	mov	r4,r21
  801850:	d8003115 	stw	zero,196(sp)
  801854:	88bff404 	addi	r2,r17,-48
  801858:	0017883a 	mov	r11,zero
  80185c:	24400007 	ldb	r17,0(r4)
  801860:	5ac002a4 	muli	r11,r11,10
  801864:	ad400044 	addi	r21,r21,1
  801868:	a809883a 	mov	r4,r21
  80186c:	12d7883a 	add	r11,r2,r11
  801870:	88bff404 	addi	r2,r17,-48
  801874:	30bff92e 	bgeu	r6,r2,80185c <__alt_mem_descriptor_memory+0xff78185c>
  801878:	dac03115 	stw	r11,196(sp)
  80187c:	003f2306 	br	80150c <__alt_mem_descriptor_memory+0xff78150c>
  801880:	18c03fcc 	andi	r3,r3,255
  801884:	18072b1e 	bne	r3,zero,803534 <___vfprintf_internal_r+0x21b0>
  801888:	94800414 	ori	r18,r18,16
  80188c:	9080080c 	andi	r2,r18,32
  801890:	10037b26 	beq	r2,zero,802680 <___vfprintf_internal_r+0x12fc>
  801894:	d9402d17 	ldw	r5,180(sp)
  801898:	28800117 	ldw	r2,4(r5)
  80189c:	2cc00017 	ldw	r19,0(r5)
  8018a0:	29400204 	addi	r5,r5,8
  8018a4:	d9402d15 	stw	r5,180(sp)
  8018a8:	102d883a 	mov	r22,r2
  8018ac:	10044b16 	blt	r2,zero,8029dc <___vfprintf_internal_r+0x1658>
  8018b0:	d9402917 	ldw	r5,164(sp)
  8018b4:	df002783 	ldbu	fp,158(sp)
  8018b8:	2803bc16 	blt	r5,zero,8027ac <___vfprintf_internal_r+0x1428>
  8018bc:	00ffdfc4 	movi	r3,-129
  8018c0:	9d84b03a 	or	r2,r19,r22
  8018c4:	90e4703a 	and	r18,r18,r3
  8018c8:	10017726 	beq	r2,zero,801ea8 <___vfprintf_internal_r+0xb24>
  8018cc:	b0038326 	beq	r22,zero,8026dc <___vfprintf_internal_r+0x1358>
  8018d0:	dc402a15 	stw	r17,168(sp)
  8018d4:	dc001e04 	addi	r16,sp,120
  8018d8:	b023883a 	mov	r17,r22
  8018dc:	402d883a 	mov	r22,r8
  8018e0:	9809883a 	mov	r4,r19
  8018e4:	880b883a 	mov	r5,r17
  8018e8:	01800284 	movi	r6,10
  8018ec:	000f883a 	mov	r7,zero
  8018f0:	080ace80 	call	80ace8 <__umoddi3>
  8018f4:	10800c04 	addi	r2,r2,48
  8018f8:	843fffc4 	addi	r16,r16,-1
  8018fc:	9809883a 	mov	r4,r19
  801900:	880b883a 	mov	r5,r17
  801904:	80800005 	stb	r2,0(r16)
  801908:	01800284 	movi	r6,10
  80190c:	000f883a 	mov	r7,zero
  801910:	080a7700 	call	80a770 <__udivdi3>
  801914:	1027883a 	mov	r19,r2
  801918:	10c4b03a 	or	r2,r2,r3
  80191c:	1823883a 	mov	r17,r3
  801920:	103fef1e 	bne	r2,zero,8018e0 <__alt_mem_descriptor_memory+0xff7818e0>
  801924:	d8c02817 	ldw	r3,160(sp)
  801928:	dc402a17 	ldw	r17,168(sp)
  80192c:	b011883a 	mov	r8,r22
  801930:	1c07c83a 	sub	r3,r3,r16
  801934:	d8c02e15 	stw	r3,184(sp)
  801938:	00005906 	br	801aa0 <___vfprintf_internal_r+0x71c>
  80193c:	18c03fcc 	andi	r3,r3,255
  801940:	1806fa1e 	bne	r3,zero,80352c <___vfprintf_internal_r+0x21a8>
  801944:	9080020c 	andi	r2,r18,8
  801948:	10048a26 	beq	r2,zero,802b74 <___vfprintf_internal_r+0x17f0>
  80194c:	d8c02d17 	ldw	r3,180(sp)
  801950:	d9002d17 	ldw	r4,180(sp)
  801954:	d9402d17 	ldw	r5,180(sp)
  801958:	18c00017 	ldw	r3,0(r3)
  80195c:	21000117 	ldw	r4,4(r4)
  801960:	29400204 	addi	r5,r5,8
  801964:	d8c03615 	stw	r3,216(sp)
  801968:	d9003815 	stw	r4,224(sp)
  80196c:	d9402d15 	stw	r5,180(sp)
  801970:	d9003617 	ldw	r4,216(sp)
  801974:	d9403817 	ldw	r5,224(sp)
  801978:	da003d15 	stw	r8,244(sp)
  80197c:	04000044 	movi	r16,1
  801980:	08079000 	call	807900 <__fpclassifyd>
  801984:	da003d17 	ldw	r8,244(sp)
  801988:	14041f1e 	bne	r2,r16,802a08 <___vfprintf_internal_r+0x1684>
  80198c:	d9003617 	ldw	r4,216(sp)
  801990:	d9403817 	ldw	r5,224(sp)
  801994:	000d883a 	mov	r6,zero
  801998:	000f883a 	mov	r7,zero
  80199c:	080c6cc0 	call	80c6cc <__ledf2>
  8019a0:	da003d17 	ldw	r8,244(sp)
  8019a4:	1005be16 	blt	r2,zero,8030a0 <___vfprintf_internal_r+0x1d1c>
  8019a8:	df002783 	ldbu	fp,158(sp)
  8019ac:	008011c4 	movi	r2,71
  8019b0:	1445330e 	bge	r2,r17,802e80 <___vfprintf_internal_r+0x1afc>
  8019b4:	04002074 	movhi	r16,129
  8019b8:	840fe004 	addi	r16,r16,16256
  8019bc:	00c000c4 	movi	r3,3
  8019c0:	00bfdfc4 	movi	r2,-129
  8019c4:	d8c02a15 	stw	r3,168(sp)
  8019c8:	90a4703a 	and	r18,r18,r2
  8019cc:	d8c02e15 	stw	r3,184(sp)
  8019d0:	d8002915 	stw	zero,164(sp)
  8019d4:	d8003215 	stw	zero,200(sp)
  8019d8:	00003706 	br	801ab8 <___vfprintf_internal_r+0x734>
  8019dc:	94800214 	ori	r18,r18,8
  8019e0:	ac400007 	ldb	r17,0(r21)
  8019e4:	003ec806 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  8019e8:	18c03fcc 	andi	r3,r3,255
  8019ec:	1806db1e 	bne	r3,zero,80355c <___vfprintf_internal_r+0x21d8>
  8019f0:	94800414 	ori	r18,r18,16
  8019f4:	9080080c 	andi	r2,r18,32
  8019f8:	1002d826 	beq	r2,zero,80255c <___vfprintf_internal_r+0x11d8>
  8019fc:	d9402d17 	ldw	r5,180(sp)
  801a00:	d8c02917 	ldw	r3,164(sp)
  801a04:	d8002785 	stb	zero,158(sp)
  801a08:	28800204 	addi	r2,r5,8
  801a0c:	2cc00017 	ldw	r19,0(r5)
  801a10:	2d800117 	ldw	r22,4(r5)
  801a14:	18048f16 	blt	r3,zero,802c54 <___vfprintf_internal_r+0x18d0>
  801a18:	013fdfc4 	movi	r4,-129
  801a1c:	9d86b03a 	or	r3,r19,r22
  801a20:	d8802d15 	stw	r2,180(sp)
  801a24:	9124703a 	and	r18,r18,r4
  801a28:	1802d91e 	bne	r3,zero,802590 <___vfprintf_internal_r+0x120c>
  801a2c:	d8c02917 	ldw	r3,164(sp)
  801a30:	0039883a 	mov	fp,zero
  801a34:	1805c326 	beq	r3,zero,803144 <___vfprintf_internal_r+0x1dc0>
  801a38:	0027883a 	mov	r19,zero
  801a3c:	002d883a 	mov	r22,zero
  801a40:	dc001e04 	addi	r16,sp,120
  801a44:	9806d0fa 	srli	r3,r19,3
  801a48:	b008977a 	slli	r4,r22,29
  801a4c:	b02cd0fa 	srli	r22,r22,3
  801a50:	9cc001cc 	andi	r19,r19,7
  801a54:	98800c04 	addi	r2,r19,48
  801a58:	843fffc4 	addi	r16,r16,-1
  801a5c:	20e6b03a 	or	r19,r4,r3
  801a60:	80800005 	stb	r2,0(r16)
  801a64:	9d86b03a 	or	r3,r19,r22
  801a68:	183ff61e 	bne	r3,zero,801a44 <__alt_mem_descriptor_memory+0xff781a44>
  801a6c:	90c0004c 	andi	r3,r18,1
  801a70:	18013b26 	beq	r3,zero,801f60 <___vfprintf_internal_r+0xbdc>
  801a74:	10803fcc 	andi	r2,r2,255
  801a78:	1080201c 	xori	r2,r2,128
  801a7c:	10bfe004 	addi	r2,r2,-128
  801a80:	00c00c04 	movi	r3,48
  801a84:	10c13626 	beq	r2,r3,801f60 <___vfprintf_internal_r+0xbdc>
  801a88:	80ffffc5 	stb	r3,-1(r16)
  801a8c:	d8c02817 	ldw	r3,160(sp)
  801a90:	80bfffc4 	addi	r2,r16,-1
  801a94:	1021883a 	mov	r16,r2
  801a98:	1887c83a 	sub	r3,r3,r2
  801a9c:	d8c02e15 	stw	r3,184(sp)
  801aa0:	d8802e17 	ldw	r2,184(sp)
  801aa4:	d9002917 	ldw	r4,164(sp)
  801aa8:	1100010e 	bge	r2,r4,801ab0 <___vfprintf_internal_r+0x72c>
  801aac:	2005883a 	mov	r2,r4
  801ab0:	d8802a15 	stw	r2,168(sp)
  801ab4:	d8003215 	stw	zero,200(sp)
  801ab8:	e7003fcc 	andi	fp,fp,255
  801abc:	e700201c 	xori	fp,fp,128
  801ac0:	e73fe004 	addi	fp,fp,-128
  801ac4:	e0000326 	beq	fp,zero,801ad4 <___vfprintf_internal_r+0x750>
  801ac8:	d8c02a17 	ldw	r3,168(sp)
  801acc:	18c00044 	addi	r3,r3,1
  801ad0:	d8c02a15 	stw	r3,168(sp)
  801ad4:	90c0008c 	andi	r3,r18,2
  801ad8:	d8c02b15 	stw	r3,172(sp)
  801adc:	18000326 	beq	r3,zero,801aec <___vfprintf_internal_r+0x768>
  801ae0:	d8c02a17 	ldw	r3,168(sp)
  801ae4:	18c00084 	addi	r3,r3,2
  801ae8:	d8c02a15 	stw	r3,168(sp)
  801aec:	90c0210c 	andi	r3,r18,132
  801af0:	d8c03015 	stw	r3,192(sp)
  801af4:	1801a31e 	bne	r3,zero,802184 <___vfprintf_internal_r+0xe00>
  801af8:	d9003117 	ldw	r4,196(sp)
  801afc:	d8c02a17 	ldw	r3,168(sp)
  801b00:	20e7c83a 	sub	r19,r4,r3
  801b04:	04c19f0e 	bge	zero,r19,802184 <___vfprintf_internal_r+0xe00>
  801b08:	02400404 	movi	r9,16
  801b0c:	d8c02017 	ldw	r3,128(sp)
  801b10:	d8801f17 	ldw	r2,124(sp)
  801b14:	4cc50d0e 	bge	r9,r19,802f4c <___vfprintf_internal_r+0x1bc8>
  801b18:	01402074 	movhi	r5,129
  801b1c:	294ff384 	addi	r5,r5,16334
  801b20:	dc403b15 	stw	r17,236(sp)
  801b24:	d9403515 	stw	r5,212(sp)
  801b28:	9823883a 	mov	r17,r19
  801b2c:	482d883a 	mov	r22,r9
  801b30:	9027883a 	mov	r19,r18
  801b34:	070001c4 	movi	fp,7
  801b38:	8025883a 	mov	r18,r16
  801b3c:	dc002c17 	ldw	r16,176(sp)
  801b40:	00000306 	br	801b50 <___vfprintf_internal_r+0x7cc>
  801b44:	8c7ffc04 	addi	r17,r17,-16
  801b48:	42000204 	addi	r8,r8,8
  801b4c:	b440130e 	bge	r22,r17,801b9c <___vfprintf_internal_r+0x818>
  801b50:	01002074 	movhi	r4,129
  801b54:	18c00404 	addi	r3,r3,16
  801b58:	10800044 	addi	r2,r2,1
  801b5c:	210ff384 	addi	r4,r4,16334
  801b60:	41000015 	stw	r4,0(r8)
  801b64:	45800115 	stw	r22,4(r8)
  801b68:	d8c02015 	stw	r3,128(sp)
  801b6c:	d8801f15 	stw	r2,124(sp)
  801b70:	e0bff40e 	bge	fp,r2,801b44 <__alt_mem_descriptor_memory+0xff781b44>
  801b74:	d9801e04 	addi	r6,sp,120
  801b78:	b80b883a 	mov	r5,r23
  801b7c:	8009883a 	mov	r4,r16
  801b80:	0807d740 	call	807d74 <__sprint_r>
  801b84:	103f011e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  801b88:	8c7ffc04 	addi	r17,r17,-16
  801b8c:	d8c02017 	ldw	r3,128(sp)
  801b90:	d8801f17 	ldw	r2,124(sp)
  801b94:	da000404 	addi	r8,sp,16
  801b98:	b47fed16 	blt	r22,r17,801b50 <__alt_mem_descriptor_memory+0xff781b50>
  801b9c:	9021883a 	mov	r16,r18
  801ba0:	9825883a 	mov	r18,r19
  801ba4:	8827883a 	mov	r19,r17
  801ba8:	dc403b17 	ldw	r17,236(sp)
  801bac:	d9403517 	ldw	r5,212(sp)
  801bb0:	98c7883a 	add	r3,r19,r3
  801bb4:	10800044 	addi	r2,r2,1
  801bb8:	41400015 	stw	r5,0(r8)
  801bbc:	44c00115 	stw	r19,4(r8)
  801bc0:	d8c02015 	stw	r3,128(sp)
  801bc4:	d8801f15 	stw	r2,124(sp)
  801bc8:	010001c4 	movi	r4,7
  801bcc:	2082a316 	blt	r4,r2,80265c <___vfprintf_internal_r+0x12d8>
  801bd0:	df002787 	ldb	fp,158(sp)
  801bd4:	42000204 	addi	r8,r8,8
  801bd8:	e0000c26 	beq	fp,zero,801c0c <___vfprintf_internal_r+0x888>
  801bdc:	d8801f17 	ldw	r2,124(sp)
  801be0:	d9002784 	addi	r4,sp,158
  801be4:	18c00044 	addi	r3,r3,1
  801be8:	10800044 	addi	r2,r2,1
  801bec:	41000015 	stw	r4,0(r8)
  801bf0:	01000044 	movi	r4,1
  801bf4:	41000115 	stw	r4,4(r8)
  801bf8:	d8c02015 	stw	r3,128(sp)
  801bfc:	d8801f15 	stw	r2,124(sp)
  801c00:	010001c4 	movi	r4,7
  801c04:	20823c16 	blt	r4,r2,8024f8 <___vfprintf_internal_r+0x1174>
  801c08:	42000204 	addi	r8,r8,8
  801c0c:	d8802b17 	ldw	r2,172(sp)
  801c10:	10000c26 	beq	r2,zero,801c44 <___vfprintf_internal_r+0x8c0>
  801c14:	d8801f17 	ldw	r2,124(sp)
  801c18:	d9002704 	addi	r4,sp,156
  801c1c:	18c00084 	addi	r3,r3,2
  801c20:	10800044 	addi	r2,r2,1
  801c24:	41000015 	stw	r4,0(r8)
  801c28:	01000084 	movi	r4,2
  801c2c:	41000115 	stw	r4,4(r8)
  801c30:	d8c02015 	stw	r3,128(sp)
  801c34:	d8801f15 	stw	r2,124(sp)
  801c38:	010001c4 	movi	r4,7
  801c3c:	20823616 	blt	r4,r2,802518 <___vfprintf_internal_r+0x1194>
  801c40:	42000204 	addi	r8,r8,8
  801c44:	d9003017 	ldw	r4,192(sp)
  801c48:	00802004 	movi	r2,128
  801c4c:	20819926 	beq	r4,r2,8022b4 <___vfprintf_internal_r+0xf30>
  801c50:	d9402917 	ldw	r5,164(sp)
  801c54:	d8802e17 	ldw	r2,184(sp)
  801c58:	28adc83a 	sub	r22,r5,r2
  801c5c:	0580310e 	bge	zero,r22,801d24 <___vfprintf_internal_r+0x9a0>
  801c60:	07000404 	movi	fp,16
  801c64:	d8801f17 	ldw	r2,124(sp)
  801c68:	e584140e 	bge	fp,r22,802cbc <___vfprintf_internal_r+0x1938>
  801c6c:	01402074 	movhi	r5,129
  801c70:	294fef84 	addi	r5,r5,16318
  801c74:	dc402915 	stw	r17,164(sp)
  801c78:	d9402b15 	stw	r5,172(sp)
  801c7c:	b023883a 	mov	r17,r22
  801c80:	04c001c4 	movi	r19,7
  801c84:	a82d883a 	mov	r22,r21
  801c88:	902b883a 	mov	r21,r18
  801c8c:	8025883a 	mov	r18,r16
  801c90:	dc002c17 	ldw	r16,176(sp)
  801c94:	00000306 	br	801ca4 <___vfprintf_internal_r+0x920>
  801c98:	8c7ffc04 	addi	r17,r17,-16
  801c9c:	42000204 	addi	r8,r8,8
  801ca0:	e440110e 	bge	fp,r17,801ce8 <___vfprintf_internal_r+0x964>
  801ca4:	18c00404 	addi	r3,r3,16
  801ca8:	10800044 	addi	r2,r2,1
  801cac:	45000015 	stw	r20,0(r8)
  801cb0:	47000115 	stw	fp,4(r8)
  801cb4:	d8c02015 	stw	r3,128(sp)
  801cb8:	d8801f15 	stw	r2,124(sp)
  801cbc:	98bff60e 	bge	r19,r2,801c98 <__alt_mem_descriptor_memory+0xff781c98>
  801cc0:	d9801e04 	addi	r6,sp,120
  801cc4:	b80b883a 	mov	r5,r23
  801cc8:	8009883a 	mov	r4,r16
  801ccc:	0807d740 	call	807d74 <__sprint_r>
  801cd0:	103eae1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  801cd4:	8c7ffc04 	addi	r17,r17,-16
  801cd8:	d8c02017 	ldw	r3,128(sp)
  801cdc:	d8801f17 	ldw	r2,124(sp)
  801ce0:	da000404 	addi	r8,sp,16
  801ce4:	e47fef16 	blt	fp,r17,801ca4 <__alt_mem_descriptor_memory+0xff781ca4>
  801ce8:	9021883a 	mov	r16,r18
  801cec:	a825883a 	mov	r18,r21
  801cf0:	b02b883a 	mov	r21,r22
  801cf4:	882d883a 	mov	r22,r17
  801cf8:	dc402917 	ldw	r17,164(sp)
  801cfc:	d9002b17 	ldw	r4,172(sp)
  801d00:	1d87883a 	add	r3,r3,r22
  801d04:	10800044 	addi	r2,r2,1
  801d08:	41000015 	stw	r4,0(r8)
  801d0c:	45800115 	stw	r22,4(r8)
  801d10:	d8c02015 	stw	r3,128(sp)
  801d14:	d8801f15 	stw	r2,124(sp)
  801d18:	010001c4 	movi	r4,7
  801d1c:	2081ee16 	blt	r4,r2,8024d8 <___vfprintf_internal_r+0x1154>
  801d20:	42000204 	addi	r8,r8,8
  801d24:	9080400c 	andi	r2,r18,256
  801d28:	1001181e 	bne	r2,zero,80218c <___vfprintf_internal_r+0xe08>
  801d2c:	d9402e17 	ldw	r5,184(sp)
  801d30:	d8801f17 	ldw	r2,124(sp)
  801d34:	44000015 	stw	r16,0(r8)
  801d38:	1947883a 	add	r3,r3,r5
  801d3c:	10800044 	addi	r2,r2,1
  801d40:	41400115 	stw	r5,4(r8)
  801d44:	d8c02015 	stw	r3,128(sp)
  801d48:	d8801f15 	stw	r2,124(sp)
  801d4c:	010001c4 	movi	r4,7
  801d50:	2081d316 	blt	r4,r2,8024a0 <___vfprintf_internal_r+0x111c>
  801d54:	42000204 	addi	r8,r8,8
  801d58:	9480010c 	andi	r18,r18,4
  801d5c:	90003226 	beq	r18,zero,801e28 <___vfprintf_internal_r+0xaa4>
  801d60:	d9403117 	ldw	r5,196(sp)
  801d64:	d8802a17 	ldw	r2,168(sp)
  801d68:	28a1c83a 	sub	r16,r5,r2
  801d6c:	04002e0e 	bge	zero,r16,801e28 <___vfprintf_internal_r+0xaa4>
  801d70:	04400404 	movi	r17,16
  801d74:	d8801f17 	ldw	r2,124(sp)
  801d78:	8c04a20e 	bge	r17,r16,803004 <___vfprintf_internal_r+0x1c80>
  801d7c:	01402074 	movhi	r5,129
  801d80:	294ff384 	addi	r5,r5,16334
  801d84:	d9403515 	stw	r5,212(sp)
  801d88:	048001c4 	movi	r18,7
  801d8c:	dcc02c17 	ldw	r19,176(sp)
  801d90:	00000306 	br	801da0 <___vfprintf_internal_r+0xa1c>
  801d94:	843ffc04 	addi	r16,r16,-16
  801d98:	42000204 	addi	r8,r8,8
  801d9c:	8c00130e 	bge	r17,r16,801dec <___vfprintf_internal_r+0xa68>
  801da0:	01002074 	movhi	r4,129
  801da4:	18c00404 	addi	r3,r3,16
  801da8:	10800044 	addi	r2,r2,1
  801dac:	210ff384 	addi	r4,r4,16334
  801db0:	41000015 	stw	r4,0(r8)
  801db4:	44400115 	stw	r17,4(r8)
  801db8:	d8c02015 	stw	r3,128(sp)
  801dbc:	d8801f15 	stw	r2,124(sp)
  801dc0:	90bff40e 	bge	r18,r2,801d94 <__alt_mem_descriptor_memory+0xff781d94>
  801dc4:	d9801e04 	addi	r6,sp,120
  801dc8:	b80b883a 	mov	r5,r23
  801dcc:	9809883a 	mov	r4,r19
  801dd0:	0807d740 	call	807d74 <__sprint_r>
  801dd4:	103e6d1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  801dd8:	843ffc04 	addi	r16,r16,-16
  801ddc:	d8c02017 	ldw	r3,128(sp)
  801de0:	d8801f17 	ldw	r2,124(sp)
  801de4:	da000404 	addi	r8,sp,16
  801de8:	8c3fed16 	blt	r17,r16,801da0 <__alt_mem_descriptor_memory+0xff781da0>
  801dec:	d9403517 	ldw	r5,212(sp)
  801df0:	1c07883a 	add	r3,r3,r16
  801df4:	10800044 	addi	r2,r2,1
  801df8:	41400015 	stw	r5,0(r8)
  801dfc:	44000115 	stw	r16,4(r8)
  801e00:	d8c02015 	stw	r3,128(sp)
  801e04:	d8801f15 	stw	r2,124(sp)
  801e08:	010001c4 	movi	r4,7
  801e0c:	2080060e 	bge	r4,r2,801e28 <___vfprintf_internal_r+0xaa4>
  801e10:	d9002c17 	ldw	r4,176(sp)
  801e14:	d9801e04 	addi	r6,sp,120
  801e18:	b80b883a 	mov	r5,r23
  801e1c:	0807d740 	call	807d74 <__sprint_r>
  801e20:	103e5a1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  801e24:	d8c02017 	ldw	r3,128(sp)
  801e28:	d8803117 	ldw	r2,196(sp)
  801e2c:	d9002a17 	ldw	r4,168(sp)
  801e30:	1100010e 	bge	r2,r4,801e38 <___vfprintf_internal_r+0xab4>
  801e34:	2005883a 	mov	r2,r4
  801e38:	d9402f17 	ldw	r5,188(sp)
  801e3c:	288b883a 	add	r5,r5,r2
  801e40:	d9402f15 	stw	r5,188(sp)
  801e44:	18019e1e 	bne	r3,zero,8024c0 <___vfprintf_internal_r+0x113c>
  801e48:	a8800007 	ldb	r2,0(r21)
  801e4c:	d8001f15 	stw	zero,124(sp)
  801e50:	da000404 	addi	r8,sp,16
  801e54:	103d851e 	bne	r2,zero,80146c <__alt_mem_descriptor_memory+0xff78146c>
  801e58:	a821883a 	mov	r16,r21
  801e5c:	003d9b06 	br	8014cc <__alt_mem_descriptor_memory+0xff7814cc>
  801e60:	18c03fcc 	andi	r3,r3,255
  801e64:	1805c11e 	bne	r3,zero,80356c <___vfprintf_internal_r+0x21e8>
  801e68:	94800414 	ori	r18,r18,16
  801e6c:	9080080c 	andi	r2,r18,32
  801e70:	10020c26 	beq	r2,zero,8026a4 <___vfprintf_internal_r+0x1320>
  801e74:	d8802d17 	ldw	r2,180(sp)
  801e78:	d9002917 	ldw	r4,164(sp)
  801e7c:	d8002785 	stb	zero,158(sp)
  801e80:	10c00204 	addi	r3,r2,8
  801e84:	14c00017 	ldw	r19,0(r2)
  801e88:	15800117 	ldw	r22,4(r2)
  801e8c:	20040f16 	blt	r4,zero,802ecc <___vfprintf_internal_r+0x1b48>
  801e90:	013fdfc4 	movi	r4,-129
  801e94:	9d84b03a 	or	r2,r19,r22
  801e98:	d8c02d15 	stw	r3,180(sp)
  801e9c:	9124703a 	and	r18,r18,r4
  801ea0:	0039883a 	mov	fp,zero
  801ea4:	103e891e 	bne	r2,zero,8018cc <__alt_mem_descriptor_memory+0xff7818cc>
  801ea8:	d9002917 	ldw	r4,164(sp)
  801eac:	2002c11e 	bne	r4,zero,8029b4 <___vfprintf_internal_r+0x1630>
  801eb0:	d8002915 	stw	zero,164(sp)
  801eb4:	d8002e15 	stw	zero,184(sp)
  801eb8:	dc001e04 	addi	r16,sp,120
  801ebc:	003ef806 	br	801aa0 <__alt_mem_descriptor_memory+0xff781aa0>
  801ec0:	18c03fcc 	andi	r3,r3,255
  801ec4:	18059d1e 	bne	r3,zero,80353c <___vfprintf_internal_r+0x21b8>
  801ec8:	01402074 	movhi	r5,129
  801ecc:	294fe304 	addi	r5,r5,16268
  801ed0:	d9403915 	stw	r5,228(sp)
  801ed4:	9080080c 	andi	r2,r18,32
  801ed8:	10005226 	beq	r2,zero,802024 <___vfprintf_internal_r+0xca0>
  801edc:	d8802d17 	ldw	r2,180(sp)
  801ee0:	14c00017 	ldw	r19,0(r2)
  801ee4:	15800117 	ldw	r22,4(r2)
  801ee8:	10800204 	addi	r2,r2,8
  801eec:	d8802d15 	stw	r2,180(sp)
  801ef0:	9080004c 	andi	r2,r18,1
  801ef4:	10019026 	beq	r2,zero,802538 <___vfprintf_internal_r+0x11b4>
  801ef8:	9d84b03a 	or	r2,r19,r22
  801efc:	10036926 	beq	r2,zero,802ca4 <___vfprintf_internal_r+0x1920>
  801f00:	d8c02917 	ldw	r3,164(sp)
  801f04:	00800c04 	movi	r2,48
  801f08:	d8802705 	stb	r2,156(sp)
  801f0c:	dc402745 	stb	r17,157(sp)
  801f10:	d8002785 	stb	zero,158(sp)
  801f14:	90800094 	ori	r2,r18,2
  801f18:	18045d16 	blt	r3,zero,803090 <___vfprintf_internal_r+0x1d0c>
  801f1c:	00bfdfc4 	movi	r2,-129
  801f20:	90a4703a 	and	r18,r18,r2
  801f24:	94800094 	ori	r18,r18,2
  801f28:	0039883a 	mov	fp,zero
  801f2c:	d9003917 	ldw	r4,228(sp)
  801f30:	dc001e04 	addi	r16,sp,120
  801f34:	988003cc 	andi	r2,r19,15
  801f38:	b006973a 	slli	r3,r22,28
  801f3c:	2085883a 	add	r2,r4,r2
  801f40:	9826d13a 	srli	r19,r19,4
  801f44:	10800003 	ldbu	r2,0(r2)
  801f48:	b02cd13a 	srli	r22,r22,4
  801f4c:	843fffc4 	addi	r16,r16,-1
  801f50:	1ce6b03a 	or	r19,r3,r19
  801f54:	80800005 	stb	r2,0(r16)
  801f58:	9d84b03a 	or	r2,r19,r22
  801f5c:	103ff51e 	bne	r2,zero,801f34 <__alt_mem_descriptor_memory+0xff781f34>
  801f60:	d8c02817 	ldw	r3,160(sp)
  801f64:	1c07c83a 	sub	r3,r3,r16
  801f68:	d8c02e15 	stw	r3,184(sp)
  801f6c:	003ecc06 	br	801aa0 <__alt_mem_descriptor_memory+0xff781aa0>
  801f70:	18c03fcc 	andi	r3,r3,255
  801f74:	183e9f26 	beq	r3,zero,8019f4 <__alt_mem_descriptor_memory+0xff7819f4>
  801f78:	d9c02785 	stb	r7,158(sp)
  801f7c:	003e9d06 	br	8019f4 <__alt_mem_descriptor_memory+0xff7819f4>
  801f80:	00c00044 	movi	r3,1
  801f84:	01c00ac4 	movi	r7,43
  801f88:	ac400007 	ldb	r17,0(r21)
  801f8c:	003d5e06 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  801f90:	94800814 	ori	r18,r18,32
  801f94:	ac400007 	ldb	r17,0(r21)
  801f98:	003d5b06 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  801f9c:	d8c02d17 	ldw	r3,180(sp)
  801fa0:	d8002785 	stb	zero,158(sp)
  801fa4:	1c000017 	ldw	r16,0(r3)
  801fa8:	1cc00104 	addi	r19,r3,4
  801fac:	80041926 	beq	r16,zero,803014 <___vfprintf_internal_r+0x1c90>
  801fb0:	d9002917 	ldw	r4,164(sp)
  801fb4:	2003d016 	blt	r4,zero,802ef8 <___vfprintf_internal_r+0x1b74>
  801fb8:	200d883a 	mov	r6,r4
  801fbc:	000b883a 	mov	r5,zero
  801fc0:	8009883a 	mov	r4,r16
  801fc4:	da003d15 	stw	r8,244(sp)
  801fc8:	08066d80 	call	8066d8 <memchr>
  801fcc:	da003d17 	ldw	r8,244(sp)
  801fd0:	10045426 	beq	r2,zero,803124 <___vfprintf_internal_r+0x1da0>
  801fd4:	1405c83a 	sub	r2,r2,r16
  801fd8:	d8802e15 	stw	r2,184(sp)
  801fdc:	1003cc16 	blt	r2,zero,802f10 <___vfprintf_internal_r+0x1b8c>
  801fe0:	df002783 	ldbu	fp,158(sp)
  801fe4:	d8802a15 	stw	r2,168(sp)
  801fe8:	dcc02d15 	stw	r19,180(sp)
  801fec:	d8002915 	stw	zero,164(sp)
  801ff0:	d8003215 	stw	zero,200(sp)
  801ff4:	003eb006 	br	801ab8 <__alt_mem_descriptor_memory+0xff781ab8>
  801ff8:	18c03fcc 	andi	r3,r3,255
  801ffc:	183f9b26 	beq	r3,zero,801e6c <__alt_mem_descriptor_memory+0xff781e6c>
  802000:	d9c02785 	stb	r7,158(sp)
  802004:	003f9906 	br	801e6c <__alt_mem_descriptor_memory+0xff781e6c>
  802008:	18c03fcc 	andi	r3,r3,255
  80200c:	1805551e 	bne	r3,zero,803564 <___vfprintf_internal_r+0x21e0>
  802010:	01402074 	movhi	r5,129
  802014:	294fe804 	addi	r5,r5,16288
  802018:	d9403915 	stw	r5,228(sp)
  80201c:	9080080c 	andi	r2,r18,32
  802020:	103fae1e 	bne	r2,zero,801edc <__alt_mem_descriptor_memory+0xff781edc>
  802024:	9080040c 	andi	r2,r18,16
  802028:	1002de26 	beq	r2,zero,802ba4 <___vfprintf_internal_r+0x1820>
  80202c:	d8c02d17 	ldw	r3,180(sp)
  802030:	002d883a 	mov	r22,zero
  802034:	1cc00017 	ldw	r19,0(r3)
  802038:	18c00104 	addi	r3,r3,4
  80203c:	d8c02d15 	stw	r3,180(sp)
  802040:	003fab06 	br	801ef0 <__alt_mem_descriptor_memory+0xff781ef0>
  802044:	38803fcc 	andi	r2,r7,255
  802048:	1080201c 	xori	r2,r2,128
  80204c:	10bfe004 	addi	r2,r2,-128
  802050:	1002d21e 	bne	r2,zero,802b9c <___vfprintf_internal_r+0x1818>
  802054:	00c00044 	movi	r3,1
  802058:	01c00804 	movi	r7,32
  80205c:	ac400007 	ldb	r17,0(r21)
  802060:	003d2906 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  802064:	94800054 	ori	r18,r18,1
  802068:	ac400007 	ldb	r17,0(r21)
  80206c:	003d2606 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  802070:	18c03fcc 	andi	r3,r3,255
  802074:	183e0526 	beq	r3,zero,80188c <__alt_mem_descriptor_memory+0xff78188c>
  802078:	d9c02785 	stb	r7,158(sp)
  80207c:	003e0306 	br	80188c <__alt_mem_descriptor_memory+0xff78188c>
  802080:	94801014 	ori	r18,r18,64
  802084:	ac400007 	ldb	r17,0(r21)
  802088:	003d1f06 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  80208c:	ac400007 	ldb	r17,0(r21)
  802090:	8a438726 	beq	r17,r9,802eb0 <___vfprintf_internal_r+0x1b2c>
  802094:	94800414 	ori	r18,r18,16
  802098:	003d1b06 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  80209c:	18c03fcc 	andi	r3,r3,255
  8020a0:	1805341e 	bne	r3,zero,803574 <___vfprintf_internal_r+0x21f0>
  8020a4:	9080080c 	andi	r2,r18,32
  8020a8:	1002cd26 	beq	r2,zero,802be0 <___vfprintf_internal_r+0x185c>
  8020ac:	d9402d17 	ldw	r5,180(sp)
  8020b0:	d9002f17 	ldw	r4,188(sp)
  8020b4:	28800017 	ldw	r2,0(r5)
  8020b8:	2007d7fa 	srai	r3,r4,31
  8020bc:	29400104 	addi	r5,r5,4
  8020c0:	d9402d15 	stw	r5,180(sp)
  8020c4:	11000015 	stw	r4,0(r2)
  8020c8:	10c00115 	stw	r3,4(r2)
  8020cc:	003ce506 	br	801464 <__alt_mem_descriptor_memory+0xff781464>
  8020d0:	d8c02d17 	ldw	r3,180(sp)
  8020d4:	d9002d17 	ldw	r4,180(sp)
  8020d8:	d8002785 	stb	zero,158(sp)
  8020dc:	18800017 	ldw	r2,0(r3)
  8020e0:	21000104 	addi	r4,r4,4
  8020e4:	00c00044 	movi	r3,1
  8020e8:	d8c02a15 	stw	r3,168(sp)
  8020ec:	d8801405 	stb	r2,80(sp)
  8020f0:	d9002d15 	stw	r4,180(sp)
  8020f4:	d8c02e15 	stw	r3,184(sp)
  8020f8:	d8002915 	stw	zero,164(sp)
  8020fc:	d8003215 	stw	zero,200(sp)
  802100:	dc001404 	addi	r16,sp,80
  802104:	0039883a 	mov	fp,zero
  802108:	003e7206 	br	801ad4 <__alt_mem_descriptor_memory+0xff781ad4>
  80210c:	01002074 	movhi	r4,129
  802110:	210fe804 	addi	r4,r4,16288
  802114:	0039883a 	mov	fp,zero
  802118:	d9003915 	stw	r4,228(sp)
  80211c:	04401e04 	movi	r17,120
  802120:	003f8206 	br	801f2c <__alt_mem_descriptor_memory+0xff781f2c>
  802124:	18c03fcc 	andi	r3,r3,255
  802128:	1805061e 	bne	r3,zero,803544 <___vfprintf_internal_r+0x21c0>
  80212c:	883d9126 	beq	r17,zero,801774 <__alt_mem_descriptor_memory+0xff781774>
  802130:	00c00044 	movi	r3,1
  802134:	d8c02a15 	stw	r3,168(sp)
  802138:	dc401405 	stb	r17,80(sp)
  80213c:	d8002785 	stb	zero,158(sp)
  802140:	003fec06 	br	8020f4 <__alt_mem_descriptor_memory+0xff7820f4>
  802144:	01402074 	movhi	r5,129
  802148:	294fe804 	addi	r5,r5,16288
  80214c:	d9403915 	stw	r5,228(sp)
  802150:	d8c02d15 	stw	r3,180(sp)
  802154:	1025883a 	mov	r18,r2
  802158:	04401e04 	movi	r17,120
  80215c:	9d84b03a 	or	r2,r19,r22
  802160:	1000fc1e 	bne	r2,zero,802554 <___vfprintf_internal_r+0x11d0>
  802164:	0039883a 	mov	fp,zero
  802168:	00800084 	movi	r2,2
  80216c:	10803fcc 	andi	r2,r2,255
  802170:	00c00044 	movi	r3,1
  802174:	10c20f26 	beq	r2,r3,8029b4 <___vfprintf_internal_r+0x1630>
  802178:	00c00084 	movi	r3,2
  80217c:	10fd6326 	beq	r2,r3,80170c <__alt_mem_descriptor_memory+0xff78170c>
  802180:	003e2d06 	br	801a38 <__alt_mem_descriptor_memory+0xff781a38>
  802184:	d8c02017 	ldw	r3,128(sp)
  802188:	003e9306 	br	801bd8 <__alt_mem_descriptor_memory+0xff781bd8>
  80218c:	00801944 	movi	r2,101
  802190:	14407e0e 	bge	r2,r17,80238c <___vfprintf_internal_r+0x1008>
  802194:	d9003617 	ldw	r4,216(sp)
  802198:	d9403817 	ldw	r5,224(sp)
  80219c:	000d883a 	mov	r6,zero
  8021a0:	000f883a 	mov	r7,zero
  8021a4:	d8c03c15 	stw	r3,240(sp)
  8021a8:	da003d15 	stw	r8,244(sp)
  8021ac:	080c5680 	call	80c568 <__eqdf2>
  8021b0:	d8c03c17 	ldw	r3,240(sp)
  8021b4:	da003d17 	ldw	r8,244(sp)
  8021b8:	1000f71e 	bne	r2,zero,802598 <___vfprintf_internal_r+0x1214>
  8021bc:	d8801f17 	ldw	r2,124(sp)
  8021c0:	01002074 	movhi	r4,129
  8021c4:	210fef04 	addi	r4,r4,16316
  8021c8:	18c00044 	addi	r3,r3,1
  8021cc:	10800044 	addi	r2,r2,1
  8021d0:	41000015 	stw	r4,0(r8)
  8021d4:	01000044 	movi	r4,1
  8021d8:	41000115 	stw	r4,4(r8)
  8021dc:	d8c02015 	stw	r3,128(sp)
  8021e0:	d8801f15 	stw	r2,124(sp)
  8021e4:	010001c4 	movi	r4,7
  8021e8:	2082b816 	blt	r4,r2,802ccc <___vfprintf_internal_r+0x1948>
  8021ec:	42000204 	addi	r8,r8,8
  8021f0:	d8802617 	ldw	r2,152(sp)
  8021f4:	d9403317 	ldw	r5,204(sp)
  8021f8:	11400216 	blt	r2,r5,802204 <___vfprintf_internal_r+0xe80>
  8021fc:	9080004c 	andi	r2,r18,1
  802200:	103ed526 	beq	r2,zero,801d58 <__alt_mem_descriptor_memory+0xff781d58>
  802204:	d8803717 	ldw	r2,220(sp)
  802208:	d9003417 	ldw	r4,208(sp)
  80220c:	d9403717 	ldw	r5,220(sp)
  802210:	1887883a 	add	r3,r3,r2
  802214:	d8801f17 	ldw	r2,124(sp)
  802218:	41000015 	stw	r4,0(r8)
  80221c:	41400115 	stw	r5,4(r8)
  802220:	10800044 	addi	r2,r2,1
  802224:	d8c02015 	stw	r3,128(sp)
  802228:	d8801f15 	stw	r2,124(sp)
  80222c:	010001c4 	movi	r4,7
  802230:	20832916 	blt	r4,r2,802ed8 <___vfprintf_internal_r+0x1b54>
  802234:	42000204 	addi	r8,r8,8
  802238:	d8803317 	ldw	r2,204(sp)
  80223c:	143fffc4 	addi	r16,r2,-1
  802240:	043ec50e 	bge	zero,r16,801d58 <__alt_mem_descriptor_memory+0xff781d58>
  802244:	04400404 	movi	r17,16
  802248:	d8801f17 	ldw	r2,124(sp)
  80224c:	8c00880e 	bge	r17,r16,802470 <___vfprintf_internal_r+0x10ec>
  802250:	01402074 	movhi	r5,129
  802254:	294fef84 	addi	r5,r5,16318
  802258:	d9402b15 	stw	r5,172(sp)
  80225c:	058001c4 	movi	r22,7
  802260:	dcc02c17 	ldw	r19,176(sp)
  802264:	00000306 	br	802274 <___vfprintf_internal_r+0xef0>
  802268:	42000204 	addi	r8,r8,8
  80226c:	843ffc04 	addi	r16,r16,-16
  802270:	8c00820e 	bge	r17,r16,80247c <___vfprintf_internal_r+0x10f8>
  802274:	18c00404 	addi	r3,r3,16
  802278:	10800044 	addi	r2,r2,1
  80227c:	45000015 	stw	r20,0(r8)
  802280:	44400115 	stw	r17,4(r8)
  802284:	d8c02015 	stw	r3,128(sp)
  802288:	d8801f15 	stw	r2,124(sp)
  80228c:	b0bff60e 	bge	r22,r2,802268 <__alt_mem_descriptor_memory+0xff782268>
  802290:	d9801e04 	addi	r6,sp,120
  802294:	b80b883a 	mov	r5,r23
  802298:	9809883a 	mov	r4,r19
  80229c:	0807d740 	call	807d74 <__sprint_r>
  8022a0:	103d3a1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8022a4:	d8c02017 	ldw	r3,128(sp)
  8022a8:	d8801f17 	ldw	r2,124(sp)
  8022ac:	da000404 	addi	r8,sp,16
  8022b0:	003fee06 	br	80226c <__alt_mem_descriptor_memory+0xff78226c>
  8022b4:	d9403117 	ldw	r5,196(sp)
  8022b8:	d8802a17 	ldw	r2,168(sp)
  8022bc:	28adc83a 	sub	r22,r5,r2
  8022c0:	05be630e 	bge	zero,r22,801c50 <__alt_mem_descriptor_memory+0xff781c50>
  8022c4:	07000404 	movi	fp,16
  8022c8:	d8801f17 	ldw	r2,124(sp)
  8022cc:	e5838f0e 	bge	fp,r22,80310c <___vfprintf_internal_r+0x1d88>
  8022d0:	01402074 	movhi	r5,129
  8022d4:	294fef84 	addi	r5,r5,16318
  8022d8:	dc403015 	stw	r17,192(sp)
  8022dc:	d9402b15 	stw	r5,172(sp)
  8022e0:	b023883a 	mov	r17,r22
  8022e4:	04c001c4 	movi	r19,7
  8022e8:	a82d883a 	mov	r22,r21
  8022ec:	902b883a 	mov	r21,r18
  8022f0:	8025883a 	mov	r18,r16
  8022f4:	dc002c17 	ldw	r16,176(sp)
  8022f8:	00000306 	br	802308 <___vfprintf_internal_r+0xf84>
  8022fc:	8c7ffc04 	addi	r17,r17,-16
  802300:	42000204 	addi	r8,r8,8
  802304:	e440110e 	bge	fp,r17,80234c <___vfprintf_internal_r+0xfc8>
  802308:	18c00404 	addi	r3,r3,16
  80230c:	10800044 	addi	r2,r2,1
  802310:	45000015 	stw	r20,0(r8)
  802314:	47000115 	stw	fp,4(r8)
  802318:	d8c02015 	stw	r3,128(sp)
  80231c:	d8801f15 	stw	r2,124(sp)
  802320:	98bff60e 	bge	r19,r2,8022fc <__alt_mem_descriptor_memory+0xff7822fc>
  802324:	d9801e04 	addi	r6,sp,120
  802328:	b80b883a 	mov	r5,r23
  80232c:	8009883a 	mov	r4,r16
  802330:	0807d740 	call	807d74 <__sprint_r>
  802334:	103d151e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802338:	8c7ffc04 	addi	r17,r17,-16
  80233c:	d8c02017 	ldw	r3,128(sp)
  802340:	d8801f17 	ldw	r2,124(sp)
  802344:	da000404 	addi	r8,sp,16
  802348:	e47fef16 	blt	fp,r17,802308 <__alt_mem_descriptor_memory+0xff782308>
  80234c:	9021883a 	mov	r16,r18
  802350:	a825883a 	mov	r18,r21
  802354:	b02b883a 	mov	r21,r22
  802358:	882d883a 	mov	r22,r17
  80235c:	dc403017 	ldw	r17,192(sp)
  802360:	d9002b17 	ldw	r4,172(sp)
  802364:	1d87883a 	add	r3,r3,r22
  802368:	10800044 	addi	r2,r2,1
  80236c:	41000015 	stw	r4,0(r8)
  802370:	45800115 	stw	r22,4(r8)
  802374:	d8c02015 	stw	r3,128(sp)
  802378:	d8801f15 	stw	r2,124(sp)
  80237c:	010001c4 	movi	r4,7
  802380:	20818e16 	blt	r4,r2,8029bc <___vfprintf_internal_r+0x1638>
  802384:	42000204 	addi	r8,r8,8
  802388:	003e3106 	br	801c50 <__alt_mem_descriptor_memory+0xff781c50>
  80238c:	d9403317 	ldw	r5,204(sp)
  802390:	00800044 	movi	r2,1
  802394:	18c00044 	addi	r3,r3,1
  802398:	1141530e 	bge	r2,r5,8028e8 <___vfprintf_internal_r+0x1564>
  80239c:	dc401f17 	ldw	r17,124(sp)
  8023a0:	00800044 	movi	r2,1
  8023a4:	40800115 	stw	r2,4(r8)
  8023a8:	8c400044 	addi	r17,r17,1
  8023ac:	44000015 	stw	r16,0(r8)
  8023b0:	d8c02015 	stw	r3,128(sp)
  8023b4:	dc401f15 	stw	r17,124(sp)
  8023b8:	008001c4 	movi	r2,7
  8023bc:	14416b16 	blt	r2,r17,80296c <___vfprintf_internal_r+0x15e8>
  8023c0:	42000204 	addi	r8,r8,8
  8023c4:	d8803717 	ldw	r2,220(sp)
  8023c8:	d9003417 	ldw	r4,208(sp)
  8023cc:	8c400044 	addi	r17,r17,1
  8023d0:	10c7883a 	add	r3,r2,r3
  8023d4:	40800115 	stw	r2,4(r8)
  8023d8:	41000015 	stw	r4,0(r8)
  8023dc:	d8c02015 	stw	r3,128(sp)
  8023e0:	dc401f15 	stw	r17,124(sp)
  8023e4:	008001c4 	movi	r2,7
  8023e8:	14416916 	blt	r2,r17,802990 <___vfprintf_internal_r+0x160c>
  8023ec:	45800204 	addi	r22,r8,8
  8023f0:	d9003617 	ldw	r4,216(sp)
  8023f4:	d9403817 	ldw	r5,224(sp)
  8023f8:	000d883a 	mov	r6,zero
  8023fc:	000f883a 	mov	r7,zero
  802400:	d8c03c15 	stw	r3,240(sp)
  802404:	080c5680 	call	80c568 <__eqdf2>
  802408:	d8c03c17 	ldw	r3,240(sp)
  80240c:	1000bc26 	beq	r2,zero,802700 <___vfprintf_internal_r+0x137c>
  802410:	d9403317 	ldw	r5,204(sp)
  802414:	84000044 	addi	r16,r16,1
  802418:	8c400044 	addi	r17,r17,1
  80241c:	28bfffc4 	addi	r2,r5,-1
  802420:	1887883a 	add	r3,r3,r2
  802424:	b0800115 	stw	r2,4(r22)
  802428:	b4000015 	stw	r16,0(r22)
  80242c:	d8c02015 	stw	r3,128(sp)
  802430:	dc401f15 	stw	r17,124(sp)
  802434:	008001c4 	movi	r2,7
  802438:	14414316 	blt	r2,r17,802948 <___vfprintf_internal_r+0x15c4>
  80243c:	b5800204 	addi	r22,r22,8
  802440:	d9003a17 	ldw	r4,232(sp)
  802444:	df0022c4 	addi	fp,sp,139
  802448:	8c400044 	addi	r17,r17,1
  80244c:	20c7883a 	add	r3,r4,r3
  802450:	b7000015 	stw	fp,0(r22)
  802454:	b1000115 	stw	r4,4(r22)
  802458:	d8c02015 	stw	r3,128(sp)
  80245c:	dc401f15 	stw	r17,124(sp)
  802460:	008001c4 	movi	r2,7
  802464:	14400e16 	blt	r2,r17,8024a0 <___vfprintf_internal_r+0x111c>
  802468:	b2000204 	addi	r8,r22,8
  80246c:	003e3a06 	br	801d58 <__alt_mem_descriptor_memory+0xff781d58>
  802470:	01002074 	movhi	r4,129
  802474:	210fef84 	addi	r4,r4,16318
  802478:	d9002b15 	stw	r4,172(sp)
  80247c:	d9002b17 	ldw	r4,172(sp)
  802480:	1c07883a 	add	r3,r3,r16
  802484:	44000115 	stw	r16,4(r8)
  802488:	41000015 	stw	r4,0(r8)
  80248c:	10800044 	addi	r2,r2,1
  802490:	d8c02015 	stw	r3,128(sp)
  802494:	d8801f15 	stw	r2,124(sp)
  802498:	010001c4 	movi	r4,7
  80249c:	20be2d0e 	bge	r4,r2,801d54 <__alt_mem_descriptor_memory+0xff781d54>
  8024a0:	d9002c17 	ldw	r4,176(sp)
  8024a4:	d9801e04 	addi	r6,sp,120
  8024a8:	b80b883a 	mov	r5,r23
  8024ac:	0807d740 	call	807d74 <__sprint_r>
  8024b0:	103cb61e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8024b4:	d8c02017 	ldw	r3,128(sp)
  8024b8:	da000404 	addi	r8,sp,16
  8024bc:	003e2606 	br	801d58 <__alt_mem_descriptor_memory+0xff781d58>
  8024c0:	d9002c17 	ldw	r4,176(sp)
  8024c4:	d9801e04 	addi	r6,sp,120
  8024c8:	b80b883a 	mov	r5,r23
  8024cc:	0807d740 	call	807d74 <__sprint_r>
  8024d0:	103e5d26 	beq	r2,zero,801e48 <__alt_mem_descriptor_memory+0xff781e48>
  8024d4:	003cad06 	br	80178c <__alt_mem_descriptor_memory+0xff78178c>
  8024d8:	d9002c17 	ldw	r4,176(sp)
  8024dc:	d9801e04 	addi	r6,sp,120
  8024e0:	b80b883a 	mov	r5,r23
  8024e4:	0807d740 	call	807d74 <__sprint_r>
  8024e8:	103ca81e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8024ec:	d8c02017 	ldw	r3,128(sp)
  8024f0:	da000404 	addi	r8,sp,16
  8024f4:	003e0b06 	br	801d24 <__alt_mem_descriptor_memory+0xff781d24>
  8024f8:	d9002c17 	ldw	r4,176(sp)
  8024fc:	d9801e04 	addi	r6,sp,120
  802500:	b80b883a 	mov	r5,r23
  802504:	0807d740 	call	807d74 <__sprint_r>
  802508:	103ca01e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  80250c:	d8c02017 	ldw	r3,128(sp)
  802510:	da000404 	addi	r8,sp,16
  802514:	003dbd06 	br	801c0c <__alt_mem_descriptor_memory+0xff781c0c>
  802518:	d9002c17 	ldw	r4,176(sp)
  80251c:	d9801e04 	addi	r6,sp,120
  802520:	b80b883a 	mov	r5,r23
  802524:	0807d740 	call	807d74 <__sprint_r>
  802528:	103c981e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  80252c:	d8c02017 	ldw	r3,128(sp)
  802530:	da000404 	addi	r8,sp,16
  802534:	003dc306 	br	801c44 <__alt_mem_descriptor_memory+0xff781c44>
  802538:	d8802917 	ldw	r2,164(sp)
  80253c:	d8002785 	stb	zero,158(sp)
  802540:	103f0616 	blt	r2,zero,80215c <__alt_mem_descriptor_memory+0xff78215c>
  802544:	00ffdfc4 	movi	r3,-129
  802548:	9d84b03a 	or	r2,r19,r22
  80254c:	90e4703a 	and	r18,r18,r3
  802550:	103c6b26 	beq	r2,zero,801700 <__alt_mem_descriptor_memory+0xff781700>
  802554:	0039883a 	mov	fp,zero
  802558:	003e7406 	br	801f2c <__alt_mem_descriptor_memory+0xff781f2c>
  80255c:	9080040c 	andi	r2,r18,16
  802560:	1001b326 	beq	r2,zero,802c30 <___vfprintf_internal_r+0x18ac>
  802564:	d9002d17 	ldw	r4,180(sp)
  802568:	d9402917 	ldw	r5,164(sp)
  80256c:	d8002785 	stb	zero,158(sp)
  802570:	20800104 	addi	r2,r4,4
  802574:	24c00017 	ldw	r19,0(r4)
  802578:	002d883a 	mov	r22,zero
  80257c:	2801b516 	blt	r5,zero,802c54 <___vfprintf_internal_r+0x18d0>
  802580:	00ffdfc4 	movi	r3,-129
  802584:	d8802d15 	stw	r2,180(sp)
  802588:	90e4703a 	and	r18,r18,r3
  80258c:	983d2726 	beq	r19,zero,801a2c <__alt_mem_descriptor_memory+0xff781a2c>
  802590:	0039883a 	mov	fp,zero
  802594:	003d2a06 	br	801a40 <__alt_mem_descriptor_memory+0xff781a40>
  802598:	dc402617 	ldw	r17,152(sp)
  80259c:	0441d30e 	bge	zero,r17,802cec <___vfprintf_internal_r+0x1968>
  8025a0:	dc403217 	ldw	r17,200(sp)
  8025a4:	d8803317 	ldw	r2,204(sp)
  8025a8:	1440010e 	bge	r2,r17,8025b0 <___vfprintf_internal_r+0x122c>
  8025ac:	1023883a 	mov	r17,r2
  8025b0:	04400a0e 	bge	zero,r17,8025dc <___vfprintf_internal_r+0x1258>
  8025b4:	d8801f17 	ldw	r2,124(sp)
  8025b8:	1c47883a 	add	r3,r3,r17
  8025bc:	44000015 	stw	r16,0(r8)
  8025c0:	10800044 	addi	r2,r2,1
  8025c4:	44400115 	stw	r17,4(r8)
  8025c8:	d8c02015 	stw	r3,128(sp)
  8025cc:	d8801f15 	stw	r2,124(sp)
  8025d0:	010001c4 	movi	r4,7
  8025d4:	20826516 	blt	r4,r2,802f6c <___vfprintf_internal_r+0x1be8>
  8025d8:	42000204 	addi	r8,r8,8
  8025dc:	88026116 	blt	r17,zero,802f64 <___vfprintf_internal_r+0x1be0>
  8025e0:	d9003217 	ldw	r4,200(sp)
  8025e4:	2463c83a 	sub	r17,r4,r17
  8025e8:	04407b0e 	bge	zero,r17,8027d8 <___vfprintf_internal_r+0x1454>
  8025ec:	05800404 	movi	r22,16
  8025f0:	d8801f17 	ldw	r2,124(sp)
  8025f4:	b4419d0e 	bge	r22,r17,802c6c <___vfprintf_internal_r+0x18e8>
  8025f8:	01002074 	movhi	r4,129
  8025fc:	210fef84 	addi	r4,r4,16318
  802600:	d9002b15 	stw	r4,172(sp)
  802604:	070001c4 	movi	fp,7
  802608:	dcc02c17 	ldw	r19,176(sp)
  80260c:	00000306 	br	80261c <___vfprintf_internal_r+0x1298>
  802610:	42000204 	addi	r8,r8,8
  802614:	8c7ffc04 	addi	r17,r17,-16
  802618:	b441970e 	bge	r22,r17,802c78 <___vfprintf_internal_r+0x18f4>
  80261c:	18c00404 	addi	r3,r3,16
  802620:	10800044 	addi	r2,r2,1
  802624:	45000015 	stw	r20,0(r8)
  802628:	45800115 	stw	r22,4(r8)
  80262c:	d8c02015 	stw	r3,128(sp)
  802630:	d8801f15 	stw	r2,124(sp)
  802634:	e0bff60e 	bge	fp,r2,802610 <__alt_mem_descriptor_memory+0xff782610>
  802638:	d9801e04 	addi	r6,sp,120
  80263c:	b80b883a 	mov	r5,r23
  802640:	9809883a 	mov	r4,r19
  802644:	0807d740 	call	807d74 <__sprint_r>
  802648:	103c501e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  80264c:	d8c02017 	ldw	r3,128(sp)
  802650:	d8801f17 	ldw	r2,124(sp)
  802654:	da000404 	addi	r8,sp,16
  802658:	003fee06 	br	802614 <__alt_mem_descriptor_memory+0xff782614>
  80265c:	d9002c17 	ldw	r4,176(sp)
  802660:	d9801e04 	addi	r6,sp,120
  802664:	b80b883a 	mov	r5,r23
  802668:	0807d740 	call	807d74 <__sprint_r>
  80266c:	103c471e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802670:	d8c02017 	ldw	r3,128(sp)
  802674:	df002787 	ldb	fp,158(sp)
  802678:	da000404 	addi	r8,sp,16
  80267c:	003d5606 	br	801bd8 <__alt_mem_descriptor_memory+0xff781bd8>
  802680:	9080040c 	andi	r2,r18,16
  802684:	10016126 	beq	r2,zero,802c0c <___vfprintf_internal_r+0x1888>
  802688:	d8802d17 	ldw	r2,180(sp)
  80268c:	14c00017 	ldw	r19,0(r2)
  802690:	10800104 	addi	r2,r2,4
  802694:	d8802d15 	stw	r2,180(sp)
  802698:	982dd7fa 	srai	r22,r19,31
  80269c:	b005883a 	mov	r2,r22
  8026a0:	003c8206 	br	8018ac <__alt_mem_descriptor_memory+0xff7818ac>
  8026a4:	9080040c 	andi	r2,r18,16
  8026a8:	10003526 	beq	r2,zero,802780 <___vfprintf_internal_r+0x13fc>
  8026ac:	d9402d17 	ldw	r5,180(sp)
  8026b0:	d8c02917 	ldw	r3,164(sp)
  8026b4:	d8002785 	stb	zero,158(sp)
  8026b8:	28800104 	addi	r2,r5,4
  8026bc:	2cc00017 	ldw	r19,0(r5)
  8026c0:	002d883a 	mov	r22,zero
  8026c4:	18003716 	blt	r3,zero,8027a4 <___vfprintf_internal_r+0x1420>
  8026c8:	00ffdfc4 	movi	r3,-129
  8026cc:	d8802d15 	stw	r2,180(sp)
  8026d0:	90e4703a 	and	r18,r18,r3
  8026d4:	0039883a 	mov	fp,zero
  8026d8:	983df326 	beq	r19,zero,801ea8 <__alt_mem_descriptor_memory+0xff781ea8>
  8026dc:	00800244 	movi	r2,9
  8026e0:	14fc7b36 	bltu	r2,r19,8018d0 <__alt_mem_descriptor_memory+0xff7818d0>
  8026e4:	d8c02817 	ldw	r3,160(sp)
  8026e8:	dc001dc4 	addi	r16,sp,119
  8026ec:	9cc00c04 	addi	r19,r19,48
  8026f0:	1c07c83a 	sub	r3,r3,r16
  8026f4:	dcc01dc5 	stb	r19,119(sp)
  8026f8:	d8c02e15 	stw	r3,184(sp)
  8026fc:	003ce806 	br	801aa0 <__alt_mem_descriptor_memory+0xff781aa0>
  802700:	d8803317 	ldw	r2,204(sp)
  802704:	143fffc4 	addi	r16,r2,-1
  802708:	043f4d0e 	bge	zero,r16,802440 <__alt_mem_descriptor_memory+0xff782440>
  80270c:	07000404 	movi	fp,16
  802710:	e400810e 	bge	fp,r16,802918 <___vfprintf_internal_r+0x1594>
  802714:	01402074 	movhi	r5,129
  802718:	294fef84 	addi	r5,r5,16318
  80271c:	d9402b15 	stw	r5,172(sp)
  802720:	01c001c4 	movi	r7,7
  802724:	dcc02c17 	ldw	r19,176(sp)
  802728:	00000306 	br	802738 <___vfprintf_internal_r+0x13b4>
  80272c:	b5800204 	addi	r22,r22,8
  802730:	843ffc04 	addi	r16,r16,-16
  802734:	e4007b0e 	bge	fp,r16,802924 <___vfprintf_internal_r+0x15a0>
  802738:	18c00404 	addi	r3,r3,16
  80273c:	8c400044 	addi	r17,r17,1
  802740:	b5000015 	stw	r20,0(r22)
  802744:	b7000115 	stw	fp,4(r22)
  802748:	d8c02015 	stw	r3,128(sp)
  80274c:	dc401f15 	stw	r17,124(sp)
  802750:	3c7ff60e 	bge	r7,r17,80272c <__alt_mem_descriptor_memory+0xff78272c>
  802754:	d9801e04 	addi	r6,sp,120
  802758:	b80b883a 	mov	r5,r23
  80275c:	9809883a 	mov	r4,r19
  802760:	d9c03c15 	stw	r7,240(sp)
  802764:	0807d740 	call	807d74 <__sprint_r>
  802768:	d9c03c17 	ldw	r7,240(sp)
  80276c:	103c071e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802770:	d8c02017 	ldw	r3,128(sp)
  802774:	dc401f17 	ldw	r17,124(sp)
  802778:	dd800404 	addi	r22,sp,16
  80277c:	003fec06 	br	802730 <__alt_mem_descriptor_memory+0xff782730>
  802780:	9080100c 	andi	r2,r18,64
  802784:	d8002785 	stb	zero,158(sp)
  802788:	10010e26 	beq	r2,zero,802bc4 <___vfprintf_internal_r+0x1840>
  80278c:	d9002d17 	ldw	r4,180(sp)
  802790:	d9402917 	ldw	r5,164(sp)
  802794:	002d883a 	mov	r22,zero
  802798:	20800104 	addi	r2,r4,4
  80279c:	24c0000b 	ldhu	r19,0(r4)
  8027a0:	283fc90e 	bge	r5,zero,8026c8 <__alt_mem_descriptor_memory+0xff7826c8>
  8027a4:	d8802d15 	stw	r2,180(sp)
  8027a8:	0039883a 	mov	fp,zero
  8027ac:	9d84b03a 	or	r2,r19,r22
  8027b0:	103c461e 	bne	r2,zero,8018cc <__alt_mem_descriptor_memory+0xff7818cc>
  8027b4:	00800044 	movi	r2,1
  8027b8:	003e6c06 	br	80216c <__alt_mem_descriptor_memory+0xff78216c>
  8027bc:	d9002c17 	ldw	r4,176(sp)
  8027c0:	d9801e04 	addi	r6,sp,120
  8027c4:	b80b883a 	mov	r5,r23
  8027c8:	0807d740 	call	807d74 <__sprint_r>
  8027cc:	103bef1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8027d0:	d8c02017 	ldw	r3,128(sp)
  8027d4:	da000404 	addi	r8,sp,16
  8027d8:	d9003217 	ldw	r4,200(sp)
  8027dc:	d8802617 	ldw	r2,152(sp)
  8027e0:	d9403317 	ldw	r5,204(sp)
  8027e4:	8123883a 	add	r17,r16,r4
  8027e8:	11400216 	blt	r2,r5,8027f4 <___vfprintf_internal_r+0x1470>
  8027ec:	9100004c 	andi	r4,r18,1
  8027f0:	20000d26 	beq	r4,zero,802828 <___vfprintf_internal_r+0x14a4>
  8027f4:	d9003717 	ldw	r4,220(sp)
  8027f8:	d9403417 	ldw	r5,208(sp)
  8027fc:	1907883a 	add	r3,r3,r4
  802800:	d9001f17 	ldw	r4,124(sp)
  802804:	41400015 	stw	r5,0(r8)
  802808:	d9403717 	ldw	r5,220(sp)
  80280c:	21000044 	addi	r4,r4,1
  802810:	d8c02015 	stw	r3,128(sp)
  802814:	41400115 	stw	r5,4(r8)
  802818:	d9001f15 	stw	r4,124(sp)
  80281c:	014001c4 	movi	r5,7
  802820:	2901e816 	blt	r5,r4,802fc4 <___vfprintf_internal_r+0x1c40>
  802824:	42000204 	addi	r8,r8,8
  802828:	d9003317 	ldw	r4,204(sp)
  80282c:	8121883a 	add	r16,r16,r4
  802830:	2085c83a 	sub	r2,r4,r2
  802834:	8461c83a 	sub	r16,r16,r17
  802838:	1400010e 	bge	r2,r16,802840 <___vfprintf_internal_r+0x14bc>
  80283c:	1021883a 	mov	r16,r2
  802840:	04000a0e 	bge	zero,r16,80286c <___vfprintf_internal_r+0x14e8>
  802844:	d9001f17 	ldw	r4,124(sp)
  802848:	1c07883a 	add	r3,r3,r16
  80284c:	44400015 	stw	r17,0(r8)
  802850:	21000044 	addi	r4,r4,1
  802854:	44000115 	stw	r16,4(r8)
  802858:	d8c02015 	stw	r3,128(sp)
  80285c:	d9001f15 	stw	r4,124(sp)
  802860:	014001c4 	movi	r5,7
  802864:	2901fb16 	blt	r5,r4,803054 <___vfprintf_internal_r+0x1cd0>
  802868:	42000204 	addi	r8,r8,8
  80286c:	8001f716 	blt	r16,zero,80304c <___vfprintf_internal_r+0x1cc8>
  802870:	1421c83a 	sub	r16,r2,r16
  802874:	043d380e 	bge	zero,r16,801d58 <__alt_mem_descriptor_memory+0xff781d58>
  802878:	04400404 	movi	r17,16
  80287c:	d8801f17 	ldw	r2,124(sp)
  802880:	8c3efb0e 	bge	r17,r16,802470 <__alt_mem_descriptor_memory+0xff782470>
  802884:	01402074 	movhi	r5,129
  802888:	294fef84 	addi	r5,r5,16318
  80288c:	d9402b15 	stw	r5,172(sp)
  802890:	058001c4 	movi	r22,7
  802894:	dcc02c17 	ldw	r19,176(sp)
  802898:	00000306 	br	8028a8 <___vfprintf_internal_r+0x1524>
  80289c:	42000204 	addi	r8,r8,8
  8028a0:	843ffc04 	addi	r16,r16,-16
  8028a4:	8c3ef50e 	bge	r17,r16,80247c <__alt_mem_descriptor_memory+0xff78247c>
  8028a8:	18c00404 	addi	r3,r3,16
  8028ac:	10800044 	addi	r2,r2,1
  8028b0:	45000015 	stw	r20,0(r8)
  8028b4:	44400115 	stw	r17,4(r8)
  8028b8:	d8c02015 	stw	r3,128(sp)
  8028bc:	d8801f15 	stw	r2,124(sp)
  8028c0:	b0bff60e 	bge	r22,r2,80289c <__alt_mem_descriptor_memory+0xff78289c>
  8028c4:	d9801e04 	addi	r6,sp,120
  8028c8:	b80b883a 	mov	r5,r23
  8028cc:	9809883a 	mov	r4,r19
  8028d0:	0807d740 	call	807d74 <__sprint_r>
  8028d4:	103bad1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8028d8:	d8c02017 	ldw	r3,128(sp)
  8028dc:	d8801f17 	ldw	r2,124(sp)
  8028e0:	da000404 	addi	r8,sp,16
  8028e4:	003fee06 	br	8028a0 <__alt_mem_descriptor_memory+0xff7828a0>
  8028e8:	9088703a 	and	r4,r18,r2
  8028ec:	203eab1e 	bne	r4,zero,80239c <__alt_mem_descriptor_memory+0xff78239c>
  8028f0:	dc401f17 	ldw	r17,124(sp)
  8028f4:	40800115 	stw	r2,4(r8)
  8028f8:	44000015 	stw	r16,0(r8)
  8028fc:	8c400044 	addi	r17,r17,1
  802900:	d8c02015 	stw	r3,128(sp)
  802904:	dc401f15 	stw	r17,124(sp)
  802908:	008001c4 	movi	r2,7
  80290c:	14400e16 	blt	r2,r17,802948 <___vfprintf_internal_r+0x15c4>
  802910:	45800204 	addi	r22,r8,8
  802914:	003eca06 	br	802440 <__alt_mem_descriptor_memory+0xff782440>
  802918:	01002074 	movhi	r4,129
  80291c:	210fef84 	addi	r4,r4,16318
  802920:	d9002b15 	stw	r4,172(sp)
  802924:	d8802b17 	ldw	r2,172(sp)
  802928:	1c07883a 	add	r3,r3,r16
  80292c:	8c400044 	addi	r17,r17,1
  802930:	b0800015 	stw	r2,0(r22)
  802934:	b4000115 	stw	r16,4(r22)
  802938:	d8c02015 	stw	r3,128(sp)
  80293c:	dc401f15 	stw	r17,124(sp)
  802940:	008001c4 	movi	r2,7
  802944:	147ebd0e 	bge	r2,r17,80243c <__alt_mem_descriptor_memory+0xff78243c>
  802948:	d9002c17 	ldw	r4,176(sp)
  80294c:	d9801e04 	addi	r6,sp,120
  802950:	b80b883a 	mov	r5,r23
  802954:	0807d740 	call	807d74 <__sprint_r>
  802958:	103b8c1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  80295c:	d8c02017 	ldw	r3,128(sp)
  802960:	dc401f17 	ldw	r17,124(sp)
  802964:	dd800404 	addi	r22,sp,16
  802968:	003eb506 	br	802440 <__alt_mem_descriptor_memory+0xff782440>
  80296c:	d9002c17 	ldw	r4,176(sp)
  802970:	d9801e04 	addi	r6,sp,120
  802974:	b80b883a 	mov	r5,r23
  802978:	0807d740 	call	807d74 <__sprint_r>
  80297c:	103b831e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802980:	d8c02017 	ldw	r3,128(sp)
  802984:	dc401f17 	ldw	r17,124(sp)
  802988:	da000404 	addi	r8,sp,16
  80298c:	003e8d06 	br	8023c4 <__alt_mem_descriptor_memory+0xff7823c4>
  802990:	d9002c17 	ldw	r4,176(sp)
  802994:	d9801e04 	addi	r6,sp,120
  802998:	b80b883a 	mov	r5,r23
  80299c:	0807d740 	call	807d74 <__sprint_r>
  8029a0:	103b7a1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8029a4:	d8c02017 	ldw	r3,128(sp)
  8029a8:	dc401f17 	ldw	r17,124(sp)
  8029ac:	dd800404 	addi	r22,sp,16
  8029b0:	003e8f06 	br	8023f0 <__alt_mem_descriptor_memory+0xff7823f0>
  8029b4:	0027883a 	mov	r19,zero
  8029b8:	003f4a06 	br	8026e4 <__alt_mem_descriptor_memory+0xff7826e4>
  8029bc:	d9002c17 	ldw	r4,176(sp)
  8029c0:	d9801e04 	addi	r6,sp,120
  8029c4:	b80b883a 	mov	r5,r23
  8029c8:	0807d740 	call	807d74 <__sprint_r>
  8029cc:	103b6f1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8029d0:	d8c02017 	ldw	r3,128(sp)
  8029d4:	da000404 	addi	r8,sp,16
  8029d8:	003c9d06 	br	801c50 <__alt_mem_descriptor_memory+0xff781c50>
  8029dc:	04e7c83a 	sub	r19,zero,r19
  8029e0:	9804c03a 	cmpne	r2,r19,zero
  8029e4:	05adc83a 	sub	r22,zero,r22
  8029e8:	b0adc83a 	sub	r22,r22,r2
  8029ec:	d8802917 	ldw	r2,164(sp)
  8029f0:	07000b44 	movi	fp,45
  8029f4:	df002785 	stb	fp,158(sp)
  8029f8:	10017b16 	blt	r2,zero,802fe8 <___vfprintf_internal_r+0x1c64>
  8029fc:	00bfdfc4 	movi	r2,-129
  802a00:	90a4703a 	and	r18,r18,r2
  802a04:	003bb106 	br	8018cc <__alt_mem_descriptor_memory+0xff7818cc>
  802a08:	d9003617 	ldw	r4,216(sp)
  802a0c:	d9403817 	ldw	r5,224(sp)
  802a10:	da003d15 	stw	r8,244(sp)
  802a14:	08079000 	call	807900 <__fpclassifyd>
  802a18:	da003d17 	ldw	r8,244(sp)
  802a1c:	1000f026 	beq	r2,zero,802de0 <___vfprintf_internal_r+0x1a5c>
  802a20:	d9002917 	ldw	r4,164(sp)
  802a24:	05bff7c4 	movi	r22,-33
  802a28:	00bfffc4 	movi	r2,-1
  802a2c:	8dac703a 	and	r22,r17,r22
  802a30:	20820026 	beq	r4,r2,803234 <___vfprintf_internal_r+0x1eb0>
  802a34:	008011c4 	movi	r2,71
  802a38:	b081f726 	beq	r22,r2,803218 <___vfprintf_internal_r+0x1e94>
  802a3c:	d9003817 	ldw	r4,224(sp)
  802a40:	90c04014 	ori	r3,r18,256
  802a44:	d8c02b15 	stw	r3,172(sp)
  802a48:	20021516 	blt	r4,zero,8032a0 <___vfprintf_internal_r+0x1f1c>
  802a4c:	dcc03817 	ldw	r19,224(sp)
  802a50:	d8002a05 	stb	zero,168(sp)
  802a54:	00801984 	movi	r2,102
  802a58:	8881f926 	beq	r17,r2,803240 <___vfprintf_internal_r+0x1ebc>
  802a5c:	00801184 	movi	r2,70
  802a60:	88821c26 	beq	r17,r2,8032d4 <___vfprintf_internal_r+0x1f50>
  802a64:	00801144 	movi	r2,69
  802a68:	b081ef26 	beq	r22,r2,803228 <___vfprintf_internal_r+0x1ea4>
  802a6c:	d8c02917 	ldw	r3,164(sp)
  802a70:	d8802104 	addi	r2,sp,132
  802a74:	d8800315 	stw	r2,12(sp)
  802a78:	d9403617 	ldw	r5,216(sp)
  802a7c:	d8802504 	addi	r2,sp,148
  802a80:	d9002c17 	ldw	r4,176(sp)
  802a84:	d8800215 	stw	r2,8(sp)
  802a88:	d8802604 	addi	r2,sp,152
  802a8c:	d8c00015 	stw	r3,0(sp)
  802a90:	d8800115 	stw	r2,4(sp)
  802a94:	01c00084 	movi	r7,2
  802a98:	980d883a 	mov	r6,r19
  802a9c:	d8c03c15 	stw	r3,240(sp)
  802aa0:	da003d15 	stw	r8,244(sp)
  802aa4:	08039a80 	call	8039a8 <_dtoa_r>
  802aa8:	1021883a 	mov	r16,r2
  802aac:	008019c4 	movi	r2,103
  802ab0:	d8c03c17 	ldw	r3,240(sp)
  802ab4:	da003d17 	ldw	r8,244(sp)
  802ab8:	88817126 	beq	r17,r2,803080 <___vfprintf_internal_r+0x1cfc>
  802abc:	008011c4 	movi	r2,71
  802ac0:	88829226 	beq	r17,r2,80350c <___vfprintf_internal_r+0x2188>
  802ac4:	80f9883a 	add	fp,r16,r3
  802ac8:	d9003617 	ldw	r4,216(sp)
  802acc:	000d883a 	mov	r6,zero
  802ad0:	000f883a 	mov	r7,zero
  802ad4:	980b883a 	mov	r5,r19
  802ad8:	da003d15 	stw	r8,244(sp)
  802adc:	080c5680 	call	80c568 <__eqdf2>
  802ae0:	da003d17 	ldw	r8,244(sp)
  802ae4:	10018d26 	beq	r2,zero,80311c <___vfprintf_internal_r+0x1d98>
  802ae8:	d8802117 	ldw	r2,132(sp)
  802aec:	1700062e 	bgeu	r2,fp,802b08 <___vfprintf_internal_r+0x1784>
  802af0:	01000c04 	movi	r4,48
  802af4:	10c00044 	addi	r3,r2,1
  802af8:	d8c02115 	stw	r3,132(sp)
  802afc:	11000005 	stb	r4,0(r2)
  802b00:	d8802117 	ldw	r2,132(sp)
  802b04:	173ffb36 	bltu	r2,fp,802af4 <__alt_mem_descriptor_memory+0xff782af4>
  802b08:	1405c83a 	sub	r2,r2,r16
  802b0c:	d8803315 	stw	r2,204(sp)
  802b10:	008011c4 	movi	r2,71
  802b14:	b0817626 	beq	r22,r2,8030f0 <___vfprintf_internal_r+0x1d6c>
  802b18:	00801944 	movi	r2,101
  802b1c:	1442810e 	bge	r2,r17,803524 <___vfprintf_internal_r+0x21a0>
  802b20:	d8c02617 	ldw	r3,152(sp)
  802b24:	00801984 	movi	r2,102
  802b28:	d8c03215 	stw	r3,200(sp)
  802b2c:	8881fe26 	beq	r17,r2,803328 <___vfprintf_internal_r+0x1fa4>
  802b30:	d8c03217 	ldw	r3,200(sp)
  802b34:	d9003317 	ldw	r4,204(sp)
  802b38:	1901dd16 	blt	r3,r4,8032b0 <___vfprintf_internal_r+0x1f2c>
  802b3c:	9480004c 	andi	r18,r18,1
  802b40:	90022b1e 	bne	r18,zero,8033f0 <___vfprintf_internal_r+0x206c>
  802b44:	1805883a 	mov	r2,r3
  802b48:	18028016 	blt	r3,zero,80354c <___vfprintf_internal_r+0x21c8>
  802b4c:	d8c03217 	ldw	r3,200(sp)
  802b50:	044019c4 	movi	r17,103
  802b54:	d8c02e15 	stw	r3,184(sp)
  802b58:	df002a07 	ldb	fp,168(sp)
  802b5c:	e001531e 	bne	fp,zero,8030ac <___vfprintf_internal_r+0x1d28>
  802b60:	df002783 	ldbu	fp,158(sp)
  802b64:	d8802a15 	stw	r2,168(sp)
  802b68:	dc802b17 	ldw	r18,172(sp)
  802b6c:	d8002915 	stw	zero,164(sp)
  802b70:	003bd106 	br	801ab8 <__alt_mem_descriptor_memory+0xff781ab8>
  802b74:	d8802d17 	ldw	r2,180(sp)
  802b78:	d8c02d17 	ldw	r3,180(sp)
  802b7c:	d9002d17 	ldw	r4,180(sp)
  802b80:	10800017 	ldw	r2,0(r2)
  802b84:	18c00117 	ldw	r3,4(r3)
  802b88:	21000204 	addi	r4,r4,8
  802b8c:	d8803615 	stw	r2,216(sp)
  802b90:	d8c03815 	stw	r3,224(sp)
  802b94:	d9002d15 	stw	r4,180(sp)
  802b98:	003b7506 	br	801970 <__alt_mem_descriptor_memory+0xff781970>
  802b9c:	ac400007 	ldb	r17,0(r21)
  802ba0:	003a5906 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  802ba4:	9080100c 	andi	r2,r18,64
  802ba8:	1000a826 	beq	r2,zero,802e4c <___vfprintf_internal_r+0x1ac8>
  802bac:	d9002d17 	ldw	r4,180(sp)
  802bb0:	002d883a 	mov	r22,zero
  802bb4:	24c0000b 	ldhu	r19,0(r4)
  802bb8:	21000104 	addi	r4,r4,4
  802bbc:	d9002d15 	stw	r4,180(sp)
  802bc0:	003ccb06 	br	801ef0 <__alt_mem_descriptor_memory+0xff781ef0>
  802bc4:	d8c02d17 	ldw	r3,180(sp)
  802bc8:	d9002917 	ldw	r4,164(sp)
  802bcc:	002d883a 	mov	r22,zero
  802bd0:	18800104 	addi	r2,r3,4
  802bd4:	1cc00017 	ldw	r19,0(r3)
  802bd8:	203ebb0e 	bge	r4,zero,8026c8 <__alt_mem_descriptor_memory+0xff7826c8>
  802bdc:	003ef106 	br	8027a4 <__alt_mem_descriptor_memory+0xff7827a4>
  802be0:	9080040c 	andi	r2,r18,16
  802be4:	1000921e 	bne	r2,zero,802e30 <___vfprintf_internal_r+0x1aac>
  802be8:	9480100c 	andi	r18,r18,64
  802bec:	90013926 	beq	r18,zero,8030d4 <___vfprintf_internal_r+0x1d50>
  802bf0:	d9002d17 	ldw	r4,180(sp)
  802bf4:	d9402f17 	ldw	r5,188(sp)
  802bf8:	20800017 	ldw	r2,0(r4)
  802bfc:	21000104 	addi	r4,r4,4
  802c00:	d9002d15 	stw	r4,180(sp)
  802c04:	1140000d 	sth	r5,0(r2)
  802c08:	003a1606 	br	801464 <__alt_mem_descriptor_memory+0xff781464>
  802c0c:	9080100c 	andi	r2,r18,64
  802c10:	10008026 	beq	r2,zero,802e14 <___vfprintf_internal_r+0x1a90>
  802c14:	d8c02d17 	ldw	r3,180(sp)
  802c18:	1cc0000f 	ldh	r19,0(r3)
  802c1c:	18c00104 	addi	r3,r3,4
  802c20:	d8c02d15 	stw	r3,180(sp)
  802c24:	982dd7fa 	srai	r22,r19,31
  802c28:	b005883a 	mov	r2,r22
  802c2c:	003b1f06 	br	8018ac <__alt_mem_descriptor_memory+0xff7818ac>
  802c30:	9080100c 	andi	r2,r18,64
  802c34:	d8002785 	stb	zero,158(sp)
  802c38:	10008a1e 	bne	r2,zero,802e64 <___vfprintf_internal_r+0x1ae0>
  802c3c:	d9402d17 	ldw	r5,180(sp)
  802c40:	d8c02917 	ldw	r3,164(sp)
  802c44:	002d883a 	mov	r22,zero
  802c48:	28800104 	addi	r2,r5,4
  802c4c:	2cc00017 	ldw	r19,0(r5)
  802c50:	183e4b0e 	bge	r3,zero,802580 <__alt_mem_descriptor_memory+0xff782580>
  802c54:	9d86b03a 	or	r3,r19,r22
  802c58:	d8802d15 	stw	r2,180(sp)
  802c5c:	183e4c1e 	bne	r3,zero,802590 <__alt_mem_descriptor_memory+0xff782590>
  802c60:	0039883a 	mov	fp,zero
  802c64:	0005883a 	mov	r2,zero
  802c68:	003d4006 	br	80216c <__alt_mem_descriptor_memory+0xff78216c>
  802c6c:	01402074 	movhi	r5,129
  802c70:	294fef84 	addi	r5,r5,16318
  802c74:	d9402b15 	stw	r5,172(sp)
  802c78:	d9402b17 	ldw	r5,172(sp)
  802c7c:	1c47883a 	add	r3,r3,r17
  802c80:	10800044 	addi	r2,r2,1
  802c84:	41400015 	stw	r5,0(r8)
  802c88:	44400115 	stw	r17,4(r8)
  802c8c:	d8c02015 	stw	r3,128(sp)
  802c90:	d8801f15 	stw	r2,124(sp)
  802c94:	010001c4 	movi	r4,7
  802c98:	20bec816 	blt	r4,r2,8027bc <__alt_mem_descriptor_memory+0xff7827bc>
  802c9c:	42000204 	addi	r8,r8,8
  802ca0:	003ecd06 	br	8027d8 <__alt_mem_descriptor_memory+0xff7827d8>
  802ca4:	d9002917 	ldw	r4,164(sp)
  802ca8:	d8002785 	stb	zero,158(sp)
  802cac:	203d2d16 	blt	r4,zero,802164 <__alt_mem_descriptor_memory+0xff782164>
  802cb0:	00bfdfc4 	movi	r2,-129
  802cb4:	90a4703a 	and	r18,r18,r2
  802cb8:	003a9106 	br	801700 <__alt_mem_descriptor_memory+0xff781700>
  802cbc:	01002074 	movhi	r4,129
  802cc0:	210fef84 	addi	r4,r4,16318
  802cc4:	d9002b15 	stw	r4,172(sp)
  802cc8:	003c0c06 	br	801cfc <__alt_mem_descriptor_memory+0xff781cfc>
  802ccc:	d9002c17 	ldw	r4,176(sp)
  802cd0:	d9801e04 	addi	r6,sp,120
  802cd4:	b80b883a 	mov	r5,r23
  802cd8:	0807d740 	call	807d74 <__sprint_r>
  802cdc:	103aab1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802ce0:	d8c02017 	ldw	r3,128(sp)
  802ce4:	da000404 	addi	r8,sp,16
  802ce8:	003d4106 	br	8021f0 <__alt_mem_descriptor_memory+0xff7821f0>
  802cec:	d8801f17 	ldw	r2,124(sp)
  802cf0:	01402074 	movhi	r5,129
  802cf4:	01000044 	movi	r4,1
  802cf8:	18c00044 	addi	r3,r3,1
  802cfc:	10800044 	addi	r2,r2,1
  802d00:	294fef04 	addi	r5,r5,16316
  802d04:	41000115 	stw	r4,4(r8)
  802d08:	41400015 	stw	r5,0(r8)
  802d0c:	d8c02015 	stw	r3,128(sp)
  802d10:	d8801f15 	stw	r2,124(sp)
  802d14:	010001c4 	movi	r4,7
  802d18:	20805c16 	blt	r4,r2,802e8c <___vfprintf_internal_r+0x1b08>
  802d1c:	42000204 	addi	r8,r8,8
  802d20:	8800041e 	bne	r17,zero,802d34 <___vfprintf_internal_r+0x19b0>
  802d24:	d8803317 	ldw	r2,204(sp)
  802d28:	1000021e 	bne	r2,zero,802d34 <___vfprintf_internal_r+0x19b0>
  802d2c:	9080004c 	andi	r2,r18,1
  802d30:	103c0926 	beq	r2,zero,801d58 <__alt_mem_descriptor_memory+0xff781d58>
  802d34:	d9003717 	ldw	r4,220(sp)
  802d38:	d8801f17 	ldw	r2,124(sp)
  802d3c:	d9403417 	ldw	r5,208(sp)
  802d40:	20c7883a 	add	r3,r4,r3
  802d44:	10800044 	addi	r2,r2,1
  802d48:	41000115 	stw	r4,4(r8)
  802d4c:	41400015 	stw	r5,0(r8)
  802d50:	d8c02015 	stw	r3,128(sp)
  802d54:	d8801f15 	stw	r2,124(sp)
  802d58:	010001c4 	movi	r4,7
  802d5c:	20812116 	blt	r4,r2,8031e4 <___vfprintf_internal_r+0x1e60>
  802d60:	42000204 	addi	r8,r8,8
  802d64:	0463c83a 	sub	r17,zero,r17
  802d68:	0440730e 	bge	zero,r17,802f38 <___vfprintf_internal_r+0x1bb4>
  802d6c:	05800404 	movi	r22,16
  802d70:	b440860e 	bge	r22,r17,802f8c <___vfprintf_internal_r+0x1c08>
  802d74:	01402074 	movhi	r5,129
  802d78:	294fef84 	addi	r5,r5,16318
  802d7c:	d9402b15 	stw	r5,172(sp)
  802d80:	070001c4 	movi	fp,7
  802d84:	dcc02c17 	ldw	r19,176(sp)
  802d88:	00000306 	br	802d98 <___vfprintf_internal_r+0x1a14>
  802d8c:	42000204 	addi	r8,r8,8
  802d90:	8c7ffc04 	addi	r17,r17,-16
  802d94:	b440800e 	bge	r22,r17,802f98 <___vfprintf_internal_r+0x1c14>
  802d98:	18c00404 	addi	r3,r3,16
  802d9c:	10800044 	addi	r2,r2,1
  802da0:	45000015 	stw	r20,0(r8)
  802da4:	45800115 	stw	r22,4(r8)
  802da8:	d8c02015 	stw	r3,128(sp)
  802dac:	d8801f15 	stw	r2,124(sp)
  802db0:	e0bff60e 	bge	fp,r2,802d8c <__alt_mem_descriptor_memory+0xff782d8c>
  802db4:	d9801e04 	addi	r6,sp,120
  802db8:	b80b883a 	mov	r5,r23
  802dbc:	9809883a 	mov	r4,r19
  802dc0:	0807d740 	call	807d74 <__sprint_r>
  802dc4:	103a711e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802dc8:	d8c02017 	ldw	r3,128(sp)
  802dcc:	d8801f17 	ldw	r2,124(sp)
  802dd0:	da000404 	addi	r8,sp,16
  802dd4:	003fee06 	br	802d90 <__alt_mem_descriptor_memory+0xff782d90>
  802dd8:	00bfffc4 	movi	r2,-1
  802ddc:	003a6f06 	br	80179c <__alt_mem_descriptor_memory+0xff78179c>
  802de0:	008011c4 	movi	r2,71
  802de4:	1440b816 	blt	r2,r17,8030c8 <___vfprintf_internal_r+0x1d44>
  802de8:	04002074 	movhi	r16,129
  802dec:	840fe104 	addi	r16,r16,16260
  802df0:	00c000c4 	movi	r3,3
  802df4:	00bfdfc4 	movi	r2,-129
  802df8:	d8c02a15 	stw	r3,168(sp)
  802dfc:	90a4703a 	and	r18,r18,r2
  802e00:	df002783 	ldbu	fp,158(sp)
  802e04:	d8c02e15 	stw	r3,184(sp)
  802e08:	d8002915 	stw	zero,164(sp)
  802e0c:	d8003215 	stw	zero,200(sp)
  802e10:	003b2906 	br	801ab8 <__alt_mem_descriptor_memory+0xff781ab8>
  802e14:	d9002d17 	ldw	r4,180(sp)
  802e18:	24c00017 	ldw	r19,0(r4)
  802e1c:	21000104 	addi	r4,r4,4
  802e20:	d9002d15 	stw	r4,180(sp)
  802e24:	982dd7fa 	srai	r22,r19,31
  802e28:	b005883a 	mov	r2,r22
  802e2c:	003a9f06 	br	8018ac <__alt_mem_descriptor_memory+0xff7818ac>
  802e30:	d9402d17 	ldw	r5,180(sp)
  802e34:	d8c02f17 	ldw	r3,188(sp)
  802e38:	28800017 	ldw	r2,0(r5)
  802e3c:	29400104 	addi	r5,r5,4
  802e40:	d9402d15 	stw	r5,180(sp)
  802e44:	10c00015 	stw	r3,0(r2)
  802e48:	00398606 	br	801464 <__alt_mem_descriptor_memory+0xff781464>
  802e4c:	d9402d17 	ldw	r5,180(sp)
  802e50:	002d883a 	mov	r22,zero
  802e54:	2cc00017 	ldw	r19,0(r5)
  802e58:	29400104 	addi	r5,r5,4
  802e5c:	d9402d15 	stw	r5,180(sp)
  802e60:	003c2306 	br	801ef0 <__alt_mem_descriptor_memory+0xff781ef0>
  802e64:	d8c02d17 	ldw	r3,180(sp)
  802e68:	d9002917 	ldw	r4,164(sp)
  802e6c:	002d883a 	mov	r22,zero
  802e70:	18800104 	addi	r2,r3,4
  802e74:	1cc0000b 	ldhu	r19,0(r3)
  802e78:	203dc10e 	bge	r4,zero,802580 <__alt_mem_descriptor_memory+0xff782580>
  802e7c:	003f7506 	br	802c54 <__alt_mem_descriptor_memory+0xff782c54>
  802e80:	04002074 	movhi	r16,129
  802e84:	840fdf04 	addi	r16,r16,16252
  802e88:	003acc06 	br	8019bc <__alt_mem_descriptor_memory+0xff7819bc>
  802e8c:	d9002c17 	ldw	r4,176(sp)
  802e90:	d9801e04 	addi	r6,sp,120
  802e94:	b80b883a 	mov	r5,r23
  802e98:	0807d740 	call	807d74 <__sprint_r>
  802e9c:	103a3b1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802ea0:	dc402617 	ldw	r17,152(sp)
  802ea4:	d8c02017 	ldw	r3,128(sp)
  802ea8:	da000404 	addi	r8,sp,16
  802eac:	003f9c06 	br	802d20 <__alt_mem_descriptor_memory+0xff782d20>
  802eb0:	ac400043 	ldbu	r17,1(r21)
  802eb4:	94800814 	ori	r18,r18,32
  802eb8:	ad400044 	addi	r21,r21,1
  802ebc:	8c403fcc 	andi	r17,r17,255
  802ec0:	8c40201c 	xori	r17,r17,128
  802ec4:	8c7fe004 	addi	r17,r17,-128
  802ec8:	00398f06 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  802ecc:	d8c02d15 	stw	r3,180(sp)
  802ed0:	0039883a 	mov	fp,zero
  802ed4:	003e3506 	br	8027ac <__alt_mem_descriptor_memory+0xff7827ac>
  802ed8:	d9002c17 	ldw	r4,176(sp)
  802edc:	d9801e04 	addi	r6,sp,120
  802ee0:	b80b883a 	mov	r5,r23
  802ee4:	0807d740 	call	807d74 <__sprint_r>
  802ee8:	103a281e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802eec:	d8c02017 	ldw	r3,128(sp)
  802ef0:	da000404 	addi	r8,sp,16
  802ef4:	003cd006 	br	802238 <__alt_mem_descriptor_memory+0xff782238>
  802ef8:	8009883a 	mov	r4,r16
  802efc:	da003d15 	stw	r8,244(sp)
  802f00:	0807be00 	call	807be0 <strlen>
  802f04:	d8802e15 	stw	r2,184(sp)
  802f08:	da003d17 	ldw	r8,244(sp)
  802f0c:	103c340e 	bge	r2,zero,801fe0 <__alt_mem_descriptor_memory+0xff781fe0>
  802f10:	0005883a 	mov	r2,zero
  802f14:	003c3206 	br	801fe0 <__alt_mem_descriptor_memory+0xff781fe0>
  802f18:	d9002c17 	ldw	r4,176(sp)
  802f1c:	d9801e04 	addi	r6,sp,120
  802f20:	b80b883a 	mov	r5,r23
  802f24:	0807d740 	call	807d74 <__sprint_r>
  802f28:	103a181e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802f2c:	d8c02017 	ldw	r3,128(sp)
  802f30:	d8801f17 	ldw	r2,124(sp)
  802f34:	da000404 	addi	r8,sp,16
  802f38:	d9403317 	ldw	r5,204(sp)
  802f3c:	10800044 	addi	r2,r2,1
  802f40:	44000015 	stw	r16,0(r8)
  802f44:	28c7883a 	add	r3,r5,r3
  802f48:	003b7d06 	br	801d40 <__alt_mem_descriptor_memory+0xff781d40>
  802f4c:	01002074 	movhi	r4,129
  802f50:	210ff384 	addi	r4,r4,16334
  802f54:	d9003515 	stw	r4,212(sp)
  802f58:	003b1406 	br	801bac <__alt_mem_descriptor_memory+0xff781bac>
  802f5c:	013fffc4 	movi	r4,-1
  802f60:	003a3506 	br	801838 <__alt_mem_descriptor_memory+0xff781838>
  802f64:	0023883a 	mov	r17,zero
  802f68:	003d9d06 	br	8025e0 <__alt_mem_descriptor_memory+0xff7825e0>
  802f6c:	d9002c17 	ldw	r4,176(sp)
  802f70:	d9801e04 	addi	r6,sp,120
  802f74:	b80b883a 	mov	r5,r23
  802f78:	0807d740 	call	807d74 <__sprint_r>
  802f7c:	103a031e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802f80:	d8c02017 	ldw	r3,128(sp)
  802f84:	da000404 	addi	r8,sp,16
  802f88:	003d9406 	br	8025dc <__alt_mem_descriptor_memory+0xff7825dc>
  802f8c:	01002074 	movhi	r4,129
  802f90:	210fef84 	addi	r4,r4,16318
  802f94:	d9002b15 	stw	r4,172(sp)
  802f98:	d9002b17 	ldw	r4,172(sp)
  802f9c:	1c47883a 	add	r3,r3,r17
  802fa0:	10800044 	addi	r2,r2,1
  802fa4:	41000015 	stw	r4,0(r8)
  802fa8:	44400115 	stw	r17,4(r8)
  802fac:	d8c02015 	stw	r3,128(sp)
  802fb0:	d8801f15 	stw	r2,124(sp)
  802fb4:	010001c4 	movi	r4,7
  802fb8:	20bfd716 	blt	r4,r2,802f18 <__alt_mem_descriptor_memory+0xff782f18>
  802fbc:	42000204 	addi	r8,r8,8
  802fc0:	003fdd06 	br	802f38 <__alt_mem_descriptor_memory+0xff782f38>
  802fc4:	d9002c17 	ldw	r4,176(sp)
  802fc8:	d9801e04 	addi	r6,sp,120
  802fcc:	b80b883a 	mov	r5,r23
  802fd0:	0807d740 	call	807d74 <__sprint_r>
  802fd4:	1039ed1e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  802fd8:	d8802617 	ldw	r2,152(sp)
  802fdc:	d8c02017 	ldw	r3,128(sp)
  802fe0:	da000404 	addi	r8,sp,16
  802fe4:	003e1006 	br	802828 <__alt_mem_descriptor_memory+0xff782828>
  802fe8:	00800044 	movi	r2,1
  802fec:	10803fcc 	andi	r2,r2,255
  802ff0:	00c00044 	movi	r3,1
  802ff4:	10fa3526 	beq	r2,r3,8018cc <__alt_mem_descriptor_memory+0xff7818cc>
  802ff8:	00c00084 	movi	r3,2
  802ffc:	10fbcb26 	beq	r2,r3,801f2c <__alt_mem_descriptor_memory+0xff781f2c>
  803000:	003a8f06 	br	801a40 <__alt_mem_descriptor_memory+0xff781a40>
  803004:	01002074 	movhi	r4,129
  803008:	210ff384 	addi	r4,r4,16334
  80300c:	d9003515 	stw	r4,212(sp)
  803010:	003b7606 	br	801dec <__alt_mem_descriptor_memory+0xff781dec>
  803014:	d8802917 	ldw	r2,164(sp)
  803018:	00c00184 	movi	r3,6
  80301c:	1880012e 	bgeu	r3,r2,803024 <___vfprintf_internal_r+0x1ca0>
  803020:	1805883a 	mov	r2,r3
  803024:	d8802e15 	stw	r2,184(sp)
  803028:	1000ef16 	blt	r2,zero,8033e8 <___vfprintf_internal_r+0x2064>
  80302c:	04002074 	movhi	r16,129
  803030:	d8802a15 	stw	r2,168(sp)
  803034:	dcc02d15 	stw	r19,180(sp)
  803038:	d8002915 	stw	zero,164(sp)
  80303c:	d8003215 	stw	zero,200(sp)
  803040:	840fed04 	addi	r16,r16,16308
  803044:	0039883a 	mov	fp,zero
  803048:	003aa206 	br	801ad4 <__alt_mem_descriptor_memory+0xff781ad4>
  80304c:	0021883a 	mov	r16,zero
  803050:	003e0706 	br	802870 <__alt_mem_descriptor_memory+0xff782870>
  803054:	d9002c17 	ldw	r4,176(sp)
  803058:	d9801e04 	addi	r6,sp,120
  80305c:	b80b883a 	mov	r5,r23
  803060:	0807d740 	call	807d74 <__sprint_r>
  803064:	1039c91e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  803068:	d8802617 	ldw	r2,152(sp)
  80306c:	d9403317 	ldw	r5,204(sp)
  803070:	d8c02017 	ldw	r3,128(sp)
  803074:	da000404 	addi	r8,sp,16
  803078:	2885c83a 	sub	r2,r5,r2
  80307c:	003dfb06 	br	80286c <__alt_mem_descriptor_memory+0xff78286c>
  803080:	9080004c 	andi	r2,r18,1
  803084:	103e8f1e 	bne	r2,zero,802ac4 <__alt_mem_descriptor_memory+0xff782ac4>
  803088:	d8802117 	ldw	r2,132(sp)
  80308c:	003e9e06 	br	802b08 <__alt_mem_descriptor_memory+0xff782b08>
  803090:	1025883a 	mov	r18,r2
  803094:	0039883a 	mov	fp,zero
  803098:	00800084 	movi	r2,2
  80309c:	003fd306 	br	802fec <__alt_mem_descriptor_memory+0xff782fec>
  8030a0:	07000b44 	movi	fp,45
  8030a4:	df002785 	stb	fp,158(sp)
  8030a8:	003a4006 	br	8019ac <__alt_mem_descriptor_memory+0xff7819ac>
  8030ac:	00c00b44 	movi	r3,45
  8030b0:	d8c02785 	stb	r3,158(sp)
  8030b4:	d8802a15 	stw	r2,168(sp)
  8030b8:	dc802b17 	ldw	r18,172(sp)
  8030bc:	d8002915 	stw	zero,164(sp)
  8030c0:	07000b44 	movi	fp,45
  8030c4:	003a8006 	br	801ac8 <__alt_mem_descriptor_memory+0xff781ac8>
  8030c8:	04002074 	movhi	r16,129
  8030cc:	840fe204 	addi	r16,r16,16264
  8030d0:	003f4706 	br	802df0 <__alt_mem_descriptor_memory+0xff782df0>
  8030d4:	d8c02d17 	ldw	r3,180(sp)
  8030d8:	d9002f17 	ldw	r4,188(sp)
  8030dc:	18800017 	ldw	r2,0(r3)
  8030e0:	18c00104 	addi	r3,r3,4
  8030e4:	d8c02d15 	stw	r3,180(sp)
  8030e8:	11000015 	stw	r4,0(r2)
  8030ec:	0038dd06 	br	801464 <__alt_mem_descriptor_memory+0xff781464>
  8030f0:	dd802617 	ldw	r22,152(sp)
  8030f4:	00bfff44 	movi	r2,-3
  8030f8:	b0801c16 	blt	r22,r2,80316c <___vfprintf_internal_r+0x1de8>
  8030fc:	d9402917 	ldw	r5,164(sp)
  803100:	2d801a16 	blt	r5,r22,80316c <___vfprintf_internal_r+0x1de8>
  803104:	dd803215 	stw	r22,200(sp)
  803108:	003e8906 	br	802b30 <__alt_mem_descriptor_memory+0xff782b30>
  80310c:	01002074 	movhi	r4,129
  803110:	210fef84 	addi	r4,r4,16318
  803114:	d9002b15 	stw	r4,172(sp)
  803118:	003c9106 	br	802360 <__alt_mem_descriptor_memory+0xff782360>
  80311c:	e005883a 	mov	r2,fp
  803120:	003e7906 	br	802b08 <__alt_mem_descriptor_memory+0xff782b08>
  803124:	d9402917 	ldw	r5,164(sp)
  803128:	df002783 	ldbu	fp,158(sp)
  80312c:	dcc02d15 	stw	r19,180(sp)
  803130:	d9402a15 	stw	r5,168(sp)
  803134:	d9402e15 	stw	r5,184(sp)
  803138:	d8002915 	stw	zero,164(sp)
  80313c:	d8003215 	stw	zero,200(sp)
  803140:	003a5d06 	br	801ab8 <__alt_mem_descriptor_memory+0xff781ab8>
  803144:	9080004c 	andi	r2,r18,1
  803148:	0039883a 	mov	fp,zero
  80314c:	10000426 	beq	r2,zero,803160 <___vfprintf_internal_r+0x1ddc>
  803150:	00800c04 	movi	r2,48
  803154:	dc001dc4 	addi	r16,sp,119
  803158:	d8801dc5 	stb	r2,119(sp)
  80315c:	003b8006 	br	801f60 <__alt_mem_descriptor_memory+0xff781f60>
  803160:	d8002e15 	stw	zero,184(sp)
  803164:	dc001e04 	addi	r16,sp,120
  803168:	003a4d06 	br	801aa0 <__alt_mem_descriptor_memory+0xff781aa0>
  80316c:	8c7fff84 	addi	r17,r17,-2
  803170:	b5bfffc4 	addi	r22,r22,-1
  803174:	dd802615 	stw	r22,152(sp)
  803178:	dc4022c5 	stb	r17,139(sp)
  80317c:	b000bf16 	blt	r22,zero,80347c <___vfprintf_internal_r+0x20f8>
  803180:	00800ac4 	movi	r2,43
  803184:	d8802305 	stb	r2,140(sp)
  803188:	00800244 	movi	r2,9
  80318c:	15807016 	blt	r2,r22,803350 <___vfprintf_internal_r+0x1fcc>
  803190:	00800c04 	movi	r2,48
  803194:	b5800c04 	addi	r22,r22,48
  803198:	d8802345 	stb	r2,141(sp)
  80319c:	dd802385 	stb	r22,142(sp)
  8031a0:	d88023c4 	addi	r2,sp,143
  8031a4:	df0022c4 	addi	fp,sp,139
  8031a8:	d8c03317 	ldw	r3,204(sp)
  8031ac:	1739c83a 	sub	fp,r2,fp
  8031b0:	d9003317 	ldw	r4,204(sp)
  8031b4:	e0c7883a 	add	r3,fp,r3
  8031b8:	df003a15 	stw	fp,232(sp)
  8031bc:	d8c02e15 	stw	r3,184(sp)
  8031c0:	00800044 	movi	r2,1
  8031c4:	1100b30e 	bge	r2,r4,803494 <___vfprintf_internal_r+0x2110>
  8031c8:	d8c02e17 	ldw	r3,184(sp)
  8031cc:	18c00044 	addi	r3,r3,1
  8031d0:	d8c02e15 	stw	r3,184(sp)
  8031d4:	1805883a 	mov	r2,r3
  8031d8:	1800ac16 	blt	r3,zero,80348c <___vfprintf_internal_r+0x2108>
  8031dc:	d8003215 	stw	zero,200(sp)
  8031e0:	003e5d06 	br	802b58 <__alt_mem_descriptor_memory+0xff782b58>
  8031e4:	d9002c17 	ldw	r4,176(sp)
  8031e8:	d9801e04 	addi	r6,sp,120
  8031ec:	b80b883a 	mov	r5,r23
  8031f0:	0807d740 	call	807d74 <__sprint_r>
  8031f4:	1039651e 	bne	r2,zero,80178c <__alt_mem_descriptor_memory+0xff78178c>
  8031f8:	dc402617 	ldw	r17,152(sp)
  8031fc:	d8c02017 	ldw	r3,128(sp)
  803200:	d8801f17 	ldw	r2,124(sp)
  803204:	da000404 	addi	r8,sp,16
  803208:	003ed606 	br	802d64 <__alt_mem_descriptor_memory+0xff782d64>
  80320c:	582b883a 	mov	r21,r11
  803210:	d8002915 	stw	zero,164(sp)
  803214:	0038bd06 	br	80150c <__alt_mem_descriptor_memory+0xff78150c>
  803218:	d8802917 	ldw	r2,164(sp)
  80321c:	103e071e 	bne	r2,zero,802a3c <__alt_mem_descriptor_memory+0xff782a3c>
  803220:	dc002915 	stw	r16,164(sp)
  803224:	003e0506 	br	802a3c <__alt_mem_descriptor_memory+0xff782a3c>
  803228:	d9002917 	ldw	r4,164(sp)
  80322c:	20c00044 	addi	r3,r4,1
  803230:	003e0f06 	br	802a70 <__alt_mem_descriptor_memory+0xff782a70>
  803234:	01400184 	movi	r5,6
  803238:	d9402915 	stw	r5,164(sp)
  80323c:	003dff06 	br	802a3c <__alt_mem_descriptor_memory+0xff782a3c>
  803240:	d8802104 	addi	r2,sp,132
  803244:	d8800315 	stw	r2,12(sp)
  803248:	d8802504 	addi	r2,sp,148
  80324c:	d8800215 	stw	r2,8(sp)
  803250:	d8802604 	addi	r2,sp,152
  803254:	d8800115 	stw	r2,4(sp)
  803258:	d8802917 	ldw	r2,164(sp)
  80325c:	d9403617 	ldw	r5,216(sp)
  803260:	d9002c17 	ldw	r4,176(sp)
  803264:	d8800015 	stw	r2,0(sp)
  803268:	01c000c4 	movi	r7,3
  80326c:	980d883a 	mov	r6,r19
  803270:	da003d15 	stw	r8,244(sp)
  803274:	08039a80 	call	8039a8 <_dtoa_r>
  803278:	d8c02917 	ldw	r3,164(sp)
  80327c:	da003d17 	ldw	r8,244(sp)
  803280:	1021883a 	mov	r16,r2
  803284:	10f9883a 	add	fp,r2,r3
  803288:	81000007 	ldb	r4,0(r16)
  80328c:	00800c04 	movi	r2,48
  803290:	20805e26 	beq	r4,r2,80340c <___vfprintf_internal_r+0x2088>
  803294:	d8c02617 	ldw	r3,152(sp)
  803298:	e0f9883a 	add	fp,fp,r3
  80329c:	003e0a06 	br	802ac8 <__alt_mem_descriptor_memory+0xff782ac8>
  8032a0:	00c00b44 	movi	r3,45
  8032a4:	24e0003c 	xorhi	r19,r4,32768
  8032a8:	d8c02a05 	stb	r3,168(sp)
  8032ac:	003de906 	br	802a54 <__alt_mem_descriptor_memory+0xff782a54>
  8032b0:	d8c03217 	ldw	r3,200(sp)
  8032b4:	00c07a0e 	bge	zero,r3,8034a0 <___vfprintf_internal_r+0x211c>
  8032b8:	00800044 	movi	r2,1
  8032bc:	d9003317 	ldw	r4,204(sp)
  8032c0:	1105883a 	add	r2,r2,r4
  8032c4:	d8802e15 	stw	r2,184(sp)
  8032c8:	10004e16 	blt	r2,zero,803404 <___vfprintf_internal_r+0x2080>
  8032cc:	044019c4 	movi	r17,103
  8032d0:	003e2106 	br	802b58 <__alt_mem_descriptor_memory+0xff782b58>
  8032d4:	d9002917 	ldw	r4,164(sp)
  8032d8:	d8802104 	addi	r2,sp,132
  8032dc:	d8800315 	stw	r2,12(sp)
  8032e0:	d9000015 	stw	r4,0(sp)
  8032e4:	d8802504 	addi	r2,sp,148
  8032e8:	d9403617 	ldw	r5,216(sp)
  8032ec:	d9002c17 	ldw	r4,176(sp)
  8032f0:	d8800215 	stw	r2,8(sp)
  8032f4:	d8802604 	addi	r2,sp,152
  8032f8:	d8800115 	stw	r2,4(sp)
  8032fc:	01c000c4 	movi	r7,3
  803300:	980d883a 	mov	r6,r19
  803304:	da003d15 	stw	r8,244(sp)
  803308:	08039a80 	call	8039a8 <_dtoa_r>
  80330c:	d8c02917 	ldw	r3,164(sp)
  803310:	da003d17 	ldw	r8,244(sp)
  803314:	1021883a 	mov	r16,r2
  803318:	00801184 	movi	r2,70
  80331c:	80f9883a 	add	fp,r16,r3
  803320:	88bfd926 	beq	r17,r2,803288 <__alt_mem_descriptor_memory+0xff783288>
  803324:	003de806 	br	802ac8 <__alt_mem_descriptor_memory+0xff782ac8>
  803328:	d9002917 	ldw	r4,164(sp)
  80332c:	00c04d0e 	bge	zero,r3,803464 <___vfprintf_internal_r+0x20e0>
  803330:	2000441e 	bne	r4,zero,803444 <___vfprintf_internal_r+0x20c0>
  803334:	9480004c 	andi	r18,r18,1
  803338:	9000421e 	bne	r18,zero,803444 <___vfprintf_internal_r+0x20c0>
  80333c:	1805883a 	mov	r2,r3
  803340:	18007016 	blt	r3,zero,803504 <___vfprintf_internal_r+0x2180>
  803344:	d8c03217 	ldw	r3,200(sp)
  803348:	d8c02e15 	stw	r3,184(sp)
  80334c:	003e0206 	br	802b58 <__alt_mem_descriptor_memory+0xff782b58>
  803350:	df0022c4 	addi	fp,sp,139
  803354:	dc002915 	stw	r16,164(sp)
  803358:	4027883a 	mov	r19,r8
  80335c:	e021883a 	mov	r16,fp
  803360:	b009883a 	mov	r4,r22
  803364:	01400284 	movi	r5,10
  803368:	080b2a40 	call	80b2a4 <__modsi3>
  80336c:	10800c04 	addi	r2,r2,48
  803370:	843fffc4 	addi	r16,r16,-1
  803374:	b009883a 	mov	r4,r22
  803378:	01400284 	movi	r5,10
  80337c:	80800005 	stb	r2,0(r16)
  803380:	080b2200 	call	80b220 <__divsi3>
  803384:	102d883a 	mov	r22,r2
  803388:	00800244 	movi	r2,9
  80338c:	15bff416 	blt	r2,r22,803360 <__alt_mem_descriptor_memory+0xff783360>
  803390:	9811883a 	mov	r8,r19
  803394:	b0800c04 	addi	r2,r22,48
  803398:	8027883a 	mov	r19,r16
  80339c:	997fffc4 	addi	r5,r19,-1
  8033a0:	98bfffc5 	stb	r2,-1(r19)
  8033a4:	dc002917 	ldw	r16,164(sp)
  8033a8:	2f006a2e 	bgeu	r5,fp,803554 <___vfprintf_internal_r+0x21d0>
  8033ac:	d9c02384 	addi	r7,sp,142
  8033b0:	3ccfc83a 	sub	r7,r7,r19
  8033b4:	d9002344 	addi	r4,sp,141
  8033b8:	e1cf883a 	add	r7,fp,r7
  8033bc:	00000106 	br	8033c4 <___vfprintf_internal_r+0x2040>
  8033c0:	28800003 	ldbu	r2,0(r5)
  8033c4:	20800005 	stb	r2,0(r4)
  8033c8:	21000044 	addi	r4,r4,1
  8033cc:	29400044 	addi	r5,r5,1
  8033d0:	393ffb1e 	bne	r7,r4,8033c0 <__alt_mem_descriptor_memory+0xff7833c0>
  8033d4:	d8802304 	addi	r2,sp,140
  8033d8:	14c5c83a 	sub	r2,r2,r19
  8033dc:	d8c02344 	addi	r3,sp,141
  8033e0:	1885883a 	add	r2,r3,r2
  8033e4:	003f7006 	br	8031a8 <__alt_mem_descriptor_memory+0xff7831a8>
  8033e8:	0005883a 	mov	r2,zero
  8033ec:	003f0f06 	br	80302c <__alt_mem_descriptor_memory+0xff78302c>
  8033f0:	d8c03217 	ldw	r3,200(sp)
  8033f4:	18c00044 	addi	r3,r3,1
  8033f8:	d8c02e15 	stw	r3,184(sp)
  8033fc:	1805883a 	mov	r2,r3
  803400:	183fb20e 	bge	r3,zero,8032cc <__alt_mem_descriptor_memory+0xff7832cc>
  803404:	0005883a 	mov	r2,zero
  803408:	003fb006 	br	8032cc <__alt_mem_descriptor_memory+0xff7832cc>
  80340c:	d9003617 	ldw	r4,216(sp)
  803410:	000d883a 	mov	r6,zero
  803414:	000f883a 	mov	r7,zero
  803418:	980b883a 	mov	r5,r19
  80341c:	d8c03c15 	stw	r3,240(sp)
  803420:	da003d15 	stw	r8,244(sp)
  803424:	080c5680 	call	80c568 <__eqdf2>
  803428:	d8c03c17 	ldw	r3,240(sp)
  80342c:	da003d17 	ldw	r8,244(sp)
  803430:	103f9826 	beq	r2,zero,803294 <__alt_mem_descriptor_memory+0xff783294>
  803434:	00800044 	movi	r2,1
  803438:	10c7c83a 	sub	r3,r2,r3
  80343c:	d8c02615 	stw	r3,152(sp)
  803440:	003f9506 	br	803298 <__alt_mem_descriptor_memory+0xff783298>
  803444:	d9002917 	ldw	r4,164(sp)
  803448:	d8c03217 	ldw	r3,200(sp)
  80344c:	20800044 	addi	r2,r4,1
  803450:	1885883a 	add	r2,r3,r2
  803454:	d8802e15 	stw	r2,184(sp)
  803458:	103dbf0e 	bge	r2,zero,802b58 <__alt_mem_descriptor_memory+0xff782b58>
  80345c:	0005883a 	mov	r2,zero
  803460:	003dbd06 	br	802b58 <__alt_mem_descriptor_memory+0xff782b58>
  803464:	2000211e 	bne	r4,zero,8034ec <___vfprintf_internal_r+0x2168>
  803468:	9480004c 	andi	r18,r18,1
  80346c:	90001f1e 	bne	r18,zero,8034ec <___vfprintf_internal_r+0x2168>
  803470:	00800044 	movi	r2,1
  803474:	d8802e15 	stw	r2,184(sp)
  803478:	003db706 	br	802b58 <__alt_mem_descriptor_memory+0xff782b58>
  80347c:	00800b44 	movi	r2,45
  803480:	05adc83a 	sub	r22,zero,r22
  803484:	d8802305 	stb	r2,140(sp)
  803488:	003f3f06 	br	803188 <__alt_mem_descriptor_memory+0xff783188>
  80348c:	0005883a 	mov	r2,zero
  803490:	003f5206 	br	8031dc <__alt_mem_descriptor_memory+0xff7831dc>
  803494:	90a4703a 	and	r18,r18,r2
  803498:	903f4e26 	beq	r18,zero,8031d4 <__alt_mem_descriptor_memory+0xff7831d4>
  80349c:	003f4a06 	br	8031c8 <__alt_mem_descriptor_memory+0xff7831c8>
  8034a0:	00800084 	movi	r2,2
  8034a4:	10c5c83a 	sub	r2,r2,r3
  8034a8:	003f8406 	br	8032bc <__alt_mem_descriptor_memory+0xff7832bc>
  8034ac:	d8802d17 	ldw	r2,180(sp)
  8034b0:	d9002d17 	ldw	r4,180(sp)
  8034b4:	ac400043 	ldbu	r17,1(r21)
  8034b8:	10800017 	ldw	r2,0(r2)
  8034bc:	582b883a 	mov	r21,r11
  8034c0:	d8802915 	stw	r2,164(sp)
  8034c4:	20800104 	addi	r2,r4,4
  8034c8:	d9002917 	ldw	r4,164(sp)
  8034cc:	d8802d15 	stw	r2,180(sp)
  8034d0:	203e7a0e 	bge	r4,zero,802ebc <__alt_mem_descriptor_memory+0xff782ebc>
  8034d4:	8c403fcc 	andi	r17,r17,255
  8034d8:	00bfffc4 	movi	r2,-1
  8034dc:	8c40201c 	xori	r17,r17,128
  8034e0:	d8802915 	stw	r2,164(sp)
  8034e4:	8c7fe004 	addi	r17,r17,-128
  8034e8:	00380706 	br	801508 <__alt_mem_descriptor_memory+0xff781508>
  8034ec:	d8c02917 	ldw	r3,164(sp)
  8034f0:	18c00084 	addi	r3,r3,2
  8034f4:	d8c02e15 	stw	r3,184(sp)
  8034f8:	1805883a 	mov	r2,r3
  8034fc:	183d960e 	bge	r3,zero,802b58 <__alt_mem_descriptor_memory+0xff782b58>
  803500:	003fd606 	br	80345c <__alt_mem_descriptor_memory+0xff78345c>
  803504:	0005883a 	mov	r2,zero
  803508:	003f8e06 	br	803344 <__alt_mem_descriptor_memory+0xff783344>
  80350c:	9080004c 	andi	r2,r18,1
  803510:	103f811e 	bne	r2,zero,803318 <__alt_mem_descriptor_memory+0xff783318>
  803514:	d8802117 	ldw	r2,132(sp)
  803518:	1405c83a 	sub	r2,r2,r16
  80351c:	d8803315 	stw	r2,204(sp)
  803520:	b47ef326 	beq	r22,r17,8030f0 <__alt_mem_descriptor_memory+0xff7830f0>
  803524:	dd802617 	ldw	r22,152(sp)
  803528:	003f1106 	br	803170 <__alt_mem_descriptor_memory+0xff783170>
  80352c:	d9c02785 	stb	r7,158(sp)
  803530:	00390406 	br	801944 <__alt_mem_descriptor_memory+0xff781944>
  803534:	d9c02785 	stb	r7,158(sp)
  803538:	0038d306 	br	801888 <__alt_mem_descriptor_memory+0xff781888>
  80353c:	d9c02785 	stb	r7,158(sp)
  803540:	003a6106 	br	801ec8 <__alt_mem_descriptor_memory+0xff781ec8>
  803544:	d9c02785 	stb	r7,158(sp)
  803548:	003af806 	br	80212c <__alt_mem_descriptor_memory+0xff78212c>
  80354c:	0005883a 	mov	r2,zero
  803550:	003d7e06 	br	802b4c <__alt_mem_descriptor_memory+0xff782b4c>
  803554:	d8802344 	addi	r2,sp,141
  803558:	003f1306 	br	8031a8 <__alt_mem_descriptor_memory+0xff7831a8>
  80355c:	d9c02785 	stb	r7,158(sp)
  803560:	00392306 	br	8019f0 <__alt_mem_descriptor_memory+0xff7819f0>
  803564:	d9c02785 	stb	r7,158(sp)
  803568:	003aa906 	br	802010 <__alt_mem_descriptor_memory+0xff782010>
  80356c:	d9c02785 	stb	r7,158(sp)
  803570:	003a3d06 	br	801e68 <__alt_mem_descriptor_memory+0xff781e68>
  803574:	d9c02785 	stb	r7,158(sp)
  803578:	003aca06 	br	8020a4 <__alt_mem_descriptor_memory+0xff7820a4>

0080357c <__vfprintf_internal>:
  80357c:	00802074 	movhi	r2,129
  803580:	1098ac04 	addi	r2,r2,25264
  803584:	300f883a 	mov	r7,r6
  803588:	280d883a 	mov	r6,r5
  80358c:	200b883a 	mov	r5,r4
  803590:	11000017 	ldw	r4,0(r2)
  803594:	08013841 	jmpi	801384 <___vfprintf_internal_r>

00803598 <__sbprintf>:
  803598:	2880030b 	ldhu	r2,12(r5)
  80359c:	2ac01917 	ldw	r11,100(r5)
  8035a0:	2a80038b 	ldhu	r10,14(r5)
  8035a4:	2a400717 	ldw	r9,28(r5)
  8035a8:	2a000917 	ldw	r8,36(r5)
  8035ac:	defee204 	addi	sp,sp,-1144
  8035b0:	00c10004 	movi	r3,1024
  8035b4:	dc011a15 	stw	r16,1128(sp)
  8035b8:	10bfff4c 	andi	r2,r2,65533
  8035bc:	2821883a 	mov	r16,r5
  8035c0:	d8cb883a 	add	r5,sp,r3
  8035c4:	dc811c15 	stw	r18,1136(sp)
  8035c8:	dc411b15 	stw	r17,1132(sp)
  8035cc:	dfc11d15 	stw	ra,1140(sp)
  8035d0:	2025883a 	mov	r18,r4
  8035d4:	d881030d 	sth	r2,1036(sp)
  8035d8:	dac11915 	stw	r11,1124(sp)
  8035dc:	da81038d 	sth	r10,1038(sp)
  8035e0:	da410715 	stw	r9,1052(sp)
  8035e4:	da010915 	stw	r8,1060(sp)
  8035e8:	dec10015 	stw	sp,1024(sp)
  8035ec:	dec10415 	stw	sp,1040(sp)
  8035f0:	d8c10215 	stw	r3,1032(sp)
  8035f4:	d8c10515 	stw	r3,1044(sp)
  8035f8:	d8010615 	stw	zero,1048(sp)
  8035fc:	08013840 	call	801384 <___vfprintf_internal_r>
  803600:	1023883a 	mov	r17,r2
  803604:	10000416 	blt	r2,zero,803618 <__sbprintf+0x80>
  803608:	d9410004 	addi	r5,sp,1024
  80360c:	9009883a 	mov	r4,r18
  803610:	080524c0 	call	80524c <_fflush_r>
  803614:	10000d1e 	bne	r2,zero,80364c <__sbprintf+0xb4>
  803618:	d881030b 	ldhu	r2,1036(sp)
  80361c:	1080100c 	andi	r2,r2,64
  803620:	10000326 	beq	r2,zero,803630 <__sbprintf+0x98>
  803624:	8080030b 	ldhu	r2,12(r16)
  803628:	10801014 	ori	r2,r2,64
  80362c:	8080030d 	sth	r2,12(r16)
  803630:	8805883a 	mov	r2,r17
  803634:	dfc11d17 	ldw	ra,1140(sp)
  803638:	dc811c17 	ldw	r18,1136(sp)
  80363c:	dc411b17 	ldw	r17,1132(sp)
  803640:	dc011a17 	ldw	r16,1128(sp)
  803644:	dec11e04 	addi	sp,sp,1144
  803648:	f800283a 	ret
  80364c:	047fffc4 	movi	r17,-1
  803650:	003ff106 	br	803618 <__alt_mem_descriptor_memory+0xff783618>

00803654 <__swsetup_r>:
  803654:	00802074 	movhi	r2,129
  803658:	defffd04 	addi	sp,sp,-12
  80365c:	1098ac04 	addi	r2,r2,25264
  803660:	dc400115 	stw	r17,4(sp)
  803664:	2023883a 	mov	r17,r4
  803668:	11000017 	ldw	r4,0(r2)
  80366c:	dc000015 	stw	r16,0(sp)
  803670:	dfc00215 	stw	ra,8(sp)
  803674:	2821883a 	mov	r16,r5
  803678:	20000226 	beq	r4,zero,803684 <__swsetup_r+0x30>
  80367c:	20800e17 	ldw	r2,56(r4)
  803680:	10003126 	beq	r2,zero,803748 <__swsetup_r+0xf4>
  803684:	8080030b 	ldhu	r2,12(r16)
  803688:	10c0020c 	andi	r3,r2,8
  80368c:	1009883a 	mov	r4,r2
  803690:	18000f26 	beq	r3,zero,8036d0 <__swsetup_r+0x7c>
  803694:	80c00417 	ldw	r3,16(r16)
  803698:	18001526 	beq	r3,zero,8036f0 <__swsetup_r+0x9c>
  80369c:	1100004c 	andi	r4,r2,1
  8036a0:	20001c1e 	bne	r4,zero,803714 <__swsetup_r+0xc0>
  8036a4:	1080008c 	andi	r2,r2,2
  8036a8:	1000291e 	bne	r2,zero,803750 <__swsetup_r+0xfc>
  8036ac:	80800517 	ldw	r2,20(r16)
  8036b0:	80800215 	stw	r2,8(r16)
  8036b4:	18001c26 	beq	r3,zero,803728 <__swsetup_r+0xd4>
  8036b8:	0005883a 	mov	r2,zero
  8036bc:	dfc00217 	ldw	ra,8(sp)
  8036c0:	dc400117 	ldw	r17,4(sp)
  8036c4:	dc000017 	ldw	r16,0(sp)
  8036c8:	dec00304 	addi	sp,sp,12
  8036cc:	f800283a 	ret
  8036d0:	2080040c 	andi	r2,r4,16
  8036d4:	10002e26 	beq	r2,zero,803790 <__swsetup_r+0x13c>
  8036d8:	2080010c 	andi	r2,r4,4
  8036dc:	10001e1e 	bne	r2,zero,803758 <__swsetup_r+0x104>
  8036e0:	80c00417 	ldw	r3,16(r16)
  8036e4:	20800214 	ori	r2,r4,8
  8036e8:	8080030d 	sth	r2,12(r16)
  8036ec:	183feb1e 	bne	r3,zero,80369c <__alt_mem_descriptor_memory+0xff78369c>
  8036f0:	1100a00c 	andi	r4,r2,640
  8036f4:	01408004 	movi	r5,512
  8036f8:	217fe826 	beq	r4,r5,80369c <__alt_mem_descriptor_memory+0xff78369c>
  8036fc:	800b883a 	mov	r5,r16
  803700:	8809883a 	mov	r4,r17
  803704:	0805d100 	call	805d10 <__smakebuf_r>
  803708:	8080030b 	ldhu	r2,12(r16)
  80370c:	80c00417 	ldw	r3,16(r16)
  803710:	003fe206 	br	80369c <__alt_mem_descriptor_memory+0xff78369c>
  803714:	80800517 	ldw	r2,20(r16)
  803718:	80000215 	stw	zero,8(r16)
  80371c:	0085c83a 	sub	r2,zero,r2
  803720:	80800615 	stw	r2,24(r16)
  803724:	183fe41e 	bne	r3,zero,8036b8 <__alt_mem_descriptor_memory+0xff7836b8>
  803728:	80c0030b 	ldhu	r3,12(r16)
  80372c:	0005883a 	mov	r2,zero
  803730:	1900200c 	andi	r4,r3,128
  803734:	203fe126 	beq	r4,zero,8036bc <__alt_mem_descriptor_memory+0xff7836bc>
  803738:	18c01014 	ori	r3,r3,64
  80373c:	80c0030d 	sth	r3,12(r16)
  803740:	00bfffc4 	movi	r2,-1
  803744:	003fdd06 	br	8036bc <__alt_mem_descriptor_memory+0xff7836bc>
  803748:	08056280 	call	805628 <__sinit>
  80374c:	003fcd06 	br	803684 <__alt_mem_descriptor_memory+0xff783684>
  803750:	0005883a 	mov	r2,zero
  803754:	003fd606 	br	8036b0 <__alt_mem_descriptor_memory+0xff7836b0>
  803758:	81400c17 	ldw	r5,48(r16)
  80375c:	28000626 	beq	r5,zero,803778 <__swsetup_r+0x124>
  803760:	80801004 	addi	r2,r16,64
  803764:	28800326 	beq	r5,r2,803774 <__swsetup_r+0x120>
  803768:	8809883a 	mov	r4,r17
  80376c:	080579c0 	call	80579c <_free_r>
  803770:	8100030b 	ldhu	r4,12(r16)
  803774:	80000c15 	stw	zero,48(r16)
  803778:	80c00417 	ldw	r3,16(r16)
  80377c:	00bff6c4 	movi	r2,-37
  803780:	1108703a 	and	r4,r2,r4
  803784:	80000115 	stw	zero,4(r16)
  803788:	80c00015 	stw	r3,0(r16)
  80378c:	003fd506 	br	8036e4 <__alt_mem_descriptor_memory+0xff7836e4>
  803790:	00800244 	movi	r2,9
  803794:	88800015 	stw	r2,0(r17)
  803798:	20801014 	ori	r2,r4,64
  80379c:	8080030d 	sth	r2,12(r16)
  8037a0:	00bfffc4 	movi	r2,-1
  8037a4:	003fc506 	br	8036bc <__alt_mem_descriptor_memory+0xff7836bc>

008037a8 <quorem>:
  8037a8:	defff704 	addi	sp,sp,-36
  8037ac:	dc800215 	stw	r18,8(sp)
  8037b0:	20800417 	ldw	r2,16(r4)
  8037b4:	2c800417 	ldw	r18,16(r5)
  8037b8:	dfc00815 	stw	ra,32(sp)
  8037bc:	ddc00715 	stw	r23,28(sp)
  8037c0:	dd800615 	stw	r22,24(sp)
  8037c4:	dd400515 	stw	r21,20(sp)
  8037c8:	dd000415 	stw	r20,16(sp)
  8037cc:	dcc00315 	stw	r19,12(sp)
  8037d0:	dc400115 	stw	r17,4(sp)
  8037d4:	dc000015 	stw	r16,0(sp)
  8037d8:	14807116 	blt	r2,r18,8039a0 <quorem+0x1f8>
  8037dc:	94bfffc4 	addi	r18,r18,-1
  8037e0:	94ad883a 	add	r22,r18,r18
  8037e4:	b5ad883a 	add	r22,r22,r22
  8037e8:	2c400504 	addi	r17,r5,20
  8037ec:	8da9883a 	add	r20,r17,r22
  8037f0:	25400504 	addi	r21,r4,20
  8037f4:	282f883a 	mov	r23,r5
  8037f8:	adad883a 	add	r22,r21,r22
  8037fc:	a1400017 	ldw	r5,0(r20)
  803800:	2021883a 	mov	r16,r4
  803804:	b1000017 	ldw	r4,0(r22)
  803808:	29400044 	addi	r5,r5,1
  80380c:	080b3180 	call	80b318 <__udivsi3>
  803810:	1027883a 	mov	r19,r2
  803814:	10002c26 	beq	r2,zero,8038c8 <quorem+0x120>
  803818:	a813883a 	mov	r9,r21
  80381c:	880b883a 	mov	r5,r17
  803820:	0009883a 	mov	r4,zero
  803824:	000d883a 	mov	r6,zero
  803828:	2a000017 	ldw	r8,0(r5)
  80382c:	49c00017 	ldw	r7,0(r9)
  803830:	29400104 	addi	r5,r5,4
  803834:	40bfffcc 	andi	r2,r8,65535
  803838:	14c5383a 	mul	r2,r2,r19
  80383c:	4010d43a 	srli	r8,r8,16
  803840:	38ffffcc 	andi	r3,r7,65535
  803844:	1105883a 	add	r2,r2,r4
  803848:	1008d43a 	srli	r4,r2,16
  80384c:	44d1383a 	mul	r8,r8,r19
  803850:	198d883a 	add	r6,r3,r6
  803854:	10ffffcc 	andi	r3,r2,65535
  803858:	30c7c83a 	sub	r3,r6,r3
  80385c:	380ed43a 	srli	r7,r7,16
  803860:	4105883a 	add	r2,r8,r4
  803864:	180dd43a 	srai	r6,r3,16
  803868:	113fffcc 	andi	r4,r2,65535
  80386c:	390fc83a 	sub	r7,r7,r4
  803870:	398d883a 	add	r6,r7,r6
  803874:	300e943a 	slli	r7,r6,16
  803878:	18ffffcc 	andi	r3,r3,65535
  80387c:	1008d43a 	srli	r4,r2,16
  803880:	38ceb03a 	or	r7,r7,r3
  803884:	49c00015 	stw	r7,0(r9)
  803888:	300dd43a 	srai	r6,r6,16
  80388c:	4a400104 	addi	r9,r9,4
  803890:	a17fe52e 	bgeu	r20,r5,803828 <__alt_mem_descriptor_memory+0xff783828>
  803894:	b0800017 	ldw	r2,0(r22)
  803898:	10000b1e 	bne	r2,zero,8038c8 <quorem+0x120>
  80389c:	b0bfff04 	addi	r2,r22,-4
  8038a0:	a880082e 	bgeu	r21,r2,8038c4 <quorem+0x11c>
  8038a4:	b0ffff17 	ldw	r3,-4(r22)
  8038a8:	18000326 	beq	r3,zero,8038b8 <quorem+0x110>
  8038ac:	00000506 	br	8038c4 <quorem+0x11c>
  8038b0:	10c00017 	ldw	r3,0(r2)
  8038b4:	1800031e 	bne	r3,zero,8038c4 <quorem+0x11c>
  8038b8:	10bfff04 	addi	r2,r2,-4
  8038bc:	94bfffc4 	addi	r18,r18,-1
  8038c0:	a8bffb36 	bltu	r21,r2,8038b0 <__alt_mem_descriptor_memory+0xff7838b0>
  8038c4:	84800415 	stw	r18,16(r16)
  8038c8:	b80b883a 	mov	r5,r23
  8038cc:	8009883a 	mov	r4,r16
  8038d0:	08071cc0 	call	8071cc <__mcmp>
  8038d4:	10002616 	blt	r2,zero,803970 <quorem+0x1c8>
  8038d8:	9cc00044 	addi	r19,r19,1
  8038dc:	a805883a 	mov	r2,r21
  8038e0:	000b883a 	mov	r5,zero
  8038e4:	11000017 	ldw	r4,0(r2)
  8038e8:	89800017 	ldw	r6,0(r17)
  8038ec:	10800104 	addi	r2,r2,4
  8038f0:	20ffffcc 	andi	r3,r4,65535
  8038f4:	194b883a 	add	r5,r3,r5
  8038f8:	30ffffcc 	andi	r3,r6,65535
  8038fc:	28c7c83a 	sub	r3,r5,r3
  803900:	300cd43a 	srli	r6,r6,16
  803904:	2008d43a 	srli	r4,r4,16
  803908:	180bd43a 	srai	r5,r3,16
  80390c:	18ffffcc 	andi	r3,r3,65535
  803910:	2189c83a 	sub	r4,r4,r6
  803914:	2149883a 	add	r4,r4,r5
  803918:	200c943a 	slli	r6,r4,16
  80391c:	8c400104 	addi	r17,r17,4
  803920:	200bd43a 	srai	r5,r4,16
  803924:	30c6b03a 	or	r3,r6,r3
  803928:	10ffff15 	stw	r3,-4(r2)
  80392c:	a47fed2e 	bgeu	r20,r17,8038e4 <__alt_mem_descriptor_memory+0xff7838e4>
  803930:	9485883a 	add	r2,r18,r18
  803934:	1085883a 	add	r2,r2,r2
  803938:	a887883a 	add	r3,r21,r2
  80393c:	18800017 	ldw	r2,0(r3)
  803940:	10000b1e 	bne	r2,zero,803970 <quorem+0x1c8>
  803944:	18bfff04 	addi	r2,r3,-4
  803948:	a880082e 	bgeu	r21,r2,80396c <quorem+0x1c4>
  80394c:	18ffff17 	ldw	r3,-4(r3)
  803950:	18000326 	beq	r3,zero,803960 <quorem+0x1b8>
  803954:	00000506 	br	80396c <quorem+0x1c4>
  803958:	10c00017 	ldw	r3,0(r2)
  80395c:	1800031e 	bne	r3,zero,80396c <quorem+0x1c4>
  803960:	10bfff04 	addi	r2,r2,-4
  803964:	94bfffc4 	addi	r18,r18,-1
  803968:	a8bffb36 	bltu	r21,r2,803958 <__alt_mem_descriptor_memory+0xff783958>
  80396c:	84800415 	stw	r18,16(r16)
  803970:	9805883a 	mov	r2,r19
  803974:	dfc00817 	ldw	ra,32(sp)
  803978:	ddc00717 	ldw	r23,28(sp)
  80397c:	dd800617 	ldw	r22,24(sp)
  803980:	dd400517 	ldw	r21,20(sp)
  803984:	dd000417 	ldw	r20,16(sp)
  803988:	dcc00317 	ldw	r19,12(sp)
  80398c:	dc800217 	ldw	r18,8(sp)
  803990:	dc400117 	ldw	r17,4(sp)
  803994:	dc000017 	ldw	r16,0(sp)
  803998:	dec00904 	addi	sp,sp,36
  80399c:	f800283a 	ret
  8039a0:	0005883a 	mov	r2,zero
  8039a4:	003ff306 	br	803974 <__alt_mem_descriptor_memory+0xff783974>

008039a8 <_dtoa_r>:
  8039a8:	20801017 	ldw	r2,64(r4)
  8039ac:	deffde04 	addi	sp,sp,-136
  8039b0:	df002015 	stw	fp,128(sp)
  8039b4:	dcc01b15 	stw	r19,108(sp)
  8039b8:	dc801a15 	stw	r18,104(sp)
  8039bc:	dc401915 	stw	r17,100(sp)
  8039c0:	dc001815 	stw	r16,96(sp)
  8039c4:	dfc02115 	stw	ra,132(sp)
  8039c8:	ddc01f15 	stw	r23,124(sp)
  8039cc:	dd801e15 	stw	r22,120(sp)
  8039d0:	dd401d15 	stw	r21,116(sp)
  8039d4:	dd001c15 	stw	r20,112(sp)
  8039d8:	d9c00315 	stw	r7,12(sp)
  8039dc:	2039883a 	mov	fp,r4
  8039e0:	3023883a 	mov	r17,r6
  8039e4:	2825883a 	mov	r18,r5
  8039e8:	dc002417 	ldw	r16,144(sp)
  8039ec:	3027883a 	mov	r19,r6
  8039f0:	10000826 	beq	r2,zero,803a14 <_dtoa_r+0x6c>
  8039f4:	21801117 	ldw	r6,68(r4)
  8039f8:	00c00044 	movi	r3,1
  8039fc:	100b883a 	mov	r5,r2
  803a00:	1986983a 	sll	r3,r3,r6
  803a04:	11800115 	stw	r6,4(r2)
  803a08:	10c00215 	stw	r3,8(r2)
  803a0c:	08069ac0 	call	8069ac <_Bfree>
  803a10:	e0001015 	stw	zero,64(fp)
  803a14:	88002e16 	blt	r17,zero,803ad0 <_dtoa_r+0x128>
  803a18:	80000015 	stw	zero,0(r16)
  803a1c:	889ffc2c 	andhi	r2,r17,32752
  803a20:	00dffc34 	movhi	r3,32752
  803a24:	10c01c26 	beq	r2,r3,803a98 <_dtoa_r+0xf0>
  803a28:	000d883a 	mov	r6,zero
  803a2c:	000f883a 	mov	r7,zero
  803a30:	9009883a 	mov	r4,r18
  803a34:	980b883a 	mov	r5,r19
  803a38:	080c5680 	call	80c568 <__eqdf2>
  803a3c:	10002b1e 	bne	r2,zero,803aec <_dtoa_r+0x144>
  803a40:	d9c02317 	ldw	r7,140(sp)
  803a44:	00800044 	movi	r2,1
  803a48:	38800015 	stw	r2,0(r7)
  803a4c:	d8802517 	ldw	r2,148(sp)
  803a50:	10019e26 	beq	r2,zero,8040cc <_dtoa_r+0x724>
  803a54:	d8c02517 	ldw	r3,148(sp)
  803a58:	00802074 	movhi	r2,129
  803a5c:	108fef44 	addi	r2,r2,16317
  803a60:	18800015 	stw	r2,0(r3)
  803a64:	10bfffc4 	addi	r2,r2,-1
  803a68:	dfc02117 	ldw	ra,132(sp)
  803a6c:	df002017 	ldw	fp,128(sp)
  803a70:	ddc01f17 	ldw	r23,124(sp)
  803a74:	dd801e17 	ldw	r22,120(sp)
  803a78:	dd401d17 	ldw	r21,116(sp)
  803a7c:	dd001c17 	ldw	r20,112(sp)
  803a80:	dcc01b17 	ldw	r19,108(sp)
  803a84:	dc801a17 	ldw	r18,104(sp)
  803a88:	dc401917 	ldw	r17,100(sp)
  803a8c:	dc001817 	ldw	r16,96(sp)
  803a90:	dec02204 	addi	sp,sp,136
  803a94:	f800283a 	ret
  803a98:	d8c02317 	ldw	r3,140(sp)
  803a9c:	0089c3c4 	movi	r2,9999
  803aa0:	18800015 	stw	r2,0(r3)
  803aa4:	90017726 	beq	r18,zero,804084 <_dtoa_r+0x6dc>
  803aa8:	00802074 	movhi	r2,129
  803aac:	108ffb04 	addi	r2,r2,16364
  803ab0:	d9002517 	ldw	r4,148(sp)
  803ab4:	203fec26 	beq	r4,zero,803a68 <__alt_mem_descriptor_memory+0xff783a68>
  803ab8:	10c000c7 	ldb	r3,3(r2)
  803abc:	1801781e 	bne	r3,zero,8040a0 <_dtoa_r+0x6f8>
  803ac0:	10c000c4 	addi	r3,r2,3
  803ac4:	d9802517 	ldw	r6,148(sp)
  803ac8:	30c00015 	stw	r3,0(r6)
  803acc:	003fe606 	br	803a68 <__alt_mem_descriptor_memory+0xff783a68>
  803ad0:	04e00034 	movhi	r19,32768
  803ad4:	9cffffc4 	addi	r19,r19,-1
  803ad8:	00800044 	movi	r2,1
  803adc:	8ce6703a 	and	r19,r17,r19
  803ae0:	80800015 	stw	r2,0(r16)
  803ae4:	9823883a 	mov	r17,r19
  803ae8:	003fcc06 	br	803a1c <__alt_mem_descriptor_memory+0xff783a1c>
  803aec:	d8800204 	addi	r2,sp,8
  803af0:	d8800015 	stw	r2,0(sp)
  803af4:	d9c00104 	addi	r7,sp,4
  803af8:	900b883a 	mov	r5,r18
  803afc:	980d883a 	mov	r6,r19
  803b00:	e009883a 	mov	r4,fp
  803b04:	8820d53a 	srli	r16,r17,20
  803b08:	08075980 	call	807598 <__d2b>
  803b0c:	d8800915 	stw	r2,36(sp)
  803b10:	8001651e 	bne	r16,zero,8040a8 <_dtoa_r+0x700>
  803b14:	dd800217 	ldw	r22,8(sp)
  803b18:	dc000117 	ldw	r16,4(sp)
  803b1c:	00800804 	movi	r2,32
  803b20:	b421883a 	add	r16,r22,r16
  803b24:	80c10c84 	addi	r3,r16,1074
  803b28:	10c2d10e 	bge	r2,r3,804670 <_dtoa_r+0xcc8>
  803b2c:	00801004 	movi	r2,64
  803b30:	81010484 	addi	r4,r16,1042
  803b34:	10c7c83a 	sub	r3,r2,r3
  803b38:	9108d83a 	srl	r4,r18,r4
  803b3c:	88e2983a 	sll	r17,r17,r3
  803b40:	2448b03a 	or	r4,r4,r17
  803b44:	080d9300 	call	80d930 <__floatunsidf>
  803b48:	017f8434 	movhi	r5,65040
  803b4c:	01800044 	movi	r6,1
  803b50:	1009883a 	mov	r4,r2
  803b54:	194b883a 	add	r5,r3,r5
  803b58:	843fffc4 	addi	r16,r16,-1
  803b5c:	d9801115 	stw	r6,68(sp)
  803b60:	000d883a 	mov	r6,zero
  803b64:	01cffe34 	movhi	r7,16376
  803b68:	080ced80 	call	80ced8 <__subdf3>
  803b6c:	0198dbf4 	movhi	r6,25455
  803b70:	01cff4f4 	movhi	r7,16339
  803b74:	3190d844 	addi	r6,r6,17249
  803b78:	39e1e9c4 	addi	r7,r7,-30809
  803b7c:	1009883a 	mov	r4,r2
  803b80:	180b883a 	mov	r5,r3
  803b84:	080c7c00 	call	80c7c0 <__muldf3>
  803b88:	01a2d874 	movhi	r6,35681
  803b8c:	01cff1f4 	movhi	r7,16327
  803b90:	31b22cc4 	addi	r6,r6,-14157
  803b94:	39e28a04 	addi	r7,r7,-30168
  803b98:	180b883a 	mov	r5,r3
  803b9c:	1009883a 	mov	r4,r2
  803ba0:	080b3d40 	call	80b3d4 <__adddf3>
  803ba4:	8009883a 	mov	r4,r16
  803ba8:	1029883a 	mov	r20,r2
  803bac:	1823883a 	mov	r17,r3
  803bb0:	080d8540 	call	80d854 <__floatsidf>
  803bb4:	019427f4 	movhi	r6,20639
  803bb8:	01cff4f4 	movhi	r7,16339
  803bbc:	319e7ec4 	addi	r6,r6,31227
  803bc0:	39d104c4 	addi	r7,r7,17427
  803bc4:	1009883a 	mov	r4,r2
  803bc8:	180b883a 	mov	r5,r3
  803bcc:	080c7c00 	call	80c7c0 <__muldf3>
  803bd0:	100d883a 	mov	r6,r2
  803bd4:	180f883a 	mov	r7,r3
  803bd8:	a009883a 	mov	r4,r20
  803bdc:	880b883a 	mov	r5,r17
  803be0:	080b3d40 	call	80b3d4 <__adddf3>
  803be4:	1009883a 	mov	r4,r2
  803be8:	180b883a 	mov	r5,r3
  803bec:	1029883a 	mov	r20,r2
  803bf0:	1823883a 	mov	r17,r3
  803bf4:	080d7d40 	call	80d7d4 <__fixdfsi>
  803bf8:	000d883a 	mov	r6,zero
  803bfc:	000f883a 	mov	r7,zero
  803c00:	a009883a 	mov	r4,r20
  803c04:	880b883a 	mov	r5,r17
  803c08:	d8800515 	stw	r2,20(sp)
  803c0c:	080c6cc0 	call	80c6cc <__ledf2>
  803c10:	10028716 	blt	r2,zero,804630 <_dtoa_r+0xc88>
  803c14:	d8c00517 	ldw	r3,20(sp)
  803c18:	00800584 	movi	r2,22
  803c1c:	10c27536 	bltu	r2,r3,8045f4 <_dtoa_r+0xc4c>
  803c20:	180490fa 	slli	r2,r3,3
  803c24:	00c02074 	movhi	r3,129
  803c28:	18d01704 	addi	r3,r3,16476
  803c2c:	1885883a 	add	r2,r3,r2
  803c30:	11000017 	ldw	r4,0(r2)
  803c34:	11400117 	ldw	r5,4(r2)
  803c38:	900d883a 	mov	r6,r18
  803c3c:	980f883a 	mov	r7,r19
  803c40:	080c5f00 	call	80c5f0 <__gedf2>
  803c44:	00828d0e 	bge	zero,r2,80467c <_dtoa_r+0xcd4>
  803c48:	d9000517 	ldw	r4,20(sp)
  803c4c:	d8000e15 	stw	zero,56(sp)
  803c50:	213fffc4 	addi	r4,r4,-1
  803c54:	d9000515 	stw	r4,20(sp)
  803c58:	b42dc83a 	sub	r22,r22,r16
  803c5c:	b5bfffc4 	addi	r22,r22,-1
  803c60:	b0026f16 	blt	r22,zero,804620 <_dtoa_r+0xc78>
  803c64:	d8000815 	stw	zero,32(sp)
  803c68:	d9c00517 	ldw	r7,20(sp)
  803c6c:	38026416 	blt	r7,zero,804600 <_dtoa_r+0xc58>
  803c70:	b1ed883a 	add	r22,r22,r7
  803c74:	d9c00d15 	stw	r7,52(sp)
  803c78:	d8000a15 	stw	zero,40(sp)
  803c7c:	d9800317 	ldw	r6,12(sp)
  803c80:	00800244 	movi	r2,9
  803c84:	11811436 	bltu	r2,r6,8040d8 <_dtoa_r+0x730>
  803c88:	00800144 	movi	r2,5
  803c8c:	1184e10e 	bge	r2,r6,805014 <_dtoa_r+0x166c>
  803c90:	31bfff04 	addi	r6,r6,-4
  803c94:	d9800315 	stw	r6,12(sp)
  803c98:	0023883a 	mov	r17,zero
  803c9c:	d9800317 	ldw	r6,12(sp)
  803ca0:	008000c4 	movi	r2,3
  803ca4:	30836726 	beq	r6,r2,804a44 <_dtoa_r+0x109c>
  803ca8:	1183410e 	bge	r2,r6,8049b0 <_dtoa_r+0x1008>
  803cac:	d9c00317 	ldw	r7,12(sp)
  803cb0:	00800104 	movi	r2,4
  803cb4:	38827c26 	beq	r7,r2,8046a8 <_dtoa_r+0xd00>
  803cb8:	00800144 	movi	r2,5
  803cbc:	3884c41e 	bne	r7,r2,804fd0 <_dtoa_r+0x1628>
  803cc0:	00800044 	movi	r2,1
  803cc4:	d8800b15 	stw	r2,44(sp)
  803cc8:	d8c00517 	ldw	r3,20(sp)
  803ccc:	d9002217 	ldw	r4,136(sp)
  803cd0:	1907883a 	add	r3,r3,r4
  803cd4:	19800044 	addi	r6,r3,1
  803cd8:	d8c00c15 	stw	r3,48(sp)
  803cdc:	d9800615 	stw	r6,24(sp)
  803ce0:	0183a40e 	bge	zero,r6,804b74 <_dtoa_r+0x11cc>
  803ce4:	d9800617 	ldw	r6,24(sp)
  803ce8:	3021883a 	mov	r16,r6
  803cec:	e0001115 	stw	zero,68(fp)
  803cf0:	008005c4 	movi	r2,23
  803cf4:	1184c92e 	bgeu	r2,r6,80501c <_dtoa_r+0x1674>
  803cf8:	00c00044 	movi	r3,1
  803cfc:	00800104 	movi	r2,4
  803d00:	1085883a 	add	r2,r2,r2
  803d04:	11000504 	addi	r4,r2,20
  803d08:	180b883a 	mov	r5,r3
  803d0c:	18c00044 	addi	r3,r3,1
  803d10:	313ffb2e 	bgeu	r6,r4,803d00 <__alt_mem_descriptor_memory+0xff783d00>
  803d14:	e1401115 	stw	r5,68(fp)
  803d18:	e009883a 	mov	r4,fp
  803d1c:	08069040 	call	806904 <_Balloc>
  803d20:	d8800715 	stw	r2,28(sp)
  803d24:	e0801015 	stw	r2,64(fp)
  803d28:	00800384 	movi	r2,14
  803d2c:	1400f736 	bltu	r2,r16,80410c <_dtoa_r+0x764>
  803d30:	8800f626 	beq	r17,zero,80410c <_dtoa_r+0x764>
  803d34:	d9c00517 	ldw	r7,20(sp)
  803d38:	01c39a0e 	bge	zero,r7,804ba4 <_dtoa_r+0x11fc>
  803d3c:	388003cc 	andi	r2,r7,15
  803d40:	100490fa 	slli	r2,r2,3
  803d44:	382bd13a 	srai	r21,r7,4
  803d48:	00c02074 	movhi	r3,129
  803d4c:	18d01704 	addi	r3,r3,16476
  803d50:	1885883a 	add	r2,r3,r2
  803d54:	a8c0040c 	andi	r3,r21,16
  803d58:	12400017 	ldw	r9,0(r2)
  803d5c:	12000117 	ldw	r8,4(r2)
  803d60:	18037926 	beq	r3,zero,804b48 <_dtoa_r+0x11a0>
  803d64:	00802074 	movhi	r2,129
  803d68:	10900d04 	addi	r2,r2,16436
  803d6c:	11800817 	ldw	r6,32(r2)
  803d70:	11c00917 	ldw	r7,36(r2)
  803d74:	9009883a 	mov	r4,r18
  803d78:	980b883a 	mov	r5,r19
  803d7c:	da001715 	stw	r8,92(sp)
  803d80:	da401615 	stw	r9,88(sp)
  803d84:	080bc800 	call	80bc80 <__divdf3>
  803d88:	da001717 	ldw	r8,92(sp)
  803d8c:	da401617 	ldw	r9,88(sp)
  803d90:	ad4003cc 	andi	r21,r21,15
  803d94:	040000c4 	movi	r16,3
  803d98:	1023883a 	mov	r17,r2
  803d9c:	1829883a 	mov	r20,r3
  803da0:	a8001126 	beq	r21,zero,803de8 <_dtoa_r+0x440>
  803da4:	05c02074 	movhi	r23,129
  803da8:	bdd00d04 	addi	r23,r23,16436
  803dac:	4805883a 	mov	r2,r9
  803db0:	4007883a 	mov	r3,r8
  803db4:	a980004c 	andi	r6,r21,1
  803db8:	1009883a 	mov	r4,r2
  803dbc:	a82bd07a 	srai	r21,r21,1
  803dc0:	180b883a 	mov	r5,r3
  803dc4:	30000426 	beq	r6,zero,803dd8 <_dtoa_r+0x430>
  803dc8:	b9800017 	ldw	r6,0(r23)
  803dcc:	b9c00117 	ldw	r7,4(r23)
  803dd0:	84000044 	addi	r16,r16,1
  803dd4:	080c7c00 	call	80c7c0 <__muldf3>
  803dd8:	bdc00204 	addi	r23,r23,8
  803ddc:	a83ff51e 	bne	r21,zero,803db4 <__alt_mem_descriptor_memory+0xff783db4>
  803de0:	1013883a 	mov	r9,r2
  803de4:	1811883a 	mov	r8,r3
  803de8:	480d883a 	mov	r6,r9
  803dec:	400f883a 	mov	r7,r8
  803df0:	8809883a 	mov	r4,r17
  803df4:	a00b883a 	mov	r5,r20
  803df8:	080bc800 	call	80bc80 <__divdf3>
  803dfc:	d8800f15 	stw	r2,60(sp)
  803e00:	d8c01015 	stw	r3,64(sp)
  803e04:	d8c00e17 	ldw	r3,56(sp)
  803e08:	18000626 	beq	r3,zero,803e24 <_dtoa_r+0x47c>
  803e0c:	d9000f17 	ldw	r4,60(sp)
  803e10:	d9401017 	ldw	r5,64(sp)
  803e14:	000d883a 	mov	r6,zero
  803e18:	01cffc34 	movhi	r7,16368
  803e1c:	080c6cc0 	call	80c6cc <__ledf2>
  803e20:	10040b16 	blt	r2,zero,804e50 <_dtoa_r+0x14a8>
  803e24:	8009883a 	mov	r4,r16
  803e28:	080d8540 	call	80d854 <__floatsidf>
  803e2c:	d9800f17 	ldw	r6,60(sp)
  803e30:	d9c01017 	ldw	r7,64(sp)
  803e34:	1009883a 	mov	r4,r2
  803e38:	180b883a 	mov	r5,r3
  803e3c:	080c7c00 	call	80c7c0 <__muldf3>
  803e40:	000d883a 	mov	r6,zero
  803e44:	01d00734 	movhi	r7,16412
  803e48:	1009883a 	mov	r4,r2
  803e4c:	180b883a 	mov	r5,r3
  803e50:	080b3d40 	call	80b3d4 <__adddf3>
  803e54:	1021883a 	mov	r16,r2
  803e58:	d8800617 	ldw	r2,24(sp)
  803e5c:	047f3034 	movhi	r17,64704
  803e60:	1c63883a 	add	r17,r3,r17
  803e64:	10031826 	beq	r2,zero,804ac8 <_dtoa_r+0x1120>
  803e68:	d8c00517 	ldw	r3,20(sp)
  803e6c:	db000617 	ldw	r12,24(sp)
  803e70:	d8c01315 	stw	r3,76(sp)
  803e74:	d9000b17 	ldw	r4,44(sp)
  803e78:	20038f26 	beq	r4,zero,804cb8 <_dtoa_r+0x1310>
  803e7c:	60bfffc4 	addi	r2,r12,-1
  803e80:	100490fa 	slli	r2,r2,3
  803e84:	00c02074 	movhi	r3,129
  803e88:	18d01704 	addi	r3,r3,16476
  803e8c:	1885883a 	add	r2,r3,r2
  803e90:	11800017 	ldw	r6,0(r2)
  803e94:	11c00117 	ldw	r7,4(r2)
  803e98:	d8800717 	ldw	r2,28(sp)
  803e9c:	0009883a 	mov	r4,zero
  803ea0:	014ff834 	movhi	r5,16352
  803ea4:	db001615 	stw	r12,88(sp)
  803ea8:	15c00044 	addi	r23,r2,1
  803eac:	080bc800 	call	80bc80 <__divdf3>
  803eb0:	800d883a 	mov	r6,r16
  803eb4:	880f883a 	mov	r7,r17
  803eb8:	1009883a 	mov	r4,r2
  803ebc:	180b883a 	mov	r5,r3
  803ec0:	080ced80 	call	80ced8 <__subdf3>
  803ec4:	d9401017 	ldw	r5,64(sp)
  803ec8:	d9000f17 	ldw	r4,60(sp)
  803ecc:	102b883a 	mov	r21,r2
  803ed0:	d8c01215 	stw	r3,72(sp)
  803ed4:	080d7d40 	call	80d7d4 <__fixdfsi>
  803ed8:	1009883a 	mov	r4,r2
  803edc:	1029883a 	mov	r20,r2
  803ee0:	080d8540 	call	80d854 <__floatsidf>
  803ee4:	d9000f17 	ldw	r4,60(sp)
  803ee8:	d9401017 	ldw	r5,64(sp)
  803eec:	100d883a 	mov	r6,r2
  803ef0:	180f883a 	mov	r7,r3
  803ef4:	080ced80 	call	80ced8 <__subdf3>
  803ef8:	1823883a 	mov	r17,r3
  803efc:	d8c00717 	ldw	r3,28(sp)
  803f00:	d9401217 	ldw	r5,72(sp)
  803f04:	a2000c04 	addi	r8,r20,48
  803f08:	1021883a 	mov	r16,r2
  803f0c:	1a000005 	stb	r8,0(r3)
  803f10:	800d883a 	mov	r6,r16
  803f14:	880f883a 	mov	r7,r17
  803f18:	a809883a 	mov	r4,r21
  803f1c:	4029883a 	mov	r20,r8
  803f20:	080c5f00 	call	80c5f0 <__gedf2>
  803f24:	00841d16 	blt	zero,r2,804f9c <_dtoa_r+0x15f4>
  803f28:	800d883a 	mov	r6,r16
  803f2c:	880f883a 	mov	r7,r17
  803f30:	0009883a 	mov	r4,zero
  803f34:	014ffc34 	movhi	r5,16368
  803f38:	080ced80 	call	80ced8 <__subdf3>
  803f3c:	d9401217 	ldw	r5,72(sp)
  803f40:	100d883a 	mov	r6,r2
  803f44:	180f883a 	mov	r7,r3
  803f48:	a809883a 	mov	r4,r21
  803f4c:	080c5f00 	call	80c5f0 <__gedf2>
  803f50:	db001617 	ldw	r12,88(sp)
  803f54:	00840e16 	blt	zero,r2,804f90 <_dtoa_r+0x15e8>
  803f58:	00800044 	movi	r2,1
  803f5c:	13006b0e 	bge	r2,r12,80410c <_dtoa_r+0x764>
  803f60:	d9000717 	ldw	r4,28(sp)
  803f64:	dd800f15 	stw	r22,60(sp)
  803f68:	dcc01015 	stw	r19,64(sp)
  803f6c:	2319883a 	add	r12,r4,r12
  803f70:	dcc01217 	ldw	r19,72(sp)
  803f74:	602d883a 	mov	r22,r12
  803f78:	dc801215 	stw	r18,72(sp)
  803f7c:	b825883a 	mov	r18,r23
  803f80:	00000906 	br	803fa8 <_dtoa_r+0x600>
  803f84:	080ced80 	call	80ced8 <__subdf3>
  803f88:	a80d883a 	mov	r6,r21
  803f8c:	980f883a 	mov	r7,r19
  803f90:	1009883a 	mov	r4,r2
  803f94:	180b883a 	mov	r5,r3
  803f98:	080c6cc0 	call	80c6cc <__ledf2>
  803f9c:	1003e816 	blt	r2,zero,804f40 <_dtoa_r+0x1598>
  803fa0:	b825883a 	mov	r18,r23
  803fa4:	bd83e926 	beq	r23,r22,804f4c <_dtoa_r+0x15a4>
  803fa8:	a809883a 	mov	r4,r21
  803fac:	980b883a 	mov	r5,r19
  803fb0:	000d883a 	mov	r6,zero
  803fb4:	01d00934 	movhi	r7,16420
  803fb8:	080c7c00 	call	80c7c0 <__muldf3>
  803fbc:	000d883a 	mov	r6,zero
  803fc0:	01d00934 	movhi	r7,16420
  803fc4:	8009883a 	mov	r4,r16
  803fc8:	880b883a 	mov	r5,r17
  803fcc:	102b883a 	mov	r21,r2
  803fd0:	1827883a 	mov	r19,r3
  803fd4:	080c7c00 	call	80c7c0 <__muldf3>
  803fd8:	180b883a 	mov	r5,r3
  803fdc:	1009883a 	mov	r4,r2
  803fe0:	1821883a 	mov	r16,r3
  803fe4:	1023883a 	mov	r17,r2
  803fe8:	080d7d40 	call	80d7d4 <__fixdfsi>
  803fec:	1009883a 	mov	r4,r2
  803ff0:	1029883a 	mov	r20,r2
  803ff4:	080d8540 	call	80d854 <__floatsidf>
  803ff8:	8809883a 	mov	r4,r17
  803ffc:	800b883a 	mov	r5,r16
  804000:	100d883a 	mov	r6,r2
  804004:	180f883a 	mov	r7,r3
  804008:	080ced80 	call	80ced8 <__subdf3>
  80400c:	a5000c04 	addi	r20,r20,48
  804010:	a80d883a 	mov	r6,r21
  804014:	980f883a 	mov	r7,r19
  804018:	1009883a 	mov	r4,r2
  80401c:	180b883a 	mov	r5,r3
  804020:	95000005 	stb	r20,0(r18)
  804024:	1021883a 	mov	r16,r2
  804028:	1823883a 	mov	r17,r3
  80402c:	080c6cc0 	call	80c6cc <__ledf2>
  804030:	bdc00044 	addi	r23,r23,1
  804034:	800d883a 	mov	r6,r16
  804038:	880f883a 	mov	r7,r17
  80403c:	0009883a 	mov	r4,zero
  804040:	014ffc34 	movhi	r5,16368
  804044:	103fcf0e 	bge	r2,zero,803f84 <__alt_mem_descriptor_memory+0xff783f84>
  804048:	d8c01317 	ldw	r3,76(sp)
  80404c:	d8c00515 	stw	r3,20(sp)
  804050:	d9400917 	ldw	r5,36(sp)
  804054:	e009883a 	mov	r4,fp
  804058:	08069ac0 	call	8069ac <_Bfree>
  80405c:	d9000517 	ldw	r4,20(sp)
  804060:	d9802317 	ldw	r6,140(sp)
  804064:	d9c02517 	ldw	r7,148(sp)
  804068:	b8000005 	stb	zero,0(r23)
  80406c:	20800044 	addi	r2,r4,1
  804070:	30800015 	stw	r2,0(r6)
  804074:	3802aa26 	beq	r7,zero,804b20 <_dtoa_r+0x1178>
  804078:	3dc00015 	stw	r23,0(r7)
  80407c:	d8800717 	ldw	r2,28(sp)
  804080:	003e7906 	br	803a68 <__alt_mem_descriptor_memory+0xff783a68>
  804084:	00800434 	movhi	r2,16
  804088:	10bfffc4 	addi	r2,r2,-1
  80408c:	88a2703a 	and	r17,r17,r2
  804090:	883e851e 	bne	r17,zero,803aa8 <__alt_mem_descriptor_memory+0xff783aa8>
  804094:	00802074 	movhi	r2,129
  804098:	108ff804 	addi	r2,r2,16352
  80409c:	003e8406 	br	803ab0 <__alt_mem_descriptor_memory+0xff783ab0>
  8040a0:	10c00204 	addi	r3,r2,8
  8040a4:	003e8706 	br	803ac4 <__alt_mem_descriptor_memory+0xff783ac4>
  8040a8:	01400434 	movhi	r5,16
  8040ac:	297fffc4 	addi	r5,r5,-1
  8040b0:	994a703a 	and	r5,r19,r5
  8040b4:	9009883a 	mov	r4,r18
  8040b8:	843f0044 	addi	r16,r16,-1023
  8040bc:	294ffc34 	orhi	r5,r5,16368
  8040c0:	dd800217 	ldw	r22,8(sp)
  8040c4:	d8001115 	stw	zero,68(sp)
  8040c8:	003ea506 	br	803b60 <__alt_mem_descriptor_memory+0xff783b60>
  8040cc:	00802074 	movhi	r2,129
  8040d0:	108fef04 	addi	r2,r2,16316
  8040d4:	003e6406 	br	803a68 <__alt_mem_descriptor_memory+0xff783a68>
  8040d8:	e0001115 	stw	zero,68(fp)
  8040dc:	000b883a 	mov	r5,zero
  8040e0:	e009883a 	mov	r4,fp
  8040e4:	08069040 	call	806904 <_Balloc>
  8040e8:	01bfffc4 	movi	r6,-1
  8040ec:	01c00044 	movi	r7,1
  8040f0:	d8800715 	stw	r2,28(sp)
  8040f4:	d9800c15 	stw	r6,48(sp)
  8040f8:	e0801015 	stw	r2,64(fp)
  8040fc:	d8000315 	stw	zero,12(sp)
  804100:	d9c00b15 	stw	r7,44(sp)
  804104:	d9800615 	stw	r6,24(sp)
  804108:	d8002215 	stw	zero,136(sp)
  80410c:	d8800117 	ldw	r2,4(sp)
  804110:	10008916 	blt	r2,zero,804338 <_dtoa_r+0x990>
  804114:	d9000517 	ldw	r4,20(sp)
  804118:	00c00384 	movi	r3,14
  80411c:	19008616 	blt	r3,r4,804338 <_dtoa_r+0x990>
  804120:	200490fa 	slli	r2,r4,3
  804124:	00c02074 	movhi	r3,129
  804128:	d9802217 	ldw	r6,136(sp)
  80412c:	18d01704 	addi	r3,r3,16476
  804130:	1885883a 	add	r2,r3,r2
  804134:	14000017 	ldw	r16,0(r2)
  804138:	14400117 	ldw	r17,4(r2)
  80413c:	30016316 	blt	r6,zero,8046cc <_dtoa_r+0xd24>
  804140:	800d883a 	mov	r6,r16
  804144:	880f883a 	mov	r7,r17
  804148:	9009883a 	mov	r4,r18
  80414c:	980b883a 	mov	r5,r19
  804150:	080bc800 	call	80bc80 <__divdf3>
  804154:	180b883a 	mov	r5,r3
  804158:	1009883a 	mov	r4,r2
  80415c:	080d7d40 	call	80d7d4 <__fixdfsi>
  804160:	1009883a 	mov	r4,r2
  804164:	102b883a 	mov	r21,r2
  804168:	080d8540 	call	80d854 <__floatsidf>
  80416c:	800d883a 	mov	r6,r16
  804170:	880f883a 	mov	r7,r17
  804174:	1009883a 	mov	r4,r2
  804178:	180b883a 	mov	r5,r3
  80417c:	080c7c00 	call	80c7c0 <__muldf3>
  804180:	100d883a 	mov	r6,r2
  804184:	180f883a 	mov	r7,r3
  804188:	9009883a 	mov	r4,r18
  80418c:	980b883a 	mov	r5,r19
  804190:	080ced80 	call	80ced8 <__subdf3>
  804194:	d9c00717 	ldw	r7,28(sp)
  804198:	1009883a 	mov	r4,r2
  80419c:	a8800c04 	addi	r2,r21,48
  8041a0:	38800005 	stb	r2,0(r7)
  8041a4:	3dc00044 	addi	r23,r7,1
  8041a8:	d9c00617 	ldw	r7,24(sp)
  8041ac:	01800044 	movi	r6,1
  8041b0:	180b883a 	mov	r5,r3
  8041b4:	2005883a 	mov	r2,r4
  8041b8:	39803826 	beq	r7,r6,80429c <_dtoa_r+0x8f4>
  8041bc:	000d883a 	mov	r6,zero
  8041c0:	01d00934 	movhi	r7,16420
  8041c4:	080c7c00 	call	80c7c0 <__muldf3>
  8041c8:	000d883a 	mov	r6,zero
  8041cc:	000f883a 	mov	r7,zero
  8041d0:	1009883a 	mov	r4,r2
  8041d4:	180b883a 	mov	r5,r3
  8041d8:	1025883a 	mov	r18,r2
  8041dc:	1827883a 	mov	r19,r3
  8041e0:	080c5680 	call	80c568 <__eqdf2>
  8041e4:	103f9a26 	beq	r2,zero,804050 <__alt_mem_descriptor_memory+0xff784050>
  8041e8:	d9c00617 	ldw	r7,24(sp)
  8041ec:	d8c00717 	ldw	r3,28(sp)
  8041f0:	b829883a 	mov	r20,r23
  8041f4:	38bfffc4 	addi	r2,r7,-1
  8041f8:	18ad883a 	add	r22,r3,r2
  8041fc:	00000a06 	br	804228 <_dtoa_r+0x880>
  804200:	080c7c00 	call	80c7c0 <__muldf3>
  804204:	000d883a 	mov	r6,zero
  804208:	000f883a 	mov	r7,zero
  80420c:	1009883a 	mov	r4,r2
  804210:	180b883a 	mov	r5,r3
  804214:	1025883a 	mov	r18,r2
  804218:	1827883a 	mov	r19,r3
  80421c:	b829883a 	mov	r20,r23
  804220:	080c5680 	call	80c568 <__eqdf2>
  804224:	103f8a26 	beq	r2,zero,804050 <__alt_mem_descriptor_memory+0xff784050>
  804228:	800d883a 	mov	r6,r16
  80422c:	880f883a 	mov	r7,r17
  804230:	9009883a 	mov	r4,r18
  804234:	980b883a 	mov	r5,r19
  804238:	080bc800 	call	80bc80 <__divdf3>
  80423c:	180b883a 	mov	r5,r3
  804240:	1009883a 	mov	r4,r2
  804244:	080d7d40 	call	80d7d4 <__fixdfsi>
  804248:	1009883a 	mov	r4,r2
  80424c:	102b883a 	mov	r21,r2
  804250:	080d8540 	call	80d854 <__floatsidf>
  804254:	800d883a 	mov	r6,r16
  804258:	880f883a 	mov	r7,r17
  80425c:	1009883a 	mov	r4,r2
  804260:	180b883a 	mov	r5,r3
  804264:	080c7c00 	call	80c7c0 <__muldf3>
  804268:	100d883a 	mov	r6,r2
  80426c:	180f883a 	mov	r7,r3
  804270:	9009883a 	mov	r4,r18
  804274:	980b883a 	mov	r5,r19
  804278:	080ced80 	call	80ced8 <__subdf3>
  80427c:	aa000c04 	addi	r8,r21,48
  804280:	a2000005 	stb	r8,0(r20)
  804284:	000d883a 	mov	r6,zero
  804288:	01d00934 	movhi	r7,16420
  80428c:	1009883a 	mov	r4,r2
  804290:	180b883a 	mov	r5,r3
  804294:	a5c00044 	addi	r23,r20,1
  804298:	b53fd91e 	bne	r22,r20,804200 <__alt_mem_descriptor_memory+0xff784200>
  80429c:	100d883a 	mov	r6,r2
  8042a0:	180f883a 	mov	r7,r3
  8042a4:	1009883a 	mov	r4,r2
  8042a8:	180b883a 	mov	r5,r3
  8042ac:	080b3d40 	call	80b3d4 <__adddf3>
  8042b0:	100d883a 	mov	r6,r2
  8042b4:	180f883a 	mov	r7,r3
  8042b8:	8009883a 	mov	r4,r16
  8042bc:	880b883a 	mov	r5,r17
  8042c0:	1027883a 	mov	r19,r2
  8042c4:	1825883a 	mov	r18,r3
  8042c8:	080c6cc0 	call	80c6cc <__ledf2>
  8042cc:	10000816 	blt	r2,zero,8042f0 <_dtoa_r+0x948>
  8042d0:	980d883a 	mov	r6,r19
  8042d4:	900f883a 	mov	r7,r18
  8042d8:	8009883a 	mov	r4,r16
  8042dc:	880b883a 	mov	r5,r17
  8042e0:	080c5680 	call	80c568 <__eqdf2>
  8042e4:	103f5a1e 	bne	r2,zero,804050 <__alt_mem_descriptor_memory+0xff784050>
  8042e8:	ad40004c 	andi	r21,r21,1
  8042ec:	a83f5826 	beq	r21,zero,804050 <__alt_mem_descriptor_memory+0xff784050>
  8042f0:	bd3fffc3 	ldbu	r20,-1(r23)
  8042f4:	b8bfffc4 	addi	r2,r23,-1
  8042f8:	1007883a 	mov	r3,r2
  8042fc:	01400e44 	movi	r5,57
  804300:	d9800717 	ldw	r6,28(sp)
  804304:	00000506 	br	80431c <_dtoa_r+0x974>
  804308:	18ffffc4 	addi	r3,r3,-1
  80430c:	11824726 	beq	r2,r6,804c2c <_dtoa_r+0x1284>
  804310:	1d000003 	ldbu	r20,0(r3)
  804314:	102f883a 	mov	r23,r2
  804318:	10bfffc4 	addi	r2,r2,-1
  80431c:	a1003fcc 	andi	r4,r20,255
  804320:	2100201c 	xori	r4,r4,128
  804324:	213fe004 	addi	r4,r4,-128
  804328:	217ff726 	beq	r4,r5,804308 <__alt_mem_descriptor_memory+0xff784308>
  80432c:	a2000044 	addi	r8,r20,1
  804330:	12000005 	stb	r8,0(r2)
  804334:	003f4606 	br	804050 <__alt_mem_descriptor_memory+0xff784050>
  804338:	d9000b17 	ldw	r4,44(sp)
  80433c:	2000c826 	beq	r4,zero,804660 <_dtoa_r+0xcb8>
  804340:	d9800317 	ldw	r6,12(sp)
  804344:	00c00044 	movi	r3,1
  804348:	1980f90e 	bge	r3,r6,804730 <_dtoa_r+0xd88>
  80434c:	d8800617 	ldw	r2,24(sp)
  804350:	d8c00a17 	ldw	r3,40(sp)
  804354:	157fffc4 	addi	r21,r2,-1
  804358:	1d41f316 	blt	r3,r21,804b28 <_dtoa_r+0x1180>
  80435c:	1d6bc83a 	sub	r21,r3,r21
  804360:	d9c00617 	ldw	r7,24(sp)
  804364:	3802aa16 	blt	r7,zero,804e10 <_dtoa_r+0x1468>
  804368:	dd000817 	ldw	r20,32(sp)
  80436c:	d8800617 	ldw	r2,24(sp)
  804370:	d8c00817 	ldw	r3,32(sp)
  804374:	01400044 	movi	r5,1
  804378:	e009883a 	mov	r4,fp
  80437c:	1887883a 	add	r3,r3,r2
  804380:	d8c00815 	stw	r3,32(sp)
  804384:	b0ad883a 	add	r22,r22,r2
  804388:	0806d100 	call	806d10 <__i2b>
  80438c:	1023883a 	mov	r17,r2
  804390:	a0000826 	beq	r20,zero,8043b4 <_dtoa_r+0xa0c>
  804394:	0580070e 	bge	zero,r22,8043b4 <_dtoa_r+0xa0c>
  804398:	a005883a 	mov	r2,r20
  80439c:	b500b916 	blt	r22,r20,804684 <_dtoa_r+0xcdc>
  8043a0:	d9000817 	ldw	r4,32(sp)
  8043a4:	a0a9c83a 	sub	r20,r20,r2
  8043a8:	b0adc83a 	sub	r22,r22,r2
  8043ac:	2089c83a 	sub	r4,r4,r2
  8043b0:	d9000815 	stw	r4,32(sp)
  8043b4:	d9800a17 	ldw	r6,40(sp)
  8043b8:	0181810e 	bge	zero,r6,8049c0 <_dtoa_r+0x1018>
  8043bc:	d9c00b17 	ldw	r7,44(sp)
  8043c0:	3800b326 	beq	r7,zero,804690 <_dtoa_r+0xce8>
  8043c4:	a800b226 	beq	r21,zero,804690 <_dtoa_r+0xce8>
  8043c8:	880b883a 	mov	r5,r17
  8043cc:	a80d883a 	mov	r6,r21
  8043d0:	e009883a 	mov	r4,fp
  8043d4:	0806f440 	call	806f44 <__pow5mult>
  8043d8:	d9800917 	ldw	r6,36(sp)
  8043dc:	100b883a 	mov	r5,r2
  8043e0:	e009883a 	mov	r4,fp
  8043e4:	1023883a 	mov	r17,r2
  8043e8:	0806d4c0 	call	806d4c <__multiply>
  8043ec:	1021883a 	mov	r16,r2
  8043f0:	d8800a17 	ldw	r2,40(sp)
  8043f4:	d9400917 	ldw	r5,36(sp)
  8043f8:	e009883a 	mov	r4,fp
  8043fc:	1545c83a 	sub	r2,r2,r21
  804400:	d8800a15 	stw	r2,40(sp)
  804404:	08069ac0 	call	8069ac <_Bfree>
  804408:	d8c00a17 	ldw	r3,40(sp)
  80440c:	18009f1e 	bne	r3,zero,80468c <_dtoa_r+0xce4>
  804410:	05c00044 	movi	r23,1
  804414:	e009883a 	mov	r4,fp
  804418:	b80b883a 	mov	r5,r23
  80441c:	0806d100 	call	806d10 <__i2b>
  804420:	d9000d17 	ldw	r4,52(sp)
  804424:	102b883a 	mov	r21,r2
  804428:	2000ce26 	beq	r4,zero,804764 <_dtoa_r+0xdbc>
  80442c:	200d883a 	mov	r6,r4
  804430:	100b883a 	mov	r5,r2
  804434:	e009883a 	mov	r4,fp
  804438:	0806f440 	call	806f44 <__pow5mult>
  80443c:	d9800317 	ldw	r6,12(sp)
  804440:	102b883a 	mov	r21,r2
  804444:	b981810e 	bge	r23,r6,804a4c <_dtoa_r+0x10a4>
  804448:	0027883a 	mov	r19,zero
  80444c:	a8800417 	ldw	r2,16(r21)
  804450:	05c00804 	movi	r23,32
  804454:	10800104 	addi	r2,r2,4
  804458:	1085883a 	add	r2,r2,r2
  80445c:	1085883a 	add	r2,r2,r2
  804460:	a885883a 	add	r2,r21,r2
  804464:	11000017 	ldw	r4,0(r2)
  804468:	0806bf80 	call	806bf8 <__hi0bits>
  80446c:	b885c83a 	sub	r2,r23,r2
  804470:	1585883a 	add	r2,r2,r22
  804474:	108007cc 	andi	r2,r2,31
  804478:	1000b326 	beq	r2,zero,804748 <_dtoa_r+0xda0>
  80447c:	00c00804 	movi	r3,32
  804480:	1887c83a 	sub	r3,r3,r2
  804484:	01000104 	movi	r4,4
  804488:	20c2cd0e 	bge	r4,r3,804fc0 <_dtoa_r+0x1618>
  80448c:	00c00704 	movi	r3,28
  804490:	1885c83a 	sub	r2,r3,r2
  804494:	d8c00817 	ldw	r3,32(sp)
  804498:	a0a9883a 	add	r20,r20,r2
  80449c:	b0ad883a 	add	r22,r22,r2
  8044a0:	1887883a 	add	r3,r3,r2
  8044a4:	d8c00815 	stw	r3,32(sp)
  8044a8:	d9800817 	ldw	r6,32(sp)
  8044ac:	0180040e 	bge	zero,r6,8044c0 <_dtoa_r+0xb18>
  8044b0:	800b883a 	mov	r5,r16
  8044b4:	e009883a 	mov	r4,fp
  8044b8:	08070840 	call	807084 <__lshift>
  8044bc:	1021883a 	mov	r16,r2
  8044c0:	0580050e 	bge	zero,r22,8044d8 <_dtoa_r+0xb30>
  8044c4:	a80b883a 	mov	r5,r21
  8044c8:	b00d883a 	mov	r6,r22
  8044cc:	e009883a 	mov	r4,fp
  8044d0:	08070840 	call	807084 <__lshift>
  8044d4:	102b883a 	mov	r21,r2
  8044d8:	d9c00e17 	ldw	r7,56(sp)
  8044dc:	3801211e 	bne	r7,zero,804964 <_dtoa_r+0xfbc>
  8044e0:	d9800617 	ldw	r6,24(sp)
  8044e4:	0181380e 	bge	zero,r6,8049c8 <_dtoa_r+0x1020>
  8044e8:	d8c00b17 	ldw	r3,44(sp)
  8044ec:	1800ab1e 	bne	r3,zero,80479c <_dtoa_r+0xdf4>
  8044f0:	dc800717 	ldw	r18,28(sp)
  8044f4:	dcc00617 	ldw	r19,24(sp)
  8044f8:	9029883a 	mov	r20,r18
  8044fc:	00000206 	br	804508 <_dtoa_r+0xb60>
  804500:	08069d40 	call	8069d4 <__multadd>
  804504:	1021883a 	mov	r16,r2
  804508:	a80b883a 	mov	r5,r21
  80450c:	8009883a 	mov	r4,r16
  804510:	08037a80 	call	8037a8 <quorem>
  804514:	10800c04 	addi	r2,r2,48
  804518:	90800005 	stb	r2,0(r18)
  80451c:	94800044 	addi	r18,r18,1
  804520:	9507c83a 	sub	r3,r18,r20
  804524:	000f883a 	mov	r7,zero
  804528:	01800284 	movi	r6,10
  80452c:	800b883a 	mov	r5,r16
  804530:	e009883a 	mov	r4,fp
  804534:	1cfff216 	blt	r3,r19,804500 <__alt_mem_descriptor_memory+0xff784500>
  804538:	1011883a 	mov	r8,r2
  80453c:	d8800617 	ldw	r2,24(sp)
  804540:	0082370e 	bge	zero,r2,804e20 <_dtoa_r+0x1478>
  804544:	d9000717 	ldw	r4,28(sp)
  804548:	0025883a 	mov	r18,zero
  80454c:	20af883a 	add	r23,r4,r2
  804550:	01800044 	movi	r6,1
  804554:	800b883a 	mov	r5,r16
  804558:	e009883a 	mov	r4,fp
  80455c:	da001715 	stw	r8,92(sp)
  804560:	08070840 	call	807084 <__lshift>
  804564:	a80b883a 	mov	r5,r21
  804568:	1009883a 	mov	r4,r2
  80456c:	d8800915 	stw	r2,36(sp)
  804570:	08071cc0 	call	8071cc <__mcmp>
  804574:	da001717 	ldw	r8,92(sp)
  804578:	0081800e 	bge	zero,r2,804b7c <_dtoa_r+0x11d4>
  80457c:	b93fffc3 	ldbu	r4,-1(r23)
  804580:	b8bfffc4 	addi	r2,r23,-1
  804584:	1007883a 	mov	r3,r2
  804588:	01800e44 	movi	r6,57
  80458c:	d9c00717 	ldw	r7,28(sp)
  804590:	00000506 	br	8045a8 <_dtoa_r+0xc00>
  804594:	18ffffc4 	addi	r3,r3,-1
  804598:	11c12326 	beq	r2,r7,804a28 <_dtoa_r+0x1080>
  80459c:	19000003 	ldbu	r4,0(r3)
  8045a0:	102f883a 	mov	r23,r2
  8045a4:	10bfffc4 	addi	r2,r2,-1
  8045a8:	21403fcc 	andi	r5,r4,255
  8045ac:	2940201c 	xori	r5,r5,128
  8045b0:	297fe004 	addi	r5,r5,-128
  8045b4:	29bff726 	beq	r5,r6,804594 <__alt_mem_descriptor_memory+0xff784594>
  8045b8:	21000044 	addi	r4,r4,1
  8045bc:	11000005 	stb	r4,0(r2)
  8045c0:	a80b883a 	mov	r5,r21
  8045c4:	e009883a 	mov	r4,fp
  8045c8:	08069ac0 	call	8069ac <_Bfree>
  8045cc:	883ea026 	beq	r17,zero,804050 <__alt_mem_descriptor_memory+0xff784050>
  8045d0:	90000426 	beq	r18,zero,8045e4 <_dtoa_r+0xc3c>
  8045d4:	94400326 	beq	r18,r17,8045e4 <_dtoa_r+0xc3c>
  8045d8:	900b883a 	mov	r5,r18
  8045dc:	e009883a 	mov	r4,fp
  8045e0:	08069ac0 	call	8069ac <_Bfree>
  8045e4:	880b883a 	mov	r5,r17
  8045e8:	e009883a 	mov	r4,fp
  8045ec:	08069ac0 	call	8069ac <_Bfree>
  8045f0:	003e9706 	br	804050 <__alt_mem_descriptor_memory+0xff784050>
  8045f4:	01800044 	movi	r6,1
  8045f8:	d9800e15 	stw	r6,56(sp)
  8045fc:	003d9606 	br	803c58 <__alt_mem_descriptor_memory+0xff783c58>
  804600:	d8800817 	ldw	r2,32(sp)
  804604:	d8c00517 	ldw	r3,20(sp)
  804608:	d8000d15 	stw	zero,52(sp)
  80460c:	10c5c83a 	sub	r2,r2,r3
  804610:	00c9c83a 	sub	r4,zero,r3
  804614:	d8800815 	stw	r2,32(sp)
  804618:	d9000a15 	stw	r4,40(sp)
  80461c:	003d9706 	br	803c7c <__alt_mem_descriptor_memory+0xff783c7c>
  804620:	05adc83a 	sub	r22,zero,r22
  804624:	dd800815 	stw	r22,32(sp)
  804628:	002d883a 	mov	r22,zero
  80462c:	003d8e06 	br	803c68 <__alt_mem_descriptor_memory+0xff783c68>
  804630:	d9000517 	ldw	r4,20(sp)
  804634:	080d8540 	call	80d854 <__floatsidf>
  804638:	100d883a 	mov	r6,r2
  80463c:	180f883a 	mov	r7,r3
  804640:	a009883a 	mov	r4,r20
  804644:	880b883a 	mov	r5,r17
  804648:	080c5680 	call	80c568 <__eqdf2>
  80464c:	103d7126 	beq	r2,zero,803c14 <__alt_mem_descriptor_memory+0xff783c14>
  804650:	d9c00517 	ldw	r7,20(sp)
  804654:	39ffffc4 	addi	r7,r7,-1
  804658:	d9c00515 	stw	r7,20(sp)
  80465c:	003d6d06 	br	803c14 <__alt_mem_descriptor_memory+0xff783c14>
  804660:	dd400a17 	ldw	r21,40(sp)
  804664:	dd000817 	ldw	r20,32(sp)
  804668:	0023883a 	mov	r17,zero
  80466c:	003f4806 	br	804390 <__alt_mem_descriptor_memory+0xff784390>
  804670:	10e3c83a 	sub	r17,r2,r3
  804674:	9448983a 	sll	r4,r18,r17
  804678:	003d3206 	br	803b44 <__alt_mem_descriptor_memory+0xff783b44>
  80467c:	d8000e15 	stw	zero,56(sp)
  804680:	003d7506 	br	803c58 <__alt_mem_descriptor_memory+0xff783c58>
  804684:	b005883a 	mov	r2,r22
  804688:	003f4506 	br	8043a0 <__alt_mem_descriptor_memory+0xff7843a0>
  80468c:	dc000915 	stw	r16,36(sp)
  804690:	d9800a17 	ldw	r6,40(sp)
  804694:	d9400917 	ldw	r5,36(sp)
  804698:	e009883a 	mov	r4,fp
  80469c:	0806f440 	call	806f44 <__pow5mult>
  8046a0:	1021883a 	mov	r16,r2
  8046a4:	003f5a06 	br	804410 <__alt_mem_descriptor_memory+0xff784410>
  8046a8:	01c00044 	movi	r7,1
  8046ac:	d9c00b15 	stw	r7,44(sp)
  8046b0:	d8802217 	ldw	r2,136(sp)
  8046b4:	0081280e 	bge	zero,r2,804b58 <_dtoa_r+0x11b0>
  8046b8:	100d883a 	mov	r6,r2
  8046bc:	1021883a 	mov	r16,r2
  8046c0:	d8800c15 	stw	r2,48(sp)
  8046c4:	d8800615 	stw	r2,24(sp)
  8046c8:	003d8806 	br	803cec <__alt_mem_descriptor_memory+0xff783cec>
  8046cc:	d8800617 	ldw	r2,24(sp)
  8046d0:	00be9b16 	blt	zero,r2,804140 <__alt_mem_descriptor_memory+0xff784140>
  8046d4:	10010f1e 	bne	r2,zero,804b14 <_dtoa_r+0x116c>
  8046d8:	880b883a 	mov	r5,r17
  8046dc:	000d883a 	mov	r6,zero
  8046e0:	01d00534 	movhi	r7,16404
  8046e4:	8009883a 	mov	r4,r16
  8046e8:	080c7c00 	call	80c7c0 <__muldf3>
  8046ec:	900d883a 	mov	r6,r18
  8046f0:	980f883a 	mov	r7,r19
  8046f4:	1009883a 	mov	r4,r2
  8046f8:	180b883a 	mov	r5,r3
  8046fc:	080c5f00 	call	80c5f0 <__gedf2>
  804700:	002b883a 	mov	r21,zero
  804704:	0023883a 	mov	r17,zero
  804708:	1000bf16 	blt	r2,zero,804a08 <_dtoa_r+0x1060>
  80470c:	d9802217 	ldw	r6,136(sp)
  804710:	ddc00717 	ldw	r23,28(sp)
  804714:	018c303a 	nor	r6,zero,r6
  804718:	d9800515 	stw	r6,20(sp)
  80471c:	a80b883a 	mov	r5,r21
  804720:	e009883a 	mov	r4,fp
  804724:	08069ac0 	call	8069ac <_Bfree>
  804728:	883e4926 	beq	r17,zero,804050 <__alt_mem_descriptor_memory+0xff784050>
  80472c:	003fad06 	br	8045e4 <__alt_mem_descriptor_memory+0xff7845e4>
  804730:	d9c01117 	ldw	r7,68(sp)
  804734:	3801bc26 	beq	r7,zero,804e28 <_dtoa_r+0x1480>
  804738:	10810cc4 	addi	r2,r2,1075
  80473c:	dd400a17 	ldw	r21,40(sp)
  804740:	dd000817 	ldw	r20,32(sp)
  804744:	003f0a06 	br	804370 <__alt_mem_descriptor_memory+0xff784370>
  804748:	00800704 	movi	r2,28
  80474c:	d9000817 	ldw	r4,32(sp)
  804750:	a0a9883a 	add	r20,r20,r2
  804754:	b0ad883a 	add	r22,r22,r2
  804758:	2089883a 	add	r4,r4,r2
  80475c:	d9000815 	stw	r4,32(sp)
  804760:	003f5106 	br	8044a8 <__alt_mem_descriptor_memory+0xff7844a8>
  804764:	d8c00317 	ldw	r3,12(sp)
  804768:	b8c1fc0e 	bge	r23,r3,804f5c <_dtoa_r+0x15b4>
  80476c:	0027883a 	mov	r19,zero
  804770:	b805883a 	mov	r2,r23
  804774:	003f3e06 	br	804470 <__alt_mem_descriptor_memory+0xff784470>
  804778:	880b883a 	mov	r5,r17
  80477c:	e009883a 	mov	r4,fp
  804780:	000f883a 	mov	r7,zero
  804784:	01800284 	movi	r6,10
  804788:	08069d40 	call	8069d4 <__multadd>
  80478c:	d9000c17 	ldw	r4,48(sp)
  804790:	1023883a 	mov	r17,r2
  804794:	0102040e 	bge	zero,r4,804fa8 <_dtoa_r+0x1600>
  804798:	d9000615 	stw	r4,24(sp)
  80479c:	0500050e 	bge	zero,r20,8047b4 <_dtoa_r+0xe0c>
  8047a0:	880b883a 	mov	r5,r17
  8047a4:	a00d883a 	mov	r6,r20
  8047a8:	e009883a 	mov	r4,fp
  8047ac:	08070840 	call	807084 <__lshift>
  8047b0:	1023883a 	mov	r17,r2
  8047b4:	9801241e 	bne	r19,zero,804c48 <_dtoa_r+0x12a0>
  8047b8:	8829883a 	mov	r20,r17
  8047bc:	d9000617 	ldw	r4,24(sp)
  8047c0:	dcc00717 	ldw	r19,28(sp)
  8047c4:	9480004c 	andi	r18,r18,1
  8047c8:	20bfffc4 	addi	r2,r4,-1
  8047cc:	9885883a 	add	r2,r19,r2
  8047d0:	d8800415 	stw	r2,16(sp)
  8047d4:	dc800615 	stw	r18,24(sp)
  8047d8:	a80b883a 	mov	r5,r21
  8047dc:	8009883a 	mov	r4,r16
  8047e0:	08037a80 	call	8037a8 <quorem>
  8047e4:	880b883a 	mov	r5,r17
  8047e8:	8009883a 	mov	r4,r16
  8047ec:	102f883a 	mov	r23,r2
  8047f0:	08071cc0 	call	8071cc <__mcmp>
  8047f4:	a80b883a 	mov	r5,r21
  8047f8:	a00d883a 	mov	r6,r20
  8047fc:	e009883a 	mov	r4,fp
  804800:	102d883a 	mov	r22,r2
  804804:	080722c0 	call	80722c <__mdiff>
  804808:	1007883a 	mov	r3,r2
  80480c:	10800317 	ldw	r2,12(r2)
  804810:	bc800c04 	addi	r18,r23,48
  804814:	180b883a 	mov	r5,r3
  804818:	10004e1e 	bne	r2,zero,804954 <_dtoa_r+0xfac>
  80481c:	8009883a 	mov	r4,r16
  804820:	d8c01615 	stw	r3,88(sp)
  804824:	08071cc0 	call	8071cc <__mcmp>
  804828:	d8c01617 	ldw	r3,88(sp)
  80482c:	e009883a 	mov	r4,fp
  804830:	d8801615 	stw	r2,88(sp)
  804834:	180b883a 	mov	r5,r3
  804838:	08069ac0 	call	8069ac <_Bfree>
  80483c:	d8801617 	ldw	r2,88(sp)
  804840:	1000041e 	bne	r2,zero,804854 <_dtoa_r+0xeac>
  804844:	d9800317 	ldw	r6,12(sp)
  804848:	3000021e 	bne	r6,zero,804854 <_dtoa_r+0xeac>
  80484c:	d8c00617 	ldw	r3,24(sp)
  804850:	18003726 	beq	r3,zero,804930 <_dtoa_r+0xf88>
  804854:	b0002016 	blt	r22,zero,8048d8 <_dtoa_r+0xf30>
  804858:	b000041e 	bne	r22,zero,80486c <_dtoa_r+0xec4>
  80485c:	d9000317 	ldw	r4,12(sp)
  804860:	2000021e 	bne	r4,zero,80486c <_dtoa_r+0xec4>
  804864:	d8c00617 	ldw	r3,24(sp)
  804868:	18001b26 	beq	r3,zero,8048d8 <_dtoa_r+0xf30>
  80486c:	00810716 	blt	zero,r2,804c8c <_dtoa_r+0x12e4>
  804870:	d8c00417 	ldw	r3,16(sp)
  804874:	9d800044 	addi	r22,r19,1
  804878:	9c800005 	stb	r18,0(r19)
  80487c:	b02f883a 	mov	r23,r22
  804880:	98c10626 	beq	r19,r3,804c9c <_dtoa_r+0x12f4>
  804884:	800b883a 	mov	r5,r16
  804888:	000f883a 	mov	r7,zero
  80488c:	01800284 	movi	r6,10
  804890:	e009883a 	mov	r4,fp
  804894:	08069d40 	call	8069d4 <__multadd>
  804898:	1021883a 	mov	r16,r2
  80489c:	000f883a 	mov	r7,zero
  8048a0:	01800284 	movi	r6,10
  8048a4:	880b883a 	mov	r5,r17
  8048a8:	e009883a 	mov	r4,fp
  8048ac:	8d002526 	beq	r17,r20,804944 <_dtoa_r+0xf9c>
  8048b0:	08069d40 	call	8069d4 <__multadd>
  8048b4:	a00b883a 	mov	r5,r20
  8048b8:	000f883a 	mov	r7,zero
  8048bc:	01800284 	movi	r6,10
  8048c0:	e009883a 	mov	r4,fp
  8048c4:	1023883a 	mov	r17,r2
  8048c8:	08069d40 	call	8069d4 <__multadd>
  8048cc:	1029883a 	mov	r20,r2
  8048d0:	b027883a 	mov	r19,r22
  8048d4:	003fc006 	br	8047d8 <__alt_mem_descriptor_memory+0xff7847d8>
  8048d8:	9011883a 	mov	r8,r18
  8048dc:	00800e0e 	bge	zero,r2,804918 <_dtoa_r+0xf70>
  8048e0:	800b883a 	mov	r5,r16
  8048e4:	01800044 	movi	r6,1
  8048e8:	e009883a 	mov	r4,fp
  8048ec:	da001715 	stw	r8,92(sp)
  8048f0:	08070840 	call	807084 <__lshift>
  8048f4:	a80b883a 	mov	r5,r21
  8048f8:	1009883a 	mov	r4,r2
  8048fc:	1021883a 	mov	r16,r2
  804900:	08071cc0 	call	8071cc <__mcmp>
  804904:	da001717 	ldw	r8,92(sp)
  804908:	0081960e 	bge	zero,r2,804f64 <_dtoa_r+0x15bc>
  80490c:	00800e44 	movi	r2,57
  804910:	40817026 	beq	r8,r2,804ed4 <_dtoa_r+0x152c>
  804914:	ba000c44 	addi	r8,r23,49
  804918:	8825883a 	mov	r18,r17
  80491c:	9dc00044 	addi	r23,r19,1
  804920:	9a000005 	stb	r8,0(r19)
  804924:	a023883a 	mov	r17,r20
  804928:	dc000915 	stw	r16,36(sp)
  80492c:	003f2406 	br	8045c0 <__alt_mem_descriptor_memory+0xff7845c0>
  804930:	00800e44 	movi	r2,57
  804934:	9011883a 	mov	r8,r18
  804938:	90816626 	beq	r18,r2,804ed4 <_dtoa_r+0x152c>
  80493c:	05bff516 	blt	zero,r22,804914 <__alt_mem_descriptor_memory+0xff784914>
  804940:	003ff506 	br	804918 <__alt_mem_descriptor_memory+0xff784918>
  804944:	08069d40 	call	8069d4 <__multadd>
  804948:	1023883a 	mov	r17,r2
  80494c:	1029883a 	mov	r20,r2
  804950:	003fdf06 	br	8048d0 <__alt_mem_descriptor_memory+0xff7848d0>
  804954:	e009883a 	mov	r4,fp
  804958:	08069ac0 	call	8069ac <_Bfree>
  80495c:	00800044 	movi	r2,1
  804960:	003fbc06 	br	804854 <__alt_mem_descriptor_memory+0xff784854>
  804964:	a80b883a 	mov	r5,r21
  804968:	8009883a 	mov	r4,r16
  80496c:	08071cc0 	call	8071cc <__mcmp>
  804970:	103edb0e 	bge	r2,zero,8044e0 <__alt_mem_descriptor_memory+0xff7844e0>
  804974:	800b883a 	mov	r5,r16
  804978:	000f883a 	mov	r7,zero
  80497c:	01800284 	movi	r6,10
  804980:	e009883a 	mov	r4,fp
  804984:	08069d40 	call	8069d4 <__multadd>
  804988:	1021883a 	mov	r16,r2
  80498c:	d8800517 	ldw	r2,20(sp)
  804990:	d8c00b17 	ldw	r3,44(sp)
  804994:	10bfffc4 	addi	r2,r2,-1
  804998:	d8800515 	stw	r2,20(sp)
  80499c:	183f761e 	bne	r3,zero,804778 <__alt_mem_descriptor_memory+0xff784778>
  8049a0:	d9000c17 	ldw	r4,48(sp)
  8049a4:	0101730e 	bge	zero,r4,804f74 <_dtoa_r+0x15cc>
  8049a8:	d9000615 	stw	r4,24(sp)
  8049ac:	003ed006 	br	8044f0 <__alt_mem_descriptor_memory+0xff7844f0>
  8049b0:	00800084 	movi	r2,2
  8049b4:	3081861e 	bne	r6,r2,804fd0 <_dtoa_r+0x1628>
  8049b8:	d8000b15 	stw	zero,44(sp)
  8049bc:	003f3c06 	br	8046b0 <__alt_mem_descriptor_memory+0xff7846b0>
  8049c0:	dc000917 	ldw	r16,36(sp)
  8049c4:	003e9206 	br	804410 <__alt_mem_descriptor_memory+0xff784410>
  8049c8:	d9c00317 	ldw	r7,12(sp)
  8049cc:	00800084 	movi	r2,2
  8049d0:	11fec50e 	bge	r2,r7,8044e8 <__alt_mem_descriptor_memory+0xff7844e8>
  8049d4:	d9000617 	ldw	r4,24(sp)
  8049d8:	20013c1e 	bne	r4,zero,804ecc <_dtoa_r+0x1524>
  8049dc:	a80b883a 	mov	r5,r21
  8049e0:	000f883a 	mov	r7,zero
  8049e4:	01800144 	movi	r6,5
  8049e8:	e009883a 	mov	r4,fp
  8049ec:	08069d40 	call	8069d4 <__multadd>
  8049f0:	100b883a 	mov	r5,r2
  8049f4:	8009883a 	mov	r4,r16
  8049f8:	102b883a 	mov	r21,r2
  8049fc:	08071cc0 	call	8071cc <__mcmp>
  804a00:	dc000915 	stw	r16,36(sp)
  804a04:	00bf410e 	bge	zero,r2,80470c <__alt_mem_descriptor_memory+0xff78470c>
  804a08:	d9c00717 	ldw	r7,28(sp)
  804a0c:	00800c44 	movi	r2,49
  804a10:	38800005 	stb	r2,0(r7)
  804a14:	d8800517 	ldw	r2,20(sp)
  804a18:	3dc00044 	addi	r23,r7,1
  804a1c:	10800044 	addi	r2,r2,1
  804a20:	d8800515 	stw	r2,20(sp)
  804a24:	003f3d06 	br	80471c <__alt_mem_descriptor_memory+0xff78471c>
  804a28:	d9800517 	ldw	r6,20(sp)
  804a2c:	d9c00717 	ldw	r7,28(sp)
  804a30:	00800c44 	movi	r2,49
  804a34:	31800044 	addi	r6,r6,1
  804a38:	d9800515 	stw	r6,20(sp)
  804a3c:	38800005 	stb	r2,0(r7)
  804a40:	003edf06 	br	8045c0 <__alt_mem_descriptor_memory+0xff7845c0>
  804a44:	d8000b15 	stw	zero,44(sp)
  804a48:	003c9f06 	br	803cc8 <__alt_mem_descriptor_memory+0xff783cc8>
  804a4c:	903e7e1e 	bne	r18,zero,804448 <__alt_mem_descriptor_memory+0xff784448>
  804a50:	00800434 	movhi	r2,16
  804a54:	10bfffc4 	addi	r2,r2,-1
  804a58:	9884703a 	and	r2,r19,r2
  804a5c:	1000ea1e 	bne	r2,zero,804e08 <_dtoa_r+0x1460>
  804a60:	9cdffc2c 	andhi	r19,r19,32752
  804a64:	9800e826 	beq	r19,zero,804e08 <_dtoa_r+0x1460>
  804a68:	d9c00817 	ldw	r7,32(sp)
  804a6c:	b5800044 	addi	r22,r22,1
  804a70:	04c00044 	movi	r19,1
  804a74:	39c00044 	addi	r7,r7,1
  804a78:	d9c00815 	stw	r7,32(sp)
  804a7c:	d8800d17 	ldw	r2,52(sp)
  804a80:	103e721e 	bne	r2,zero,80444c <__alt_mem_descriptor_memory+0xff78444c>
  804a84:	00800044 	movi	r2,1
  804a88:	003e7906 	br	804470 <__alt_mem_descriptor_memory+0xff784470>
  804a8c:	8009883a 	mov	r4,r16
  804a90:	080d8540 	call	80d854 <__floatsidf>
  804a94:	d9800f17 	ldw	r6,60(sp)
  804a98:	d9c01017 	ldw	r7,64(sp)
  804a9c:	1009883a 	mov	r4,r2
  804aa0:	180b883a 	mov	r5,r3
  804aa4:	080c7c00 	call	80c7c0 <__muldf3>
  804aa8:	000d883a 	mov	r6,zero
  804aac:	01d00734 	movhi	r7,16412
  804ab0:	1009883a 	mov	r4,r2
  804ab4:	180b883a 	mov	r5,r3
  804ab8:	080b3d40 	call	80b3d4 <__adddf3>
  804abc:	047f3034 	movhi	r17,64704
  804ac0:	1021883a 	mov	r16,r2
  804ac4:	1c63883a 	add	r17,r3,r17
  804ac8:	d9000f17 	ldw	r4,60(sp)
  804acc:	d9401017 	ldw	r5,64(sp)
  804ad0:	000d883a 	mov	r6,zero
  804ad4:	01d00534 	movhi	r7,16404
  804ad8:	080ced80 	call	80ced8 <__subdf3>
  804adc:	800d883a 	mov	r6,r16
  804ae0:	880f883a 	mov	r7,r17
  804ae4:	1009883a 	mov	r4,r2
  804ae8:	180b883a 	mov	r5,r3
  804aec:	102b883a 	mov	r21,r2
  804af0:	1829883a 	mov	r20,r3
  804af4:	080c5f00 	call	80c5f0 <__gedf2>
  804af8:	00806c16 	blt	zero,r2,804cac <_dtoa_r+0x1304>
  804afc:	89e0003c 	xorhi	r7,r17,32768
  804b00:	800d883a 	mov	r6,r16
  804b04:	a809883a 	mov	r4,r21
  804b08:	a00b883a 	mov	r5,r20
  804b0c:	080c6cc0 	call	80c6cc <__ledf2>
  804b10:	103d7e0e 	bge	r2,zero,80410c <__alt_mem_descriptor_memory+0xff78410c>
  804b14:	002b883a 	mov	r21,zero
  804b18:	0023883a 	mov	r17,zero
  804b1c:	003efb06 	br	80470c <__alt_mem_descriptor_memory+0xff78470c>
  804b20:	d8800717 	ldw	r2,28(sp)
  804b24:	003bd006 	br	803a68 <__alt_mem_descriptor_memory+0xff783a68>
  804b28:	d9000a17 	ldw	r4,40(sp)
  804b2c:	d9800d17 	ldw	r6,52(sp)
  804b30:	dd400a15 	stw	r21,40(sp)
  804b34:	a905c83a 	sub	r2,r21,r4
  804b38:	308d883a 	add	r6,r6,r2
  804b3c:	d9800d15 	stw	r6,52(sp)
  804b40:	002b883a 	mov	r21,zero
  804b44:	003e0606 	br	804360 <__alt_mem_descriptor_memory+0xff784360>
  804b48:	9023883a 	mov	r17,r18
  804b4c:	9829883a 	mov	r20,r19
  804b50:	04000084 	movi	r16,2
  804b54:	003c9206 	br	803da0 <__alt_mem_descriptor_memory+0xff783da0>
  804b58:	04000044 	movi	r16,1
  804b5c:	dc000c15 	stw	r16,48(sp)
  804b60:	dc000615 	stw	r16,24(sp)
  804b64:	dc002215 	stw	r16,136(sp)
  804b68:	e0001115 	stw	zero,68(fp)
  804b6c:	000b883a 	mov	r5,zero
  804b70:	003c6906 	br	803d18 <__alt_mem_descriptor_memory+0xff783d18>
  804b74:	3021883a 	mov	r16,r6
  804b78:	003ffb06 	br	804b68 <__alt_mem_descriptor_memory+0xff784b68>
  804b7c:	1000021e 	bne	r2,zero,804b88 <_dtoa_r+0x11e0>
  804b80:	4200004c 	andi	r8,r8,1
  804b84:	403e7d1e 	bne	r8,zero,80457c <__alt_mem_descriptor_memory+0xff78457c>
  804b88:	01000c04 	movi	r4,48
  804b8c:	00000106 	br	804b94 <_dtoa_r+0x11ec>
  804b90:	102f883a 	mov	r23,r2
  804b94:	b8bfffc4 	addi	r2,r23,-1
  804b98:	10c00007 	ldb	r3,0(r2)
  804b9c:	193ffc26 	beq	r3,r4,804b90 <__alt_mem_descriptor_memory+0xff784b90>
  804ba0:	003e8706 	br	8045c0 <__alt_mem_descriptor_memory+0xff7845c0>
  804ba4:	d8800517 	ldw	r2,20(sp)
  804ba8:	00a3c83a 	sub	r17,zero,r2
  804bac:	8800a426 	beq	r17,zero,804e40 <_dtoa_r+0x1498>
  804bb0:	888003cc 	andi	r2,r17,15
  804bb4:	100490fa 	slli	r2,r2,3
  804bb8:	00c02074 	movhi	r3,129
  804bbc:	18d01704 	addi	r3,r3,16476
  804bc0:	1885883a 	add	r2,r3,r2
  804bc4:	11800017 	ldw	r6,0(r2)
  804bc8:	11c00117 	ldw	r7,4(r2)
  804bcc:	9009883a 	mov	r4,r18
  804bd0:	980b883a 	mov	r5,r19
  804bd4:	8823d13a 	srai	r17,r17,4
  804bd8:	080c7c00 	call	80c7c0 <__muldf3>
  804bdc:	d8800f15 	stw	r2,60(sp)
  804be0:	d8c01015 	stw	r3,64(sp)
  804be4:	8800e826 	beq	r17,zero,804f88 <_dtoa_r+0x15e0>
  804be8:	05002074 	movhi	r20,129
  804bec:	a5100d04 	addi	r20,r20,16436
  804bf0:	04000084 	movi	r16,2
  804bf4:	8980004c 	andi	r6,r17,1
  804bf8:	1009883a 	mov	r4,r2
  804bfc:	8823d07a 	srai	r17,r17,1
  804c00:	180b883a 	mov	r5,r3
  804c04:	30000426 	beq	r6,zero,804c18 <_dtoa_r+0x1270>
  804c08:	a1800017 	ldw	r6,0(r20)
  804c0c:	a1c00117 	ldw	r7,4(r20)
  804c10:	84000044 	addi	r16,r16,1
  804c14:	080c7c00 	call	80c7c0 <__muldf3>
  804c18:	a5000204 	addi	r20,r20,8
  804c1c:	883ff51e 	bne	r17,zero,804bf4 <__alt_mem_descriptor_memory+0xff784bf4>
  804c20:	d8800f15 	stw	r2,60(sp)
  804c24:	d8c01015 	stw	r3,64(sp)
  804c28:	003c7606 	br	803e04 <__alt_mem_descriptor_memory+0xff783e04>
  804c2c:	00c00c04 	movi	r3,48
  804c30:	10c00005 	stb	r3,0(r2)
  804c34:	d8c00517 	ldw	r3,20(sp)
  804c38:	bd3fffc3 	ldbu	r20,-1(r23)
  804c3c:	18c00044 	addi	r3,r3,1
  804c40:	d8c00515 	stw	r3,20(sp)
  804c44:	003db906 	br	80432c <__alt_mem_descriptor_memory+0xff78432c>
  804c48:	89400117 	ldw	r5,4(r17)
  804c4c:	e009883a 	mov	r4,fp
  804c50:	08069040 	call	806904 <_Balloc>
  804c54:	89800417 	ldw	r6,16(r17)
  804c58:	89400304 	addi	r5,r17,12
  804c5c:	11000304 	addi	r4,r2,12
  804c60:	31800084 	addi	r6,r6,2
  804c64:	318d883a 	add	r6,r6,r6
  804c68:	318d883a 	add	r6,r6,r6
  804c6c:	1027883a 	mov	r19,r2
  804c70:	08067bc0 	call	8067bc <memcpy>
  804c74:	01800044 	movi	r6,1
  804c78:	980b883a 	mov	r5,r19
  804c7c:	e009883a 	mov	r4,fp
  804c80:	08070840 	call	807084 <__lshift>
  804c84:	1029883a 	mov	r20,r2
  804c88:	003ecc06 	br	8047bc <__alt_mem_descriptor_memory+0xff7847bc>
  804c8c:	00800e44 	movi	r2,57
  804c90:	90809026 	beq	r18,r2,804ed4 <_dtoa_r+0x152c>
  804c94:	92000044 	addi	r8,r18,1
  804c98:	003f1f06 	br	804918 <__alt_mem_descriptor_memory+0xff784918>
  804c9c:	9011883a 	mov	r8,r18
  804ca0:	8825883a 	mov	r18,r17
  804ca4:	a023883a 	mov	r17,r20
  804ca8:	003e2906 	br	804550 <__alt_mem_descriptor_memory+0xff784550>
  804cac:	002b883a 	mov	r21,zero
  804cb0:	0023883a 	mov	r17,zero
  804cb4:	003f5406 	br	804a08 <__alt_mem_descriptor_memory+0xff784a08>
  804cb8:	61bfffc4 	addi	r6,r12,-1
  804cbc:	300490fa 	slli	r2,r6,3
  804cc0:	00c02074 	movhi	r3,129
  804cc4:	18d01704 	addi	r3,r3,16476
  804cc8:	1885883a 	add	r2,r3,r2
  804ccc:	11000017 	ldw	r4,0(r2)
  804cd0:	11400117 	ldw	r5,4(r2)
  804cd4:	d8800717 	ldw	r2,28(sp)
  804cd8:	880f883a 	mov	r7,r17
  804cdc:	d9801215 	stw	r6,72(sp)
  804ce0:	800d883a 	mov	r6,r16
  804ce4:	db001615 	stw	r12,88(sp)
  804ce8:	15c00044 	addi	r23,r2,1
  804cec:	080c7c00 	call	80c7c0 <__muldf3>
  804cf0:	d9401017 	ldw	r5,64(sp)
  804cf4:	d9000f17 	ldw	r4,60(sp)
  804cf8:	d8c01515 	stw	r3,84(sp)
  804cfc:	d8801415 	stw	r2,80(sp)
  804d00:	080d7d40 	call	80d7d4 <__fixdfsi>
  804d04:	1009883a 	mov	r4,r2
  804d08:	1021883a 	mov	r16,r2
  804d0c:	080d8540 	call	80d854 <__floatsidf>
  804d10:	d9000f17 	ldw	r4,60(sp)
  804d14:	d9401017 	ldw	r5,64(sp)
  804d18:	100d883a 	mov	r6,r2
  804d1c:	180f883a 	mov	r7,r3
  804d20:	080ced80 	call	80ced8 <__subdf3>
  804d24:	1829883a 	mov	r20,r3
  804d28:	d8c00717 	ldw	r3,28(sp)
  804d2c:	84000c04 	addi	r16,r16,48
  804d30:	1023883a 	mov	r17,r2
  804d34:	1c000005 	stb	r16,0(r3)
  804d38:	db001617 	ldw	r12,88(sp)
  804d3c:	00800044 	movi	r2,1
  804d40:	60802226 	beq	r12,r2,804dcc <_dtoa_r+0x1424>
  804d44:	d9c00717 	ldw	r7,28(sp)
  804d48:	8805883a 	mov	r2,r17
  804d4c:	b82b883a 	mov	r21,r23
  804d50:	3b19883a 	add	r12,r7,r12
  804d54:	6023883a 	mov	r17,r12
  804d58:	a007883a 	mov	r3,r20
  804d5c:	dc800f15 	stw	r18,60(sp)
  804d60:	000d883a 	mov	r6,zero
  804d64:	01d00934 	movhi	r7,16420
  804d68:	1009883a 	mov	r4,r2
  804d6c:	180b883a 	mov	r5,r3
  804d70:	080c7c00 	call	80c7c0 <__muldf3>
  804d74:	180b883a 	mov	r5,r3
  804d78:	1009883a 	mov	r4,r2
  804d7c:	1829883a 	mov	r20,r3
  804d80:	1025883a 	mov	r18,r2
  804d84:	080d7d40 	call	80d7d4 <__fixdfsi>
  804d88:	1009883a 	mov	r4,r2
  804d8c:	1021883a 	mov	r16,r2
  804d90:	080d8540 	call	80d854 <__floatsidf>
  804d94:	100d883a 	mov	r6,r2
  804d98:	180f883a 	mov	r7,r3
  804d9c:	9009883a 	mov	r4,r18
  804da0:	a00b883a 	mov	r5,r20
  804da4:	84000c04 	addi	r16,r16,48
  804da8:	080ced80 	call	80ced8 <__subdf3>
  804dac:	ad400044 	addi	r21,r21,1
  804db0:	ac3fffc5 	stb	r16,-1(r21)
  804db4:	ac7fea1e 	bne	r21,r17,804d60 <__alt_mem_descriptor_memory+0xff784d60>
  804db8:	1023883a 	mov	r17,r2
  804dbc:	d8801217 	ldw	r2,72(sp)
  804dc0:	dc800f17 	ldw	r18,60(sp)
  804dc4:	1829883a 	mov	r20,r3
  804dc8:	b8af883a 	add	r23,r23,r2
  804dcc:	d9001417 	ldw	r4,80(sp)
  804dd0:	d9401517 	ldw	r5,84(sp)
  804dd4:	000d883a 	mov	r6,zero
  804dd8:	01cff834 	movhi	r7,16352
  804ddc:	080b3d40 	call	80b3d4 <__adddf3>
  804de0:	880d883a 	mov	r6,r17
  804de4:	a00f883a 	mov	r7,r20
  804de8:	1009883a 	mov	r4,r2
  804dec:	180b883a 	mov	r5,r3
  804df0:	080c6cc0 	call	80c6cc <__ledf2>
  804df4:	10003e0e 	bge	r2,zero,804ef0 <_dtoa_r+0x1548>
  804df8:	d9001317 	ldw	r4,76(sp)
  804dfc:	bd3fffc3 	ldbu	r20,-1(r23)
  804e00:	d9000515 	stw	r4,20(sp)
  804e04:	003d3b06 	br	8042f4 <__alt_mem_descriptor_memory+0xff7842f4>
  804e08:	0027883a 	mov	r19,zero
  804e0c:	003f1b06 	br	804a7c <__alt_mem_descriptor_memory+0xff784a7c>
  804e10:	d8800817 	ldw	r2,32(sp)
  804e14:	11e9c83a 	sub	r20,r2,r7
  804e18:	0005883a 	mov	r2,zero
  804e1c:	003d5406 	br	804370 <__alt_mem_descriptor_memory+0xff784370>
  804e20:	00800044 	movi	r2,1
  804e24:	003dc706 	br	804544 <__alt_mem_descriptor_memory+0xff784544>
  804e28:	d8c00217 	ldw	r3,8(sp)
  804e2c:	00800d84 	movi	r2,54
  804e30:	dd400a17 	ldw	r21,40(sp)
  804e34:	10c5c83a 	sub	r2,r2,r3
  804e38:	dd000817 	ldw	r20,32(sp)
  804e3c:	003d4c06 	br	804370 <__alt_mem_descriptor_memory+0xff784370>
  804e40:	dc800f15 	stw	r18,60(sp)
  804e44:	dcc01015 	stw	r19,64(sp)
  804e48:	04000084 	movi	r16,2
  804e4c:	003bed06 	br	803e04 <__alt_mem_descriptor_memory+0xff783e04>
  804e50:	d9000617 	ldw	r4,24(sp)
  804e54:	203f0d26 	beq	r4,zero,804a8c <__alt_mem_descriptor_memory+0xff784a8c>
  804e58:	d9800c17 	ldw	r6,48(sp)
  804e5c:	01bcab0e 	bge	zero,r6,80410c <__alt_mem_descriptor_memory+0xff78410c>
  804e60:	d9401017 	ldw	r5,64(sp)
  804e64:	d9000f17 	ldw	r4,60(sp)
  804e68:	000d883a 	mov	r6,zero
  804e6c:	01d00934 	movhi	r7,16420
  804e70:	080c7c00 	call	80c7c0 <__muldf3>
  804e74:	81000044 	addi	r4,r16,1
  804e78:	d8800f15 	stw	r2,60(sp)
  804e7c:	d8c01015 	stw	r3,64(sp)
  804e80:	080d8540 	call	80d854 <__floatsidf>
  804e84:	d9800f17 	ldw	r6,60(sp)
  804e88:	d9c01017 	ldw	r7,64(sp)
  804e8c:	1009883a 	mov	r4,r2
  804e90:	180b883a 	mov	r5,r3
  804e94:	080c7c00 	call	80c7c0 <__muldf3>
  804e98:	01d00734 	movhi	r7,16412
  804e9c:	000d883a 	mov	r6,zero
  804ea0:	1009883a 	mov	r4,r2
  804ea4:	180b883a 	mov	r5,r3
  804ea8:	080b3d40 	call	80b3d4 <__adddf3>
  804eac:	d9c00517 	ldw	r7,20(sp)
  804eb0:	047f3034 	movhi	r17,64704
  804eb4:	1021883a 	mov	r16,r2
  804eb8:	39ffffc4 	addi	r7,r7,-1
  804ebc:	d9c01315 	stw	r7,76(sp)
  804ec0:	1c63883a 	add	r17,r3,r17
  804ec4:	db000c17 	ldw	r12,48(sp)
  804ec8:	003bea06 	br	803e74 <__alt_mem_descriptor_memory+0xff783e74>
  804ecc:	dc000915 	stw	r16,36(sp)
  804ed0:	003e0e06 	br	80470c <__alt_mem_descriptor_memory+0xff78470c>
  804ed4:	01000e44 	movi	r4,57
  804ed8:	8825883a 	mov	r18,r17
  804edc:	9dc00044 	addi	r23,r19,1
  804ee0:	99000005 	stb	r4,0(r19)
  804ee4:	a023883a 	mov	r17,r20
  804ee8:	dc000915 	stw	r16,36(sp)
  804eec:	003da406 	br	804580 <__alt_mem_descriptor_memory+0xff784580>
  804ef0:	d9801417 	ldw	r6,80(sp)
  804ef4:	d9c01517 	ldw	r7,84(sp)
  804ef8:	0009883a 	mov	r4,zero
  804efc:	014ff834 	movhi	r5,16352
  804f00:	080ced80 	call	80ced8 <__subdf3>
  804f04:	880d883a 	mov	r6,r17
  804f08:	a00f883a 	mov	r7,r20
  804f0c:	1009883a 	mov	r4,r2
  804f10:	180b883a 	mov	r5,r3
  804f14:	080c5f00 	call	80c5f0 <__gedf2>
  804f18:	00bc7c0e 	bge	zero,r2,80410c <__alt_mem_descriptor_memory+0xff78410c>
  804f1c:	01000c04 	movi	r4,48
  804f20:	00000106 	br	804f28 <_dtoa_r+0x1580>
  804f24:	102f883a 	mov	r23,r2
  804f28:	b8bfffc4 	addi	r2,r23,-1
  804f2c:	10c00007 	ldb	r3,0(r2)
  804f30:	193ffc26 	beq	r3,r4,804f24 <__alt_mem_descriptor_memory+0xff784f24>
  804f34:	d9801317 	ldw	r6,76(sp)
  804f38:	d9800515 	stw	r6,20(sp)
  804f3c:	003c4406 	br	804050 <__alt_mem_descriptor_memory+0xff784050>
  804f40:	d9801317 	ldw	r6,76(sp)
  804f44:	d9800515 	stw	r6,20(sp)
  804f48:	003cea06 	br	8042f4 <__alt_mem_descriptor_memory+0xff7842f4>
  804f4c:	dd800f17 	ldw	r22,60(sp)
  804f50:	dcc01017 	ldw	r19,64(sp)
  804f54:	dc801217 	ldw	r18,72(sp)
  804f58:	003c6c06 	br	80410c <__alt_mem_descriptor_memory+0xff78410c>
  804f5c:	903e031e 	bne	r18,zero,80476c <__alt_mem_descriptor_memory+0xff78476c>
  804f60:	003ebb06 	br	804a50 <__alt_mem_descriptor_memory+0xff784a50>
  804f64:	103e6c1e 	bne	r2,zero,804918 <__alt_mem_descriptor_memory+0xff784918>
  804f68:	4080004c 	andi	r2,r8,1
  804f6c:	103e6a26 	beq	r2,zero,804918 <__alt_mem_descriptor_memory+0xff784918>
  804f70:	003e6606 	br	80490c <__alt_mem_descriptor_memory+0xff78490c>
  804f74:	d8c00317 	ldw	r3,12(sp)
  804f78:	00800084 	movi	r2,2
  804f7c:	10c02916 	blt	r2,r3,805024 <_dtoa_r+0x167c>
  804f80:	d9000c17 	ldw	r4,48(sp)
  804f84:	003e8806 	br	8049a8 <__alt_mem_descriptor_memory+0xff7849a8>
  804f88:	04000084 	movi	r16,2
  804f8c:	003b9d06 	br	803e04 <__alt_mem_descriptor_memory+0xff783e04>
  804f90:	d9001317 	ldw	r4,76(sp)
  804f94:	d9000515 	stw	r4,20(sp)
  804f98:	003cd606 	br	8042f4 <__alt_mem_descriptor_memory+0xff7842f4>
  804f9c:	d8801317 	ldw	r2,76(sp)
  804fa0:	d8800515 	stw	r2,20(sp)
  804fa4:	003c2a06 	br	804050 <__alt_mem_descriptor_memory+0xff784050>
  804fa8:	d9800317 	ldw	r6,12(sp)
  804fac:	00800084 	movi	r2,2
  804fb0:	11801516 	blt	r2,r6,805008 <_dtoa_r+0x1660>
  804fb4:	d9c00c17 	ldw	r7,48(sp)
  804fb8:	d9c00615 	stw	r7,24(sp)
  804fbc:	003df706 	br	80479c <__alt_mem_descriptor_memory+0xff78479c>
  804fc0:	193d3926 	beq	r3,r4,8044a8 <__alt_mem_descriptor_memory+0xff7844a8>
  804fc4:	00c00f04 	movi	r3,60
  804fc8:	1885c83a 	sub	r2,r3,r2
  804fcc:	003ddf06 	br	80474c <__alt_mem_descriptor_memory+0xff78474c>
  804fd0:	e009883a 	mov	r4,fp
  804fd4:	e0001115 	stw	zero,68(fp)
  804fd8:	000b883a 	mov	r5,zero
  804fdc:	08069040 	call	806904 <_Balloc>
  804fe0:	d8800715 	stw	r2,28(sp)
  804fe4:	d8c00717 	ldw	r3,28(sp)
  804fe8:	00bfffc4 	movi	r2,-1
  804fec:	01000044 	movi	r4,1
  804ff0:	d8800c15 	stw	r2,48(sp)
  804ff4:	e0c01015 	stw	r3,64(fp)
  804ff8:	d9000b15 	stw	r4,44(sp)
  804ffc:	d8800615 	stw	r2,24(sp)
  805000:	d8002215 	stw	zero,136(sp)
  805004:	003c4106 	br	80410c <__alt_mem_descriptor_memory+0xff78410c>
  805008:	d8c00c17 	ldw	r3,48(sp)
  80500c:	d8c00615 	stw	r3,24(sp)
  805010:	003e7006 	br	8049d4 <__alt_mem_descriptor_memory+0xff7849d4>
  805014:	04400044 	movi	r17,1
  805018:	003b2006 	br	803c9c <__alt_mem_descriptor_memory+0xff783c9c>
  80501c:	000b883a 	mov	r5,zero
  805020:	003b3d06 	br	803d18 <__alt_mem_descriptor_memory+0xff783d18>
  805024:	d8800c17 	ldw	r2,48(sp)
  805028:	d8800615 	stw	r2,24(sp)
  80502c:	003e6906 	br	8049d4 <__alt_mem_descriptor_memory+0xff7849d4>

00805030 <__sflush_r>:
  805030:	2880030b 	ldhu	r2,12(r5)
  805034:	defffb04 	addi	sp,sp,-20
  805038:	dcc00315 	stw	r19,12(sp)
  80503c:	dc400115 	stw	r17,4(sp)
  805040:	dfc00415 	stw	ra,16(sp)
  805044:	dc800215 	stw	r18,8(sp)
  805048:	dc000015 	stw	r16,0(sp)
  80504c:	10c0020c 	andi	r3,r2,8
  805050:	2823883a 	mov	r17,r5
  805054:	2027883a 	mov	r19,r4
  805058:	1800311e 	bne	r3,zero,805120 <__sflush_r+0xf0>
  80505c:	28c00117 	ldw	r3,4(r5)
  805060:	10820014 	ori	r2,r2,2048
  805064:	2880030d 	sth	r2,12(r5)
  805068:	00c04b0e 	bge	zero,r3,805198 <__sflush_r+0x168>
  80506c:	8a000a17 	ldw	r8,40(r17)
  805070:	40002326 	beq	r8,zero,805100 <__sflush_r+0xd0>
  805074:	9c000017 	ldw	r16,0(r19)
  805078:	10c4000c 	andi	r3,r2,4096
  80507c:	98000015 	stw	zero,0(r19)
  805080:	18004826 	beq	r3,zero,8051a4 <__sflush_r+0x174>
  805084:	89801417 	ldw	r6,80(r17)
  805088:	10c0010c 	andi	r3,r2,4
  80508c:	18000626 	beq	r3,zero,8050a8 <__sflush_r+0x78>
  805090:	88c00117 	ldw	r3,4(r17)
  805094:	88800c17 	ldw	r2,48(r17)
  805098:	30cdc83a 	sub	r6,r6,r3
  80509c:	10000226 	beq	r2,zero,8050a8 <__sflush_r+0x78>
  8050a0:	88800f17 	ldw	r2,60(r17)
  8050a4:	308dc83a 	sub	r6,r6,r2
  8050a8:	89400717 	ldw	r5,28(r17)
  8050ac:	000f883a 	mov	r7,zero
  8050b0:	9809883a 	mov	r4,r19
  8050b4:	403ee83a 	callr	r8
  8050b8:	00ffffc4 	movi	r3,-1
  8050bc:	10c04426 	beq	r2,r3,8051d0 <__sflush_r+0x1a0>
  8050c0:	88c0030b 	ldhu	r3,12(r17)
  8050c4:	89000417 	ldw	r4,16(r17)
  8050c8:	88000115 	stw	zero,4(r17)
  8050cc:	197dffcc 	andi	r5,r3,63487
  8050d0:	8940030d 	sth	r5,12(r17)
  8050d4:	89000015 	stw	r4,0(r17)
  8050d8:	18c4000c 	andi	r3,r3,4096
  8050dc:	18002c1e 	bne	r3,zero,805190 <__sflush_r+0x160>
  8050e0:	89400c17 	ldw	r5,48(r17)
  8050e4:	9c000015 	stw	r16,0(r19)
  8050e8:	28000526 	beq	r5,zero,805100 <__sflush_r+0xd0>
  8050ec:	88801004 	addi	r2,r17,64
  8050f0:	28800226 	beq	r5,r2,8050fc <__sflush_r+0xcc>
  8050f4:	9809883a 	mov	r4,r19
  8050f8:	080579c0 	call	80579c <_free_r>
  8050fc:	88000c15 	stw	zero,48(r17)
  805100:	0005883a 	mov	r2,zero
  805104:	dfc00417 	ldw	ra,16(sp)
  805108:	dcc00317 	ldw	r19,12(sp)
  80510c:	dc800217 	ldw	r18,8(sp)
  805110:	dc400117 	ldw	r17,4(sp)
  805114:	dc000017 	ldw	r16,0(sp)
  805118:	dec00504 	addi	sp,sp,20
  80511c:	f800283a 	ret
  805120:	2c800417 	ldw	r18,16(r5)
  805124:	903ff626 	beq	r18,zero,805100 <__alt_mem_descriptor_memory+0xff785100>
  805128:	2c000017 	ldw	r16,0(r5)
  80512c:	108000cc 	andi	r2,r2,3
  805130:	2c800015 	stw	r18,0(r5)
  805134:	84a1c83a 	sub	r16,r16,r18
  805138:	1000131e 	bne	r2,zero,805188 <__sflush_r+0x158>
  80513c:	28800517 	ldw	r2,20(r5)
  805140:	88800215 	stw	r2,8(r17)
  805144:	04000316 	blt	zero,r16,805154 <__sflush_r+0x124>
  805148:	003fed06 	br	805100 <__alt_mem_descriptor_memory+0xff785100>
  80514c:	90a5883a 	add	r18,r18,r2
  805150:	043feb0e 	bge	zero,r16,805100 <__alt_mem_descriptor_memory+0xff785100>
  805154:	88800917 	ldw	r2,36(r17)
  805158:	89400717 	ldw	r5,28(r17)
  80515c:	800f883a 	mov	r7,r16
  805160:	900d883a 	mov	r6,r18
  805164:	9809883a 	mov	r4,r19
  805168:	103ee83a 	callr	r2
  80516c:	80a1c83a 	sub	r16,r16,r2
  805170:	00bff616 	blt	zero,r2,80514c <__alt_mem_descriptor_memory+0xff78514c>
  805174:	88c0030b 	ldhu	r3,12(r17)
  805178:	00bfffc4 	movi	r2,-1
  80517c:	18c01014 	ori	r3,r3,64
  805180:	88c0030d 	sth	r3,12(r17)
  805184:	003fdf06 	br	805104 <__alt_mem_descriptor_memory+0xff785104>
  805188:	0005883a 	mov	r2,zero
  80518c:	003fec06 	br	805140 <__alt_mem_descriptor_memory+0xff785140>
  805190:	88801415 	stw	r2,80(r17)
  805194:	003fd206 	br	8050e0 <__alt_mem_descriptor_memory+0xff7850e0>
  805198:	28c00f17 	ldw	r3,60(r5)
  80519c:	00ffb316 	blt	zero,r3,80506c <__alt_mem_descriptor_memory+0xff78506c>
  8051a0:	003fd706 	br	805100 <__alt_mem_descriptor_memory+0xff785100>
  8051a4:	89400717 	ldw	r5,28(r17)
  8051a8:	000d883a 	mov	r6,zero
  8051ac:	01c00044 	movi	r7,1
  8051b0:	9809883a 	mov	r4,r19
  8051b4:	403ee83a 	callr	r8
  8051b8:	100d883a 	mov	r6,r2
  8051bc:	00bfffc4 	movi	r2,-1
  8051c0:	30801426 	beq	r6,r2,805214 <__sflush_r+0x1e4>
  8051c4:	8880030b 	ldhu	r2,12(r17)
  8051c8:	8a000a17 	ldw	r8,40(r17)
  8051cc:	003fae06 	br	805088 <__alt_mem_descriptor_memory+0xff785088>
  8051d0:	98c00017 	ldw	r3,0(r19)
  8051d4:	183fba26 	beq	r3,zero,8050c0 <__alt_mem_descriptor_memory+0xff7850c0>
  8051d8:	01000744 	movi	r4,29
  8051dc:	19000626 	beq	r3,r4,8051f8 <__sflush_r+0x1c8>
  8051e0:	01000584 	movi	r4,22
  8051e4:	19000426 	beq	r3,r4,8051f8 <__sflush_r+0x1c8>
  8051e8:	88c0030b 	ldhu	r3,12(r17)
  8051ec:	18c01014 	ori	r3,r3,64
  8051f0:	88c0030d 	sth	r3,12(r17)
  8051f4:	003fc306 	br	805104 <__alt_mem_descriptor_memory+0xff785104>
  8051f8:	8880030b 	ldhu	r2,12(r17)
  8051fc:	88c00417 	ldw	r3,16(r17)
  805200:	88000115 	stw	zero,4(r17)
  805204:	10bdffcc 	andi	r2,r2,63487
  805208:	8880030d 	sth	r2,12(r17)
  80520c:	88c00015 	stw	r3,0(r17)
  805210:	003fb306 	br	8050e0 <__alt_mem_descriptor_memory+0xff7850e0>
  805214:	98800017 	ldw	r2,0(r19)
  805218:	103fea26 	beq	r2,zero,8051c4 <__alt_mem_descriptor_memory+0xff7851c4>
  80521c:	00c00744 	movi	r3,29
  805220:	10c00226 	beq	r2,r3,80522c <__sflush_r+0x1fc>
  805224:	00c00584 	movi	r3,22
  805228:	10c0031e 	bne	r2,r3,805238 <__sflush_r+0x208>
  80522c:	9c000015 	stw	r16,0(r19)
  805230:	0005883a 	mov	r2,zero
  805234:	003fb306 	br	805104 <__alt_mem_descriptor_memory+0xff785104>
  805238:	88c0030b 	ldhu	r3,12(r17)
  80523c:	3005883a 	mov	r2,r6
  805240:	18c01014 	ori	r3,r3,64
  805244:	88c0030d 	sth	r3,12(r17)
  805248:	003fae06 	br	805104 <__alt_mem_descriptor_memory+0xff785104>

0080524c <_fflush_r>:
  80524c:	defffd04 	addi	sp,sp,-12
  805250:	dc000115 	stw	r16,4(sp)
  805254:	dfc00215 	stw	ra,8(sp)
  805258:	2021883a 	mov	r16,r4
  80525c:	20000226 	beq	r4,zero,805268 <_fflush_r+0x1c>
  805260:	20800e17 	ldw	r2,56(r4)
  805264:	10000c26 	beq	r2,zero,805298 <_fflush_r+0x4c>
  805268:	2880030f 	ldh	r2,12(r5)
  80526c:	1000051e 	bne	r2,zero,805284 <_fflush_r+0x38>
  805270:	0005883a 	mov	r2,zero
  805274:	dfc00217 	ldw	ra,8(sp)
  805278:	dc000117 	ldw	r16,4(sp)
  80527c:	dec00304 	addi	sp,sp,12
  805280:	f800283a 	ret
  805284:	8009883a 	mov	r4,r16
  805288:	dfc00217 	ldw	ra,8(sp)
  80528c:	dc000117 	ldw	r16,4(sp)
  805290:	dec00304 	addi	sp,sp,12
  805294:	08050301 	jmpi	805030 <__sflush_r>
  805298:	d9400015 	stw	r5,0(sp)
  80529c:	08056280 	call	805628 <__sinit>
  8052a0:	d9400017 	ldw	r5,0(sp)
  8052a4:	003ff006 	br	805268 <__alt_mem_descriptor_memory+0xff785268>

008052a8 <fflush>:
  8052a8:	20000526 	beq	r4,zero,8052c0 <fflush+0x18>
  8052ac:	00802074 	movhi	r2,129
  8052b0:	1098ac04 	addi	r2,r2,25264
  8052b4:	200b883a 	mov	r5,r4
  8052b8:	11000017 	ldw	r4,0(r2)
  8052bc:	080524c1 	jmpi	80524c <_fflush_r>
  8052c0:	00802074 	movhi	r2,129
  8052c4:	1098ab04 	addi	r2,r2,25260
  8052c8:	11000017 	ldw	r4,0(r2)
  8052cc:	01402034 	movhi	r5,128
  8052d0:	29549304 	addi	r5,r5,21068
  8052d4:	0805b701 	jmpi	805b70 <_fwalk_reent>

008052d8 <__fp_unlock>:
  8052d8:	0005883a 	mov	r2,zero
  8052dc:	f800283a 	ret

008052e0 <_cleanup_r>:
  8052e0:	01402074 	movhi	r5,129
  8052e4:	29650e04 	addi	r5,r5,-27592
  8052e8:	0805b701 	jmpi	805b70 <_fwalk_reent>

008052ec <__sinit.part.1>:
  8052ec:	defff704 	addi	sp,sp,-36
  8052f0:	00c02034 	movhi	r3,128
  8052f4:	dfc00815 	stw	ra,32(sp)
  8052f8:	ddc00715 	stw	r23,28(sp)
  8052fc:	dd800615 	stw	r22,24(sp)
  805300:	dd400515 	stw	r21,20(sp)
  805304:	dd000415 	stw	r20,16(sp)
  805308:	dcc00315 	stw	r19,12(sp)
  80530c:	dc800215 	stw	r18,8(sp)
  805310:	dc400115 	stw	r17,4(sp)
  805314:	dc000015 	stw	r16,0(sp)
  805318:	18d4b804 	addi	r3,r3,21216
  80531c:	24000117 	ldw	r16,4(r4)
  805320:	20c00f15 	stw	r3,60(r4)
  805324:	2080bb04 	addi	r2,r4,748
  805328:	00c000c4 	movi	r3,3
  80532c:	20c0b915 	stw	r3,740(r4)
  805330:	2080ba15 	stw	r2,744(r4)
  805334:	2000b815 	stw	zero,736(r4)
  805338:	05c00204 	movi	r23,8
  80533c:	00800104 	movi	r2,4
  805340:	2025883a 	mov	r18,r4
  805344:	b80d883a 	mov	r6,r23
  805348:	81001704 	addi	r4,r16,92
  80534c:	000b883a 	mov	r5,zero
  805350:	80000015 	stw	zero,0(r16)
  805354:	80000115 	stw	zero,4(r16)
  805358:	80000215 	stw	zero,8(r16)
  80535c:	8080030d 	sth	r2,12(r16)
  805360:	80001915 	stw	zero,100(r16)
  805364:	8000038d 	sth	zero,14(r16)
  805368:	80000415 	stw	zero,16(r16)
  80536c:	80000515 	stw	zero,20(r16)
  805370:	80000615 	stw	zero,24(r16)
  805374:	08011f00 	call	8011f0 <memset>
  805378:	05802034 	movhi	r22,128
  80537c:	94400217 	ldw	r17,8(r18)
  805380:	05402034 	movhi	r21,128
  805384:	05002034 	movhi	r20,128
  805388:	04c02034 	movhi	r19,128
  80538c:	b59e7204 	addi	r22,r22,31176
  805390:	ad5e8904 	addi	r21,r21,31268
  805394:	a51ea804 	addi	r20,r20,31392
  805398:	9cdebf04 	addi	r19,r19,31484
  80539c:	85800815 	stw	r22,32(r16)
  8053a0:	85400915 	stw	r21,36(r16)
  8053a4:	85000a15 	stw	r20,40(r16)
  8053a8:	84c00b15 	stw	r19,44(r16)
  8053ac:	84000715 	stw	r16,28(r16)
  8053b0:	00800284 	movi	r2,10
  8053b4:	8880030d 	sth	r2,12(r17)
  8053b8:	00800044 	movi	r2,1
  8053bc:	b80d883a 	mov	r6,r23
  8053c0:	89001704 	addi	r4,r17,92
  8053c4:	000b883a 	mov	r5,zero
  8053c8:	88000015 	stw	zero,0(r17)
  8053cc:	88000115 	stw	zero,4(r17)
  8053d0:	88000215 	stw	zero,8(r17)
  8053d4:	88001915 	stw	zero,100(r17)
  8053d8:	8880038d 	sth	r2,14(r17)
  8053dc:	88000415 	stw	zero,16(r17)
  8053e0:	88000515 	stw	zero,20(r17)
  8053e4:	88000615 	stw	zero,24(r17)
  8053e8:	08011f00 	call	8011f0 <memset>
  8053ec:	94000317 	ldw	r16,12(r18)
  8053f0:	00800484 	movi	r2,18
  8053f4:	8c400715 	stw	r17,28(r17)
  8053f8:	8d800815 	stw	r22,32(r17)
  8053fc:	8d400915 	stw	r21,36(r17)
  805400:	8d000a15 	stw	r20,40(r17)
  805404:	8cc00b15 	stw	r19,44(r17)
  805408:	8080030d 	sth	r2,12(r16)
  80540c:	00800084 	movi	r2,2
  805410:	80000015 	stw	zero,0(r16)
  805414:	80000115 	stw	zero,4(r16)
  805418:	80000215 	stw	zero,8(r16)
  80541c:	80001915 	stw	zero,100(r16)
  805420:	8080038d 	sth	r2,14(r16)
  805424:	80000415 	stw	zero,16(r16)
  805428:	80000515 	stw	zero,20(r16)
  80542c:	80000615 	stw	zero,24(r16)
  805430:	b80d883a 	mov	r6,r23
  805434:	000b883a 	mov	r5,zero
  805438:	81001704 	addi	r4,r16,92
  80543c:	08011f00 	call	8011f0 <memset>
  805440:	00800044 	movi	r2,1
  805444:	84000715 	stw	r16,28(r16)
  805448:	85800815 	stw	r22,32(r16)
  80544c:	85400915 	stw	r21,36(r16)
  805450:	85000a15 	stw	r20,40(r16)
  805454:	84c00b15 	stw	r19,44(r16)
  805458:	90800e15 	stw	r2,56(r18)
  80545c:	dfc00817 	ldw	ra,32(sp)
  805460:	ddc00717 	ldw	r23,28(sp)
  805464:	dd800617 	ldw	r22,24(sp)
  805468:	dd400517 	ldw	r21,20(sp)
  80546c:	dd000417 	ldw	r20,16(sp)
  805470:	dcc00317 	ldw	r19,12(sp)
  805474:	dc800217 	ldw	r18,8(sp)
  805478:	dc400117 	ldw	r17,4(sp)
  80547c:	dc000017 	ldw	r16,0(sp)
  805480:	dec00904 	addi	sp,sp,36
  805484:	f800283a 	ret

00805488 <__fp_lock>:
  805488:	0005883a 	mov	r2,zero
  80548c:	f800283a 	ret

00805490 <__sfmoreglue>:
  805490:	defffc04 	addi	sp,sp,-16
  805494:	dc400115 	stw	r17,4(sp)
  805498:	2c7fffc4 	addi	r17,r5,-1
  80549c:	8c401a24 	muli	r17,r17,104
  8054a0:	dc800215 	stw	r18,8(sp)
  8054a4:	2825883a 	mov	r18,r5
  8054a8:	89401d04 	addi	r5,r17,116
  8054ac:	dc000015 	stw	r16,0(sp)
  8054b0:	dfc00315 	stw	ra,12(sp)
  8054b4:	0805ecc0 	call	805ecc <_malloc_r>
  8054b8:	1021883a 	mov	r16,r2
  8054bc:	10000726 	beq	r2,zero,8054dc <__sfmoreglue+0x4c>
  8054c0:	11000304 	addi	r4,r2,12
  8054c4:	10000015 	stw	zero,0(r2)
  8054c8:	14800115 	stw	r18,4(r2)
  8054cc:	11000215 	stw	r4,8(r2)
  8054d0:	89801a04 	addi	r6,r17,104
  8054d4:	000b883a 	mov	r5,zero
  8054d8:	08011f00 	call	8011f0 <memset>
  8054dc:	8005883a 	mov	r2,r16
  8054e0:	dfc00317 	ldw	ra,12(sp)
  8054e4:	dc800217 	ldw	r18,8(sp)
  8054e8:	dc400117 	ldw	r17,4(sp)
  8054ec:	dc000017 	ldw	r16,0(sp)
  8054f0:	dec00404 	addi	sp,sp,16
  8054f4:	f800283a 	ret

008054f8 <__sfp>:
  8054f8:	defffb04 	addi	sp,sp,-20
  8054fc:	dc000015 	stw	r16,0(sp)
  805500:	04002074 	movhi	r16,129
  805504:	8418ab04 	addi	r16,r16,25260
  805508:	dcc00315 	stw	r19,12(sp)
  80550c:	2027883a 	mov	r19,r4
  805510:	81000017 	ldw	r4,0(r16)
  805514:	dfc00415 	stw	ra,16(sp)
  805518:	dc800215 	stw	r18,8(sp)
  80551c:	20800e17 	ldw	r2,56(r4)
  805520:	dc400115 	stw	r17,4(sp)
  805524:	1000021e 	bne	r2,zero,805530 <__sfp+0x38>
  805528:	08052ec0 	call	8052ec <__sinit.part.1>
  80552c:	81000017 	ldw	r4,0(r16)
  805530:	2480b804 	addi	r18,r4,736
  805534:	047fffc4 	movi	r17,-1
  805538:	91000117 	ldw	r4,4(r18)
  80553c:	94000217 	ldw	r16,8(r18)
  805540:	213fffc4 	addi	r4,r4,-1
  805544:	20000a16 	blt	r4,zero,805570 <__sfp+0x78>
  805548:	8080030f 	ldh	r2,12(r16)
  80554c:	10000c26 	beq	r2,zero,805580 <__sfp+0x88>
  805550:	80c01d04 	addi	r3,r16,116
  805554:	00000206 	br	805560 <__sfp+0x68>
  805558:	18bfe60f 	ldh	r2,-104(r3)
  80555c:	10000826 	beq	r2,zero,805580 <__sfp+0x88>
  805560:	213fffc4 	addi	r4,r4,-1
  805564:	1c3ffd04 	addi	r16,r3,-12
  805568:	18c01a04 	addi	r3,r3,104
  80556c:	247ffa1e 	bne	r4,r17,805558 <__alt_mem_descriptor_memory+0xff785558>
  805570:	90800017 	ldw	r2,0(r18)
  805574:	10001d26 	beq	r2,zero,8055ec <__sfp+0xf4>
  805578:	1025883a 	mov	r18,r2
  80557c:	003fee06 	br	805538 <__alt_mem_descriptor_memory+0xff785538>
  805580:	00bfffc4 	movi	r2,-1
  805584:	8080038d 	sth	r2,14(r16)
  805588:	00800044 	movi	r2,1
  80558c:	8080030d 	sth	r2,12(r16)
  805590:	80001915 	stw	zero,100(r16)
  805594:	80000015 	stw	zero,0(r16)
  805598:	80000215 	stw	zero,8(r16)
  80559c:	80000115 	stw	zero,4(r16)
  8055a0:	80000415 	stw	zero,16(r16)
  8055a4:	80000515 	stw	zero,20(r16)
  8055a8:	80000615 	stw	zero,24(r16)
  8055ac:	01800204 	movi	r6,8
  8055b0:	000b883a 	mov	r5,zero
  8055b4:	81001704 	addi	r4,r16,92
  8055b8:	08011f00 	call	8011f0 <memset>
  8055bc:	8005883a 	mov	r2,r16
  8055c0:	80000c15 	stw	zero,48(r16)
  8055c4:	80000d15 	stw	zero,52(r16)
  8055c8:	80001115 	stw	zero,68(r16)
  8055cc:	80001215 	stw	zero,72(r16)
  8055d0:	dfc00417 	ldw	ra,16(sp)
  8055d4:	dcc00317 	ldw	r19,12(sp)
  8055d8:	dc800217 	ldw	r18,8(sp)
  8055dc:	dc400117 	ldw	r17,4(sp)
  8055e0:	dc000017 	ldw	r16,0(sp)
  8055e4:	dec00504 	addi	sp,sp,20
  8055e8:	f800283a 	ret
  8055ec:	01400104 	movi	r5,4
  8055f0:	9809883a 	mov	r4,r19
  8055f4:	08054900 	call	805490 <__sfmoreglue>
  8055f8:	90800015 	stw	r2,0(r18)
  8055fc:	103fde1e 	bne	r2,zero,805578 <__alt_mem_descriptor_memory+0xff785578>
  805600:	00800304 	movi	r2,12
  805604:	98800015 	stw	r2,0(r19)
  805608:	0005883a 	mov	r2,zero
  80560c:	003ff006 	br	8055d0 <__alt_mem_descriptor_memory+0xff7855d0>

00805610 <_cleanup>:
  805610:	00802074 	movhi	r2,129
  805614:	1098ab04 	addi	r2,r2,25260
  805618:	11000017 	ldw	r4,0(r2)
  80561c:	01402074 	movhi	r5,129
  805620:	29650e04 	addi	r5,r5,-27592
  805624:	0805b701 	jmpi	805b70 <_fwalk_reent>

00805628 <__sinit>:
  805628:	20800e17 	ldw	r2,56(r4)
  80562c:	10000126 	beq	r2,zero,805634 <__sinit+0xc>
  805630:	f800283a 	ret
  805634:	08052ec1 	jmpi	8052ec <__sinit.part.1>

00805638 <__sfp_lock_acquire>:
  805638:	f800283a 	ret

0080563c <__sfp_lock_release>:
  80563c:	f800283a 	ret

00805640 <__sinit_lock_acquire>:
  805640:	f800283a 	ret

00805644 <__sinit_lock_release>:
  805644:	f800283a 	ret

00805648 <__fp_lock_all>:
  805648:	00802074 	movhi	r2,129
  80564c:	1098ac04 	addi	r2,r2,25264
  805650:	11000017 	ldw	r4,0(r2)
  805654:	01402034 	movhi	r5,128
  805658:	29552204 	addi	r5,r5,21640
  80565c:	0805aac1 	jmpi	805aac <_fwalk>

00805660 <__fp_unlock_all>:
  805660:	00802074 	movhi	r2,129
  805664:	1098ac04 	addi	r2,r2,25264
  805668:	11000017 	ldw	r4,0(r2)
  80566c:	01402034 	movhi	r5,128
  805670:	2954b604 	addi	r5,r5,21208
  805674:	0805aac1 	jmpi	805aac <_fwalk>

00805678 <_malloc_trim_r>:
  805678:	defffb04 	addi	sp,sp,-20
  80567c:	dcc00315 	stw	r19,12(sp)
  805680:	04c02074 	movhi	r19,129
  805684:	dc800215 	stw	r18,8(sp)
  805688:	dc400115 	stw	r17,4(sp)
  80568c:	dc000015 	stw	r16,0(sp)
  805690:	dfc00415 	stw	ra,16(sp)
  805694:	2821883a 	mov	r16,r5
  805698:	9cd27204 	addi	r19,r19,18888
  80569c:	2025883a 	mov	r18,r4
  8056a0:	080de680 	call	80de68 <__malloc_lock>
  8056a4:	98800217 	ldw	r2,8(r19)
  8056a8:	14400117 	ldw	r17,4(r2)
  8056ac:	00bfff04 	movi	r2,-4
  8056b0:	88a2703a 	and	r17,r17,r2
  8056b4:	8c21c83a 	sub	r16,r17,r16
  8056b8:	8403fbc4 	addi	r16,r16,4079
  8056bc:	8020d33a 	srli	r16,r16,12
  8056c0:	0083ffc4 	movi	r2,4095
  8056c4:	843fffc4 	addi	r16,r16,-1
  8056c8:	8020933a 	slli	r16,r16,12
  8056cc:	1400060e 	bge	r2,r16,8056e8 <_malloc_trim_r+0x70>
  8056d0:	000b883a 	mov	r5,zero
  8056d4:	9009883a 	mov	r4,r18
  8056d8:	08079740 	call	807974 <_sbrk_r>
  8056dc:	98c00217 	ldw	r3,8(r19)
  8056e0:	1c47883a 	add	r3,r3,r17
  8056e4:	10c00a26 	beq	r2,r3,805710 <_malloc_trim_r+0x98>
  8056e8:	9009883a 	mov	r4,r18
  8056ec:	080de8c0 	call	80de8c <__malloc_unlock>
  8056f0:	0005883a 	mov	r2,zero
  8056f4:	dfc00417 	ldw	ra,16(sp)
  8056f8:	dcc00317 	ldw	r19,12(sp)
  8056fc:	dc800217 	ldw	r18,8(sp)
  805700:	dc400117 	ldw	r17,4(sp)
  805704:	dc000017 	ldw	r16,0(sp)
  805708:	dec00504 	addi	sp,sp,20
  80570c:	f800283a 	ret
  805710:	040bc83a 	sub	r5,zero,r16
  805714:	9009883a 	mov	r4,r18
  805718:	08079740 	call	807974 <_sbrk_r>
  80571c:	00ffffc4 	movi	r3,-1
  805720:	10c00d26 	beq	r2,r3,805758 <_malloc_trim_r+0xe0>
  805724:	00c02074 	movhi	r3,129
  805728:	18ddd904 	addi	r3,r3,30564
  80572c:	18800017 	ldw	r2,0(r3)
  805730:	99000217 	ldw	r4,8(r19)
  805734:	8c23c83a 	sub	r17,r17,r16
  805738:	8c400054 	ori	r17,r17,1
  80573c:	1421c83a 	sub	r16,r2,r16
  805740:	24400115 	stw	r17,4(r4)
  805744:	9009883a 	mov	r4,r18
  805748:	1c000015 	stw	r16,0(r3)
  80574c:	080de8c0 	call	80de8c <__malloc_unlock>
  805750:	00800044 	movi	r2,1
  805754:	003fe706 	br	8056f4 <__alt_mem_descriptor_memory+0xff7856f4>
  805758:	000b883a 	mov	r5,zero
  80575c:	9009883a 	mov	r4,r18
  805760:	08079740 	call	807974 <_sbrk_r>
  805764:	99000217 	ldw	r4,8(r19)
  805768:	014003c4 	movi	r5,15
  80576c:	1107c83a 	sub	r3,r2,r4
  805770:	28ffdd0e 	bge	r5,r3,8056e8 <__alt_mem_descriptor_memory+0xff7856e8>
  805774:	01402074 	movhi	r5,129
  805778:	2958ae04 	addi	r5,r5,25272
  80577c:	29400017 	ldw	r5,0(r5)
  805780:	18c00054 	ori	r3,r3,1
  805784:	20c00115 	stw	r3,4(r4)
  805788:	00c02074 	movhi	r3,129
  80578c:	1145c83a 	sub	r2,r2,r5
  805790:	18ddd904 	addi	r3,r3,30564
  805794:	18800015 	stw	r2,0(r3)
  805798:	003fd306 	br	8056e8 <__alt_mem_descriptor_memory+0xff7856e8>

0080579c <_free_r>:
  80579c:	28004126 	beq	r5,zero,8058a4 <_free_r+0x108>
  8057a0:	defffd04 	addi	sp,sp,-12
  8057a4:	dc400115 	stw	r17,4(sp)
  8057a8:	dc000015 	stw	r16,0(sp)
  8057ac:	2023883a 	mov	r17,r4
  8057b0:	2821883a 	mov	r16,r5
  8057b4:	dfc00215 	stw	ra,8(sp)
  8057b8:	080de680 	call	80de68 <__malloc_lock>
  8057bc:	81ffff17 	ldw	r7,-4(r16)
  8057c0:	00bfff84 	movi	r2,-2
  8057c4:	01002074 	movhi	r4,129
  8057c8:	81bffe04 	addi	r6,r16,-8
  8057cc:	3884703a 	and	r2,r7,r2
  8057d0:	21127204 	addi	r4,r4,18888
  8057d4:	308b883a 	add	r5,r6,r2
  8057d8:	2a400117 	ldw	r9,4(r5)
  8057dc:	22000217 	ldw	r8,8(r4)
  8057e0:	00ffff04 	movi	r3,-4
  8057e4:	48c6703a 	and	r3,r9,r3
  8057e8:	2a005726 	beq	r5,r8,805948 <_free_r+0x1ac>
  8057ec:	28c00115 	stw	r3,4(r5)
  8057f0:	39c0004c 	andi	r7,r7,1
  8057f4:	3800091e 	bne	r7,zero,80581c <_free_r+0x80>
  8057f8:	823ffe17 	ldw	r8,-8(r16)
  8057fc:	22400204 	addi	r9,r4,8
  805800:	320dc83a 	sub	r6,r6,r8
  805804:	31c00217 	ldw	r7,8(r6)
  805808:	1205883a 	add	r2,r2,r8
  80580c:	3a406526 	beq	r7,r9,8059a4 <_free_r+0x208>
  805810:	32000317 	ldw	r8,12(r6)
  805814:	3a000315 	stw	r8,12(r7)
  805818:	41c00215 	stw	r7,8(r8)
  80581c:	28cf883a 	add	r7,r5,r3
  805820:	39c00117 	ldw	r7,4(r7)
  805824:	39c0004c 	andi	r7,r7,1
  805828:	38003a26 	beq	r7,zero,805914 <_free_r+0x178>
  80582c:	10c00054 	ori	r3,r2,1
  805830:	30c00115 	stw	r3,4(r6)
  805834:	3087883a 	add	r3,r6,r2
  805838:	18800015 	stw	r2,0(r3)
  80583c:	00c07fc4 	movi	r3,511
  805840:	18801936 	bltu	r3,r2,8058a8 <_free_r+0x10c>
  805844:	1004d0fa 	srli	r2,r2,3
  805848:	01c00044 	movi	r7,1
  80584c:	21400117 	ldw	r5,4(r4)
  805850:	10c00044 	addi	r3,r2,1
  805854:	18c7883a 	add	r3,r3,r3
  805858:	1005d0ba 	srai	r2,r2,2
  80585c:	18c7883a 	add	r3,r3,r3
  805860:	18c7883a 	add	r3,r3,r3
  805864:	1907883a 	add	r3,r3,r4
  805868:	3884983a 	sll	r2,r7,r2
  80586c:	19c00017 	ldw	r7,0(r3)
  805870:	1a3ffe04 	addi	r8,r3,-8
  805874:	1144b03a 	or	r2,r2,r5
  805878:	32000315 	stw	r8,12(r6)
  80587c:	31c00215 	stw	r7,8(r6)
  805880:	20800115 	stw	r2,4(r4)
  805884:	19800015 	stw	r6,0(r3)
  805888:	39800315 	stw	r6,12(r7)
  80588c:	8809883a 	mov	r4,r17
  805890:	dfc00217 	ldw	ra,8(sp)
  805894:	dc400117 	ldw	r17,4(sp)
  805898:	dc000017 	ldw	r16,0(sp)
  80589c:	dec00304 	addi	sp,sp,12
  8058a0:	080de8c1 	jmpi	80de8c <__malloc_unlock>
  8058a4:	f800283a 	ret
  8058a8:	100ad27a 	srli	r5,r2,9
  8058ac:	00c00104 	movi	r3,4
  8058b0:	19404a36 	bltu	r3,r5,8059dc <_free_r+0x240>
  8058b4:	100ad1ba 	srli	r5,r2,6
  8058b8:	28c00e44 	addi	r3,r5,57
  8058bc:	18c7883a 	add	r3,r3,r3
  8058c0:	29400e04 	addi	r5,r5,56
  8058c4:	18c7883a 	add	r3,r3,r3
  8058c8:	18c7883a 	add	r3,r3,r3
  8058cc:	1909883a 	add	r4,r3,r4
  8058d0:	20c00017 	ldw	r3,0(r4)
  8058d4:	01c02074 	movhi	r7,129
  8058d8:	213ffe04 	addi	r4,r4,-8
  8058dc:	39d27204 	addi	r7,r7,18888
  8058e0:	20c04426 	beq	r4,r3,8059f4 <_free_r+0x258>
  8058e4:	01ffff04 	movi	r7,-4
  8058e8:	19400117 	ldw	r5,4(r3)
  8058ec:	29ca703a 	and	r5,r5,r7
  8058f0:	1140022e 	bgeu	r2,r5,8058fc <_free_r+0x160>
  8058f4:	18c00217 	ldw	r3,8(r3)
  8058f8:	20fffb1e 	bne	r4,r3,8058e8 <__alt_mem_descriptor_memory+0xff7858e8>
  8058fc:	19000317 	ldw	r4,12(r3)
  805900:	31000315 	stw	r4,12(r6)
  805904:	30c00215 	stw	r3,8(r6)
  805908:	21800215 	stw	r6,8(r4)
  80590c:	19800315 	stw	r6,12(r3)
  805910:	003fde06 	br	80588c <__alt_mem_descriptor_memory+0xff78588c>
  805914:	29c00217 	ldw	r7,8(r5)
  805918:	10c5883a 	add	r2,r2,r3
  80591c:	00c02074 	movhi	r3,129
  805920:	18d27404 	addi	r3,r3,18896
  805924:	38c03b26 	beq	r7,r3,805a14 <_free_r+0x278>
  805928:	2a000317 	ldw	r8,12(r5)
  80592c:	11400054 	ori	r5,r2,1
  805930:	3087883a 	add	r3,r6,r2
  805934:	3a000315 	stw	r8,12(r7)
  805938:	41c00215 	stw	r7,8(r8)
  80593c:	31400115 	stw	r5,4(r6)
  805940:	18800015 	stw	r2,0(r3)
  805944:	003fbd06 	br	80583c <__alt_mem_descriptor_memory+0xff78583c>
  805948:	39c0004c 	andi	r7,r7,1
  80594c:	10c5883a 	add	r2,r2,r3
  805950:	3800071e 	bne	r7,zero,805970 <_free_r+0x1d4>
  805954:	81fffe17 	ldw	r7,-8(r16)
  805958:	31cdc83a 	sub	r6,r6,r7
  80595c:	30c00317 	ldw	r3,12(r6)
  805960:	31400217 	ldw	r5,8(r6)
  805964:	11c5883a 	add	r2,r2,r7
  805968:	28c00315 	stw	r3,12(r5)
  80596c:	19400215 	stw	r5,8(r3)
  805970:	10c00054 	ori	r3,r2,1
  805974:	30c00115 	stw	r3,4(r6)
  805978:	00c02074 	movhi	r3,129
  80597c:	18d8af04 	addi	r3,r3,25276
  805980:	18c00017 	ldw	r3,0(r3)
  805984:	21800215 	stw	r6,8(r4)
  805988:	10ffc036 	bltu	r2,r3,80588c <__alt_mem_descriptor_memory+0xff78588c>
  80598c:	00802074 	movhi	r2,129
  805990:	1098cf04 	addi	r2,r2,25404
  805994:	11400017 	ldw	r5,0(r2)
  805998:	8809883a 	mov	r4,r17
  80599c:	08056780 	call	805678 <_malloc_trim_r>
  8059a0:	003fba06 	br	80588c <__alt_mem_descriptor_memory+0xff78588c>
  8059a4:	28c9883a 	add	r4,r5,r3
  8059a8:	21000117 	ldw	r4,4(r4)
  8059ac:	2100004c 	andi	r4,r4,1
  8059b0:	2000391e 	bne	r4,zero,805a98 <_free_r+0x2fc>
  8059b4:	29c00217 	ldw	r7,8(r5)
  8059b8:	29000317 	ldw	r4,12(r5)
  8059bc:	1885883a 	add	r2,r3,r2
  8059c0:	10c00054 	ori	r3,r2,1
  8059c4:	39000315 	stw	r4,12(r7)
  8059c8:	21c00215 	stw	r7,8(r4)
  8059cc:	30c00115 	stw	r3,4(r6)
  8059d0:	308d883a 	add	r6,r6,r2
  8059d4:	30800015 	stw	r2,0(r6)
  8059d8:	003fac06 	br	80588c <__alt_mem_descriptor_memory+0xff78588c>
  8059dc:	00c00504 	movi	r3,20
  8059e0:	19401536 	bltu	r3,r5,805a38 <_free_r+0x29c>
  8059e4:	28c01704 	addi	r3,r5,92
  8059e8:	18c7883a 	add	r3,r3,r3
  8059ec:	294016c4 	addi	r5,r5,91
  8059f0:	003fb406 	br	8058c4 <__alt_mem_descriptor_memory+0xff7858c4>
  8059f4:	280bd0ba 	srai	r5,r5,2
  8059f8:	00c00044 	movi	r3,1
  8059fc:	38800117 	ldw	r2,4(r7)
  805a00:	194a983a 	sll	r5,r3,r5
  805a04:	2007883a 	mov	r3,r4
  805a08:	2884b03a 	or	r2,r5,r2
  805a0c:	38800115 	stw	r2,4(r7)
  805a10:	003fbb06 	br	805900 <__alt_mem_descriptor_memory+0xff785900>
  805a14:	21800515 	stw	r6,20(r4)
  805a18:	21800415 	stw	r6,16(r4)
  805a1c:	10c00054 	ori	r3,r2,1
  805a20:	31c00315 	stw	r7,12(r6)
  805a24:	31c00215 	stw	r7,8(r6)
  805a28:	30c00115 	stw	r3,4(r6)
  805a2c:	308d883a 	add	r6,r6,r2
  805a30:	30800015 	stw	r2,0(r6)
  805a34:	003f9506 	br	80588c <__alt_mem_descriptor_memory+0xff78588c>
  805a38:	00c01504 	movi	r3,84
  805a3c:	19400536 	bltu	r3,r5,805a54 <_free_r+0x2b8>
  805a40:	100ad33a 	srli	r5,r2,12
  805a44:	28c01bc4 	addi	r3,r5,111
  805a48:	18c7883a 	add	r3,r3,r3
  805a4c:	29401b84 	addi	r5,r5,110
  805a50:	003f9c06 	br	8058c4 <__alt_mem_descriptor_memory+0xff7858c4>
  805a54:	00c05504 	movi	r3,340
  805a58:	19400536 	bltu	r3,r5,805a70 <_free_r+0x2d4>
  805a5c:	100ad3fa 	srli	r5,r2,15
  805a60:	28c01e04 	addi	r3,r5,120
  805a64:	18c7883a 	add	r3,r3,r3
  805a68:	29401dc4 	addi	r5,r5,119
  805a6c:	003f9506 	br	8058c4 <__alt_mem_descriptor_memory+0xff7858c4>
  805a70:	00c15504 	movi	r3,1364
  805a74:	19400536 	bltu	r3,r5,805a8c <_free_r+0x2f0>
  805a78:	100ad4ba 	srli	r5,r2,18
  805a7c:	28c01f44 	addi	r3,r5,125
  805a80:	18c7883a 	add	r3,r3,r3
  805a84:	29401f04 	addi	r5,r5,124
  805a88:	003f8e06 	br	8058c4 <__alt_mem_descriptor_memory+0xff7858c4>
  805a8c:	00c03f84 	movi	r3,254
  805a90:	01401f84 	movi	r5,126
  805a94:	003f8b06 	br	8058c4 <__alt_mem_descriptor_memory+0xff7858c4>
  805a98:	10c00054 	ori	r3,r2,1
  805a9c:	30c00115 	stw	r3,4(r6)
  805aa0:	308d883a 	add	r6,r6,r2
  805aa4:	30800015 	stw	r2,0(r6)
  805aa8:	003f7806 	br	80588c <__alt_mem_descriptor_memory+0xff78588c>

00805aac <_fwalk>:
  805aac:	defff704 	addi	sp,sp,-36
  805ab0:	dd000415 	stw	r20,16(sp)
  805ab4:	dfc00815 	stw	ra,32(sp)
  805ab8:	ddc00715 	stw	r23,28(sp)
  805abc:	dd800615 	stw	r22,24(sp)
  805ac0:	dd400515 	stw	r21,20(sp)
  805ac4:	dcc00315 	stw	r19,12(sp)
  805ac8:	dc800215 	stw	r18,8(sp)
  805acc:	dc400115 	stw	r17,4(sp)
  805ad0:	dc000015 	stw	r16,0(sp)
  805ad4:	2500b804 	addi	r20,r4,736
  805ad8:	a0002326 	beq	r20,zero,805b68 <_fwalk+0xbc>
  805adc:	282b883a 	mov	r21,r5
  805ae0:	002f883a 	mov	r23,zero
  805ae4:	05800044 	movi	r22,1
  805ae8:	04ffffc4 	movi	r19,-1
  805aec:	a4400117 	ldw	r17,4(r20)
  805af0:	a4800217 	ldw	r18,8(r20)
  805af4:	8c7fffc4 	addi	r17,r17,-1
  805af8:	88000d16 	blt	r17,zero,805b30 <_fwalk+0x84>
  805afc:	94000304 	addi	r16,r18,12
  805b00:	94800384 	addi	r18,r18,14
  805b04:	8080000b 	ldhu	r2,0(r16)
  805b08:	8c7fffc4 	addi	r17,r17,-1
  805b0c:	813ffd04 	addi	r4,r16,-12
  805b10:	b080042e 	bgeu	r22,r2,805b24 <_fwalk+0x78>
  805b14:	9080000f 	ldh	r2,0(r18)
  805b18:	14c00226 	beq	r2,r19,805b24 <_fwalk+0x78>
  805b1c:	a83ee83a 	callr	r21
  805b20:	b8aeb03a 	or	r23,r23,r2
  805b24:	84001a04 	addi	r16,r16,104
  805b28:	94801a04 	addi	r18,r18,104
  805b2c:	8cfff51e 	bne	r17,r19,805b04 <__alt_mem_descriptor_memory+0xff785b04>
  805b30:	a5000017 	ldw	r20,0(r20)
  805b34:	a03fed1e 	bne	r20,zero,805aec <__alt_mem_descriptor_memory+0xff785aec>
  805b38:	b805883a 	mov	r2,r23
  805b3c:	dfc00817 	ldw	ra,32(sp)
  805b40:	ddc00717 	ldw	r23,28(sp)
  805b44:	dd800617 	ldw	r22,24(sp)
  805b48:	dd400517 	ldw	r21,20(sp)
  805b4c:	dd000417 	ldw	r20,16(sp)
  805b50:	dcc00317 	ldw	r19,12(sp)
  805b54:	dc800217 	ldw	r18,8(sp)
  805b58:	dc400117 	ldw	r17,4(sp)
  805b5c:	dc000017 	ldw	r16,0(sp)
  805b60:	dec00904 	addi	sp,sp,36
  805b64:	f800283a 	ret
  805b68:	002f883a 	mov	r23,zero
  805b6c:	003ff206 	br	805b38 <__alt_mem_descriptor_memory+0xff785b38>

00805b70 <_fwalk_reent>:
  805b70:	defff704 	addi	sp,sp,-36
  805b74:	dd000415 	stw	r20,16(sp)
  805b78:	dfc00815 	stw	ra,32(sp)
  805b7c:	ddc00715 	stw	r23,28(sp)
  805b80:	dd800615 	stw	r22,24(sp)
  805b84:	dd400515 	stw	r21,20(sp)
  805b88:	dcc00315 	stw	r19,12(sp)
  805b8c:	dc800215 	stw	r18,8(sp)
  805b90:	dc400115 	stw	r17,4(sp)
  805b94:	dc000015 	stw	r16,0(sp)
  805b98:	2500b804 	addi	r20,r4,736
  805b9c:	a0002326 	beq	r20,zero,805c2c <_fwalk_reent+0xbc>
  805ba0:	282b883a 	mov	r21,r5
  805ba4:	2027883a 	mov	r19,r4
  805ba8:	002f883a 	mov	r23,zero
  805bac:	05800044 	movi	r22,1
  805bb0:	04bfffc4 	movi	r18,-1
  805bb4:	a4400117 	ldw	r17,4(r20)
  805bb8:	a4000217 	ldw	r16,8(r20)
  805bbc:	8c7fffc4 	addi	r17,r17,-1
  805bc0:	88000c16 	blt	r17,zero,805bf4 <_fwalk_reent+0x84>
  805bc4:	84000304 	addi	r16,r16,12
  805bc8:	8080000b 	ldhu	r2,0(r16)
  805bcc:	8c7fffc4 	addi	r17,r17,-1
  805bd0:	817ffd04 	addi	r5,r16,-12
  805bd4:	b080052e 	bgeu	r22,r2,805bec <_fwalk_reent+0x7c>
  805bd8:	8080008f 	ldh	r2,2(r16)
  805bdc:	9809883a 	mov	r4,r19
  805be0:	14800226 	beq	r2,r18,805bec <_fwalk_reent+0x7c>
  805be4:	a83ee83a 	callr	r21
  805be8:	b8aeb03a 	or	r23,r23,r2
  805bec:	84001a04 	addi	r16,r16,104
  805bf0:	8cbff51e 	bne	r17,r18,805bc8 <__alt_mem_descriptor_memory+0xff785bc8>
  805bf4:	a5000017 	ldw	r20,0(r20)
  805bf8:	a03fee1e 	bne	r20,zero,805bb4 <__alt_mem_descriptor_memory+0xff785bb4>
  805bfc:	b805883a 	mov	r2,r23
  805c00:	dfc00817 	ldw	ra,32(sp)
  805c04:	ddc00717 	ldw	r23,28(sp)
  805c08:	dd800617 	ldw	r22,24(sp)
  805c0c:	dd400517 	ldw	r21,20(sp)
  805c10:	dd000417 	ldw	r20,16(sp)
  805c14:	dcc00317 	ldw	r19,12(sp)
  805c18:	dc800217 	ldw	r18,8(sp)
  805c1c:	dc400117 	ldw	r17,4(sp)
  805c20:	dc000017 	ldw	r16,0(sp)
  805c24:	dec00904 	addi	sp,sp,36
  805c28:	f800283a 	ret
  805c2c:	002f883a 	mov	r23,zero
  805c30:	003ff206 	br	805bfc <__alt_mem_descriptor_memory+0xff785bfc>

00805c34 <_setlocale_r>:
  805c34:	30001b26 	beq	r6,zero,805ca4 <_setlocale_r+0x70>
  805c38:	01402074 	movhi	r5,129
  805c3c:	defffe04 	addi	sp,sp,-8
  805c40:	294ffd04 	addi	r5,r5,16372
  805c44:	3009883a 	mov	r4,r6
  805c48:	dc000015 	stw	r16,0(sp)
  805c4c:	dfc00115 	stw	ra,4(sp)
  805c50:	3021883a 	mov	r16,r6
  805c54:	0807b040 	call	807b04 <strcmp>
  805c58:	1000061e 	bne	r2,zero,805c74 <_setlocale_r+0x40>
  805c5c:	00802074 	movhi	r2,129
  805c60:	108ffc04 	addi	r2,r2,16368
  805c64:	dfc00117 	ldw	ra,4(sp)
  805c68:	dc000017 	ldw	r16,0(sp)
  805c6c:	dec00204 	addi	sp,sp,8
  805c70:	f800283a 	ret
  805c74:	01402074 	movhi	r5,129
  805c78:	294ffc04 	addi	r5,r5,16368
  805c7c:	8009883a 	mov	r4,r16
  805c80:	0807b040 	call	807b04 <strcmp>
  805c84:	103ff526 	beq	r2,zero,805c5c <__alt_mem_descriptor_memory+0xff785c5c>
  805c88:	01402074 	movhi	r5,129
  805c8c:	294fe704 	addi	r5,r5,16284
  805c90:	8009883a 	mov	r4,r16
  805c94:	0807b040 	call	807b04 <strcmp>
  805c98:	103ff026 	beq	r2,zero,805c5c <__alt_mem_descriptor_memory+0xff785c5c>
  805c9c:	0005883a 	mov	r2,zero
  805ca0:	003ff006 	br	805c64 <__alt_mem_descriptor_memory+0xff785c64>
  805ca4:	00802074 	movhi	r2,129
  805ca8:	108ffc04 	addi	r2,r2,16368
  805cac:	f800283a 	ret

00805cb0 <__locale_charset>:
  805cb0:	00802074 	movhi	r2,129
  805cb4:	10925c04 	addi	r2,r2,18800
  805cb8:	f800283a 	ret

00805cbc <__locale_mb_cur_max>:
  805cbc:	00802074 	movhi	r2,129
  805cc0:	1098ad04 	addi	r2,r2,25268
  805cc4:	10800017 	ldw	r2,0(r2)
  805cc8:	f800283a 	ret

00805ccc <__locale_msgcharset>:
  805ccc:	00802074 	movhi	r2,129
  805cd0:	10925404 	addi	r2,r2,18768
  805cd4:	f800283a 	ret

00805cd8 <__locale_cjk_lang>:
  805cd8:	0005883a 	mov	r2,zero
  805cdc:	f800283a 	ret

00805ce0 <_localeconv_r>:
  805ce0:	00802074 	movhi	r2,129
  805ce4:	10926404 	addi	r2,r2,18832
  805ce8:	f800283a 	ret

00805cec <setlocale>:
  805cec:	00802074 	movhi	r2,129
  805cf0:	1098ac04 	addi	r2,r2,25264
  805cf4:	280d883a 	mov	r6,r5
  805cf8:	200b883a 	mov	r5,r4
  805cfc:	11000017 	ldw	r4,0(r2)
  805d00:	0805c341 	jmpi	805c34 <_setlocale_r>

00805d04 <localeconv>:
  805d04:	00802074 	movhi	r2,129
  805d08:	10926404 	addi	r2,r2,18832
  805d0c:	f800283a 	ret

00805d10 <__smakebuf_r>:
  805d10:	2880030b 	ldhu	r2,12(r5)
  805d14:	10c0008c 	andi	r3,r2,2
  805d18:	1800411e 	bne	r3,zero,805e20 <__smakebuf_r+0x110>
  805d1c:	deffec04 	addi	sp,sp,-80
  805d20:	dc000f15 	stw	r16,60(sp)
  805d24:	2821883a 	mov	r16,r5
  805d28:	2940038f 	ldh	r5,14(r5)
  805d2c:	dc401015 	stw	r17,64(sp)
  805d30:	dfc01315 	stw	ra,76(sp)
  805d34:	dcc01215 	stw	r19,72(sp)
  805d38:	dc801115 	stw	r18,68(sp)
  805d3c:	2023883a 	mov	r17,r4
  805d40:	28001c16 	blt	r5,zero,805db4 <__smakebuf_r+0xa4>
  805d44:	d80d883a 	mov	r6,sp
  805d48:	08097440 	call	809744 <_fstat_r>
  805d4c:	10001816 	blt	r2,zero,805db0 <__smakebuf_r+0xa0>
  805d50:	d8800117 	ldw	r2,4(sp)
  805d54:	00e00014 	movui	r3,32768
  805d58:	10bc000c 	andi	r2,r2,61440
  805d5c:	14c80020 	cmpeqi	r19,r2,8192
  805d60:	10c03726 	beq	r2,r3,805e40 <__smakebuf_r+0x130>
  805d64:	80c0030b 	ldhu	r3,12(r16)
  805d68:	18c20014 	ori	r3,r3,2048
  805d6c:	80c0030d 	sth	r3,12(r16)
  805d70:	00c80004 	movi	r3,8192
  805d74:	10c0521e 	bne	r2,r3,805ec0 <__smakebuf_r+0x1b0>
  805d78:	8140038f 	ldh	r5,14(r16)
  805d7c:	8809883a 	mov	r4,r17
  805d80:	0809c5c0 	call	809c5c <_isatty_r>
  805d84:	10004c26 	beq	r2,zero,805eb8 <__smakebuf_r+0x1a8>
  805d88:	8080030b 	ldhu	r2,12(r16)
  805d8c:	80c010c4 	addi	r3,r16,67
  805d90:	80c00015 	stw	r3,0(r16)
  805d94:	10800054 	ori	r2,r2,1
  805d98:	8080030d 	sth	r2,12(r16)
  805d9c:	00800044 	movi	r2,1
  805da0:	80c00415 	stw	r3,16(r16)
  805da4:	80800515 	stw	r2,20(r16)
  805da8:	04810004 	movi	r18,1024
  805dac:	00000706 	br	805dcc <__smakebuf_r+0xbc>
  805db0:	8080030b 	ldhu	r2,12(r16)
  805db4:	10c0200c 	andi	r3,r2,128
  805db8:	18001f1e 	bne	r3,zero,805e38 <__smakebuf_r+0x128>
  805dbc:	04810004 	movi	r18,1024
  805dc0:	10820014 	ori	r2,r2,2048
  805dc4:	8080030d 	sth	r2,12(r16)
  805dc8:	0027883a 	mov	r19,zero
  805dcc:	900b883a 	mov	r5,r18
  805dd0:	8809883a 	mov	r4,r17
  805dd4:	0805ecc0 	call	805ecc <_malloc_r>
  805dd8:	10002c26 	beq	r2,zero,805e8c <__smakebuf_r+0x17c>
  805ddc:	80c0030b 	ldhu	r3,12(r16)
  805de0:	01002034 	movhi	r4,128
  805de4:	2114b804 	addi	r4,r4,21216
  805de8:	89000f15 	stw	r4,60(r17)
  805dec:	18c02014 	ori	r3,r3,128
  805df0:	80c0030d 	sth	r3,12(r16)
  805df4:	80800015 	stw	r2,0(r16)
  805df8:	80800415 	stw	r2,16(r16)
  805dfc:	84800515 	stw	r18,20(r16)
  805e00:	98001a1e 	bne	r19,zero,805e6c <__smakebuf_r+0x15c>
  805e04:	dfc01317 	ldw	ra,76(sp)
  805e08:	dcc01217 	ldw	r19,72(sp)
  805e0c:	dc801117 	ldw	r18,68(sp)
  805e10:	dc401017 	ldw	r17,64(sp)
  805e14:	dc000f17 	ldw	r16,60(sp)
  805e18:	dec01404 	addi	sp,sp,80
  805e1c:	f800283a 	ret
  805e20:	288010c4 	addi	r2,r5,67
  805e24:	28800015 	stw	r2,0(r5)
  805e28:	28800415 	stw	r2,16(r5)
  805e2c:	00800044 	movi	r2,1
  805e30:	28800515 	stw	r2,20(r5)
  805e34:	f800283a 	ret
  805e38:	04801004 	movi	r18,64
  805e3c:	003fe006 	br	805dc0 <__alt_mem_descriptor_memory+0xff785dc0>
  805e40:	81000a17 	ldw	r4,40(r16)
  805e44:	00c02034 	movhi	r3,128
  805e48:	18dea804 	addi	r3,r3,31392
  805e4c:	20ffc51e 	bne	r4,r3,805d64 <__alt_mem_descriptor_memory+0xff785d64>
  805e50:	8080030b 	ldhu	r2,12(r16)
  805e54:	04810004 	movi	r18,1024
  805e58:	84801315 	stw	r18,76(r16)
  805e5c:	1484b03a 	or	r2,r2,r18
  805e60:	8080030d 	sth	r2,12(r16)
  805e64:	0027883a 	mov	r19,zero
  805e68:	003fd806 	br	805dcc <__alt_mem_descriptor_memory+0xff785dcc>
  805e6c:	8140038f 	ldh	r5,14(r16)
  805e70:	8809883a 	mov	r4,r17
  805e74:	0809c5c0 	call	809c5c <_isatty_r>
  805e78:	103fe226 	beq	r2,zero,805e04 <__alt_mem_descriptor_memory+0xff785e04>
  805e7c:	8080030b 	ldhu	r2,12(r16)
  805e80:	10800054 	ori	r2,r2,1
  805e84:	8080030d 	sth	r2,12(r16)
  805e88:	003fde06 	br	805e04 <__alt_mem_descriptor_memory+0xff785e04>
  805e8c:	8080030b 	ldhu	r2,12(r16)
  805e90:	10c0800c 	andi	r3,r2,512
  805e94:	183fdb1e 	bne	r3,zero,805e04 <__alt_mem_descriptor_memory+0xff785e04>
  805e98:	10800094 	ori	r2,r2,2
  805e9c:	80c010c4 	addi	r3,r16,67
  805ea0:	8080030d 	sth	r2,12(r16)
  805ea4:	00800044 	movi	r2,1
  805ea8:	80c00015 	stw	r3,0(r16)
  805eac:	80c00415 	stw	r3,16(r16)
  805eb0:	80800515 	stw	r2,20(r16)
  805eb4:	003fd306 	br	805e04 <__alt_mem_descriptor_memory+0xff785e04>
  805eb8:	04810004 	movi	r18,1024
  805ebc:	003fc306 	br	805dcc <__alt_mem_descriptor_memory+0xff785dcc>
  805ec0:	0027883a 	mov	r19,zero
  805ec4:	04810004 	movi	r18,1024
  805ec8:	003fc006 	br	805dcc <__alt_mem_descriptor_memory+0xff785dcc>

00805ecc <_malloc_r>:
  805ecc:	defff504 	addi	sp,sp,-44
  805ed0:	dc800315 	stw	r18,12(sp)
  805ed4:	dfc00a15 	stw	ra,40(sp)
  805ed8:	df000915 	stw	fp,36(sp)
  805edc:	ddc00815 	stw	r23,32(sp)
  805ee0:	dd800715 	stw	r22,28(sp)
  805ee4:	dd400615 	stw	r21,24(sp)
  805ee8:	dd000515 	stw	r20,20(sp)
  805eec:	dcc00415 	stw	r19,16(sp)
  805ef0:	dc400215 	stw	r17,8(sp)
  805ef4:	dc000115 	stw	r16,4(sp)
  805ef8:	288002c4 	addi	r2,r5,11
  805efc:	00c00584 	movi	r3,22
  805f00:	2025883a 	mov	r18,r4
  805f04:	18807f2e 	bgeu	r3,r2,806104 <_malloc_r+0x238>
  805f08:	047ffe04 	movi	r17,-8
  805f0c:	1462703a 	and	r17,r2,r17
  805f10:	8800a316 	blt	r17,zero,8061a0 <_malloc_r+0x2d4>
  805f14:	8940a236 	bltu	r17,r5,8061a0 <_malloc_r+0x2d4>
  805f18:	080de680 	call	80de68 <__malloc_lock>
  805f1c:	00807dc4 	movi	r2,503
  805f20:	1441e92e 	bgeu	r2,r17,8066c8 <_malloc_r+0x7fc>
  805f24:	8804d27a 	srli	r2,r17,9
  805f28:	1000a126 	beq	r2,zero,8061b0 <_malloc_r+0x2e4>
  805f2c:	00c00104 	movi	r3,4
  805f30:	18811e36 	bltu	r3,r2,8063ac <_malloc_r+0x4e0>
  805f34:	8804d1ba 	srli	r2,r17,6
  805f38:	12000e44 	addi	r8,r2,57
  805f3c:	11c00e04 	addi	r7,r2,56
  805f40:	4209883a 	add	r4,r8,r8
  805f44:	04c02074 	movhi	r19,129
  805f48:	2109883a 	add	r4,r4,r4
  805f4c:	9cd27204 	addi	r19,r19,18888
  805f50:	2109883a 	add	r4,r4,r4
  805f54:	9909883a 	add	r4,r19,r4
  805f58:	24000117 	ldw	r16,4(r4)
  805f5c:	213ffe04 	addi	r4,r4,-8
  805f60:	24009726 	beq	r4,r16,8061c0 <_malloc_r+0x2f4>
  805f64:	80800117 	ldw	r2,4(r16)
  805f68:	01bfff04 	movi	r6,-4
  805f6c:	014003c4 	movi	r5,15
  805f70:	1184703a 	and	r2,r2,r6
  805f74:	1447c83a 	sub	r3,r2,r17
  805f78:	28c00716 	blt	r5,r3,805f98 <_malloc_r+0xcc>
  805f7c:	1800920e 	bge	r3,zero,8061c8 <_malloc_r+0x2fc>
  805f80:	84000317 	ldw	r16,12(r16)
  805f84:	24008e26 	beq	r4,r16,8061c0 <_malloc_r+0x2f4>
  805f88:	80800117 	ldw	r2,4(r16)
  805f8c:	1184703a 	and	r2,r2,r6
  805f90:	1447c83a 	sub	r3,r2,r17
  805f94:	28fff90e 	bge	r5,r3,805f7c <__alt_mem_descriptor_memory+0xff785f7c>
  805f98:	3809883a 	mov	r4,r7
  805f9c:	01802074 	movhi	r6,129
  805fa0:	9c000417 	ldw	r16,16(r19)
  805fa4:	31927204 	addi	r6,r6,18888
  805fa8:	32000204 	addi	r8,r6,8
  805fac:	82013426 	beq	r16,r8,806480 <_malloc_r+0x5b4>
  805fb0:	80c00117 	ldw	r3,4(r16)
  805fb4:	00bfff04 	movi	r2,-4
  805fb8:	188e703a 	and	r7,r3,r2
  805fbc:	3c45c83a 	sub	r2,r7,r17
  805fc0:	00c003c4 	movi	r3,15
  805fc4:	18811f16 	blt	r3,r2,806444 <_malloc_r+0x578>
  805fc8:	32000515 	stw	r8,20(r6)
  805fcc:	32000415 	stw	r8,16(r6)
  805fd0:	10007f0e 	bge	r2,zero,8061d0 <_malloc_r+0x304>
  805fd4:	00807fc4 	movi	r2,511
  805fd8:	11c0fd36 	bltu	r2,r7,8063d0 <_malloc_r+0x504>
  805fdc:	3806d0fa 	srli	r3,r7,3
  805fe0:	01c00044 	movi	r7,1
  805fe4:	30800117 	ldw	r2,4(r6)
  805fe8:	19400044 	addi	r5,r3,1
  805fec:	294b883a 	add	r5,r5,r5
  805ff0:	1807d0ba 	srai	r3,r3,2
  805ff4:	294b883a 	add	r5,r5,r5
  805ff8:	294b883a 	add	r5,r5,r5
  805ffc:	298b883a 	add	r5,r5,r6
  806000:	38c6983a 	sll	r3,r7,r3
  806004:	29c00017 	ldw	r7,0(r5)
  806008:	2a7ffe04 	addi	r9,r5,-8
  80600c:	1886b03a 	or	r3,r3,r2
  806010:	82400315 	stw	r9,12(r16)
  806014:	81c00215 	stw	r7,8(r16)
  806018:	30c00115 	stw	r3,4(r6)
  80601c:	2c000015 	stw	r16,0(r5)
  806020:	3c000315 	stw	r16,12(r7)
  806024:	2005d0ba 	srai	r2,r4,2
  806028:	01400044 	movi	r5,1
  80602c:	288a983a 	sll	r5,r5,r2
  806030:	19406f36 	bltu	r3,r5,8061f0 <_malloc_r+0x324>
  806034:	28c4703a 	and	r2,r5,r3
  806038:	10000a1e 	bne	r2,zero,806064 <_malloc_r+0x198>
  80603c:	00bfff04 	movi	r2,-4
  806040:	294b883a 	add	r5,r5,r5
  806044:	2088703a 	and	r4,r4,r2
  806048:	28c4703a 	and	r2,r5,r3
  80604c:	21000104 	addi	r4,r4,4
  806050:	1000041e 	bne	r2,zero,806064 <_malloc_r+0x198>
  806054:	294b883a 	add	r5,r5,r5
  806058:	28c4703a 	and	r2,r5,r3
  80605c:	21000104 	addi	r4,r4,4
  806060:	103ffc26 	beq	r2,zero,806054 <__alt_mem_descriptor_memory+0xff786054>
  806064:	02bfff04 	movi	r10,-4
  806068:	024003c4 	movi	r9,15
  80606c:	21800044 	addi	r6,r4,1
  806070:	318d883a 	add	r6,r6,r6
  806074:	318d883a 	add	r6,r6,r6
  806078:	318d883a 	add	r6,r6,r6
  80607c:	998d883a 	add	r6,r19,r6
  806080:	333ffe04 	addi	r12,r6,-8
  806084:	2017883a 	mov	r11,r4
  806088:	31800104 	addi	r6,r6,4
  80608c:	34000017 	ldw	r16,0(r6)
  806090:	31fffd04 	addi	r7,r6,-12
  806094:	81c0041e 	bne	r16,r7,8060a8 <_malloc_r+0x1dc>
  806098:	0000fb06 	br	806488 <_malloc_r+0x5bc>
  80609c:	1801030e 	bge	r3,zero,8064ac <_malloc_r+0x5e0>
  8060a0:	84000317 	ldw	r16,12(r16)
  8060a4:	81c0f826 	beq	r16,r7,806488 <_malloc_r+0x5bc>
  8060a8:	80800117 	ldw	r2,4(r16)
  8060ac:	1284703a 	and	r2,r2,r10
  8060b0:	1447c83a 	sub	r3,r2,r17
  8060b4:	48fff90e 	bge	r9,r3,80609c <__alt_mem_descriptor_memory+0xff78609c>
  8060b8:	80800317 	ldw	r2,12(r16)
  8060bc:	81000217 	ldw	r4,8(r16)
  8060c0:	89400054 	ori	r5,r17,1
  8060c4:	81400115 	stw	r5,4(r16)
  8060c8:	20800315 	stw	r2,12(r4)
  8060cc:	11000215 	stw	r4,8(r2)
  8060d0:	8463883a 	add	r17,r16,r17
  8060d4:	9c400515 	stw	r17,20(r19)
  8060d8:	9c400415 	stw	r17,16(r19)
  8060dc:	18800054 	ori	r2,r3,1
  8060e0:	88800115 	stw	r2,4(r17)
  8060e4:	8a000315 	stw	r8,12(r17)
  8060e8:	8a000215 	stw	r8,8(r17)
  8060ec:	88e3883a 	add	r17,r17,r3
  8060f0:	88c00015 	stw	r3,0(r17)
  8060f4:	9009883a 	mov	r4,r18
  8060f8:	080de8c0 	call	80de8c <__malloc_unlock>
  8060fc:	80800204 	addi	r2,r16,8
  806100:	00001b06 	br	806170 <_malloc_r+0x2a4>
  806104:	04400404 	movi	r17,16
  806108:	89402536 	bltu	r17,r5,8061a0 <_malloc_r+0x2d4>
  80610c:	080de680 	call	80de68 <__malloc_lock>
  806110:	00800184 	movi	r2,6
  806114:	01000084 	movi	r4,2
  806118:	04c02074 	movhi	r19,129
  80611c:	1085883a 	add	r2,r2,r2
  806120:	9cd27204 	addi	r19,r19,18888
  806124:	1085883a 	add	r2,r2,r2
  806128:	9885883a 	add	r2,r19,r2
  80612c:	14000117 	ldw	r16,4(r2)
  806130:	10fffe04 	addi	r3,r2,-8
  806134:	80c0d926 	beq	r16,r3,80649c <_malloc_r+0x5d0>
  806138:	80c00117 	ldw	r3,4(r16)
  80613c:	81000317 	ldw	r4,12(r16)
  806140:	00bfff04 	movi	r2,-4
  806144:	1884703a 	and	r2,r3,r2
  806148:	81400217 	ldw	r5,8(r16)
  80614c:	8085883a 	add	r2,r16,r2
  806150:	10c00117 	ldw	r3,4(r2)
  806154:	29000315 	stw	r4,12(r5)
  806158:	21400215 	stw	r5,8(r4)
  80615c:	18c00054 	ori	r3,r3,1
  806160:	10c00115 	stw	r3,4(r2)
  806164:	9009883a 	mov	r4,r18
  806168:	080de8c0 	call	80de8c <__malloc_unlock>
  80616c:	80800204 	addi	r2,r16,8
  806170:	dfc00a17 	ldw	ra,40(sp)
  806174:	df000917 	ldw	fp,36(sp)
  806178:	ddc00817 	ldw	r23,32(sp)
  80617c:	dd800717 	ldw	r22,28(sp)
  806180:	dd400617 	ldw	r21,24(sp)
  806184:	dd000517 	ldw	r20,20(sp)
  806188:	dcc00417 	ldw	r19,16(sp)
  80618c:	dc800317 	ldw	r18,12(sp)
  806190:	dc400217 	ldw	r17,8(sp)
  806194:	dc000117 	ldw	r16,4(sp)
  806198:	dec00b04 	addi	sp,sp,44
  80619c:	f800283a 	ret
  8061a0:	00800304 	movi	r2,12
  8061a4:	90800015 	stw	r2,0(r18)
  8061a8:	0005883a 	mov	r2,zero
  8061ac:	003ff006 	br	806170 <__alt_mem_descriptor_memory+0xff786170>
  8061b0:	01002004 	movi	r4,128
  8061b4:	02001004 	movi	r8,64
  8061b8:	01c00fc4 	movi	r7,63
  8061bc:	003f6106 	br	805f44 <__alt_mem_descriptor_memory+0xff785f44>
  8061c0:	4009883a 	mov	r4,r8
  8061c4:	003f7506 	br	805f9c <__alt_mem_descriptor_memory+0xff785f9c>
  8061c8:	81000317 	ldw	r4,12(r16)
  8061cc:	003fde06 	br	806148 <__alt_mem_descriptor_memory+0xff786148>
  8061d0:	81c5883a 	add	r2,r16,r7
  8061d4:	11400117 	ldw	r5,4(r2)
  8061d8:	9009883a 	mov	r4,r18
  8061dc:	29400054 	ori	r5,r5,1
  8061e0:	11400115 	stw	r5,4(r2)
  8061e4:	080de8c0 	call	80de8c <__malloc_unlock>
  8061e8:	80800204 	addi	r2,r16,8
  8061ec:	003fe006 	br	806170 <__alt_mem_descriptor_memory+0xff786170>
  8061f0:	9c000217 	ldw	r16,8(r19)
  8061f4:	00bfff04 	movi	r2,-4
  8061f8:	85800117 	ldw	r22,4(r16)
  8061fc:	b0ac703a 	and	r22,r22,r2
  806200:	b4400336 	bltu	r22,r17,806210 <_malloc_r+0x344>
  806204:	b445c83a 	sub	r2,r22,r17
  806208:	00c003c4 	movi	r3,15
  80620c:	18805d16 	blt	r3,r2,806384 <_malloc_r+0x4b8>
  806210:	05c02074 	movhi	r23,129
  806214:	00802074 	movhi	r2,129
  806218:	1098cf04 	addi	r2,r2,25404
  80621c:	bdd8ae04 	addi	r23,r23,25272
  806220:	15400017 	ldw	r21,0(r2)
  806224:	b8c00017 	ldw	r3,0(r23)
  806228:	00bfffc4 	movi	r2,-1
  80622c:	858d883a 	add	r6,r16,r22
  806230:	8d6b883a 	add	r21,r17,r21
  806234:	1880ea26 	beq	r3,r2,8065e0 <_malloc_r+0x714>
  806238:	ad4403c4 	addi	r21,r21,4111
  80623c:	00bc0004 	movi	r2,-4096
  806240:	a8aa703a 	and	r21,r21,r2
  806244:	a80b883a 	mov	r5,r21
  806248:	9009883a 	mov	r4,r18
  80624c:	d9800015 	stw	r6,0(sp)
  806250:	08079740 	call	807974 <_sbrk_r>
  806254:	1029883a 	mov	r20,r2
  806258:	00bfffc4 	movi	r2,-1
  80625c:	d9800017 	ldw	r6,0(sp)
  806260:	a080e826 	beq	r20,r2,806604 <_malloc_r+0x738>
  806264:	a180a636 	bltu	r20,r6,806500 <_malloc_r+0x634>
  806268:	07002074 	movhi	fp,129
  80626c:	e71dd904 	addi	fp,fp,30564
  806270:	e0800017 	ldw	r2,0(fp)
  806274:	a887883a 	add	r3,r21,r2
  806278:	e0c00015 	stw	r3,0(fp)
  80627c:	3500e626 	beq	r6,r20,806618 <_malloc_r+0x74c>
  806280:	b9000017 	ldw	r4,0(r23)
  806284:	00bfffc4 	movi	r2,-1
  806288:	2080ee26 	beq	r4,r2,806644 <_malloc_r+0x778>
  80628c:	a185c83a 	sub	r2,r20,r6
  806290:	10c5883a 	add	r2,r2,r3
  806294:	e0800015 	stw	r2,0(fp)
  806298:	a0c001cc 	andi	r3,r20,7
  80629c:	1800bc26 	beq	r3,zero,806590 <_malloc_r+0x6c4>
  8062a0:	a0e9c83a 	sub	r20,r20,r3
  8062a4:	00840204 	movi	r2,4104
  8062a8:	a5000204 	addi	r20,r20,8
  8062ac:	10c7c83a 	sub	r3,r2,r3
  8062b0:	a545883a 	add	r2,r20,r21
  8062b4:	1083ffcc 	andi	r2,r2,4095
  8062b8:	18abc83a 	sub	r21,r3,r2
  8062bc:	a80b883a 	mov	r5,r21
  8062c0:	9009883a 	mov	r4,r18
  8062c4:	08079740 	call	807974 <_sbrk_r>
  8062c8:	00ffffc4 	movi	r3,-1
  8062cc:	10c0e126 	beq	r2,r3,806654 <_malloc_r+0x788>
  8062d0:	1505c83a 	sub	r2,r2,r20
  8062d4:	1545883a 	add	r2,r2,r21
  8062d8:	10800054 	ori	r2,r2,1
  8062dc:	e0c00017 	ldw	r3,0(fp)
  8062e0:	9d000215 	stw	r20,8(r19)
  8062e4:	a0800115 	stw	r2,4(r20)
  8062e8:	a8c7883a 	add	r3,r21,r3
  8062ec:	e0c00015 	stw	r3,0(fp)
  8062f0:	84c00e26 	beq	r16,r19,80632c <_malloc_r+0x460>
  8062f4:	018003c4 	movi	r6,15
  8062f8:	3580a72e 	bgeu	r6,r22,806598 <_malloc_r+0x6cc>
  8062fc:	81400117 	ldw	r5,4(r16)
  806300:	013ffe04 	movi	r4,-8
  806304:	b0bffd04 	addi	r2,r22,-12
  806308:	1104703a 	and	r2,r2,r4
  80630c:	2900004c 	andi	r4,r5,1
  806310:	2088b03a 	or	r4,r4,r2
  806314:	81000115 	stw	r4,4(r16)
  806318:	01400144 	movi	r5,5
  80631c:	8089883a 	add	r4,r16,r2
  806320:	21400115 	stw	r5,4(r4)
  806324:	21400215 	stw	r5,8(r4)
  806328:	3080cd36 	bltu	r6,r2,806660 <_malloc_r+0x794>
  80632c:	00802074 	movhi	r2,129
  806330:	1098ce04 	addi	r2,r2,25400
  806334:	11000017 	ldw	r4,0(r2)
  806338:	20c0012e 	bgeu	r4,r3,806340 <_malloc_r+0x474>
  80633c:	10c00015 	stw	r3,0(r2)
  806340:	00802074 	movhi	r2,129
  806344:	1098cd04 	addi	r2,r2,25396
  806348:	11000017 	ldw	r4,0(r2)
  80634c:	9c000217 	ldw	r16,8(r19)
  806350:	20c0012e 	bgeu	r4,r3,806358 <_malloc_r+0x48c>
  806354:	10c00015 	stw	r3,0(r2)
  806358:	80c00117 	ldw	r3,4(r16)
  80635c:	00bfff04 	movi	r2,-4
  806360:	1886703a 	and	r3,r3,r2
  806364:	1c45c83a 	sub	r2,r3,r17
  806368:	1c400236 	bltu	r3,r17,806374 <_malloc_r+0x4a8>
  80636c:	00c003c4 	movi	r3,15
  806370:	18800416 	blt	r3,r2,806384 <_malloc_r+0x4b8>
  806374:	9009883a 	mov	r4,r18
  806378:	080de8c0 	call	80de8c <__malloc_unlock>
  80637c:	0005883a 	mov	r2,zero
  806380:	003f7b06 	br	806170 <__alt_mem_descriptor_memory+0xff786170>
  806384:	88c00054 	ori	r3,r17,1
  806388:	80c00115 	stw	r3,4(r16)
  80638c:	8463883a 	add	r17,r16,r17
  806390:	10800054 	ori	r2,r2,1
  806394:	9c400215 	stw	r17,8(r19)
  806398:	88800115 	stw	r2,4(r17)
  80639c:	9009883a 	mov	r4,r18
  8063a0:	080de8c0 	call	80de8c <__malloc_unlock>
  8063a4:	80800204 	addi	r2,r16,8
  8063a8:	003f7106 	br	806170 <__alt_mem_descriptor_memory+0xff786170>
  8063ac:	00c00504 	movi	r3,20
  8063b0:	18804a2e 	bgeu	r3,r2,8064dc <_malloc_r+0x610>
  8063b4:	00c01504 	movi	r3,84
  8063b8:	18806e36 	bltu	r3,r2,806574 <_malloc_r+0x6a8>
  8063bc:	8804d33a 	srli	r2,r17,12
  8063c0:	12001bc4 	addi	r8,r2,111
  8063c4:	11c01b84 	addi	r7,r2,110
  8063c8:	4209883a 	add	r4,r8,r8
  8063cc:	003edd06 	br	805f44 <__alt_mem_descriptor_memory+0xff785f44>
  8063d0:	3804d27a 	srli	r2,r7,9
  8063d4:	00c00104 	movi	r3,4
  8063d8:	1880442e 	bgeu	r3,r2,8064ec <_malloc_r+0x620>
  8063dc:	00c00504 	movi	r3,20
  8063e0:	18808136 	bltu	r3,r2,8065e8 <_malloc_r+0x71c>
  8063e4:	11401704 	addi	r5,r2,92
  8063e8:	10c016c4 	addi	r3,r2,91
  8063ec:	294b883a 	add	r5,r5,r5
  8063f0:	294b883a 	add	r5,r5,r5
  8063f4:	294b883a 	add	r5,r5,r5
  8063f8:	994b883a 	add	r5,r19,r5
  8063fc:	28800017 	ldw	r2,0(r5)
  806400:	01802074 	movhi	r6,129
  806404:	297ffe04 	addi	r5,r5,-8
  806408:	31927204 	addi	r6,r6,18888
  80640c:	28806526 	beq	r5,r2,8065a4 <_malloc_r+0x6d8>
  806410:	01bfff04 	movi	r6,-4
  806414:	10c00117 	ldw	r3,4(r2)
  806418:	1986703a 	and	r3,r3,r6
  80641c:	38c0022e 	bgeu	r7,r3,806428 <_malloc_r+0x55c>
  806420:	10800217 	ldw	r2,8(r2)
  806424:	28bffb1e 	bne	r5,r2,806414 <__alt_mem_descriptor_memory+0xff786414>
  806428:	11400317 	ldw	r5,12(r2)
  80642c:	98c00117 	ldw	r3,4(r19)
  806430:	81400315 	stw	r5,12(r16)
  806434:	80800215 	stw	r2,8(r16)
  806438:	2c000215 	stw	r16,8(r5)
  80643c:	14000315 	stw	r16,12(r2)
  806440:	003ef806 	br	806024 <__alt_mem_descriptor_memory+0xff786024>
  806444:	88c00054 	ori	r3,r17,1
  806448:	80c00115 	stw	r3,4(r16)
  80644c:	8463883a 	add	r17,r16,r17
  806450:	34400515 	stw	r17,20(r6)
  806454:	34400415 	stw	r17,16(r6)
  806458:	10c00054 	ori	r3,r2,1
  80645c:	8a000315 	stw	r8,12(r17)
  806460:	8a000215 	stw	r8,8(r17)
  806464:	88c00115 	stw	r3,4(r17)
  806468:	88a3883a 	add	r17,r17,r2
  80646c:	88800015 	stw	r2,0(r17)
  806470:	9009883a 	mov	r4,r18
  806474:	080de8c0 	call	80de8c <__malloc_unlock>
  806478:	80800204 	addi	r2,r16,8
  80647c:	003f3c06 	br	806170 <__alt_mem_descriptor_memory+0xff786170>
  806480:	30c00117 	ldw	r3,4(r6)
  806484:	003ee706 	br	806024 <__alt_mem_descriptor_memory+0xff786024>
  806488:	5ac00044 	addi	r11,r11,1
  80648c:	588000cc 	andi	r2,r11,3
  806490:	31800204 	addi	r6,r6,8
  806494:	103efd1e 	bne	r2,zero,80608c <__alt_mem_descriptor_memory+0xff78608c>
  806498:	00002406 	br	80652c <_malloc_r+0x660>
  80649c:	14000317 	ldw	r16,12(r2)
  8064a0:	143f251e 	bne	r2,r16,806138 <__alt_mem_descriptor_memory+0xff786138>
  8064a4:	21000084 	addi	r4,r4,2
  8064a8:	003ebc06 	br	805f9c <__alt_mem_descriptor_memory+0xff785f9c>
  8064ac:	8085883a 	add	r2,r16,r2
  8064b0:	10c00117 	ldw	r3,4(r2)
  8064b4:	81000317 	ldw	r4,12(r16)
  8064b8:	81400217 	ldw	r5,8(r16)
  8064bc:	18c00054 	ori	r3,r3,1
  8064c0:	10c00115 	stw	r3,4(r2)
  8064c4:	29000315 	stw	r4,12(r5)
  8064c8:	21400215 	stw	r5,8(r4)
  8064cc:	9009883a 	mov	r4,r18
  8064d0:	080de8c0 	call	80de8c <__malloc_unlock>
  8064d4:	80800204 	addi	r2,r16,8
  8064d8:	003f2506 	br	806170 <__alt_mem_descriptor_memory+0xff786170>
  8064dc:	12001704 	addi	r8,r2,92
  8064e0:	11c016c4 	addi	r7,r2,91
  8064e4:	4209883a 	add	r4,r8,r8
  8064e8:	003e9606 	br	805f44 <__alt_mem_descriptor_memory+0xff785f44>
  8064ec:	3804d1ba 	srli	r2,r7,6
  8064f0:	11400e44 	addi	r5,r2,57
  8064f4:	10c00e04 	addi	r3,r2,56
  8064f8:	294b883a 	add	r5,r5,r5
  8064fc:	003fbc06 	br	8063f0 <__alt_mem_descriptor_memory+0xff7863f0>
  806500:	84ff5926 	beq	r16,r19,806268 <__alt_mem_descriptor_memory+0xff786268>
  806504:	00802074 	movhi	r2,129
  806508:	10927204 	addi	r2,r2,18888
  80650c:	14000217 	ldw	r16,8(r2)
  806510:	00bfff04 	movi	r2,-4
  806514:	80c00117 	ldw	r3,4(r16)
  806518:	1886703a 	and	r3,r3,r2
  80651c:	003f9106 	br	806364 <__alt_mem_descriptor_memory+0xff786364>
  806520:	60800217 	ldw	r2,8(r12)
  806524:	213fffc4 	addi	r4,r4,-1
  806528:	1300651e 	bne	r2,r12,8066c0 <_malloc_r+0x7f4>
  80652c:	208000cc 	andi	r2,r4,3
  806530:	633ffe04 	addi	r12,r12,-8
  806534:	103ffa1e 	bne	r2,zero,806520 <__alt_mem_descriptor_memory+0xff786520>
  806538:	98800117 	ldw	r2,4(r19)
  80653c:	0146303a 	nor	r3,zero,r5
  806540:	1884703a 	and	r2,r3,r2
  806544:	98800115 	stw	r2,4(r19)
  806548:	294b883a 	add	r5,r5,r5
  80654c:	117f2836 	bltu	r2,r5,8061f0 <__alt_mem_descriptor_memory+0xff7861f0>
  806550:	283f2726 	beq	r5,zero,8061f0 <__alt_mem_descriptor_memory+0xff7861f0>
  806554:	2886703a 	and	r3,r5,r2
  806558:	5809883a 	mov	r4,r11
  80655c:	183ec31e 	bne	r3,zero,80606c <__alt_mem_descriptor_memory+0xff78606c>
  806560:	294b883a 	add	r5,r5,r5
  806564:	2886703a 	and	r3,r5,r2
  806568:	21000104 	addi	r4,r4,4
  80656c:	183ffc26 	beq	r3,zero,806560 <__alt_mem_descriptor_memory+0xff786560>
  806570:	003ebe06 	br	80606c <__alt_mem_descriptor_memory+0xff78606c>
  806574:	00c05504 	movi	r3,340
  806578:	18801236 	bltu	r3,r2,8065c4 <_malloc_r+0x6f8>
  80657c:	8804d3fa 	srli	r2,r17,15
  806580:	12001e04 	addi	r8,r2,120
  806584:	11c01dc4 	addi	r7,r2,119
  806588:	4209883a 	add	r4,r8,r8
  80658c:	003e6d06 	br	805f44 <__alt_mem_descriptor_memory+0xff785f44>
  806590:	00c40004 	movi	r3,4096
  806594:	003f4606 	br	8062b0 <__alt_mem_descriptor_memory+0xff7862b0>
  806598:	00800044 	movi	r2,1
  80659c:	a0800115 	stw	r2,4(r20)
  8065a0:	003f7406 	br	806374 <__alt_mem_descriptor_memory+0xff786374>
  8065a4:	1805d0ba 	srai	r2,r3,2
  8065a8:	01c00044 	movi	r7,1
  8065ac:	30c00117 	ldw	r3,4(r6)
  8065b0:	388e983a 	sll	r7,r7,r2
  8065b4:	2805883a 	mov	r2,r5
  8065b8:	38c6b03a 	or	r3,r7,r3
  8065bc:	30c00115 	stw	r3,4(r6)
  8065c0:	003f9b06 	br	806430 <__alt_mem_descriptor_memory+0xff786430>
  8065c4:	00c15504 	movi	r3,1364
  8065c8:	18801a36 	bltu	r3,r2,806634 <_malloc_r+0x768>
  8065cc:	8804d4ba 	srli	r2,r17,18
  8065d0:	12001f44 	addi	r8,r2,125
  8065d4:	11c01f04 	addi	r7,r2,124
  8065d8:	4209883a 	add	r4,r8,r8
  8065dc:	003e5906 	br	805f44 <__alt_mem_descriptor_memory+0xff785f44>
  8065e0:	ad400404 	addi	r21,r21,16
  8065e4:	003f1706 	br	806244 <__alt_mem_descriptor_memory+0xff786244>
  8065e8:	00c01504 	movi	r3,84
  8065ec:	18802336 	bltu	r3,r2,80667c <_malloc_r+0x7b0>
  8065f0:	3804d33a 	srli	r2,r7,12
  8065f4:	11401bc4 	addi	r5,r2,111
  8065f8:	10c01b84 	addi	r3,r2,110
  8065fc:	294b883a 	add	r5,r5,r5
  806600:	003f7b06 	br	8063f0 <__alt_mem_descriptor_memory+0xff7863f0>
  806604:	9c000217 	ldw	r16,8(r19)
  806608:	00bfff04 	movi	r2,-4
  80660c:	80c00117 	ldw	r3,4(r16)
  806610:	1886703a 	and	r3,r3,r2
  806614:	003f5306 	br	806364 <__alt_mem_descriptor_memory+0xff786364>
  806618:	3083ffcc 	andi	r2,r6,4095
  80661c:	103f181e 	bne	r2,zero,806280 <__alt_mem_descriptor_memory+0xff786280>
  806620:	99000217 	ldw	r4,8(r19)
  806624:	b545883a 	add	r2,r22,r21
  806628:	10800054 	ori	r2,r2,1
  80662c:	20800115 	stw	r2,4(r4)
  806630:	003f3e06 	br	80632c <__alt_mem_descriptor_memory+0xff78632c>
  806634:	01003f84 	movi	r4,254
  806638:	02001fc4 	movi	r8,127
  80663c:	01c01f84 	movi	r7,126
  806640:	003e4006 	br	805f44 <__alt_mem_descriptor_memory+0xff785f44>
  806644:	00802074 	movhi	r2,129
  806648:	1098ae04 	addi	r2,r2,25272
  80664c:	15000015 	stw	r20,0(r2)
  806650:	003f1106 	br	806298 <__alt_mem_descriptor_memory+0xff786298>
  806654:	00800044 	movi	r2,1
  806658:	002b883a 	mov	r21,zero
  80665c:	003f1f06 	br	8062dc <__alt_mem_descriptor_memory+0xff7862dc>
  806660:	81400204 	addi	r5,r16,8
  806664:	9009883a 	mov	r4,r18
  806668:	080579c0 	call	80579c <_free_r>
  80666c:	00802074 	movhi	r2,129
  806670:	109dd904 	addi	r2,r2,30564
  806674:	10c00017 	ldw	r3,0(r2)
  806678:	003f2c06 	br	80632c <__alt_mem_descriptor_memory+0xff78632c>
  80667c:	00c05504 	movi	r3,340
  806680:	18800536 	bltu	r3,r2,806698 <_malloc_r+0x7cc>
  806684:	3804d3fa 	srli	r2,r7,15
  806688:	11401e04 	addi	r5,r2,120
  80668c:	10c01dc4 	addi	r3,r2,119
  806690:	294b883a 	add	r5,r5,r5
  806694:	003f5606 	br	8063f0 <__alt_mem_descriptor_memory+0xff7863f0>
  806698:	00c15504 	movi	r3,1364
  80669c:	18800536 	bltu	r3,r2,8066b4 <_malloc_r+0x7e8>
  8066a0:	3804d4ba 	srli	r2,r7,18
  8066a4:	11401f44 	addi	r5,r2,125
  8066a8:	10c01f04 	addi	r3,r2,124
  8066ac:	294b883a 	add	r5,r5,r5
  8066b0:	003f4f06 	br	8063f0 <__alt_mem_descriptor_memory+0xff7863f0>
  8066b4:	01403f84 	movi	r5,254
  8066b8:	00c01f84 	movi	r3,126
  8066bc:	003f4c06 	br	8063f0 <__alt_mem_descriptor_memory+0xff7863f0>
  8066c0:	98800117 	ldw	r2,4(r19)
  8066c4:	003fa006 	br	806548 <__alt_mem_descriptor_memory+0xff786548>
  8066c8:	8808d0fa 	srli	r4,r17,3
  8066cc:	20800044 	addi	r2,r4,1
  8066d0:	1085883a 	add	r2,r2,r2
  8066d4:	003e9006 	br	806118 <__alt_mem_descriptor_memory+0xff786118>

008066d8 <memchr>:
  8066d8:	208000cc 	andi	r2,r4,3
  8066dc:	280f883a 	mov	r7,r5
  8066e0:	10003426 	beq	r2,zero,8067b4 <memchr+0xdc>
  8066e4:	30bfffc4 	addi	r2,r6,-1
  8066e8:	30001a26 	beq	r6,zero,806754 <memchr+0x7c>
  8066ec:	20c00003 	ldbu	r3,0(r4)
  8066f0:	29803fcc 	andi	r6,r5,255
  8066f4:	30c0051e 	bne	r6,r3,80670c <memchr+0x34>
  8066f8:	00001806 	br	80675c <memchr+0x84>
  8066fc:	10001526 	beq	r2,zero,806754 <memchr+0x7c>
  806700:	20c00003 	ldbu	r3,0(r4)
  806704:	10bfffc4 	addi	r2,r2,-1
  806708:	30c01426 	beq	r6,r3,80675c <memchr+0x84>
  80670c:	21000044 	addi	r4,r4,1
  806710:	20c000cc 	andi	r3,r4,3
  806714:	183ff91e 	bne	r3,zero,8066fc <__alt_mem_descriptor_memory+0xff7866fc>
  806718:	020000c4 	movi	r8,3
  80671c:	40801136 	bltu	r8,r2,806764 <memchr+0x8c>
  806720:	10000c26 	beq	r2,zero,806754 <memchr+0x7c>
  806724:	20c00003 	ldbu	r3,0(r4)
  806728:	29403fcc 	andi	r5,r5,255
  80672c:	28c00b26 	beq	r5,r3,80675c <memchr+0x84>
  806730:	20c00044 	addi	r3,r4,1
  806734:	39803fcc 	andi	r6,r7,255
  806738:	2089883a 	add	r4,r4,r2
  80673c:	00000306 	br	80674c <memchr+0x74>
  806740:	18c00044 	addi	r3,r3,1
  806744:	197fffc3 	ldbu	r5,-1(r3)
  806748:	31400526 	beq	r6,r5,806760 <memchr+0x88>
  80674c:	1805883a 	mov	r2,r3
  806750:	20fffb1e 	bne	r4,r3,806740 <__alt_mem_descriptor_memory+0xff786740>
  806754:	0005883a 	mov	r2,zero
  806758:	f800283a 	ret
  80675c:	2005883a 	mov	r2,r4
  806760:	f800283a 	ret
  806764:	28c03fcc 	andi	r3,r5,255
  806768:	1812923a 	slli	r9,r3,8
  80676c:	02ffbff4 	movhi	r11,65279
  806770:	02a02074 	movhi	r10,32897
  806774:	48d2b03a 	or	r9,r9,r3
  806778:	4806943a 	slli	r3,r9,16
  80677c:	5affbfc4 	addi	r11,r11,-257
  806780:	52a02004 	addi	r10,r10,-32640
  806784:	48d2b03a 	or	r9,r9,r3
  806788:	20c00017 	ldw	r3,0(r4)
  80678c:	48c6f03a 	xor	r3,r9,r3
  806790:	1acd883a 	add	r6,r3,r11
  806794:	00c6303a 	nor	r3,zero,r3
  806798:	30c6703a 	and	r3,r6,r3
  80679c:	1a86703a 	and	r3,r3,r10
  8067a0:	183fe01e 	bne	r3,zero,806724 <__alt_mem_descriptor_memory+0xff786724>
  8067a4:	10bfff04 	addi	r2,r2,-4
  8067a8:	21000104 	addi	r4,r4,4
  8067ac:	40bff636 	bltu	r8,r2,806788 <__alt_mem_descriptor_memory+0xff786788>
  8067b0:	003fdb06 	br	806720 <__alt_mem_descriptor_memory+0xff786720>
  8067b4:	3005883a 	mov	r2,r6
  8067b8:	003fd706 	br	806718 <__alt_mem_descriptor_memory+0xff786718>

008067bc <memcpy>:
  8067bc:	defffd04 	addi	sp,sp,-12
  8067c0:	dfc00215 	stw	ra,8(sp)
  8067c4:	dc400115 	stw	r17,4(sp)
  8067c8:	dc000015 	stw	r16,0(sp)
  8067cc:	00c003c4 	movi	r3,15
  8067d0:	2005883a 	mov	r2,r4
  8067d4:	1980452e 	bgeu	r3,r6,8068ec <memcpy+0x130>
  8067d8:	2906b03a 	or	r3,r5,r4
  8067dc:	18c000cc 	andi	r3,r3,3
  8067e0:	1800441e 	bne	r3,zero,8068f4 <memcpy+0x138>
  8067e4:	347ffc04 	addi	r17,r6,-16
  8067e8:	8822d13a 	srli	r17,r17,4
  8067ec:	28c00104 	addi	r3,r5,4
  8067f0:	23400104 	addi	r13,r4,4
  8067f4:	8820913a 	slli	r16,r17,4
  8067f8:	2b000204 	addi	r12,r5,8
  8067fc:	22c00204 	addi	r11,r4,8
  806800:	84000504 	addi	r16,r16,20
  806804:	2a800304 	addi	r10,r5,12
  806808:	22400304 	addi	r9,r4,12
  80680c:	2c21883a 	add	r16,r5,r16
  806810:	2811883a 	mov	r8,r5
  806814:	200f883a 	mov	r7,r4
  806818:	41000017 	ldw	r4,0(r8)
  80681c:	1fc00017 	ldw	ra,0(r3)
  806820:	63c00017 	ldw	r15,0(r12)
  806824:	39000015 	stw	r4,0(r7)
  806828:	53800017 	ldw	r14,0(r10)
  80682c:	6fc00015 	stw	ra,0(r13)
  806830:	5bc00015 	stw	r15,0(r11)
  806834:	4b800015 	stw	r14,0(r9)
  806838:	18c00404 	addi	r3,r3,16
  80683c:	39c00404 	addi	r7,r7,16
  806840:	42000404 	addi	r8,r8,16
  806844:	6b400404 	addi	r13,r13,16
  806848:	63000404 	addi	r12,r12,16
  80684c:	5ac00404 	addi	r11,r11,16
  806850:	52800404 	addi	r10,r10,16
  806854:	4a400404 	addi	r9,r9,16
  806858:	1c3fef1e 	bne	r3,r16,806818 <__alt_mem_descriptor_memory+0xff786818>
  80685c:	89c00044 	addi	r7,r17,1
  806860:	380e913a 	slli	r7,r7,4
  806864:	310003cc 	andi	r4,r6,15
  806868:	02c000c4 	movi	r11,3
  80686c:	11c7883a 	add	r3,r2,r7
  806870:	29cb883a 	add	r5,r5,r7
  806874:	5900212e 	bgeu	r11,r4,8068fc <memcpy+0x140>
  806878:	1813883a 	mov	r9,r3
  80687c:	2811883a 	mov	r8,r5
  806880:	200f883a 	mov	r7,r4
  806884:	42800017 	ldw	r10,0(r8)
  806888:	4a400104 	addi	r9,r9,4
  80688c:	39ffff04 	addi	r7,r7,-4
  806890:	4abfff15 	stw	r10,-4(r9)
  806894:	42000104 	addi	r8,r8,4
  806898:	59fffa36 	bltu	r11,r7,806884 <__alt_mem_descriptor_memory+0xff786884>
  80689c:	213fff04 	addi	r4,r4,-4
  8068a0:	2008d0ba 	srli	r4,r4,2
  8068a4:	318000cc 	andi	r6,r6,3
  8068a8:	21000044 	addi	r4,r4,1
  8068ac:	2109883a 	add	r4,r4,r4
  8068b0:	2109883a 	add	r4,r4,r4
  8068b4:	1907883a 	add	r3,r3,r4
  8068b8:	290b883a 	add	r5,r5,r4
  8068bc:	30000626 	beq	r6,zero,8068d8 <memcpy+0x11c>
  8068c0:	198d883a 	add	r6,r3,r6
  8068c4:	29c00003 	ldbu	r7,0(r5)
  8068c8:	18c00044 	addi	r3,r3,1
  8068cc:	29400044 	addi	r5,r5,1
  8068d0:	19ffffc5 	stb	r7,-1(r3)
  8068d4:	19bffb1e 	bne	r3,r6,8068c4 <__alt_mem_descriptor_memory+0xff7868c4>
  8068d8:	dfc00217 	ldw	ra,8(sp)
  8068dc:	dc400117 	ldw	r17,4(sp)
  8068e0:	dc000017 	ldw	r16,0(sp)
  8068e4:	dec00304 	addi	sp,sp,12
  8068e8:	f800283a 	ret
  8068ec:	2007883a 	mov	r3,r4
  8068f0:	003ff206 	br	8068bc <__alt_mem_descriptor_memory+0xff7868bc>
  8068f4:	2007883a 	mov	r3,r4
  8068f8:	003ff106 	br	8068c0 <__alt_mem_descriptor_memory+0xff7868c0>
  8068fc:	200d883a 	mov	r6,r4
  806900:	003fee06 	br	8068bc <__alt_mem_descriptor_memory+0xff7868bc>

00806904 <_Balloc>:
  806904:	20801317 	ldw	r2,76(r4)
  806908:	defffc04 	addi	sp,sp,-16
  80690c:	dc400115 	stw	r17,4(sp)
  806910:	dc000015 	stw	r16,0(sp)
  806914:	dfc00315 	stw	ra,12(sp)
  806918:	dc800215 	stw	r18,8(sp)
  80691c:	2023883a 	mov	r17,r4
  806920:	2821883a 	mov	r16,r5
  806924:	10000f26 	beq	r2,zero,806964 <_Balloc+0x60>
  806928:	8407883a 	add	r3,r16,r16
  80692c:	18c7883a 	add	r3,r3,r3
  806930:	10c7883a 	add	r3,r2,r3
  806934:	18800017 	ldw	r2,0(r3)
  806938:	10001126 	beq	r2,zero,806980 <_Balloc+0x7c>
  80693c:	11000017 	ldw	r4,0(r2)
  806940:	19000015 	stw	r4,0(r3)
  806944:	10000415 	stw	zero,16(r2)
  806948:	10000315 	stw	zero,12(r2)
  80694c:	dfc00317 	ldw	ra,12(sp)
  806950:	dc800217 	ldw	r18,8(sp)
  806954:	dc400117 	ldw	r17,4(sp)
  806958:	dc000017 	ldw	r16,0(sp)
  80695c:	dec00404 	addi	sp,sp,16
  806960:	f800283a 	ret
  806964:	01800844 	movi	r6,33
  806968:	01400104 	movi	r5,4
  80696c:	08093740 	call	809374 <_calloc_r>
  806970:	88801315 	stw	r2,76(r17)
  806974:	103fec1e 	bne	r2,zero,806928 <__alt_mem_descriptor_memory+0xff786928>
  806978:	0005883a 	mov	r2,zero
  80697c:	003ff306 	br	80694c <__alt_mem_descriptor_memory+0xff78694c>
  806980:	01400044 	movi	r5,1
  806984:	2c24983a 	sll	r18,r5,r16
  806988:	8809883a 	mov	r4,r17
  80698c:	91800144 	addi	r6,r18,5
  806990:	318d883a 	add	r6,r6,r6
  806994:	318d883a 	add	r6,r6,r6
  806998:	08093740 	call	809374 <_calloc_r>
  80699c:	103ff626 	beq	r2,zero,806978 <__alt_mem_descriptor_memory+0xff786978>
  8069a0:	14000115 	stw	r16,4(r2)
  8069a4:	14800215 	stw	r18,8(r2)
  8069a8:	003fe606 	br	806944 <__alt_mem_descriptor_memory+0xff786944>

008069ac <_Bfree>:
  8069ac:	28000826 	beq	r5,zero,8069d0 <_Bfree+0x24>
  8069b0:	28c00117 	ldw	r3,4(r5)
  8069b4:	20801317 	ldw	r2,76(r4)
  8069b8:	18c7883a 	add	r3,r3,r3
  8069bc:	18c7883a 	add	r3,r3,r3
  8069c0:	10c5883a 	add	r2,r2,r3
  8069c4:	10c00017 	ldw	r3,0(r2)
  8069c8:	28c00015 	stw	r3,0(r5)
  8069cc:	11400015 	stw	r5,0(r2)
  8069d0:	f800283a 	ret

008069d4 <__multadd>:
  8069d4:	defffa04 	addi	sp,sp,-24
  8069d8:	dc800315 	stw	r18,12(sp)
  8069dc:	dc400215 	stw	r17,8(sp)
  8069e0:	dc000115 	stw	r16,4(sp)
  8069e4:	2823883a 	mov	r17,r5
  8069e8:	2c000417 	ldw	r16,16(r5)
  8069ec:	dfc00515 	stw	ra,20(sp)
  8069f0:	dcc00415 	stw	r19,16(sp)
  8069f4:	2025883a 	mov	r18,r4
  8069f8:	29400504 	addi	r5,r5,20
  8069fc:	0011883a 	mov	r8,zero
  806a00:	28c00017 	ldw	r3,0(r5)
  806a04:	29400104 	addi	r5,r5,4
  806a08:	42000044 	addi	r8,r8,1
  806a0c:	18bfffcc 	andi	r2,r3,65535
  806a10:	1185383a 	mul	r2,r2,r6
  806a14:	1806d43a 	srli	r3,r3,16
  806a18:	11cf883a 	add	r7,r2,r7
  806a1c:	3808d43a 	srli	r4,r7,16
  806a20:	1987383a 	mul	r3,r3,r6
  806a24:	38bfffcc 	andi	r2,r7,65535
  806a28:	1907883a 	add	r3,r3,r4
  806a2c:	1808943a 	slli	r4,r3,16
  806a30:	180ed43a 	srli	r7,r3,16
  806a34:	2085883a 	add	r2,r4,r2
  806a38:	28bfff15 	stw	r2,-4(r5)
  806a3c:	443ff016 	blt	r8,r16,806a00 <__alt_mem_descriptor_memory+0xff786a00>
  806a40:	38000926 	beq	r7,zero,806a68 <__multadd+0x94>
  806a44:	88800217 	ldw	r2,8(r17)
  806a48:	80800f0e 	bge	r16,r2,806a88 <__multadd+0xb4>
  806a4c:	80800144 	addi	r2,r16,5
  806a50:	1085883a 	add	r2,r2,r2
  806a54:	1085883a 	add	r2,r2,r2
  806a58:	8885883a 	add	r2,r17,r2
  806a5c:	11c00015 	stw	r7,0(r2)
  806a60:	84000044 	addi	r16,r16,1
  806a64:	8c000415 	stw	r16,16(r17)
  806a68:	8805883a 	mov	r2,r17
  806a6c:	dfc00517 	ldw	ra,20(sp)
  806a70:	dcc00417 	ldw	r19,16(sp)
  806a74:	dc800317 	ldw	r18,12(sp)
  806a78:	dc400217 	ldw	r17,8(sp)
  806a7c:	dc000117 	ldw	r16,4(sp)
  806a80:	dec00604 	addi	sp,sp,24
  806a84:	f800283a 	ret
  806a88:	89400117 	ldw	r5,4(r17)
  806a8c:	9009883a 	mov	r4,r18
  806a90:	d9c00015 	stw	r7,0(sp)
  806a94:	29400044 	addi	r5,r5,1
  806a98:	08069040 	call	806904 <_Balloc>
  806a9c:	89800417 	ldw	r6,16(r17)
  806aa0:	89400304 	addi	r5,r17,12
  806aa4:	11000304 	addi	r4,r2,12
  806aa8:	31800084 	addi	r6,r6,2
  806aac:	318d883a 	add	r6,r6,r6
  806ab0:	318d883a 	add	r6,r6,r6
  806ab4:	1027883a 	mov	r19,r2
  806ab8:	08067bc0 	call	8067bc <memcpy>
  806abc:	d9c00017 	ldw	r7,0(sp)
  806ac0:	88000a26 	beq	r17,zero,806aec <__multadd+0x118>
  806ac4:	88c00117 	ldw	r3,4(r17)
  806ac8:	90801317 	ldw	r2,76(r18)
  806acc:	18c7883a 	add	r3,r3,r3
  806ad0:	18c7883a 	add	r3,r3,r3
  806ad4:	10c5883a 	add	r2,r2,r3
  806ad8:	10c00017 	ldw	r3,0(r2)
  806adc:	88c00015 	stw	r3,0(r17)
  806ae0:	14400015 	stw	r17,0(r2)
  806ae4:	9823883a 	mov	r17,r19
  806ae8:	003fd806 	br	806a4c <__alt_mem_descriptor_memory+0xff786a4c>
  806aec:	9823883a 	mov	r17,r19
  806af0:	003fd606 	br	806a4c <__alt_mem_descriptor_memory+0xff786a4c>

00806af4 <__s2b>:
  806af4:	defff904 	addi	sp,sp,-28
  806af8:	dc400115 	stw	r17,4(sp)
  806afc:	dc000015 	stw	r16,0(sp)
  806b00:	2023883a 	mov	r17,r4
  806b04:	2821883a 	mov	r16,r5
  806b08:	39000204 	addi	r4,r7,8
  806b0c:	01400244 	movi	r5,9
  806b10:	dcc00315 	stw	r19,12(sp)
  806b14:	dc800215 	stw	r18,8(sp)
  806b18:	dfc00615 	stw	ra,24(sp)
  806b1c:	dd400515 	stw	r21,20(sp)
  806b20:	dd000415 	stw	r20,16(sp)
  806b24:	3825883a 	mov	r18,r7
  806b28:	3027883a 	mov	r19,r6
  806b2c:	080b2200 	call	80b220 <__divsi3>
  806b30:	00c00044 	movi	r3,1
  806b34:	000b883a 	mov	r5,zero
  806b38:	1880030e 	bge	r3,r2,806b48 <__s2b+0x54>
  806b3c:	18c7883a 	add	r3,r3,r3
  806b40:	29400044 	addi	r5,r5,1
  806b44:	18bffd16 	blt	r3,r2,806b3c <__alt_mem_descriptor_memory+0xff786b3c>
  806b48:	8809883a 	mov	r4,r17
  806b4c:	08069040 	call	806904 <_Balloc>
  806b50:	d8c00717 	ldw	r3,28(sp)
  806b54:	10c00515 	stw	r3,20(r2)
  806b58:	00c00044 	movi	r3,1
  806b5c:	10c00415 	stw	r3,16(r2)
  806b60:	00c00244 	movi	r3,9
  806b64:	1cc0210e 	bge	r3,r19,806bec <__s2b+0xf8>
  806b68:	80eb883a 	add	r21,r16,r3
  806b6c:	a829883a 	mov	r20,r21
  806b70:	84e1883a 	add	r16,r16,r19
  806b74:	a1c00007 	ldb	r7,0(r20)
  806b78:	01800284 	movi	r6,10
  806b7c:	a5000044 	addi	r20,r20,1
  806b80:	100b883a 	mov	r5,r2
  806b84:	39fff404 	addi	r7,r7,-48
  806b88:	8809883a 	mov	r4,r17
  806b8c:	08069d40 	call	8069d4 <__multadd>
  806b90:	a43ff81e 	bne	r20,r16,806b74 <__alt_mem_descriptor_memory+0xff786b74>
  806b94:	ace1883a 	add	r16,r21,r19
  806b98:	843ffe04 	addi	r16,r16,-8
  806b9c:	9c800a0e 	bge	r19,r18,806bc8 <__s2b+0xd4>
  806ba0:	94e5c83a 	sub	r18,r18,r19
  806ba4:	84a5883a 	add	r18,r16,r18
  806ba8:	81c00007 	ldb	r7,0(r16)
  806bac:	01800284 	movi	r6,10
  806bb0:	84000044 	addi	r16,r16,1
  806bb4:	100b883a 	mov	r5,r2
  806bb8:	39fff404 	addi	r7,r7,-48
  806bbc:	8809883a 	mov	r4,r17
  806bc0:	08069d40 	call	8069d4 <__multadd>
  806bc4:	84bff81e 	bne	r16,r18,806ba8 <__alt_mem_descriptor_memory+0xff786ba8>
  806bc8:	dfc00617 	ldw	ra,24(sp)
  806bcc:	dd400517 	ldw	r21,20(sp)
  806bd0:	dd000417 	ldw	r20,16(sp)
  806bd4:	dcc00317 	ldw	r19,12(sp)
  806bd8:	dc800217 	ldw	r18,8(sp)
  806bdc:	dc400117 	ldw	r17,4(sp)
  806be0:	dc000017 	ldw	r16,0(sp)
  806be4:	dec00704 	addi	sp,sp,28
  806be8:	f800283a 	ret
  806bec:	84000284 	addi	r16,r16,10
  806bf0:	1827883a 	mov	r19,r3
  806bf4:	003fe906 	br	806b9c <__alt_mem_descriptor_memory+0xff786b9c>

00806bf8 <__hi0bits>:
  806bf8:	20bfffec 	andhi	r2,r4,65535
  806bfc:	1000141e 	bne	r2,zero,806c50 <__hi0bits+0x58>
  806c00:	2008943a 	slli	r4,r4,16
  806c04:	00800404 	movi	r2,16
  806c08:	20ffc02c 	andhi	r3,r4,65280
  806c0c:	1800021e 	bne	r3,zero,806c18 <__hi0bits+0x20>
  806c10:	2008923a 	slli	r4,r4,8
  806c14:	10800204 	addi	r2,r2,8
  806c18:	20fc002c 	andhi	r3,r4,61440
  806c1c:	1800021e 	bne	r3,zero,806c28 <__hi0bits+0x30>
  806c20:	2008913a 	slli	r4,r4,4
  806c24:	10800104 	addi	r2,r2,4
  806c28:	20f0002c 	andhi	r3,r4,49152
  806c2c:	1800031e 	bne	r3,zero,806c3c <__hi0bits+0x44>
  806c30:	2109883a 	add	r4,r4,r4
  806c34:	10800084 	addi	r2,r2,2
  806c38:	2109883a 	add	r4,r4,r4
  806c3c:	20000316 	blt	r4,zero,806c4c <__hi0bits+0x54>
  806c40:	2110002c 	andhi	r4,r4,16384
  806c44:	2000041e 	bne	r4,zero,806c58 <__hi0bits+0x60>
  806c48:	00800804 	movi	r2,32
  806c4c:	f800283a 	ret
  806c50:	0005883a 	mov	r2,zero
  806c54:	003fec06 	br	806c08 <__alt_mem_descriptor_memory+0xff786c08>
  806c58:	10800044 	addi	r2,r2,1
  806c5c:	f800283a 	ret

00806c60 <__lo0bits>:
  806c60:	20c00017 	ldw	r3,0(r4)
  806c64:	188001cc 	andi	r2,r3,7
  806c68:	10000826 	beq	r2,zero,806c8c <__lo0bits+0x2c>
  806c6c:	1880004c 	andi	r2,r3,1
  806c70:	1000211e 	bne	r2,zero,806cf8 <__lo0bits+0x98>
  806c74:	1880008c 	andi	r2,r3,2
  806c78:	1000211e 	bne	r2,zero,806d00 <__lo0bits+0xa0>
  806c7c:	1806d0ba 	srli	r3,r3,2
  806c80:	00800084 	movi	r2,2
  806c84:	20c00015 	stw	r3,0(r4)
  806c88:	f800283a 	ret
  806c8c:	18bfffcc 	andi	r2,r3,65535
  806c90:	10001326 	beq	r2,zero,806ce0 <__lo0bits+0x80>
  806c94:	0005883a 	mov	r2,zero
  806c98:	19403fcc 	andi	r5,r3,255
  806c9c:	2800021e 	bne	r5,zero,806ca8 <__lo0bits+0x48>
  806ca0:	1806d23a 	srli	r3,r3,8
  806ca4:	10800204 	addi	r2,r2,8
  806ca8:	194003cc 	andi	r5,r3,15
  806cac:	2800021e 	bne	r5,zero,806cb8 <__lo0bits+0x58>
  806cb0:	1806d13a 	srli	r3,r3,4
  806cb4:	10800104 	addi	r2,r2,4
  806cb8:	194000cc 	andi	r5,r3,3
  806cbc:	2800021e 	bne	r5,zero,806cc8 <__lo0bits+0x68>
  806cc0:	1806d0ba 	srli	r3,r3,2
  806cc4:	10800084 	addi	r2,r2,2
  806cc8:	1940004c 	andi	r5,r3,1
  806ccc:	2800081e 	bne	r5,zero,806cf0 <__lo0bits+0x90>
  806cd0:	1806d07a 	srli	r3,r3,1
  806cd4:	1800051e 	bne	r3,zero,806cec <__lo0bits+0x8c>
  806cd8:	00800804 	movi	r2,32
  806cdc:	f800283a 	ret
  806ce0:	1806d43a 	srli	r3,r3,16
  806ce4:	00800404 	movi	r2,16
  806ce8:	003feb06 	br	806c98 <__alt_mem_descriptor_memory+0xff786c98>
  806cec:	10800044 	addi	r2,r2,1
  806cf0:	20c00015 	stw	r3,0(r4)
  806cf4:	f800283a 	ret
  806cf8:	0005883a 	mov	r2,zero
  806cfc:	f800283a 	ret
  806d00:	1806d07a 	srli	r3,r3,1
  806d04:	00800044 	movi	r2,1
  806d08:	20c00015 	stw	r3,0(r4)
  806d0c:	f800283a 	ret

00806d10 <__i2b>:
  806d10:	defffd04 	addi	sp,sp,-12
  806d14:	dc000015 	stw	r16,0(sp)
  806d18:	04000044 	movi	r16,1
  806d1c:	dc400115 	stw	r17,4(sp)
  806d20:	2823883a 	mov	r17,r5
  806d24:	800b883a 	mov	r5,r16
  806d28:	dfc00215 	stw	ra,8(sp)
  806d2c:	08069040 	call	806904 <_Balloc>
  806d30:	14400515 	stw	r17,20(r2)
  806d34:	14000415 	stw	r16,16(r2)
  806d38:	dfc00217 	ldw	ra,8(sp)
  806d3c:	dc400117 	ldw	r17,4(sp)
  806d40:	dc000017 	ldw	r16,0(sp)
  806d44:	dec00304 	addi	sp,sp,12
  806d48:	f800283a 	ret

00806d4c <__multiply>:
  806d4c:	defffa04 	addi	sp,sp,-24
  806d50:	dcc00315 	stw	r19,12(sp)
  806d54:	dc800215 	stw	r18,8(sp)
  806d58:	34c00417 	ldw	r19,16(r6)
  806d5c:	2c800417 	ldw	r18,16(r5)
  806d60:	dd000415 	stw	r20,16(sp)
  806d64:	dc400115 	stw	r17,4(sp)
  806d68:	dfc00515 	stw	ra,20(sp)
  806d6c:	dc000015 	stw	r16,0(sp)
  806d70:	2829883a 	mov	r20,r5
  806d74:	3023883a 	mov	r17,r6
  806d78:	94c0050e 	bge	r18,r19,806d90 <__multiply+0x44>
  806d7c:	9007883a 	mov	r3,r18
  806d80:	3029883a 	mov	r20,r6
  806d84:	9825883a 	mov	r18,r19
  806d88:	2823883a 	mov	r17,r5
  806d8c:	1827883a 	mov	r19,r3
  806d90:	a0800217 	ldw	r2,8(r20)
  806d94:	94e1883a 	add	r16,r18,r19
  806d98:	a1400117 	ldw	r5,4(r20)
  806d9c:	1400010e 	bge	r2,r16,806da4 <__multiply+0x58>
  806da0:	29400044 	addi	r5,r5,1
  806da4:	08069040 	call	806904 <_Balloc>
  806da8:	8415883a 	add	r10,r16,r16
  806dac:	12c00504 	addi	r11,r2,20
  806db0:	5295883a 	add	r10,r10,r10
  806db4:	5a95883a 	add	r10,r11,r10
  806db8:	5807883a 	mov	r3,r11
  806dbc:	5a80032e 	bgeu	r11,r10,806dcc <__multiply+0x80>
  806dc0:	18000015 	stw	zero,0(r3)
  806dc4:	18c00104 	addi	r3,r3,4
  806dc8:	1abffd36 	bltu	r3,r10,806dc0 <__alt_mem_descriptor_memory+0xff786dc0>
  806dcc:	9ce7883a 	add	r19,r19,r19
  806dd0:	94a5883a 	add	r18,r18,r18
  806dd4:	89800504 	addi	r6,r17,20
  806dd8:	9ce7883a 	add	r19,r19,r19
  806ddc:	a3400504 	addi	r13,r20,20
  806de0:	94a5883a 	add	r18,r18,r18
  806de4:	34d9883a 	add	r12,r6,r19
  806de8:	6c93883a 	add	r9,r13,r18
  806dec:	3300422e 	bgeu	r6,r12,806ef8 <__multiply+0x1ac>
  806df0:	37c00017 	ldw	ra,0(r6)
  806df4:	fbffffcc 	andi	r15,ra,65535
  806df8:	78001b26 	beq	r15,zero,806e68 <__multiply+0x11c>
  806dfc:	5811883a 	mov	r8,r11
  806e00:	681d883a 	mov	r14,r13
  806e04:	000f883a 	mov	r7,zero
  806e08:	71000017 	ldw	r4,0(r14)
  806e0c:	40c00017 	ldw	r3,0(r8)
  806e10:	73800104 	addi	r14,r14,4
  806e14:	217fffcc 	andi	r5,r4,65535
  806e18:	2bcb383a 	mul	r5,r5,r15
  806e1c:	2008d43a 	srli	r4,r4,16
  806e20:	1c7fffcc 	andi	r17,r3,65535
  806e24:	2c4b883a 	add	r5,r5,r17
  806e28:	29cb883a 	add	r5,r5,r7
  806e2c:	23c9383a 	mul	r4,r4,r15
  806e30:	1806d43a 	srli	r3,r3,16
  806e34:	280ed43a 	srli	r7,r5,16
  806e38:	297fffcc 	andi	r5,r5,65535
  806e3c:	20c7883a 	add	r3,r4,r3
  806e40:	19c7883a 	add	r3,r3,r7
  806e44:	1808943a 	slli	r4,r3,16
  806e48:	4023883a 	mov	r17,r8
  806e4c:	180ed43a 	srli	r7,r3,16
  806e50:	214ab03a 	or	r5,r4,r5
  806e54:	41400015 	stw	r5,0(r8)
  806e58:	42000104 	addi	r8,r8,4
  806e5c:	727fea36 	bltu	r14,r9,806e08 <__alt_mem_descriptor_memory+0xff786e08>
  806e60:	89c00115 	stw	r7,4(r17)
  806e64:	37c00017 	ldw	ra,0(r6)
  806e68:	f83ed43a 	srli	ra,ra,16
  806e6c:	f8001f26 	beq	ra,zero,806eec <__multiply+0x1a0>
  806e70:	58c00017 	ldw	r3,0(r11)
  806e74:	681d883a 	mov	r14,r13
  806e78:	581f883a 	mov	r15,r11
  806e7c:	1811883a 	mov	r8,r3
  806e80:	5825883a 	mov	r18,r11
  806e84:	000f883a 	mov	r7,zero
  806e88:	00000106 	br	806e90 <__multiply+0x144>
  806e8c:	8825883a 	mov	r18,r17
  806e90:	7140000b 	ldhu	r5,0(r14)
  806e94:	4010d43a 	srli	r8,r8,16
  806e98:	193fffcc 	andi	r4,r3,65535
  806e9c:	2fcb383a 	mul	r5,r5,ra
  806ea0:	7bc00104 	addi	r15,r15,4
  806ea4:	73800104 	addi	r14,r14,4
  806ea8:	2a0b883a 	add	r5,r5,r8
  806eac:	29cb883a 	add	r5,r5,r7
  806eb0:	2806943a 	slli	r3,r5,16
  806eb4:	94400104 	addi	r17,r18,4
  806eb8:	280ad43a 	srli	r5,r5,16
  806ebc:	1908b03a 	or	r4,r3,r4
  806ec0:	793fff15 	stw	r4,-4(r15)
  806ec4:	70ffff17 	ldw	r3,-4(r14)
  806ec8:	8a000017 	ldw	r8,0(r17)
  806ecc:	1806d43a 	srli	r3,r3,16
  806ed0:	413fffcc 	andi	r4,r8,65535
  806ed4:	1fc7383a 	mul	r3,r3,ra
  806ed8:	1907883a 	add	r3,r3,r4
  806edc:	1947883a 	add	r3,r3,r5
  806ee0:	180ed43a 	srli	r7,r3,16
  806ee4:	727fe936 	bltu	r14,r9,806e8c <__alt_mem_descriptor_memory+0xff786e8c>
  806ee8:	90c00115 	stw	r3,4(r18)
  806eec:	31800104 	addi	r6,r6,4
  806ef0:	5ac00104 	addi	r11,r11,4
  806ef4:	333fbe36 	bltu	r6,r12,806df0 <__alt_mem_descriptor_memory+0xff786df0>
  806ef8:	0400090e 	bge	zero,r16,806f20 <__multiply+0x1d4>
  806efc:	50ffff17 	ldw	r3,-4(r10)
  806f00:	52bfff04 	addi	r10,r10,-4
  806f04:	18000326 	beq	r3,zero,806f14 <__multiply+0x1c8>
  806f08:	00000506 	br	806f20 <__multiply+0x1d4>
  806f0c:	50c00017 	ldw	r3,0(r10)
  806f10:	1800031e 	bne	r3,zero,806f20 <__multiply+0x1d4>
  806f14:	843fffc4 	addi	r16,r16,-1
  806f18:	52bfff04 	addi	r10,r10,-4
  806f1c:	803ffb1e 	bne	r16,zero,806f0c <__alt_mem_descriptor_memory+0xff786f0c>
  806f20:	14000415 	stw	r16,16(r2)
  806f24:	dfc00517 	ldw	ra,20(sp)
  806f28:	dd000417 	ldw	r20,16(sp)
  806f2c:	dcc00317 	ldw	r19,12(sp)
  806f30:	dc800217 	ldw	r18,8(sp)
  806f34:	dc400117 	ldw	r17,4(sp)
  806f38:	dc000017 	ldw	r16,0(sp)
  806f3c:	dec00604 	addi	sp,sp,24
  806f40:	f800283a 	ret

00806f44 <__pow5mult>:
  806f44:	defffa04 	addi	sp,sp,-24
  806f48:	dcc00315 	stw	r19,12(sp)
  806f4c:	dc000015 	stw	r16,0(sp)
  806f50:	dfc00515 	stw	ra,20(sp)
  806f54:	dd000415 	stw	r20,16(sp)
  806f58:	dc800215 	stw	r18,8(sp)
  806f5c:	dc400115 	stw	r17,4(sp)
  806f60:	308000cc 	andi	r2,r6,3
  806f64:	3021883a 	mov	r16,r6
  806f68:	2027883a 	mov	r19,r4
  806f6c:	10002f1e 	bne	r2,zero,80702c <__pow5mult+0xe8>
  806f70:	2825883a 	mov	r18,r5
  806f74:	8021d0ba 	srai	r16,r16,2
  806f78:	80001a26 	beq	r16,zero,806fe4 <__pow5mult+0xa0>
  806f7c:	9c401217 	ldw	r17,72(r19)
  806f80:	8800061e 	bne	r17,zero,806f9c <__pow5mult+0x58>
  806f84:	00003406 	br	807058 <__pow5mult+0x114>
  806f88:	8021d07a 	srai	r16,r16,1
  806f8c:	80001526 	beq	r16,zero,806fe4 <__pow5mult+0xa0>
  806f90:	88800017 	ldw	r2,0(r17)
  806f94:	10001c26 	beq	r2,zero,807008 <__pow5mult+0xc4>
  806f98:	1023883a 	mov	r17,r2
  806f9c:	8080004c 	andi	r2,r16,1
  806fa0:	103ff926 	beq	r2,zero,806f88 <__alt_mem_descriptor_memory+0xff786f88>
  806fa4:	880d883a 	mov	r6,r17
  806fa8:	900b883a 	mov	r5,r18
  806fac:	9809883a 	mov	r4,r19
  806fb0:	0806d4c0 	call	806d4c <__multiply>
  806fb4:	90001b26 	beq	r18,zero,807024 <__pow5mult+0xe0>
  806fb8:	91000117 	ldw	r4,4(r18)
  806fbc:	98c01317 	ldw	r3,76(r19)
  806fc0:	8021d07a 	srai	r16,r16,1
  806fc4:	2109883a 	add	r4,r4,r4
  806fc8:	2109883a 	add	r4,r4,r4
  806fcc:	1907883a 	add	r3,r3,r4
  806fd0:	19000017 	ldw	r4,0(r3)
  806fd4:	91000015 	stw	r4,0(r18)
  806fd8:	1c800015 	stw	r18,0(r3)
  806fdc:	1025883a 	mov	r18,r2
  806fe0:	803feb1e 	bne	r16,zero,806f90 <__alt_mem_descriptor_memory+0xff786f90>
  806fe4:	9005883a 	mov	r2,r18
  806fe8:	dfc00517 	ldw	ra,20(sp)
  806fec:	dd000417 	ldw	r20,16(sp)
  806ff0:	dcc00317 	ldw	r19,12(sp)
  806ff4:	dc800217 	ldw	r18,8(sp)
  806ff8:	dc400117 	ldw	r17,4(sp)
  806ffc:	dc000017 	ldw	r16,0(sp)
  807000:	dec00604 	addi	sp,sp,24
  807004:	f800283a 	ret
  807008:	880d883a 	mov	r6,r17
  80700c:	880b883a 	mov	r5,r17
  807010:	9809883a 	mov	r4,r19
  807014:	0806d4c0 	call	806d4c <__multiply>
  807018:	88800015 	stw	r2,0(r17)
  80701c:	10000015 	stw	zero,0(r2)
  807020:	003fdd06 	br	806f98 <__alt_mem_descriptor_memory+0xff786f98>
  807024:	1025883a 	mov	r18,r2
  807028:	003fd706 	br	806f88 <__alt_mem_descriptor_memory+0xff786f88>
  80702c:	10bfffc4 	addi	r2,r2,-1
  807030:	1085883a 	add	r2,r2,r2
  807034:	00c02074 	movhi	r3,129
  807038:	18d00004 	addi	r3,r3,16384
  80703c:	1085883a 	add	r2,r2,r2
  807040:	1885883a 	add	r2,r3,r2
  807044:	11800017 	ldw	r6,0(r2)
  807048:	000f883a 	mov	r7,zero
  80704c:	08069d40 	call	8069d4 <__multadd>
  807050:	1025883a 	mov	r18,r2
  807054:	003fc706 	br	806f74 <__alt_mem_descriptor_memory+0xff786f74>
  807058:	05000044 	movi	r20,1
  80705c:	a00b883a 	mov	r5,r20
  807060:	9809883a 	mov	r4,r19
  807064:	08069040 	call	806904 <_Balloc>
  807068:	1023883a 	mov	r17,r2
  80706c:	00809c44 	movi	r2,625
  807070:	88800515 	stw	r2,20(r17)
  807074:	8d000415 	stw	r20,16(r17)
  807078:	9c401215 	stw	r17,72(r19)
  80707c:	88000015 	stw	zero,0(r17)
  807080:	003fc606 	br	806f9c <__alt_mem_descriptor_memory+0xff786f9c>

00807084 <__lshift>:
  807084:	defff904 	addi	sp,sp,-28
  807088:	dd400515 	stw	r21,20(sp)
  80708c:	dcc00315 	stw	r19,12(sp)
  807090:	302bd17a 	srai	r21,r6,5
  807094:	2cc00417 	ldw	r19,16(r5)
  807098:	28800217 	ldw	r2,8(r5)
  80709c:	dd000415 	stw	r20,16(sp)
  8070a0:	ace7883a 	add	r19,r21,r19
  8070a4:	dc800215 	stw	r18,8(sp)
  8070a8:	dc400115 	stw	r17,4(sp)
  8070ac:	dc000015 	stw	r16,0(sp)
  8070b0:	dfc00615 	stw	ra,24(sp)
  8070b4:	9c000044 	addi	r16,r19,1
  8070b8:	2823883a 	mov	r17,r5
  8070bc:	3029883a 	mov	r20,r6
  8070c0:	2025883a 	mov	r18,r4
  8070c4:	29400117 	ldw	r5,4(r5)
  8070c8:	1400030e 	bge	r2,r16,8070d8 <__lshift+0x54>
  8070cc:	1085883a 	add	r2,r2,r2
  8070d0:	29400044 	addi	r5,r5,1
  8070d4:	143ffd16 	blt	r2,r16,8070cc <__alt_mem_descriptor_memory+0xff7870cc>
  8070d8:	9009883a 	mov	r4,r18
  8070dc:	08069040 	call	806904 <_Balloc>
  8070e0:	10c00504 	addi	r3,r2,20
  8070e4:	0540070e 	bge	zero,r21,807104 <__lshift+0x80>
  8070e8:	ad6b883a 	add	r21,r21,r21
  8070ec:	ad6b883a 	add	r21,r21,r21
  8070f0:	1809883a 	mov	r4,r3
  8070f4:	1d47883a 	add	r3,r3,r21
  8070f8:	20000015 	stw	zero,0(r4)
  8070fc:	21000104 	addi	r4,r4,4
  807100:	193ffd1e 	bne	r3,r4,8070f8 <__alt_mem_descriptor_memory+0xff7870f8>
  807104:	8a000417 	ldw	r8,16(r17)
  807108:	89000504 	addi	r4,r17,20
  80710c:	a18007cc 	andi	r6,r20,31
  807110:	4211883a 	add	r8,r8,r8
  807114:	4211883a 	add	r8,r8,r8
  807118:	2211883a 	add	r8,r4,r8
  80711c:	30002326 	beq	r6,zero,8071ac <__lshift+0x128>
  807120:	02400804 	movi	r9,32
  807124:	4993c83a 	sub	r9,r9,r6
  807128:	000b883a 	mov	r5,zero
  80712c:	21c00017 	ldw	r7,0(r4)
  807130:	1815883a 	mov	r10,r3
  807134:	18c00104 	addi	r3,r3,4
  807138:	398e983a 	sll	r7,r7,r6
  80713c:	21000104 	addi	r4,r4,4
  807140:	394ab03a 	or	r5,r7,r5
  807144:	197fff15 	stw	r5,-4(r3)
  807148:	217fff17 	ldw	r5,-4(r4)
  80714c:	2a4ad83a 	srl	r5,r5,r9
  807150:	223ff636 	bltu	r4,r8,80712c <__alt_mem_descriptor_memory+0xff78712c>
  807154:	51400115 	stw	r5,4(r10)
  807158:	28001a1e 	bne	r5,zero,8071c4 <__lshift+0x140>
  80715c:	843fffc4 	addi	r16,r16,-1
  807160:	14000415 	stw	r16,16(r2)
  807164:	88000826 	beq	r17,zero,807188 <__lshift+0x104>
  807168:	89000117 	ldw	r4,4(r17)
  80716c:	90c01317 	ldw	r3,76(r18)
  807170:	2109883a 	add	r4,r4,r4
  807174:	2109883a 	add	r4,r4,r4
  807178:	1907883a 	add	r3,r3,r4
  80717c:	19000017 	ldw	r4,0(r3)
  807180:	89000015 	stw	r4,0(r17)
  807184:	1c400015 	stw	r17,0(r3)
  807188:	dfc00617 	ldw	ra,24(sp)
  80718c:	dd400517 	ldw	r21,20(sp)
  807190:	dd000417 	ldw	r20,16(sp)
  807194:	dcc00317 	ldw	r19,12(sp)
  807198:	dc800217 	ldw	r18,8(sp)
  80719c:	dc400117 	ldw	r17,4(sp)
  8071a0:	dc000017 	ldw	r16,0(sp)
  8071a4:	dec00704 	addi	sp,sp,28
  8071a8:	f800283a 	ret
  8071ac:	21400017 	ldw	r5,0(r4)
  8071b0:	18c00104 	addi	r3,r3,4
  8071b4:	21000104 	addi	r4,r4,4
  8071b8:	197fff15 	stw	r5,-4(r3)
  8071bc:	223ffb36 	bltu	r4,r8,8071ac <__alt_mem_descriptor_memory+0xff7871ac>
  8071c0:	003fe606 	br	80715c <__alt_mem_descriptor_memory+0xff78715c>
  8071c4:	9c000084 	addi	r16,r19,2
  8071c8:	003fe406 	br	80715c <__alt_mem_descriptor_memory+0xff78715c>

008071cc <__mcmp>:
  8071cc:	20800417 	ldw	r2,16(r4)
  8071d0:	28c00417 	ldw	r3,16(r5)
  8071d4:	10c5c83a 	sub	r2,r2,r3
  8071d8:	1000111e 	bne	r2,zero,807220 <__mcmp+0x54>
  8071dc:	18c7883a 	add	r3,r3,r3
  8071e0:	18c7883a 	add	r3,r3,r3
  8071e4:	21000504 	addi	r4,r4,20
  8071e8:	29400504 	addi	r5,r5,20
  8071ec:	20c5883a 	add	r2,r4,r3
  8071f0:	28cb883a 	add	r5,r5,r3
  8071f4:	00000106 	br	8071fc <__mcmp+0x30>
  8071f8:	20800a2e 	bgeu	r4,r2,807224 <__mcmp+0x58>
  8071fc:	10bfff04 	addi	r2,r2,-4
  807200:	297fff04 	addi	r5,r5,-4
  807204:	11800017 	ldw	r6,0(r2)
  807208:	28c00017 	ldw	r3,0(r5)
  80720c:	30fffa26 	beq	r6,r3,8071f8 <__alt_mem_descriptor_memory+0xff7871f8>
  807210:	30c00236 	bltu	r6,r3,80721c <__mcmp+0x50>
  807214:	00800044 	movi	r2,1
  807218:	f800283a 	ret
  80721c:	00bfffc4 	movi	r2,-1
  807220:	f800283a 	ret
  807224:	0005883a 	mov	r2,zero
  807228:	f800283a 	ret

0080722c <__mdiff>:
  80722c:	28c00417 	ldw	r3,16(r5)
  807230:	30800417 	ldw	r2,16(r6)
  807234:	defffa04 	addi	sp,sp,-24
  807238:	dcc00315 	stw	r19,12(sp)
  80723c:	dc800215 	stw	r18,8(sp)
  807240:	dfc00515 	stw	ra,20(sp)
  807244:	dd000415 	stw	r20,16(sp)
  807248:	dc400115 	stw	r17,4(sp)
  80724c:	dc000015 	stw	r16,0(sp)
  807250:	1887c83a 	sub	r3,r3,r2
  807254:	2825883a 	mov	r18,r5
  807258:	3027883a 	mov	r19,r6
  80725c:	1800141e 	bne	r3,zero,8072b0 <__mdiff+0x84>
  807260:	1085883a 	add	r2,r2,r2
  807264:	1085883a 	add	r2,r2,r2
  807268:	2a000504 	addi	r8,r5,20
  80726c:	34000504 	addi	r16,r6,20
  807270:	4087883a 	add	r3,r8,r2
  807274:	8085883a 	add	r2,r16,r2
  807278:	00000106 	br	807280 <__mdiff+0x54>
  80727c:	40c0592e 	bgeu	r8,r3,8073e4 <__mdiff+0x1b8>
  807280:	18ffff04 	addi	r3,r3,-4
  807284:	10bfff04 	addi	r2,r2,-4
  807288:	19c00017 	ldw	r7,0(r3)
  80728c:	11400017 	ldw	r5,0(r2)
  807290:	397ffa26 	beq	r7,r5,80727c <__alt_mem_descriptor_memory+0xff78727c>
  807294:	3940592e 	bgeu	r7,r5,8073fc <__mdiff+0x1d0>
  807298:	9005883a 	mov	r2,r18
  80729c:	4023883a 	mov	r17,r8
  8072a0:	9825883a 	mov	r18,r19
  8072a4:	05000044 	movi	r20,1
  8072a8:	1027883a 	mov	r19,r2
  8072ac:	00000406 	br	8072c0 <__mdiff+0x94>
  8072b0:	18005616 	blt	r3,zero,80740c <__mdiff+0x1e0>
  8072b4:	34400504 	addi	r17,r6,20
  8072b8:	2c000504 	addi	r16,r5,20
  8072bc:	0029883a 	mov	r20,zero
  8072c0:	91400117 	ldw	r5,4(r18)
  8072c4:	08069040 	call	806904 <_Balloc>
  8072c8:	92400417 	ldw	r9,16(r18)
  8072cc:	9b000417 	ldw	r12,16(r19)
  8072d0:	12c00504 	addi	r11,r2,20
  8072d4:	4a51883a 	add	r8,r9,r9
  8072d8:	6319883a 	add	r12,r12,r12
  8072dc:	4211883a 	add	r8,r8,r8
  8072e0:	6319883a 	add	r12,r12,r12
  8072e4:	15000315 	stw	r20,12(r2)
  8072e8:	8211883a 	add	r8,r16,r8
  8072ec:	8b19883a 	add	r12,r17,r12
  8072f0:	0007883a 	mov	r3,zero
  8072f4:	81400017 	ldw	r5,0(r16)
  8072f8:	89c00017 	ldw	r7,0(r17)
  8072fc:	59800104 	addi	r6,r11,4
  807300:	293fffcc 	andi	r4,r5,65535
  807304:	20c7883a 	add	r3,r4,r3
  807308:	393fffcc 	andi	r4,r7,65535
  80730c:	1909c83a 	sub	r4,r3,r4
  807310:	280ad43a 	srli	r5,r5,16
  807314:	380ed43a 	srli	r7,r7,16
  807318:	2007d43a 	srai	r3,r4,16
  80731c:	213fffcc 	andi	r4,r4,65535
  807320:	29cbc83a 	sub	r5,r5,r7
  807324:	28c7883a 	add	r3,r5,r3
  807328:	180a943a 	slli	r5,r3,16
  80732c:	8c400104 	addi	r17,r17,4
  807330:	84000104 	addi	r16,r16,4
  807334:	2908b03a 	or	r4,r5,r4
  807338:	59000015 	stw	r4,0(r11)
  80733c:	1807d43a 	srai	r3,r3,16
  807340:	3015883a 	mov	r10,r6
  807344:	3017883a 	mov	r11,r6
  807348:	8b3fea36 	bltu	r17,r12,8072f4 <__alt_mem_descriptor_memory+0xff7872f4>
  80734c:	8200162e 	bgeu	r16,r8,8073a8 <__mdiff+0x17c>
  807350:	8017883a 	mov	r11,r16
  807354:	59400017 	ldw	r5,0(r11)
  807358:	31800104 	addi	r6,r6,4
  80735c:	5ac00104 	addi	r11,r11,4
  807360:	293fffcc 	andi	r4,r5,65535
  807364:	20c7883a 	add	r3,r4,r3
  807368:	280ed43a 	srli	r7,r5,16
  80736c:	180bd43a 	srai	r5,r3,16
  807370:	193fffcc 	andi	r4,r3,65535
  807374:	3947883a 	add	r3,r7,r5
  807378:	180a943a 	slli	r5,r3,16
  80737c:	1807d43a 	srai	r3,r3,16
  807380:	2908b03a 	or	r4,r5,r4
  807384:	313fff15 	stw	r4,-4(r6)
  807388:	5a3ff236 	bltu	r11,r8,807354 <__alt_mem_descriptor_memory+0xff787354>
  80738c:	0406303a 	nor	r3,zero,r16
  807390:	1a07883a 	add	r3,r3,r8
  807394:	1806d0ba 	srli	r3,r3,2
  807398:	18c00044 	addi	r3,r3,1
  80739c:	18c7883a 	add	r3,r3,r3
  8073a0:	18c7883a 	add	r3,r3,r3
  8073a4:	50d5883a 	add	r10,r10,r3
  8073a8:	50ffff04 	addi	r3,r10,-4
  8073ac:	2000041e 	bne	r4,zero,8073c0 <__mdiff+0x194>
  8073b0:	18ffff04 	addi	r3,r3,-4
  8073b4:	19000017 	ldw	r4,0(r3)
  8073b8:	4a7fffc4 	addi	r9,r9,-1
  8073bc:	203ffc26 	beq	r4,zero,8073b0 <__alt_mem_descriptor_memory+0xff7873b0>
  8073c0:	12400415 	stw	r9,16(r2)
  8073c4:	dfc00517 	ldw	ra,20(sp)
  8073c8:	dd000417 	ldw	r20,16(sp)
  8073cc:	dcc00317 	ldw	r19,12(sp)
  8073d0:	dc800217 	ldw	r18,8(sp)
  8073d4:	dc400117 	ldw	r17,4(sp)
  8073d8:	dc000017 	ldw	r16,0(sp)
  8073dc:	dec00604 	addi	sp,sp,24
  8073e0:	f800283a 	ret
  8073e4:	000b883a 	mov	r5,zero
  8073e8:	08069040 	call	806904 <_Balloc>
  8073ec:	00c00044 	movi	r3,1
  8073f0:	10c00415 	stw	r3,16(r2)
  8073f4:	10000515 	stw	zero,20(r2)
  8073f8:	003ff206 	br	8073c4 <__alt_mem_descriptor_memory+0xff7873c4>
  8073fc:	8023883a 	mov	r17,r16
  807400:	0029883a 	mov	r20,zero
  807404:	4021883a 	mov	r16,r8
  807408:	003fad06 	br	8072c0 <__alt_mem_descriptor_memory+0xff7872c0>
  80740c:	9005883a 	mov	r2,r18
  807410:	94400504 	addi	r17,r18,20
  807414:	9c000504 	addi	r16,r19,20
  807418:	9825883a 	mov	r18,r19
  80741c:	05000044 	movi	r20,1
  807420:	1027883a 	mov	r19,r2
  807424:	003fa606 	br	8072c0 <__alt_mem_descriptor_memory+0xff7872c0>

00807428 <__ulp>:
  807428:	295ffc2c 	andhi	r5,r5,32752
  80742c:	00bf3034 	movhi	r2,64704
  807430:	2887883a 	add	r3,r5,r2
  807434:	00c0020e 	bge	zero,r3,807440 <__ulp+0x18>
  807438:	0005883a 	mov	r2,zero
  80743c:	f800283a 	ret
  807440:	00c7c83a 	sub	r3,zero,r3
  807444:	1807d53a 	srai	r3,r3,20
  807448:	008004c4 	movi	r2,19
  80744c:	10c00b0e 	bge	r2,r3,80747c <__ulp+0x54>
  807450:	18bffb04 	addi	r2,r3,-20
  807454:	01000784 	movi	r4,30
  807458:	0007883a 	mov	r3,zero
  80745c:	20800516 	blt	r4,r2,807474 <__ulp+0x4c>
  807460:	010007c4 	movi	r4,31
  807464:	2089c83a 	sub	r4,r4,r2
  807468:	00800044 	movi	r2,1
  80746c:	1104983a 	sll	r2,r2,r4
  807470:	f800283a 	ret
  807474:	00800044 	movi	r2,1
  807478:	f800283a 	ret
  80747c:	01400234 	movhi	r5,8
  807480:	28c7d83a 	sra	r3,r5,r3
  807484:	0005883a 	mov	r2,zero
  807488:	f800283a 	ret

0080748c <__b2d>:
  80748c:	defffa04 	addi	sp,sp,-24
  807490:	dc000015 	stw	r16,0(sp)
  807494:	24000417 	ldw	r16,16(r4)
  807498:	dc400115 	stw	r17,4(sp)
  80749c:	24400504 	addi	r17,r4,20
  8074a0:	8421883a 	add	r16,r16,r16
  8074a4:	8421883a 	add	r16,r16,r16
  8074a8:	8c21883a 	add	r16,r17,r16
  8074ac:	dc800215 	stw	r18,8(sp)
  8074b0:	84bfff17 	ldw	r18,-4(r16)
  8074b4:	dd000415 	stw	r20,16(sp)
  8074b8:	dcc00315 	stw	r19,12(sp)
  8074bc:	9009883a 	mov	r4,r18
  8074c0:	2829883a 	mov	r20,r5
  8074c4:	dfc00515 	stw	ra,20(sp)
  8074c8:	0806bf80 	call	806bf8 <__hi0bits>
  8074cc:	00c00804 	movi	r3,32
  8074d0:	1889c83a 	sub	r4,r3,r2
  8074d4:	a1000015 	stw	r4,0(r20)
  8074d8:	01000284 	movi	r4,10
  8074dc:	84ffff04 	addi	r19,r16,-4
  8074e0:	20801216 	blt	r4,r2,80752c <__b2d+0xa0>
  8074e4:	018002c4 	movi	r6,11
  8074e8:	308dc83a 	sub	r6,r6,r2
  8074ec:	9186d83a 	srl	r3,r18,r6
  8074f0:	18cffc34 	orhi	r3,r3,16368
  8074f4:	8cc0212e 	bgeu	r17,r19,80757c <__b2d+0xf0>
  8074f8:	813ffe17 	ldw	r4,-8(r16)
  8074fc:	218cd83a 	srl	r6,r4,r6
  807500:	10800544 	addi	r2,r2,21
  807504:	9084983a 	sll	r2,r18,r2
  807508:	1184b03a 	or	r2,r2,r6
  80750c:	dfc00517 	ldw	ra,20(sp)
  807510:	dd000417 	ldw	r20,16(sp)
  807514:	dcc00317 	ldw	r19,12(sp)
  807518:	dc800217 	ldw	r18,8(sp)
  80751c:	dc400117 	ldw	r17,4(sp)
  807520:	dc000017 	ldw	r16,0(sp)
  807524:	dec00604 	addi	sp,sp,24
  807528:	f800283a 	ret
  80752c:	8cc00f2e 	bgeu	r17,r19,80756c <__b2d+0xe0>
  807530:	117ffd44 	addi	r5,r2,-11
  807534:	80bffe17 	ldw	r2,-8(r16)
  807538:	28000e26 	beq	r5,zero,807574 <__b2d+0xe8>
  80753c:	1949c83a 	sub	r4,r3,r5
  807540:	9164983a 	sll	r18,r18,r5
  807544:	1106d83a 	srl	r3,r2,r4
  807548:	81bffe04 	addi	r6,r16,-8
  80754c:	948ffc34 	orhi	r18,r18,16368
  807550:	90c6b03a 	or	r3,r18,r3
  807554:	89800e2e 	bgeu	r17,r6,807590 <__b2d+0x104>
  807558:	81bffd17 	ldw	r6,-12(r16)
  80755c:	1144983a 	sll	r2,r2,r5
  807560:	310ad83a 	srl	r5,r6,r4
  807564:	2884b03a 	or	r2,r5,r2
  807568:	003fe806 	br	80750c <__alt_mem_descriptor_memory+0xff78750c>
  80756c:	10bffd44 	addi	r2,r2,-11
  807570:	1000041e 	bne	r2,zero,807584 <__b2d+0xf8>
  807574:	90cffc34 	orhi	r3,r18,16368
  807578:	003fe406 	br	80750c <__alt_mem_descriptor_memory+0xff78750c>
  80757c:	000d883a 	mov	r6,zero
  807580:	003fdf06 	br	807500 <__alt_mem_descriptor_memory+0xff787500>
  807584:	90a4983a 	sll	r18,r18,r2
  807588:	0005883a 	mov	r2,zero
  80758c:	003ff906 	br	807574 <__alt_mem_descriptor_memory+0xff787574>
  807590:	1144983a 	sll	r2,r2,r5
  807594:	003fdd06 	br	80750c <__alt_mem_descriptor_memory+0xff78750c>

00807598 <__d2b>:
  807598:	defff804 	addi	sp,sp,-32
  80759c:	dc000215 	stw	r16,8(sp)
  8075a0:	3021883a 	mov	r16,r6
  8075a4:	dc400315 	stw	r17,12(sp)
  8075a8:	8022907a 	slli	r17,r16,1
  8075ac:	dd000615 	stw	r20,24(sp)
  8075b0:	2829883a 	mov	r20,r5
  8075b4:	01400044 	movi	r5,1
  8075b8:	dcc00515 	stw	r19,20(sp)
  8075bc:	dc800415 	stw	r18,16(sp)
  8075c0:	dfc00715 	stw	ra,28(sp)
  8075c4:	3825883a 	mov	r18,r7
  8075c8:	8822d57a 	srli	r17,r17,21
  8075cc:	08069040 	call	806904 <_Balloc>
  8075d0:	1027883a 	mov	r19,r2
  8075d4:	00800434 	movhi	r2,16
  8075d8:	10bfffc4 	addi	r2,r2,-1
  8075dc:	808c703a 	and	r6,r16,r2
  8075e0:	88000126 	beq	r17,zero,8075e8 <__d2b+0x50>
  8075e4:	31800434 	orhi	r6,r6,16
  8075e8:	d9800015 	stw	r6,0(sp)
  8075ec:	a0002426 	beq	r20,zero,807680 <__d2b+0xe8>
  8075f0:	d9000104 	addi	r4,sp,4
  8075f4:	dd000115 	stw	r20,4(sp)
  8075f8:	0806c600 	call	806c60 <__lo0bits>
  8075fc:	d8c00017 	ldw	r3,0(sp)
  807600:	10002f1e 	bne	r2,zero,8076c0 <__d2b+0x128>
  807604:	d9000117 	ldw	r4,4(sp)
  807608:	99000515 	stw	r4,20(r19)
  80760c:	1821003a 	cmpeq	r16,r3,zero
  807610:	01000084 	movi	r4,2
  807614:	2421c83a 	sub	r16,r4,r16
  807618:	98c00615 	stw	r3,24(r19)
  80761c:	9c000415 	stw	r16,16(r19)
  807620:	88001f1e 	bne	r17,zero,8076a0 <__d2b+0x108>
  807624:	10bef384 	addi	r2,r2,-1074
  807628:	90800015 	stw	r2,0(r18)
  80762c:	00900034 	movhi	r2,16384
  807630:	10bfffc4 	addi	r2,r2,-1
  807634:	8085883a 	add	r2,r16,r2
  807638:	1085883a 	add	r2,r2,r2
  80763c:	1085883a 	add	r2,r2,r2
  807640:	9885883a 	add	r2,r19,r2
  807644:	11000517 	ldw	r4,20(r2)
  807648:	8020917a 	slli	r16,r16,5
  80764c:	0806bf80 	call	806bf8 <__hi0bits>
  807650:	d8c00817 	ldw	r3,32(sp)
  807654:	8085c83a 	sub	r2,r16,r2
  807658:	18800015 	stw	r2,0(r3)
  80765c:	9805883a 	mov	r2,r19
  807660:	dfc00717 	ldw	ra,28(sp)
  807664:	dd000617 	ldw	r20,24(sp)
  807668:	dcc00517 	ldw	r19,20(sp)
  80766c:	dc800417 	ldw	r18,16(sp)
  807670:	dc400317 	ldw	r17,12(sp)
  807674:	dc000217 	ldw	r16,8(sp)
  807678:	dec00804 	addi	sp,sp,32
  80767c:	f800283a 	ret
  807680:	d809883a 	mov	r4,sp
  807684:	0806c600 	call	806c60 <__lo0bits>
  807688:	d8c00017 	ldw	r3,0(sp)
  80768c:	04000044 	movi	r16,1
  807690:	9c000415 	stw	r16,16(r19)
  807694:	98c00515 	stw	r3,20(r19)
  807698:	10800804 	addi	r2,r2,32
  80769c:	883fe126 	beq	r17,zero,807624 <__alt_mem_descriptor_memory+0xff787624>
  8076a0:	00c00d44 	movi	r3,53
  8076a4:	8c7ef344 	addi	r17,r17,-1075
  8076a8:	88a3883a 	add	r17,r17,r2
  8076ac:	1885c83a 	sub	r2,r3,r2
  8076b0:	d8c00817 	ldw	r3,32(sp)
  8076b4:	94400015 	stw	r17,0(r18)
  8076b8:	18800015 	stw	r2,0(r3)
  8076bc:	003fe706 	br	80765c <__alt_mem_descriptor_memory+0xff78765c>
  8076c0:	01000804 	movi	r4,32
  8076c4:	2089c83a 	sub	r4,r4,r2
  8076c8:	1908983a 	sll	r4,r3,r4
  8076cc:	d9400117 	ldw	r5,4(sp)
  8076d0:	1886d83a 	srl	r3,r3,r2
  8076d4:	2148b03a 	or	r4,r4,r5
  8076d8:	99000515 	stw	r4,20(r19)
  8076dc:	d8c00015 	stw	r3,0(sp)
  8076e0:	003fca06 	br	80760c <__alt_mem_descriptor_memory+0xff78760c>

008076e4 <__ratio>:
  8076e4:	defff904 	addi	sp,sp,-28
  8076e8:	dc400315 	stw	r17,12(sp)
  8076ec:	2823883a 	mov	r17,r5
  8076f0:	d9400104 	addi	r5,sp,4
  8076f4:	dfc00615 	stw	ra,24(sp)
  8076f8:	dcc00515 	stw	r19,20(sp)
  8076fc:	dc800415 	stw	r18,16(sp)
  807700:	2027883a 	mov	r19,r4
  807704:	dc000215 	stw	r16,8(sp)
  807708:	080748c0 	call	80748c <__b2d>
  80770c:	d80b883a 	mov	r5,sp
  807710:	8809883a 	mov	r4,r17
  807714:	1025883a 	mov	r18,r2
  807718:	1821883a 	mov	r16,r3
  80771c:	080748c0 	call	80748c <__b2d>
  807720:	8a000417 	ldw	r8,16(r17)
  807724:	99000417 	ldw	r4,16(r19)
  807728:	d9400117 	ldw	r5,4(sp)
  80772c:	2209c83a 	sub	r4,r4,r8
  807730:	2010917a 	slli	r8,r4,5
  807734:	d9000017 	ldw	r4,0(sp)
  807738:	2909c83a 	sub	r4,r5,r4
  80773c:	4109883a 	add	r4,r8,r4
  807740:	01000e0e 	bge	zero,r4,80777c <__ratio+0x98>
  807744:	2008953a 	slli	r4,r4,20
  807748:	2421883a 	add	r16,r4,r16
  80774c:	100d883a 	mov	r6,r2
  807750:	180f883a 	mov	r7,r3
  807754:	9009883a 	mov	r4,r18
  807758:	800b883a 	mov	r5,r16
  80775c:	080bc800 	call	80bc80 <__divdf3>
  807760:	dfc00617 	ldw	ra,24(sp)
  807764:	dcc00517 	ldw	r19,20(sp)
  807768:	dc800417 	ldw	r18,16(sp)
  80776c:	dc400317 	ldw	r17,12(sp)
  807770:	dc000217 	ldw	r16,8(sp)
  807774:	dec00704 	addi	sp,sp,28
  807778:	f800283a 	ret
  80777c:	2008953a 	slli	r4,r4,20
  807780:	1907c83a 	sub	r3,r3,r4
  807784:	003ff106 	br	80774c <__alt_mem_descriptor_memory+0xff78774c>

00807788 <_mprec_log10>:
  807788:	defffe04 	addi	sp,sp,-8
  80778c:	dc000015 	stw	r16,0(sp)
  807790:	dfc00115 	stw	ra,4(sp)
  807794:	008005c4 	movi	r2,23
  807798:	2021883a 	mov	r16,r4
  80779c:	11000d0e 	bge	r2,r4,8077d4 <_mprec_log10+0x4c>
  8077a0:	0005883a 	mov	r2,zero
  8077a4:	00cffc34 	movhi	r3,16368
  8077a8:	843fffc4 	addi	r16,r16,-1
  8077ac:	000d883a 	mov	r6,zero
  8077b0:	01d00934 	movhi	r7,16420
  8077b4:	1009883a 	mov	r4,r2
  8077b8:	180b883a 	mov	r5,r3
  8077bc:	080c7c00 	call	80c7c0 <__muldf3>
  8077c0:	803ff91e 	bne	r16,zero,8077a8 <__alt_mem_descriptor_memory+0xff7877a8>
  8077c4:	dfc00117 	ldw	ra,4(sp)
  8077c8:	dc000017 	ldw	r16,0(sp)
  8077cc:	dec00204 	addi	sp,sp,8
  8077d0:	f800283a 	ret
  8077d4:	202090fa 	slli	r16,r4,3
  8077d8:	00802074 	movhi	r2,129
  8077dc:	10901704 	addi	r2,r2,16476
  8077e0:	1421883a 	add	r16,r2,r16
  8077e4:	80800017 	ldw	r2,0(r16)
  8077e8:	80c00117 	ldw	r3,4(r16)
  8077ec:	dfc00117 	ldw	ra,4(sp)
  8077f0:	dc000017 	ldw	r16,0(sp)
  8077f4:	dec00204 	addi	sp,sp,8
  8077f8:	f800283a 	ret

008077fc <__copybits>:
  8077fc:	297fffc4 	addi	r5,r5,-1
  807800:	280fd17a 	srai	r7,r5,5
  807804:	30c00417 	ldw	r3,16(r6)
  807808:	30800504 	addi	r2,r6,20
  80780c:	39c00044 	addi	r7,r7,1
  807810:	18c7883a 	add	r3,r3,r3
  807814:	39cf883a 	add	r7,r7,r7
  807818:	18c7883a 	add	r3,r3,r3
  80781c:	39cf883a 	add	r7,r7,r7
  807820:	10c7883a 	add	r3,r2,r3
  807824:	21cf883a 	add	r7,r4,r7
  807828:	10c00d2e 	bgeu	r2,r3,807860 <__copybits+0x64>
  80782c:	200b883a 	mov	r5,r4
  807830:	12000017 	ldw	r8,0(r2)
  807834:	29400104 	addi	r5,r5,4
  807838:	10800104 	addi	r2,r2,4
  80783c:	2a3fff15 	stw	r8,-4(r5)
  807840:	10fffb36 	bltu	r2,r3,807830 <__alt_mem_descriptor_memory+0xff787830>
  807844:	1985c83a 	sub	r2,r3,r6
  807848:	10bffac4 	addi	r2,r2,-21
  80784c:	1004d0ba 	srli	r2,r2,2
  807850:	10800044 	addi	r2,r2,1
  807854:	1085883a 	add	r2,r2,r2
  807858:	1085883a 	add	r2,r2,r2
  80785c:	2089883a 	add	r4,r4,r2
  807860:	21c0032e 	bgeu	r4,r7,807870 <__copybits+0x74>
  807864:	20000015 	stw	zero,0(r4)
  807868:	21000104 	addi	r4,r4,4
  80786c:	21fffd36 	bltu	r4,r7,807864 <__alt_mem_descriptor_memory+0xff787864>
  807870:	f800283a 	ret

00807874 <__any_on>:
  807874:	20c00417 	ldw	r3,16(r4)
  807878:	2805d17a 	srai	r2,r5,5
  80787c:	21000504 	addi	r4,r4,20
  807880:	18800d0e 	bge	r3,r2,8078b8 <__any_on+0x44>
  807884:	18c7883a 	add	r3,r3,r3
  807888:	18c7883a 	add	r3,r3,r3
  80788c:	20c7883a 	add	r3,r4,r3
  807890:	20c0192e 	bgeu	r4,r3,8078f8 <__any_on+0x84>
  807894:	18bfff17 	ldw	r2,-4(r3)
  807898:	18ffff04 	addi	r3,r3,-4
  80789c:	1000041e 	bne	r2,zero,8078b0 <__any_on+0x3c>
  8078a0:	20c0142e 	bgeu	r4,r3,8078f4 <__any_on+0x80>
  8078a4:	18ffff04 	addi	r3,r3,-4
  8078a8:	19400017 	ldw	r5,0(r3)
  8078ac:	283ffc26 	beq	r5,zero,8078a0 <__alt_mem_descriptor_memory+0xff7878a0>
  8078b0:	00800044 	movi	r2,1
  8078b4:	f800283a 	ret
  8078b8:	10c00a0e 	bge	r2,r3,8078e4 <__any_on+0x70>
  8078bc:	1085883a 	add	r2,r2,r2
  8078c0:	1085883a 	add	r2,r2,r2
  8078c4:	294007cc 	andi	r5,r5,31
  8078c8:	2087883a 	add	r3,r4,r2
  8078cc:	283ff026 	beq	r5,zero,807890 <__alt_mem_descriptor_memory+0xff787890>
  8078d0:	19800017 	ldw	r6,0(r3)
  8078d4:	3144d83a 	srl	r2,r6,r5
  8078d8:	114a983a 	sll	r5,r2,r5
  8078dc:	317ff41e 	bne	r6,r5,8078b0 <__alt_mem_descriptor_memory+0xff7878b0>
  8078e0:	003feb06 	br	807890 <__alt_mem_descriptor_memory+0xff787890>
  8078e4:	1085883a 	add	r2,r2,r2
  8078e8:	1085883a 	add	r2,r2,r2
  8078ec:	2087883a 	add	r3,r4,r2
  8078f0:	003fe706 	br	807890 <__alt_mem_descriptor_memory+0xff787890>
  8078f4:	f800283a 	ret
  8078f8:	0005883a 	mov	r2,zero
  8078fc:	f800283a 	ret

00807900 <__fpclassifyd>:
  807900:	00a00034 	movhi	r2,32768
  807904:	10bfffc4 	addi	r2,r2,-1
  807908:	2884703a 	and	r2,r5,r2
  80790c:	10000726 	beq	r2,zero,80792c <__fpclassifyd+0x2c>
  807910:	00fffc34 	movhi	r3,65520
  807914:	019ff834 	movhi	r6,32736
  807918:	28c7883a 	add	r3,r5,r3
  80791c:	31bfffc4 	addi	r6,r6,-1
  807920:	30c00536 	bltu	r6,r3,807938 <__fpclassifyd+0x38>
  807924:	00800104 	movi	r2,4
  807928:	f800283a 	ret
  80792c:	2000021e 	bne	r4,zero,807938 <__fpclassifyd+0x38>
  807930:	00800084 	movi	r2,2
  807934:	f800283a 	ret
  807938:	00dffc34 	movhi	r3,32752
  80793c:	019ff834 	movhi	r6,32736
  807940:	28cb883a 	add	r5,r5,r3
  807944:	31bfffc4 	addi	r6,r6,-1
  807948:	317ff62e 	bgeu	r6,r5,807924 <__alt_mem_descriptor_memory+0xff787924>
  80794c:	01400434 	movhi	r5,16
  807950:	297fffc4 	addi	r5,r5,-1
  807954:	28800236 	bltu	r5,r2,807960 <__fpclassifyd+0x60>
  807958:	008000c4 	movi	r2,3
  80795c:	f800283a 	ret
  807960:	10c00226 	beq	r2,r3,80796c <__fpclassifyd+0x6c>
  807964:	0005883a 	mov	r2,zero
  807968:	f800283a 	ret
  80796c:	2005003a 	cmpeq	r2,r4,zero
  807970:	f800283a 	ret

00807974 <_sbrk_r>:
  807974:	defffd04 	addi	sp,sp,-12
  807978:	dc000015 	stw	r16,0(sp)
  80797c:	04002074 	movhi	r16,129
  807980:	dc400115 	stw	r17,4(sp)
  807984:	8418d004 	addi	r16,r16,25408
  807988:	2023883a 	mov	r17,r4
  80798c:	2809883a 	mov	r4,r5
  807990:	dfc00215 	stw	ra,8(sp)
  807994:	80000015 	stw	zero,0(r16)
  807998:	080e04c0 	call	80e04c <sbrk>
  80799c:	00ffffc4 	movi	r3,-1
  8079a0:	10c00526 	beq	r2,r3,8079b8 <_sbrk_r+0x44>
  8079a4:	dfc00217 	ldw	ra,8(sp)
  8079a8:	dc400117 	ldw	r17,4(sp)
  8079ac:	dc000017 	ldw	r16,0(sp)
  8079b0:	dec00304 	addi	sp,sp,12
  8079b4:	f800283a 	ret
  8079b8:	80c00017 	ldw	r3,0(r16)
  8079bc:	183ff926 	beq	r3,zero,8079a4 <__alt_mem_descriptor_memory+0xff7879a4>
  8079c0:	88c00015 	stw	r3,0(r17)
  8079c4:	003ff706 	br	8079a4 <__alt_mem_descriptor_memory+0xff7879a4>

008079c8 <__sread>:
  8079c8:	defffe04 	addi	sp,sp,-8
  8079cc:	dc000015 	stw	r16,0(sp)
  8079d0:	2821883a 	mov	r16,r5
  8079d4:	2940038f 	ldh	r5,14(r5)
  8079d8:	dfc00115 	stw	ra,4(sp)
  8079dc:	0809e6c0 	call	809e6c <_read_r>
  8079e0:	10000716 	blt	r2,zero,807a00 <__sread+0x38>
  8079e4:	80c01417 	ldw	r3,80(r16)
  8079e8:	1887883a 	add	r3,r3,r2
  8079ec:	80c01415 	stw	r3,80(r16)
  8079f0:	dfc00117 	ldw	ra,4(sp)
  8079f4:	dc000017 	ldw	r16,0(sp)
  8079f8:	dec00204 	addi	sp,sp,8
  8079fc:	f800283a 	ret
  807a00:	80c0030b 	ldhu	r3,12(r16)
  807a04:	18fbffcc 	andi	r3,r3,61439
  807a08:	80c0030d 	sth	r3,12(r16)
  807a0c:	dfc00117 	ldw	ra,4(sp)
  807a10:	dc000017 	ldw	r16,0(sp)
  807a14:	dec00204 	addi	sp,sp,8
  807a18:	f800283a 	ret

00807a1c <__seofread>:
  807a1c:	0005883a 	mov	r2,zero
  807a20:	f800283a 	ret

00807a24 <__swrite>:
  807a24:	2880030b 	ldhu	r2,12(r5)
  807a28:	defffb04 	addi	sp,sp,-20
  807a2c:	dcc00315 	stw	r19,12(sp)
  807a30:	dc800215 	stw	r18,8(sp)
  807a34:	dc400115 	stw	r17,4(sp)
  807a38:	dc000015 	stw	r16,0(sp)
  807a3c:	dfc00415 	stw	ra,16(sp)
  807a40:	10c0400c 	andi	r3,r2,256
  807a44:	2821883a 	mov	r16,r5
  807a48:	2023883a 	mov	r17,r4
  807a4c:	3025883a 	mov	r18,r6
  807a50:	3827883a 	mov	r19,r7
  807a54:	18000526 	beq	r3,zero,807a6c <__swrite+0x48>
  807a58:	2940038f 	ldh	r5,14(r5)
  807a5c:	01c00084 	movi	r7,2
  807a60:	000d883a 	mov	r6,zero
  807a64:	0809cb00 	call	809cb0 <_lseek_r>
  807a68:	8080030b 	ldhu	r2,12(r16)
  807a6c:	8140038f 	ldh	r5,14(r16)
  807a70:	10bbffcc 	andi	r2,r2,61439
  807a74:	980f883a 	mov	r7,r19
  807a78:	900d883a 	mov	r6,r18
  807a7c:	8809883a 	mov	r4,r17
  807a80:	8080030d 	sth	r2,12(r16)
  807a84:	dfc00417 	ldw	ra,16(sp)
  807a88:	dcc00317 	ldw	r19,12(sp)
  807a8c:	dc800217 	ldw	r18,8(sp)
  807a90:	dc400117 	ldw	r17,4(sp)
  807a94:	dc000017 	ldw	r16,0(sp)
  807a98:	dec00504 	addi	sp,sp,20
  807a9c:	08092c01 	jmpi	8092c0 <_write_r>

00807aa0 <__sseek>:
  807aa0:	defffe04 	addi	sp,sp,-8
  807aa4:	dc000015 	stw	r16,0(sp)
  807aa8:	2821883a 	mov	r16,r5
  807aac:	2940038f 	ldh	r5,14(r5)
  807ab0:	dfc00115 	stw	ra,4(sp)
  807ab4:	0809cb00 	call	809cb0 <_lseek_r>
  807ab8:	00ffffc4 	movi	r3,-1
  807abc:	10c00826 	beq	r2,r3,807ae0 <__sseek+0x40>
  807ac0:	80c0030b 	ldhu	r3,12(r16)
  807ac4:	80801415 	stw	r2,80(r16)
  807ac8:	18c40014 	ori	r3,r3,4096
  807acc:	80c0030d 	sth	r3,12(r16)
  807ad0:	dfc00117 	ldw	ra,4(sp)
  807ad4:	dc000017 	ldw	r16,0(sp)
  807ad8:	dec00204 	addi	sp,sp,8
  807adc:	f800283a 	ret
  807ae0:	80c0030b 	ldhu	r3,12(r16)
  807ae4:	18fbffcc 	andi	r3,r3,61439
  807ae8:	80c0030d 	sth	r3,12(r16)
  807aec:	dfc00117 	ldw	ra,4(sp)
  807af0:	dc000017 	ldw	r16,0(sp)
  807af4:	dec00204 	addi	sp,sp,8
  807af8:	f800283a 	ret

00807afc <__sclose>:
  807afc:	2940038f 	ldh	r5,14(r5)
  807b00:	08093201 	jmpi	809320 <_close_r>

00807b04 <strcmp>:
  807b04:	2144b03a 	or	r2,r4,r5
  807b08:	108000cc 	andi	r2,r2,3
  807b0c:	1000171e 	bne	r2,zero,807b6c <strcmp+0x68>
  807b10:	20800017 	ldw	r2,0(r4)
  807b14:	28c00017 	ldw	r3,0(r5)
  807b18:	10c0141e 	bne	r2,r3,807b6c <strcmp+0x68>
  807b1c:	027fbff4 	movhi	r9,65279
  807b20:	4a7fbfc4 	addi	r9,r9,-257
  807b24:	0086303a 	nor	r3,zero,r2
  807b28:	02202074 	movhi	r8,32897
  807b2c:	1245883a 	add	r2,r2,r9
  807b30:	42202004 	addi	r8,r8,-32640
  807b34:	10c4703a 	and	r2,r2,r3
  807b38:	1204703a 	and	r2,r2,r8
  807b3c:	10000226 	beq	r2,zero,807b48 <strcmp+0x44>
  807b40:	00002306 	br	807bd0 <strcmp+0xcc>
  807b44:	1000221e 	bne	r2,zero,807bd0 <strcmp+0xcc>
  807b48:	21000104 	addi	r4,r4,4
  807b4c:	20c00017 	ldw	r3,0(r4)
  807b50:	29400104 	addi	r5,r5,4
  807b54:	29800017 	ldw	r6,0(r5)
  807b58:	1a4f883a 	add	r7,r3,r9
  807b5c:	00c4303a 	nor	r2,zero,r3
  807b60:	3884703a 	and	r2,r7,r2
  807b64:	1204703a 	and	r2,r2,r8
  807b68:	19bff626 	beq	r3,r6,807b44 <__alt_mem_descriptor_memory+0xff787b44>
  807b6c:	20800003 	ldbu	r2,0(r4)
  807b70:	10c03fcc 	andi	r3,r2,255
  807b74:	18c0201c 	xori	r3,r3,128
  807b78:	18ffe004 	addi	r3,r3,-128
  807b7c:	18000c26 	beq	r3,zero,807bb0 <strcmp+0xac>
  807b80:	29800007 	ldb	r6,0(r5)
  807b84:	19800326 	beq	r3,r6,807b94 <strcmp+0x90>
  807b88:	00001306 	br	807bd8 <strcmp+0xd4>
  807b8c:	29800007 	ldb	r6,0(r5)
  807b90:	11800b1e 	bne	r2,r6,807bc0 <strcmp+0xbc>
  807b94:	21000044 	addi	r4,r4,1
  807b98:	20c00003 	ldbu	r3,0(r4)
  807b9c:	29400044 	addi	r5,r5,1
  807ba0:	18803fcc 	andi	r2,r3,255
  807ba4:	1080201c 	xori	r2,r2,128
  807ba8:	10bfe004 	addi	r2,r2,-128
  807bac:	103ff71e 	bne	r2,zero,807b8c <__alt_mem_descriptor_memory+0xff787b8c>
  807bb0:	0007883a 	mov	r3,zero
  807bb4:	28800003 	ldbu	r2,0(r5)
  807bb8:	1885c83a 	sub	r2,r3,r2
  807bbc:	f800283a 	ret
  807bc0:	28800003 	ldbu	r2,0(r5)
  807bc4:	18c03fcc 	andi	r3,r3,255
  807bc8:	1885c83a 	sub	r2,r3,r2
  807bcc:	f800283a 	ret
  807bd0:	0005883a 	mov	r2,zero
  807bd4:	f800283a 	ret
  807bd8:	10c03fcc 	andi	r3,r2,255
  807bdc:	003ff506 	br	807bb4 <__alt_mem_descriptor_memory+0xff787bb4>

00807be0 <strlen>:
  807be0:	208000cc 	andi	r2,r4,3
  807be4:	10002026 	beq	r2,zero,807c68 <strlen+0x88>
  807be8:	20800007 	ldb	r2,0(r4)
  807bec:	10002026 	beq	r2,zero,807c70 <strlen+0x90>
  807bf0:	2005883a 	mov	r2,r4
  807bf4:	00000206 	br	807c00 <strlen+0x20>
  807bf8:	10c00007 	ldb	r3,0(r2)
  807bfc:	18001826 	beq	r3,zero,807c60 <strlen+0x80>
  807c00:	10800044 	addi	r2,r2,1
  807c04:	10c000cc 	andi	r3,r2,3
  807c08:	183ffb1e 	bne	r3,zero,807bf8 <__alt_mem_descriptor_memory+0xff787bf8>
  807c0c:	10c00017 	ldw	r3,0(r2)
  807c10:	01ffbff4 	movhi	r7,65279
  807c14:	39ffbfc4 	addi	r7,r7,-257
  807c18:	00ca303a 	nor	r5,zero,r3
  807c1c:	01a02074 	movhi	r6,32897
  807c20:	19c7883a 	add	r3,r3,r7
  807c24:	31a02004 	addi	r6,r6,-32640
  807c28:	1946703a 	and	r3,r3,r5
  807c2c:	1986703a 	and	r3,r3,r6
  807c30:	1800091e 	bne	r3,zero,807c58 <strlen+0x78>
  807c34:	10800104 	addi	r2,r2,4
  807c38:	10c00017 	ldw	r3,0(r2)
  807c3c:	19cb883a 	add	r5,r3,r7
  807c40:	00c6303a 	nor	r3,zero,r3
  807c44:	28c6703a 	and	r3,r5,r3
  807c48:	1986703a 	and	r3,r3,r6
  807c4c:	183ff926 	beq	r3,zero,807c34 <__alt_mem_descriptor_memory+0xff787c34>
  807c50:	00000106 	br	807c58 <strlen+0x78>
  807c54:	10800044 	addi	r2,r2,1
  807c58:	10c00007 	ldb	r3,0(r2)
  807c5c:	183ffd1e 	bne	r3,zero,807c54 <__alt_mem_descriptor_memory+0xff787c54>
  807c60:	1105c83a 	sub	r2,r2,r4
  807c64:	f800283a 	ret
  807c68:	2005883a 	mov	r2,r4
  807c6c:	003fe706 	br	807c0c <__alt_mem_descriptor_memory+0xff787c0c>
  807c70:	0005883a 	mov	r2,zero
  807c74:	f800283a 	ret

00807c78 <__sprint_r.part.0>:
  807c78:	28801917 	ldw	r2,100(r5)
  807c7c:	defff604 	addi	sp,sp,-40
  807c80:	dd400515 	stw	r21,20(sp)
  807c84:	dfc00915 	stw	ra,36(sp)
  807c88:	df000815 	stw	fp,32(sp)
  807c8c:	ddc00715 	stw	r23,28(sp)
  807c90:	dd800615 	stw	r22,24(sp)
  807c94:	dd000415 	stw	r20,16(sp)
  807c98:	dcc00315 	stw	r19,12(sp)
  807c9c:	dc800215 	stw	r18,8(sp)
  807ca0:	dc400115 	stw	r17,4(sp)
  807ca4:	dc000015 	stw	r16,0(sp)
  807ca8:	1088000c 	andi	r2,r2,8192
  807cac:	302b883a 	mov	r21,r6
  807cb0:	10002e26 	beq	r2,zero,807d6c <__sprint_r.part.0+0xf4>
  807cb4:	30800217 	ldw	r2,8(r6)
  807cb8:	35800017 	ldw	r22,0(r6)
  807cbc:	10002926 	beq	r2,zero,807d64 <__sprint_r.part.0+0xec>
  807cc0:	2827883a 	mov	r19,r5
  807cc4:	2029883a 	mov	r20,r4
  807cc8:	b5c00104 	addi	r23,r22,4
  807ccc:	04bfffc4 	movi	r18,-1
  807cd0:	bc400017 	ldw	r17,0(r23)
  807cd4:	b4000017 	ldw	r16,0(r22)
  807cd8:	0039883a 	mov	fp,zero
  807cdc:	8822d0ba 	srli	r17,r17,2
  807ce0:	8800031e 	bne	r17,zero,807cf0 <__sprint_r.part.0+0x78>
  807ce4:	00001806 	br	807d48 <__sprint_r.part.0+0xd0>
  807ce8:	84000104 	addi	r16,r16,4
  807cec:	8f001526 	beq	r17,fp,807d44 <__sprint_r.part.0+0xcc>
  807cf0:	81400017 	ldw	r5,0(r16)
  807cf4:	980d883a 	mov	r6,r19
  807cf8:	a009883a 	mov	r4,r20
  807cfc:	08096a00 	call	8096a0 <_fputwc_r>
  807d00:	e7000044 	addi	fp,fp,1
  807d04:	14bff81e 	bne	r2,r18,807ce8 <__alt_mem_descriptor_memory+0xff787ce8>
  807d08:	9005883a 	mov	r2,r18
  807d0c:	a8000215 	stw	zero,8(r21)
  807d10:	a8000115 	stw	zero,4(r21)
  807d14:	dfc00917 	ldw	ra,36(sp)
  807d18:	df000817 	ldw	fp,32(sp)
  807d1c:	ddc00717 	ldw	r23,28(sp)
  807d20:	dd800617 	ldw	r22,24(sp)
  807d24:	dd400517 	ldw	r21,20(sp)
  807d28:	dd000417 	ldw	r20,16(sp)
  807d2c:	dcc00317 	ldw	r19,12(sp)
  807d30:	dc800217 	ldw	r18,8(sp)
  807d34:	dc400117 	ldw	r17,4(sp)
  807d38:	dc000017 	ldw	r16,0(sp)
  807d3c:	dec00a04 	addi	sp,sp,40
  807d40:	f800283a 	ret
  807d44:	a8800217 	ldw	r2,8(r21)
  807d48:	8c63883a 	add	r17,r17,r17
  807d4c:	8c63883a 	add	r17,r17,r17
  807d50:	1445c83a 	sub	r2,r2,r17
  807d54:	a8800215 	stw	r2,8(r21)
  807d58:	b5800204 	addi	r22,r22,8
  807d5c:	bdc00204 	addi	r23,r23,8
  807d60:	103fdb1e 	bne	r2,zero,807cd0 <__alt_mem_descriptor_memory+0xff787cd0>
  807d64:	0005883a 	mov	r2,zero
  807d68:	003fe806 	br	807d0c <__alt_mem_descriptor_memory+0xff787d0c>
  807d6c:	08097a00 	call	8097a0 <__sfvwrite_r>
  807d70:	003fe606 	br	807d0c <__alt_mem_descriptor_memory+0xff787d0c>

00807d74 <__sprint_r>:
  807d74:	30c00217 	ldw	r3,8(r6)
  807d78:	18000126 	beq	r3,zero,807d80 <__sprint_r+0xc>
  807d7c:	0807c781 	jmpi	807c78 <__sprint_r.part.0>
  807d80:	30000115 	stw	zero,4(r6)
  807d84:	0005883a 	mov	r2,zero
  807d88:	f800283a 	ret

00807d8c <___vfiprintf_internal_r>:
  807d8c:	deffc904 	addi	sp,sp,-220
  807d90:	df003515 	stw	fp,212(sp)
  807d94:	dd003115 	stw	r20,196(sp)
  807d98:	dfc03615 	stw	ra,216(sp)
  807d9c:	ddc03415 	stw	r23,208(sp)
  807da0:	dd803315 	stw	r22,204(sp)
  807da4:	dd403215 	stw	r21,200(sp)
  807da8:	dcc03015 	stw	r19,192(sp)
  807dac:	dc802f15 	stw	r18,188(sp)
  807db0:	dc402e15 	stw	r17,184(sp)
  807db4:	dc002d15 	stw	r16,180(sp)
  807db8:	d9002015 	stw	r4,128(sp)
  807dbc:	d9c02215 	stw	r7,136(sp)
  807dc0:	2829883a 	mov	r20,r5
  807dc4:	3039883a 	mov	fp,r6
  807dc8:	20000226 	beq	r4,zero,807dd4 <___vfiprintf_internal_r+0x48>
  807dcc:	20800e17 	ldw	r2,56(r4)
  807dd0:	1000cf26 	beq	r2,zero,808110 <___vfiprintf_internal_r+0x384>
  807dd4:	a080030b 	ldhu	r2,12(r20)
  807dd8:	10c8000c 	andi	r3,r2,8192
  807ddc:	1800061e 	bne	r3,zero,807df8 <___vfiprintf_internal_r+0x6c>
  807de0:	a1001917 	ldw	r4,100(r20)
  807de4:	00f7ffc4 	movi	r3,-8193
  807de8:	10880014 	ori	r2,r2,8192
  807dec:	20c6703a 	and	r3,r4,r3
  807df0:	a080030d 	sth	r2,12(r20)
  807df4:	a0c01915 	stw	r3,100(r20)
  807df8:	10c0020c 	andi	r3,r2,8
  807dfc:	1800a926 	beq	r3,zero,8080a4 <___vfiprintf_internal_r+0x318>
  807e00:	a0c00417 	ldw	r3,16(r20)
  807e04:	1800a726 	beq	r3,zero,8080a4 <___vfiprintf_internal_r+0x318>
  807e08:	1080068c 	andi	r2,r2,26
  807e0c:	00c00284 	movi	r3,10
  807e10:	10c0ac26 	beq	r2,r3,8080c4 <___vfiprintf_internal_r+0x338>
  807e14:	da801a04 	addi	r10,sp,104
  807e18:	da801e15 	stw	r10,120(sp)
  807e1c:	d8801e17 	ldw	r2,120(sp)
  807e20:	da8019c4 	addi	r10,sp,103
  807e24:	05802074 	movhi	r22,129
  807e28:	05c02074 	movhi	r23,129
  807e2c:	da801f15 	stw	r10,124(sp)
  807e30:	1295c83a 	sub	r10,r2,r10
  807e34:	b5904d04 	addi	r22,r22,16692
  807e38:	bdd04904 	addi	r23,r23,16676
  807e3c:	dec01a15 	stw	sp,104(sp)
  807e40:	d8001c15 	stw	zero,112(sp)
  807e44:	d8001b15 	stw	zero,108(sp)
  807e48:	d8002615 	stw	zero,152(sp)
  807e4c:	d8002315 	stw	zero,140(sp)
  807e50:	da802715 	stw	r10,156(sp)
  807e54:	d811883a 	mov	r8,sp
  807e58:	dd002115 	stw	r20,132(sp)
  807e5c:	e021883a 	mov	r16,fp
  807e60:	80800007 	ldb	r2,0(r16)
  807e64:	1003ea26 	beq	r2,zero,808e10 <___vfiprintf_internal_r+0x1084>
  807e68:	00c00944 	movi	r3,37
  807e6c:	8025883a 	mov	r18,r16
  807e70:	10c0021e 	bne	r2,r3,807e7c <___vfiprintf_internal_r+0xf0>
  807e74:	00001606 	br	807ed0 <___vfiprintf_internal_r+0x144>
  807e78:	10c00326 	beq	r2,r3,807e88 <___vfiprintf_internal_r+0xfc>
  807e7c:	94800044 	addi	r18,r18,1
  807e80:	90800007 	ldb	r2,0(r18)
  807e84:	103ffc1e 	bne	r2,zero,807e78 <__alt_mem_descriptor_memory+0xff787e78>
  807e88:	9423c83a 	sub	r17,r18,r16
  807e8c:	88001026 	beq	r17,zero,807ed0 <___vfiprintf_internal_r+0x144>
  807e90:	d8c01c17 	ldw	r3,112(sp)
  807e94:	d8801b17 	ldw	r2,108(sp)
  807e98:	44000015 	stw	r16,0(r8)
  807e9c:	88c7883a 	add	r3,r17,r3
  807ea0:	10800044 	addi	r2,r2,1
  807ea4:	44400115 	stw	r17,4(r8)
  807ea8:	d8c01c15 	stw	r3,112(sp)
  807eac:	d8801b15 	stw	r2,108(sp)
  807eb0:	010001c4 	movi	r4,7
  807eb4:	2080760e 	bge	r4,r2,808090 <___vfiprintf_internal_r+0x304>
  807eb8:	1803821e 	bne	r3,zero,808cc4 <___vfiprintf_internal_r+0xf38>
  807ebc:	da802317 	ldw	r10,140(sp)
  807ec0:	d8001b15 	stw	zero,108(sp)
  807ec4:	d811883a 	mov	r8,sp
  807ec8:	5455883a 	add	r10,r10,r17
  807ecc:	da802315 	stw	r10,140(sp)
  807ed0:	90800007 	ldb	r2,0(r18)
  807ed4:	10044626 	beq	r2,zero,808ff0 <___vfiprintf_internal_r+0x1264>
  807ed8:	90c00047 	ldb	r3,1(r18)
  807edc:	94000044 	addi	r16,r18,1
  807ee0:	d8001d85 	stb	zero,118(sp)
  807ee4:	0009883a 	mov	r4,zero
  807ee8:	000f883a 	mov	r7,zero
  807eec:	027fffc4 	movi	r9,-1
  807ef0:	0023883a 	mov	r17,zero
  807ef4:	0029883a 	mov	r20,zero
  807ef8:	01401604 	movi	r5,88
  807efc:	01800244 	movi	r6,9
  807f00:	03400a84 	movi	r13,42
  807f04:	03001b04 	movi	r12,108
  807f08:	84000044 	addi	r16,r16,1
  807f0c:	18bff804 	addi	r2,r3,-32
  807f10:	28827336 	bltu	r5,r2,8088e0 <___vfiprintf_internal_r+0xb54>
  807f14:	100490ba 	slli	r2,r2,2
  807f18:	02802034 	movhi	r10,128
  807f1c:	529fcb04 	addi	r10,r10,32556
  807f20:	1285883a 	add	r2,r2,r10
  807f24:	10800017 	ldw	r2,0(r2)
  807f28:	1000683a 	jmp	r2
  807f2c:	00808614 	movui	r2,536
  807f30:	008088e0 	cmpeqi	r2,zero,547
  807f34:	008088e0 	cmpeqi	r2,zero,547
  807f38:	00808634 	movhi	r2,536
  807f3c:	008088e0 	cmpeqi	r2,zero,547
  807f40:	008088e0 	cmpeqi	r2,zero,547
  807f44:	008088e0 	cmpeqi	r2,zero,547
  807f48:	008088e0 	cmpeqi	r2,zero,547
  807f4c:	008088e0 	cmpeqi	r2,zero,547
  807f50:	008088e0 	cmpeqi	r2,zero,547
  807f54:	0080881c 	xori	r2,zero,544
  807f58:	00808838 	rdprs	r2,zero,544
  807f5c:	008088e0 	cmpeqi	r2,zero,547
  807f60:	00808120 	cmpeqi	r2,zero,516
  807f64:	00808848 	cmpgei	r2,zero,545
  807f68:	008088e0 	cmpeqi	r2,zero,547
  807f6c:	00808640 	call	80864 <__alt_mem_new_sdram_controller_0-0x77f79c>
  807f70:	0080864c 	andi	r2,zero,537
  807f74:	0080864c 	andi	r2,zero,537
  807f78:	0080864c 	andi	r2,zero,537
  807f7c:	0080864c 	andi	r2,zero,537
  807f80:	0080864c 	andi	r2,zero,537
  807f84:	0080864c 	andi	r2,zero,537
  807f88:	0080864c 	andi	r2,zero,537
  807f8c:	0080864c 	andi	r2,zero,537
  807f90:	0080864c 	andi	r2,zero,537
  807f94:	008088e0 	cmpeqi	r2,zero,547
  807f98:	008088e0 	cmpeqi	r2,zero,547
  807f9c:	008088e0 	cmpeqi	r2,zero,547
  807fa0:	008088e0 	cmpeqi	r2,zero,547
  807fa4:	008088e0 	cmpeqi	r2,zero,547
  807fa8:	008088e0 	cmpeqi	r2,zero,547
  807fac:	008088e0 	cmpeqi	r2,zero,547
  807fb0:	008088e0 	cmpeqi	r2,zero,547
  807fb4:	008088e0 	cmpeqi	r2,zero,547
  807fb8:	008088e0 	cmpeqi	r2,zero,547
  807fbc:	00808678 	rdprs	r2,zero,537
  807fc0:	008088e0 	cmpeqi	r2,zero,547
  807fc4:	008088e0 	cmpeqi	r2,zero,547
  807fc8:	008088e0 	cmpeqi	r2,zero,547
  807fcc:	008088e0 	cmpeqi	r2,zero,547
  807fd0:	008088e0 	cmpeqi	r2,zero,547
  807fd4:	008088e0 	cmpeqi	r2,zero,547
  807fd8:	008088e0 	cmpeqi	r2,zero,547
  807fdc:	008088e0 	cmpeqi	r2,zero,547
  807fe0:	008088e0 	cmpeqi	r2,zero,547
  807fe4:	008088e0 	cmpeqi	r2,zero,547
  807fe8:	008086b0 	cmpltui	r2,zero,538
  807fec:	008088e0 	cmpeqi	r2,zero,547
  807ff0:	008088e0 	cmpeqi	r2,zero,547
  807ff4:	008088e0 	cmpeqi	r2,zero,547
  807ff8:	008088e0 	cmpeqi	r2,zero,547
  807ffc:	008088e0 	cmpeqi	r2,zero,547
  808000:	00808708 	cmpgei	r2,zero,540
  808004:	008088e0 	cmpeqi	r2,zero,547
  808008:	008088e0 	cmpeqi	r2,zero,547
  80800c:	00808778 	rdprs	r2,zero,541
  808010:	008088e0 	cmpeqi	r2,zero,547
  808014:	008088e0 	cmpeqi	r2,zero,547
  808018:	008088e0 	cmpeqi	r2,zero,547
  80801c:	008088e0 	cmpeqi	r2,zero,547
  808020:	008088e0 	cmpeqi	r2,zero,547
  808024:	008088e0 	cmpeqi	r2,zero,547
  808028:	008088e0 	cmpeqi	r2,zero,547
  80802c:	008088e0 	cmpeqi	r2,zero,547
  808030:	008088e0 	cmpeqi	r2,zero,547
  808034:	008088e0 	cmpeqi	r2,zero,547
  808038:	00808524 	muli	r2,zero,532
  80803c:	00808550 	cmplti	r2,zero,533
  808040:	008088e0 	cmpeqi	r2,zero,547
  808044:	008088e0 	cmpeqi	r2,zero,547
  808048:	008088e0 	cmpeqi	r2,zero,547
  80804c:	00808888 	cmpgei	r2,zero,546
  808050:	00808550 	cmplti	r2,zero,533
  808054:	008088e0 	cmpeqi	r2,zero,547
  808058:	008088e0 	cmpeqi	r2,zero,547
  80805c:	008083e4 	muli	r2,zero,527
  808060:	008088e0 	cmpeqi	r2,zero,547
  808064:	008083f4 	movhi	r2,527
  808068:	00808430 	cmpltui	r2,zero,528
  80806c:	0080812c 	andhi	r2,zero,516
  808070:	008083d8 	cmpnei	r2,zero,527
  808074:	008088e0 	cmpeqi	r2,zero,547
  808078:	008087b4 	movhi	r2,542
  80807c:	008088e0 	cmpeqi	r2,zero,547
  808080:	0080880c 	andi	r2,zero,544
  808084:	008088e0 	cmpeqi	r2,zero,547
  808088:	008088e0 	cmpeqi	r2,zero,547
  80808c:	008084d0 	cmplti	r2,zero,531
  808090:	42000204 	addi	r8,r8,8
  808094:	da802317 	ldw	r10,140(sp)
  808098:	5455883a 	add	r10,r10,r17
  80809c:	da802315 	stw	r10,140(sp)
  8080a0:	003f8b06 	br	807ed0 <__alt_mem_descriptor_memory+0xff787ed0>
  8080a4:	d9002017 	ldw	r4,128(sp)
  8080a8:	a00b883a 	mov	r5,r20
  8080ac:	08036540 	call	803654 <__swsetup_r>
  8080b0:	1003b11e 	bne	r2,zero,808f78 <___vfiprintf_internal_r+0x11ec>
  8080b4:	a080030b 	ldhu	r2,12(r20)
  8080b8:	00c00284 	movi	r3,10
  8080bc:	1080068c 	andi	r2,r2,26
  8080c0:	10ff541e 	bne	r2,r3,807e14 <__alt_mem_descriptor_memory+0xff787e14>
  8080c4:	a080038f 	ldh	r2,14(r20)
  8080c8:	103f5216 	blt	r2,zero,807e14 <__alt_mem_descriptor_memory+0xff787e14>
  8080cc:	d9c02217 	ldw	r7,136(sp)
  8080d0:	d9002017 	ldw	r4,128(sp)
  8080d4:	e00d883a 	mov	r6,fp
  8080d8:	a00b883a 	mov	r5,r20
  8080dc:	08092040 	call	809204 <__sbprintf>
  8080e0:	dfc03617 	ldw	ra,216(sp)
  8080e4:	df003517 	ldw	fp,212(sp)
  8080e8:	ddc03417 	ldw	r23,208(sp)
  8080ec:	dd803317 	ldw	r22,204(sp)
  8080f0:	dd403217 	ldw	r21,200(sp)
  8080f4:	dd003117 	ldw	r20,196(sp)
  8080f8:	dcc03017 	ldw	r19,192(sp)
  8080fc:	dc802f17 	ldw	r18,188(sp)
  808100:	dc402e17 	ldw	r17,184(sp)
  808104:	dc002d17 	ldw	r16,180(sp)
  808108:	dec03704 	addi	sp,sp,220
  80810c:	f800283a 	ret
  808110:	08056280 	call	805628 <__sinit>
  808114:	003f2f06 	br	807dd4 <__alt_mem_descriptor_memory+0xff787dd4>
  808118:	0463c83a 	sub	r17,zero,r17
  80811c:	d8802215 	stw	r2,136(sp)
  808120:	a5000114 	ori	r20,r20,4
  808124:	80c00007 	ldb	r3,0(r16)
  808128:	003f7706 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  80812c:	00800c04 	movi	r2,48
  808130:	da802217 	ldw	r10,136(sp)
  808134:	d8801d05 	stb	r2,116(sp)
  808138:	00801e04 	movi	r2,120
  80813c:	d8801d45 	stb	r2,117(sp)
  808140:	d8001d85 	stb	zero,118(sp)
  808144:	50c00104 	addi	r3,r10,4
  808148:	54800017 	ldw	r18,0(r10)
  80814c:	0027883a 	mov	r19,zero
  808150:	a0800094 	ori	r2,r20,2
  808154:	48030b16 	blt	r9,zero,808d84 <___vfiprintf_internal_r+0xff8>
  808158:	00bfdfc4 	movi	r2,-129
  80815c:	a096703a 	and	r11,r20,r2
  808160:	d8c02215 	stw	r3,136(sp)
  808164:	5d000094 	ori	r20,r11,2
  808168:	90032b1e 	bne	r18,zero,808e18 <___vfiprintf_internal_r+0x108c>
  80816c:	00802074 	movhi	r2,129
  808170:	108fe804 	addi	r2,r2,16288
  808174:	d8802615 	stw	r2,152(sp)
  808178:	0039883a 	mov	fp,zero
  80817c:	48017b1e 	bne	r9,zero,80876c <___vfiprintf_internal_r+0x9e0>
  808180:	0013883a 	mov	r9,zero
  808184:	0027883a 	mov	r19,zero
  808188:	dd401a04 	addi	r21,sp,104
  80818c:	4825883a 	mov	r18,r9
  808190:	4cc0010e 	bge	r9,r19,808198 <___vfiprintf_internal_r+0x40c>
  808194:	9825883a 	mov	r18,r19
  808198:	e7003fcc 	andi	fp,fp,255
  80819c:	e700201c 	xori	fp,fp,128
  8081a0:	e73fe004 	addi	fp,fp,-128
  8081a4:	e0000126 	beq	fp,zero,8081ac <___vfiprintf_internal_r+0x420>
  8081a8:	94800044 	addi	r18,r18,1
  8081ac:	a380008c 	andi	r14,r20,2
  8081b0:	70000126 	beq	r14,zero,8081b8 <___vfiprintf_internal_r+0x42c>
  8081b4:	94800084 	addi	r18,r18,2
  8081b8:	a700210c 	andi	fp,r20,132
  8081bc:	e001df1e 	bne	fp,zero,80893c <___vfiprintf_internal_r+0xbb0>
  8081c0:	8c87c83a 	sub	r3,r17,r18
  8081c4:	00c1dd0e 	bge	zero,r3,80893c <___vfiprintf_internal_r+0xbb0>
  8081c8:	01c00404 	movi	r7,16
  8081cc:	d8801c17 	ldw	r2,112(sp)
  8081d0:	38c3ad0e 	bge	r7,r3,809088 <___vfiprintf_internal_r+0x12fc>
  8081d4:	02802074 	movhi	r10,129
  8081d8:	52904d04 	addi	r10,r10,16692
  8081dc:	dc002915 	stw	r16,164(sp)
  8081e0:	d9801b17 	ldw	r6,108(sp)
  8081e4:	da802415 	stw	r10,144(sp)
  8081e8:	03c001c4 	movi	r15,7
  8081ec:	da402515 	stw	r9,148(sp)
  8081f0:	db802815 	stw	r14,160(sp)
  8081f4:	1821883a 	mov	r16,r3
  8081f8:	00000506 	br	808210 <___vfiprintf_internal_r+0x484>
  8081fc:	31400084 	addi	r5,r6,2
  808200:	42000204 	addi	r8,r8,8
  808204:	200d883a 	mov	r6,r4
  808208:	843ffc04 	addi	r16,r16,-16
  80820c:	3c000d0e 	bge	r7,r16,808244 <___vfiprintf_internal_r+0x4b8>
  808210:	10800404 	addi	r2,r2,16
  808214:	31000044 	addi	r4,r6,1
  808218:	45800015 	stw	r22,0(r8)
  80821c:	41c00115 	stw	r7,4(r8)
  808220:	d8801c15 	stw	r2,112(sp)
  808224:	d9001b15 	stw	r4,108(sp)
  808228:	793ff40e 	bge	r15,r4,8081fc <__alt_mem_descriptor_memory+0xff7881fc>
  80822c:	1001b51e 	bne	r2,zero,808904 <___vfiprintf_internal_r+0xb78>
  808230:	843ffc04 	addi	r16,r16,-16
  808234:	000d883a 	mov	r6,zero
  808238:	01400044 	movi	r5,1
  80823c:	d811883a 	mov	r8,sp
  808240:	3c3ff316 	blt	r7,r16,808210 <__alt_mem_descriptor_memory+0xff788210>
  808244:	8007883a 	mov	r3,r16
  808248:	da402517 	ldw	r9,148(sp)
  80824c:	db802817 	ldw	r14,160(sp)
  808250:	dc002917 	ldw	r16,164(sp)
  808254:	da802417 	ldw	r10,144(sp)
  808258:	1885883a 	add	r2,r3,r2
  80825c:	40c00115 	stw	r3,4(r8)
  808260:	42800015 	stw	r10,0(r8)
  808264:	d8801c15 	stw	r2,112(sp)
  808268:	d9401b15 	stw	r5,108(sp)
  80826c:	00c001c4 	movi	r3,7
  808270:	19426016 	blt	r3,r5,808bf4 <___vfiprintf_internal_r+0xe68>
  808274:	d8c01d87 	ldb	r3,118(sp)
  808278:	42000204 	addi	r8,r8,8
  80827c:	29000044 	addi	r4,r5,1
  808280:	1801b31e 	bne	r3,zero,808950 <___vfiprintf_internal_r+0xbc4>
  808284:	7001c026 	beq	r14,zero,808988 <___vfiprintf_internal_r+0xbfc>
  808288:	d8c01d04 	addi	r3,sp,116
  80828c:	10800084 	addi	r2,r2,2
  808290:	40c00015 	stw	r3,0(r8)
  808294:	00c00084 	movi	r3,2
  808298:	40c00115 	stw	r3,4(r8)
  80829c:	d8801c15 	stw	r2,112(sp)
  8082a0:	d9001b15 	stw	r4,108(sp)
  8082a4:	00c001c4 	movi	r3,7
  8082a8:	1902650e 	bge	r3,r4,808c40 <___vfiprintf_internal_r+0xeb4>
  8082ac:	10029a1e 	bne	r2,zero,808d18 <___vfiprintf_internal_r+0xf8c>
  8082b0:	00c02004 	movi	r3,128
  8082b4:	01000044 	movi	r4,1
  8082b8:	000b883a 	mov	r5,zero
  8082bc:	d811883a 	mov	r8,sp
  8082c0:	e0c1b31e 	bne	fp,r3,808990 <___vfiprintf_internal_r+0xc04>
  8082c4:	8cb9c83a 	sub	fp,r17,r18
  8082c8:	0701b10e 	bge	zero,fp,808990 <___vfiprintf_internal_r+0xc04>
  8082cc:	01c00404 	movi	r7,16
  8082d0:	3f03890e 	bge	r7,fp,8090f8 <___vfiprintf_internal_r+0x136c>
  8082d4:	00c02074 	movhi	r3,129
  8082d8:	18d04904 	addi	r3,r3,16676
  8082dc:	d8c02415 	stw	r3,144(sp)
  8082e0:	8007883a 	mov	r3,r16
  8082e4:	034001c4 	movi	r13,7
  8082e8:	e021883a 	mov	r16,fp
  8082ec:	da402515 	stw	r9,148(sp)
  8082f0:	1839883a 	mov	fp,r3
  8082f4:	00000506 	br	80830c <___vfiprintf_internal_r+0x580>
  8082f8:	29800084 	addi	r6,r5,2
  8082fc:	42000204 	addi	r8,r8,8
  808300:	180b883a 	mov	r5,r3
  808304:	843ffc04 	addi	r16,r16,-16
  808308:	3c000d0e 	bge	r7,r16,808340 <___vfiprintf_internal_r+0x5b4>
  80830c:	10800404 	addi	r2,r2,16
  808310:	28c00044 	addi	r3,r5,1
  808314:	45c00015 	stw	r23,0(r8)
  808318:	41c00115 	stw	r7,4(r8)
  80831c:	d8801c15 	stw	r2,112(sp)
  808320:	d8c01b15 	stw	r3,108(sp)
  808324:	68fff40e 	bge	r13,r3,8082f8 <__alt_mem_descriptor_memory+0xff7882f8>
  808328:	1002241e 	bne	r2,zero,808bbc <___vfiprintf_internal_r+0xe30>
  80832c:	843ffc04 	addi	r16,r16,-16
  808330:	01800044 	movi	r6,1
  808334:	000b883a 	mov	r5,zero
  808338:	d811883a 	mov	r8,sp
  80833c:	3c3ff316 	blt	r7,r16,80830c <__alt_mem_descriptor_memory+0xff78830c>
  808340:	da402517 	ldw	r9,148(sp)
  808344:	e007883a 	mov	r3,fp
  808348:	8039883a 	mov	fp,r16
  80834c:	1821883a 	mov	r16,r3
  808350:	d8c02417 	ldw	r3,144(sp)
  808354:	1705883a 	add	r2,r2,fp
  808358:	47000115 	stw	fp,4(r8)
  80835c:	40c00015 	stw	r3,0(r8)
  808360:	d8801c15 	stw	r2,112(sp)
  808364:	d9801b15 	stw	r6,108(sp)
  808368:	00c001c4 	movi	r3,7
  80836c:	19827616 	blt	r3,r6,808d48 <___vfiprintf_internal_r+0xfbc>
  808370:	4cf9c83a 	sub	fp,r9,r19
  808374:	42000204 	addi	r8,r8,8
  808378:	31000044 	addi	r4,r6,1
  80837c:	300b883a 	mov	r5,r6
  808380:	07018516 	blt	zero,fp,808998 <___vfiprintf_internal_r+0xc0c>
  808384:	9885883a 	add	r2,r19,r2
  808388:	45400015 	stw	r21,0(r8)
  80838c:	44c00115 	stw	r19,4(r8)
  808390:	d8801c15 	stw	r2,112(sp)
  808394:	d9001b15 	stw	r4,108(sp)
  808398:	00c001c4 	movi	r3,7
  80839c:	1901dd0e 	bge	r3,r4,808b14 <___vfiprintf_internal_r+0xd88>
  8083a0:	1002401e 	bne	r2,zero,808ca4 <___vfiprintf_internal_r+0xf18>
  8083a4:	d8001b15 	stw	zero,108(sp)
  8083a8:	a2c0010c 	andi	r11,r20,4
  8083ac:	58000226 	beq	r11,zero,8083b8 <___vfiprintf_internal_r+0x62c>
  8083b0:	8ca7c83a 	sub	r19,r17,r18
  8083b4:	04c2f216 	blt	zero,r19,808f80 <___vfiprintf_internal_r+0x11f4>
  8083b8:	8c80010e 	bge	r17,r18,8083c0 <___vfiprintf_internal_r+0x634>
  8083bc:	9023883a 	mov	r17,r18
  8083c0:	da802317 	ldw	r10,140(sp)
  8083c4:	5455883a 	add	r10,r10,r17
  8083c8:	da802315 	stw	r10,140(sp)
  8083cc:	d8001b15 	stw	zero,108(sp)
  8083d0:	d811883a 	mov	r8,sp
  8083d4:	003ea206 	br	807e60 <__alt_mem_descriptor_memory+0xff787e60>
  8083d8:	a5000814 	ori	r20,r20,32
  8083dc:	80c00007 	ldb	r3,0(r16)
  8083e0:	003ec906 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  8083e4:	80c00007 	ldb	r3,0(r16)
  8083e8:	1b030926 	beq	r3,r12,809010 <___vfiprintf_internal_r+0x1284>
  8083ec:	a5000414 	ori	r20,r20,16
  8083f0:	003ec506 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  8083f4:	21003fcc 	andi	r4,r4,255
  8083f8:	20035e1e 	bne	r4,zero,809174 <___vfiprintf_internal_r+0x13e8>
  8083fc:	a080080c 	andi	r2,r20,32
  808400:	1002a526 	beq	r2,zero,808e98 <___vfiprintf_internal_r+0x110c>
  808404:	da802217 	ldw	r10,136(sp)
  808408:	50800017 	ldw	r2,0(r10)
  80840c:	da802317 	ldw	r10,140(sp)
  808410:	5007d7fa 	srai	r3,r10,31
  808414:	da802217 	ldw	r10,136(sp)
  808418:	10c00115 	stw	r3,4(r2)
  80841c:	52800104 	addi	r10,r10,4
  808420:	da802215 	stw	r10,136(sp)
  808424:	da802317 	ldw	r10,140(sp)
  808428:	12800015 	stw	r10,0(r2)
  80842c:	003e8c06 	br	807e60 <__alt_mem_descriptor_memory+0xff787e60>
  808430:	21003fcc 	andi	r4,r4,255
  808434:	2003511e 	bne	r4,zero,80917c <___vfiprintf_internal_r+0x13f0>
  808438:	a080080c 	andi	r2,r20,32
  80843c:	1000a126 	beq	r2,zero,8086c4 <___vfiprintf_internal_r+0x938>
  808440:	da802217 	ldw	r10,136(sp)
  808444:	d8001d85 	stb	zero,118(sp)
  808448:	50800204 	addi	r2,r10,8
  80844c:	54800017 	ldw	r18,0(r10)
  808450:	54c00117 	ldw	r19,4(r10)
  808454:	4802b416 	blt	r9,zero,808f28 <___vfiprintf_internal_r+0x119c>
  808458:	013fdfc4 	movi	r4,-129
  80845c:	94c6b03a 	or	r3,r18,r19
  808460:	d8802215 	stw	r2,136(sp)
  808464:	a128703a 	and	r20,r20,r4
  808468:	1800a226 	beq	r3,zero,8086f4 <___vfiprintf_internal_r+0x968>
  80846c:	0039883a 	mov	fp,zero
  808470:	dd401a04 	addi	r21,sp,104
  808474:	9006d0fa 	srli	r3,r18,3
  808478:	9808977a 	slli	r4,r19,29
  80847c:	9826d0fa 	srli	r19,r19,3
  808480:	948001cc 	andi	r18,r18,7
  808484:	90800c04 	addi	r2,r18,48
  808488:	ad7fffc4 	addi	r21,r21,-1
  80848c:	20e4b03a 	or	r18,r4,r3
  808490:	a8800005 	stb	r2,0(r21)
  808494:	94c6b03a 	or	r3,r18,r19
  808498:	183ff61e 	bne	r3,zero,808474 <__alt_mem_descriptor_memory+0xff788474>
  80849c:	a0c0004c 	andi	r3,r20,1
  8084a0:	18005926 	beq	r3,zero,808608 <___vfiprintf_internal_r+0x87c>
  8084a4:	10803fcc 	andi	r2,r2,255
  8084a8:	1080201c 	xori	r2,r2,128
  8084ac:	10bfe004 	addi	r2,r2,-128
  8084b0:	00c00c04 	movi	r3,48
  8084b4:	10c05426 	beq	r2,r3,808608 <___vfiprintf_internal_r+0x87c>
  8084b8:	da801e17 	ldw	r10,120(sp)
  8084bc:	a8bfffc4 	addi	r2,r21,-1
  8084c0:	a8ffffc5 	stb	r3,-1(r21)
  8084c4:	50a7c83a 	sub	r19,r10,r2
  8084c8:	102b883a 	mov	r21,r2
  8084cc:	003f2f06 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  8084d0:	21003fcc 	andi	r4,r4,255
  8084d4:	2003421e 	bne	r4,zero,8091e0 <___vfiprintf_internal_r+0x1454>
  8084d8:	00802074 	movhi	r2,129
  8084dc:	108fe804 	addi	r2,r2,16288
  8084e0:	d8802615 	stw	r2,152(sp)
  8084e4:	a080080c 	andi	r2,r20,32
  8084e8:	1000aa26 	beq	r2,zero,808794 <___vfiprintf_internal_r+0xa08>
  8084ec:	da802217 	ldw	r10,136(sp)
  8084f0:	54800017 	ldw	r18,0(r10)
  8084f4:	54c00117 	ldw	r19,4(r10)
  8084f8:	52800204 	addi	r10,r10,8
  8084fc:	da802215 	stw	r10,136(sp)
  808500:	a080004c 	andi	r2,r20,1
  808504:	1001d226 	beq	r2,zero,808c50 <___vfiprintf_internal_r+0xec4>
  808508:	94c4b03a 	or	r2,r18,r19
  80850c:	1002351e 	bne	r2,zero,808de4 <___vfiprintf_internal_r+0x1058>
  808510:	d8001d85 	stb	zero,118(sp)
  808514:	48022216 	blt	r9,zero,808da0 <___vfiprintf_internal_r+0x1014>
  808518:	00bfdfc4 	movi	r2,-129
  80851c:	a0a8703a 	and	r20,r20,r2
  808520:	003f1506 	br	808178 <__alt_mem_descriptor_memory+0xff788178>
  808524:	da802217 	ldw	r10,136(sp)
  808528:	04800044 	movi	r18,1
  80852c:	d8001d85 	stb	zero,118(sp)
  808530:	50800017 	ldw	r2,0(r10)
  808534:	52800104 	addi	r10,r10,4
  808538:	da802215 	stw	r10,136(sp)
  80853c:	d8801005 	stb	r2,64(sp)
  808540:	9027883a 	mov	r19,r18
  808544:	dd401004 	addi	r21,sp,64
  808548:	0013883a 	mov	r9,zero
  80854c:	003f1706 	br	8081ac <__alt_mem_descriptor_memory+0xff7881ac>
  808550:	21003fcc 	andi	r4,r4,255
  808554:	2003201e 	bne	r4,zero,8091d8 <___vfiprintf_internal_r+0x144c>
  808558:	a080080c 	andi	r2,r20,32
  80855c:	10004b26 	beq	r2,zero,80868c <___vfiprintf_internal_r+0x900>
  808560:	da802217 	ldw	r10,136(sp)
  808564:	50800117 	ldw	r2,4(r10)
  808568:	54800017 	ldw	r18,0(r10)
  80856c:	52800204 	addi	r10,r10,8
  808570:	da802215 	stw	r10,136(sp)
  808574:	1027883a 	mov	r19,r2
  808578:	10022c16 	blt	r2,zero,808e2c <___vfiprintf_internal_r+0x10a0>
  80857c:	df001d83 	ldbu	fp,118(sp)
  808580:	48007216 	blt	r9,zero,80874c <___vfiprintf_internal_r+0x9c0>
  808584:	00ffdfc4 	movi	r3,-129
  808588:	94c4b03a 	or	r2,r18,r19
  80858c:	a0e8703a 	and	r20,r20,r3
  808590:	1000cc26 	beq	r2,zero,8088c4 <___vfiprintf_internal_r+0xb38>
  808594:	98021026 	beq	r19,zero,808dd8 <___vfiprintf_internal_r+0x104c>
  808598:	dc402415 	stw	r17,144(sp)
  80859c:	dc002515 	stw	r16,148(sp)
  8085a0:	9823883a 	mov	r17,r19
  8085a4:	9021883a 	mov	r16,r18
  8085a8:	dd401a04 	addi	r21,sp,104
  8085ac:	4825883a 	mov	r18,r9
  8085b0:	4027883a 	mov	r19,r8
  8085b4:	8009883a 	mov	r4,r16
  8085b8:	880b883a 	mov	r5,r17
  8085bc:	01800284 	movi	r6,10
  8085c0:	000f883a 	mov	r7,zero
  8085c4:	080ace80 	call	80ace8 <__umoddi3>
  8085c8:	10800c04 	addi	r2,r2,48
  8085cc:	ad7fffc4 	addi	r21,r21,-1
  8085d0:	8009883a 	mov	r4,r16
  8085d4:	880b883a 	mov	r5,r17
  8085d8:	a8800005 	stb	r2,0(r21)
  8085dc:	01800284 	movi	r6,10
  8085e0:	000f883a 	mov	r7,zero
  8085e4:	080a7700 	call	80a770 <__udivdi3>
  8085e8:	1021883a 	mov	r16,r2
  8085ec:	10c4b03a 	or	r2,r2,r3
  8085f0:	1823883a 	mov	r17,r3
  8085f4:	103fef1e 	bne	r2,zero,8085b4 <__alt_mem_descriptor_memory+0xff7885b4>
  8085f8:	dc402417 	ldw	r17,144(sp)
  8085fc:	dc002517 	ldw	r16,148(sp)
  808600:	9013883a 	mov	r9,r18
  808604:	9811883a 	mov	r8,r19
  808608:	da801e17 	ldw	r10,120(sp)
  80860c:	5567c83a 	sub	r19,r10,r21
  808610:	003ede06 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  808614:	38803fcc 	andi	r2,r7,255
  808618:	1080201c 	xori	r2,r2,128
  80861c:	10bfe004 	addi	r2,r2,-128
  808620:	1002371e 	bne	r2,zero,808f00 <___vfiprintf_internal_r+0x1174>
  808624:	01000044 	movi	r4,1
  808628:	01c00804 	movi	r7,32
  80862c:	80c00007 	ldb	r3,0(r16)
  808630:	003e3506 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  808634:	a5000054 	ori	r20,r20,1
  808638:	80c00007 	ldb	r3,0(r16)
  80863c:	003e3206 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  808640:	a5002014 	ori	r20,r20,128
  808644:	80c00007 	ldb	r3,0(r16)
  808648:	003e2f06 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  80864c:	8015883a 	mov	r10,r16
  808650:	0023883a 	mov	r17,zero
  808654:	18bff404 	addi	r2,r3,-48
  808658:	50c00007 	ldb	r3,0(r10)
  80865c:	8c4002a4 	muli	r17,r17,10
  808660:	84000044 	addi	r16,r16,1
  808664:	8015883a 	mov	r10,r16
  808668:	1463883a 	add	r17,r2,r17
  80866c:	18bff404 	addi	r2,r3,-48
  808670:	30bff92e 	bgeu	r6,r2,808658 <__alt_mem_descriptor_memory+0xff788658>
  808674:	003e2506 	br	807f0c <__alt_mem_descriptor_memory+0xff787f0c>
  808678:	21003fcc 	andi	r4,r4,255
  80867c:	2002d41e 	bne	r4,zero,8091d0 <___vfiprintf_internal_r+0x1444>
  808680:	a5000414 	ori	r20,r20,16
  808684:	a080080c 	andi	r2,r20,32
  808688:	103fb51e 	bne	r2,zero,808560 <__alt_mem_descriptor_memory+0xff788560>
  80868c:	a080040c 	andi	r2,r20,16
  808690:	1001f826 	beq	r2,zero,808e74 <___vfiprintf_internal_r+0x10e8>
  808694:	da802217 	ldw	r10,136(sp)
  808698:	54800017 	ldw	r18,0(r10)
  80869c:	52800104 	addi	r10,r10,4
  8086a0:	da802215 	stw	r10,136(sp)
  8086a4:	9027d7fa 	srai	r19,r18,31
  8086a8:	9805883a 	mov	r2,r19
  8086ac:	003fb206 	br	808578 <__alt_mem_descriptor_memory+0xff788578>
  8086b0:	21003fcc 	andi	r4,r4,255
  8086b4:	2002c41e 	bne	r4,zero,8091c8 <___vfiprintf_internal_r+0x143c>
  8086b8:	a5000414 	ori	r20,r20,16
  8086bc:	a080080c 	andi	r2,r20,32
  8086c0:	103f5f1e 	bne	r2,zero,808440 <__alt_mem_descriptor_memory+0xff788440>
  8086c4:	a080040c 	andi	r2,r20,16
  8086c8:	10020f26 	beq	r2,zero,808f08 <___vfiprintf_internal_r+0x117c>
  8086cc:	da802217 	ldw	r10,136(sp)
  8086d0:	d8001d85 	stb	zero,118(sp)
  8086d4:	0027883a 	mov	r19,zero
  8086d8:	50800104 	addi	r2,r10,4
  8086dc:	54800017 	ldw	r18,0(r10)
  8086e0:	48021116 	blt	r9,zero,808f28 <___vfiprintf_internal_r+0x119c>
  8086e4:	00ffdfc4 	movi	r3,-129
  8086e8:	d8802215 	stw	r2,136(sp)
  8086ec:	a0e8703a 	and	r20,r20,r3
  8086f0:	903f5e1e 	bne	r18,zero,80846c <__alt_mem_descriptor_memory+0xff78846c>
  8086f4:	0039883a 	mov	fp,zero
  8086f8:	4802a626 	beq	r9,zero,809194 <___vfiprintf_internal_r+0x1408>
  8086fc:	0025883a 	mov	r18,zero
  808700:	0027883a 	mov	r19,zero
  808704:	003f5a06 	br	808470 <__alt_mem_descriptor_memory+0xff788470>
  808708:	21003fcc 	andi	r4,r4,255
  80870c:	20029f1e 	bne	r4,zero,80918c <___vfiprintf_internal_r+0x1400>
  808710:	a5000414 	ori	r20,r20,16
  808714:	a080080c 	andi	r2,r20,32
  808718:	10005e1e 	bne	r2,zero,808894 <___vfiprintf_internal_r+0xb08>
  80871c:	a080040c 	andi	r2,r20,16
  808720:	1001a21e 	bne	r2,zero,808dac <___vfiprintf_internal_r+0x1020>
  808724:	a080100c 	andi	r2,r20,64
  808728:	d8001d85 	stb	zero,118(sp)
  80872c:	da802217 	ldw	r10,136(sp)
  808730:	1002231e 	bne	r2,zero,808fc0 <___vfiprintf_internal_r+0x1234>
  808734:	50800104 	addi	r2,r10,4
  808738:	54800017 	ldw	r18,0(r10)
  80873c:	0027883a 	mov	r19,zero
  808740:	4801a00e 	bge	r9,zero,808dc4 <___vfiprintf_internal_r+0x1038>
  808744:	d8802215 	stw	r2,136(sp)
  808748:	0039883a 	mov	fp,zero
  80874c:	94c4b03a 	or	r2,r18,r19
  808750:	103f901e 	bne	r2,zero,808594 <__alt_mem_descriptor_memory+0xff788594>
  808754:	00800044 	movi	r2,1
  808758:	10803fcc 	andi	r2,r2,255
  80875c:	00c00044 	movi	r3,1
  808760:	10c05926 	beq	r2,r3,8088c8 <___vfiprintf_internal_r+0xb3c>
  808764:	00c00084 	movi	r3,2
  808768:	10ffe41e 	bne	r2,r3,8086fc <__alt_mem_descriptor_memory+0xff7886fc>
  80876c:	0025883a 	mov	r18,zero
  808770:	0027883a 	mov	r19,zero
  808774:	00013d06 	br	808c6c <___vfiprintf_internal_r+0xee0>
  808778:	21003fcc 	andi	r4,r4,255
  80877c:	2002811e 	bne	r4,zero,809184 <___vfiprintf_internal_r+0x13f8>
  808780:	00802074 	movhi	r2,129
  808784:	108fe304 	addi	r2,r2,16268
  808788:	d8802615 	stw	r2,152(sp)
  80878c:	a080080c 	andi	r2,r20,32
  808790:	103f561e 	bne	r2,zero,8084ec <__alt_mem_descriptor_memory+0xff7884ec>
  808794:	a080040c 	andi	r2,r20,16
  808798:	1001d126 	beq	r2,zero,808ee0 <___vfiprintf_internal_r+0x1154>
  80879c:	da802217 	ldw	r10,136(sp)
  8087a0:	0027883a 	mov	r19,zero
  8087a4:	54800017 	ldw	r18,0(r10)
  8087a8:	52800104 	addi	r10,r10,4
  8087ac:	da802215 	stw	r10,136(sp)
  8087b0:	003f5306 	br	808500 <__alt_mem_descriptor_memory+0xff788500>
  8087b4:	da802217 	ldw	r10,136(sp)
  8087b8:	d8001d85 	stb	zero,118(sp)
  8087bc:	55400017 	ldw	r21,0(r10)
  8087c0:	50c00104 	addi	r3,r10,4
  8087c4:	a8024226 	beq	r21,zero,8090d0 <___vfiprintf_internal_r+0x1344>
  8087c8:	48021816 	blt	r9,zero,80902c <___vfiprintf_internal_r+0x12a0>
  8087cc:	480d883a 	mov	r6,r9
  8087d0:	000b883a 	mov	r5,zero
  8087d4:	a809883a 	mov	r4,r21
  8087d8:	d8c02a15 	stw	r3,168(sp)
  8087dc:	da002b15 	stw	r8,172(sp)
  8087e0:	da402c15 	stw	r9,176(sp)
  8087e4:	08066d80 	call	8066d8 <memchr>
  8087e8:	d8c02a17 	ldw	r3,168(sp)
  8087ec:	da002b17 	ldw	r8,172(sp)
  8087f0:	da402c17 	ldw	r9,176(sp)
  8087f4:	10024826 	beq	r2,zero,809118 <___vfiprintf_internal_r+0x138c>
  8087f8:	1567c83a 	sub	r19,r2,r21
  8087fc:	df001d83 	ldbu	fp,118(sp)
  808800:	d8c02215 	stw	r3,136(sp)
  808804:	0013883a 	mov	r9,zero
  808808:	003e6006 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  80880c:	21003fcc 	andi	r4,r4,255
  808810:	203fc026 	beq	r4,zero,808714 <__alt_mem_descriptor_memory+0xff788714>
  808814:	d9c01d85 	stb	r7,118(sp)
  808818:	003fbe06 	br	808714 <__alt_mem_descriptor_memory+0xff788714>
  80881c:	da802217 	ldw	r10,136(sp)
  808820:	54400017 	ldw	r17,0(r10)
  808824:	50800104 	addi	r2,r10,4
  808828:	883e3b16 	blt	r17,zero,808118 <__alt_mem_descriptor_memory+0xff788118>
  80882c:	d8802215 	stw	r2,136(sp)
  808830:	80c00007 	ldb	r3,0(r16)
  808834:	003db406 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  808838:	01000044 	movi	r4,1
  80883c:	01c00ac4 	movi	r7,43
  808840:	80c00007 	ldb	r3,0(r16)
  808844:	003db006 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  808848:	80c00007 	ldb	r3,0(r16)
  80884c:	82800044 	addi	r10,r16,1
  808850:	1b423c26 	beq	r3,r13,809144 <___vfiprintf_internal_r+0x13b8>
  808854:	18bff404 	addi	r2,r3,-48
  808858:	0013883a 	mov	r9,zero
  80885c:	30822b36 	bltu	r6,r2,80910c <___vfiprintf_internal_r+0x1380>
  808860:	50c00007 	ldb	r3,0(r10)
  808864:	4a4002a4 	muli	r9,r9,10
  808868:	54000044 	addi	r16,r10,1
  80886c:	8015883a 	mov	r10,r16
  808870:	4893883a 	add	r9,r9,r2
  808874:	18bff404 	addi	r2,r3,-48
  808878:	30bff92e 	bgeu	r6,r2,808860 <__alt_mem_descriptor_memory+0xff788860>
  80887c:	483da30e 	bge	r9,zero,807f0c <__alt_mem_descriptor_memory+0xff787f0c>
  808880:	027fffc4 	movi	r9,-1
  808884:	003da106 	br	807f0c <__alt_mem_descriptor_memory+0xff787f0c>
  808888:	a5001014 	ori	r20,r20,64
  80888c:	80c00007 	ldb	r3,0(r16)
  808890:	003d9d06 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  808894:	da802217 	ldw	r10,136(sp)
  808898:	d8001d85 	stb	zero,118(sp)
  80889c:	50c00204 	addi	r3,r10,8
  8088a0:	54800017 	ldw	r18,0(r10)
  8088a4:	54c00117 	ldw	r19,4(r10)
  8088a8:	4801ca16 	blt	r9,zero,808fd4 <___vfiprintf_internal_r+0x1248>
  8088ac:	013fdfc4 	movi	r4,-129
  8088b0:	94c4b03a 	or	r2,r18,r19
  8088b4:	d8c02215 	stw	r3,136(sp)
  8088b8:	a128703a 	and	r20,r20,r4
  8088bc:	0039883a 	mov	fp,zero
  8088c0:	103f341e 	bne	r2,zero,808594 <__alt_mem_descriptor_memory+0xff788594>
  8088c4:	483e2e26 	beq	r9,zero,808180 <__alt_mem_descriptor_memory+0xff788180>
  8088c8:	0025883a 	mov	r18,zero
  8088cc:	94800c04 	addi	r18,r18,48
  8088d0:	dc8019c5 	stb	r18,103(sp)
  8088d4:	dcc02717 	ldw	r19,156(sp)
  8088d8:	dd4019c4 	addi	r21,sp,103
  8088dc:	003e2b06 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  8088e0:	21003fcc 	andi	r4,r4,255
  8088e4:	2002361e 	bne	r4,zero,8091c0 <___vfiprintf_internal_r+0x1434>
  8088e8:	1801c126 	beq	r3,zero,808ff0 <___vfiprintf_internal_r+0x1264>
  8088ec:	04800044 	movi	r18,1
  8088f0:	d8c01005 	stb	r3,64(sp)
  8088f4:	d8001d85 	stb	zero,118(sp)
  8088f8:	9027883a 	mov	r19,r18
  8088fc:	dd401004 	addi	r21,sp,64
  808900:	003f1106 	br	808548 <__alt_mem_descriptor_memory+0xff788548>
  808904:	d9402117 	ldw	r5,132(sp)
  808908:	d9002017 	ldw	r4,128(sp)
  80890c:	d9801a04 	addi	r6,sp,104
  808910:	d9c02b15 	stw	r7,172(sp)
  808914:	dbc02a15 	stw	r15,168(sp)
  808918:	0807c780 	call	807c78 <__sprint_r.part.0>
  80891c:	d9c02b17 	ldw	r7,172(sp)
  808920:	dbc02a17 	ldw	r15,168(sp)
  808924:	10006d1e 	bne	r2,zero,808adc <___vfiprintf_internal_r+0xd50>
  808928:	d9801b17 	ldw	r6,108(sp)
  80892c:	d8801c17 	ldw	r2,112(sp)
  808930:	d811883a 	mov	r8,sp
  808934:	31400044 	addi	r5,r6,1
  808938:	003e3306 	br	808208 <__alt_mem_descriptor_memory+0xff788208>
  80893c:	d9401b17 	ldw	r5,108(sp)
  808940:	d8801c17 	ldw	r2,112(sp)
  808944:	29000044 	addi	r4,r5,1
  808948:	d8c01d87 	ldb	r3,118(sp)
  80894c:	183e4d26 	beq	r3,zero,808284 <__alt_mem_descriptor_memory+0xff788284>
  808950:	00c00044 	movi	r3,1
  808954:	d9401d84 	addi	r5,sp,118
  808958:	10c5883a 	add	r2,r2,r3
  80895c:	41400015 	stw	r5,0(r8)
  808960:	40c00115 	stw	r3,4(r8)
  808964:	d8801c15 	stw	r2,112(sp)
  808968:	d9001b15 	stw	r4,108(sp)
  80896c:	014001c4 	movi	r5,7
  808970:	2900a90e 	bge	r5,r4,808c18 <___vfiprintf_internal_r+0xe8c>
  808974:	1000da1e 	bne	r2,zero,808ce0 <___vfiprintf_internal_r+0xf54>
  808978:	7000ab1e 	bne	r14,zero,808c28 <___vfiprintf_internal_r+0xe9c>
  80897c:	000b883a 	mov	r5,zero
  808980:	1809883a 	mov	r4,r3
  808984:	d811883a 	mov	r8,sp
  808988:	00c02004 	movi	r3,128
  80898c:	e0fe4d26 	beq	fp,r3,8082c4 <__alt_mem_descriptor_memory+0xff7882c4>
  808990:	4cf9c83a 	sub	fp,r9,r19
  808994:	073e7b0e 	bge	zero,fp,808384 <__alt_mem_descriptor_memory+0xff788384>
  808998:	01c00404 	movi	r7,16
  80899c:	3f01900e 	bge	r7,fp,808fe0 <___vfiprintf_internal_r+0x1254>
  8089a0:	00c02074 	movhi	r3,129
  8089a4:	18d04904 	addi	r3,r3,16676
  8089a8:	d8c02415 	stw	r3,144(sp)
  8089ac:	034001c4 	movi	r13,7
  8089b0:	00000506 	br	8089c8 <___vfiprintf_internal_r+0xc3c>
  8089b4:	29000084 	addi	r4,r5,2
  8089b8:	42000204 	addi	r8,r8,8
  8089bc:	180b883a 	mov	r5,r3
  8089c0:	e73ffc04 	addi	fp,fp,-16
  8089c4:	3f000d0e 	bge	r7,fp,8089fc <___vfiprintf_internal_r+0xc70>
  8089c8:	10800404 	addi	r2,r2,16
  8089cc:	28c00044 	addi	r3,r5,1
  8089d0:	45c00015 	stw	r23,0(r8)
  8089d4:	41c00115 	stw	r7,4(r8)
  8089d8:	d8801c15 	stw	r2,112(sp)
  8089dc:	d8c01b15 	stw	r3,108(sp)
  8089e0:	68fff40e 	bge	r13,r3,8089b4 <__alt_mem_descriptor_memory+0xff7889b4>
  8089e4:	1000101e 	bne	r2,zero,808a28 <___vfiprintf_internal_r+0xc9c>
  8089e8:	e73ffc04 	addi	fp,fp,-16
  8089ec:	01000044 	movi	r4,1
  8089f0:	000b883a 	mov	r5,zero
  8089f4:	d811883a 	mov	r8,sp
  8089f8:	3f3ff316 	blt	r7,fp,8089c8 <__alt_mem_descriptor_memory+0xff7889c8>
  8089fc:	da802417 	ldw	r10,144(sp)
  808a00:	1705883a 	add	r2,r2,fp
  808a04:	47000115 	stw	fp,4(r8)
  808a08:	42800015 	stw	r10,0(r8)
  808a0c:	d8801c15 	stw	r2,112(sp)
  808a10:	d9001b15 	stw	r4,108(sp)
  808a14:	00c001c4 	movi	r3,7
  808a18:	19003616 	blt	r3,r4,808af4 <___vfiprintf_internal_r+0xd68>
  808a1c:	42000204 	addi	r8,r8,8
  808a20:	21000044 	addi	r4,r4,1
  808a24:	003e5706 	br	808384 <__alt_mem_descriptor_memory+0xff788384>
  808a28:	d9402117 	ldw	r5,132(sp)
  808a2c:	d9002017 	ldw	r4,128(sp)
  808a30:	d9801a04 	addi	r6,sp,104
  808a34:	d9c02b15 	stw	r7,172(sp)
  808a38:	db402a15 	stw	r13,168(sp)
  808a3c:	0807c780 	call	807c78 <__sprint_r.part.0>
  808a40:	d9c02b17 	ldw	r7,172(sp)
  808a44:	db402a17 	ldw	r13,168(sp)
  808a48:	1000241e 	bne	r2,zero,808adc <___vfiprintf_internal_r+0xd50>
  808a4c:	d9401b17 	ldw	r5,108(sp)
  808a50:	d8801c17 	ldw	r2,112(sp)
  808a54:	d811883a 	mov	r8,sp
  808a58:	29000044 	addi	r4,r5,1
  808a5c:	003fd806 	br	8089c0 <__alt_mem_descriptor_memory+0xff7889c0>
  808a60:	d9401b17 	ldw	r5,108(sp)
  808a64:	00c02074 	movhi	r3,129
  808a68:	18d04d04 	addi	r3,r3,16692
  808a6c:	d8c02415 	stw	r3,144(sp)
  808a70:	29400044 	addi	r5,r5,1
  808a74:	d8c02417 	ldw	r3,144(sp)
  808a78:	14c5883a 	add	r2,r2,r19
  808a7c:	44c00115 	stw	r19,4(r8)
  808a80:	40c00015 	stw	r3,0(r8)
  808a84:	d8801c15 	stw	r2,112(sp)
  808a88:	d9401b15 	stw	r5,108(sp)
  808a8c:	00c001c4 	movi	r3,7
  808a90:	1940070e 	bge	r3,r5,808ab0 <___vfiprintf_internal_r+0xd24>
  808a94:	103e4826 	beq	r2,zero,8083b8 <__alt_mem_descriptor_memory+0xff7883b8>
  808a98:	d9402117 	ldw	r5,132(sp)
  808a9c:	d9002017 	ldw	r4,128(sp)
  808aa0:	d9801a04 	addi	r6,sp,104
  808aa4:	0807c780 	call	807c78 <__sprint_r.part.0>
  808aa8:	10000c1e 	bne	r2,zero,808adc <___vfiprintf_internal_r+0xd50>
  808aac:	d8801c17 	ldw	r2,112(sp)
  808ab0:	8c80010e 	bge	r17,r18,808ab8 <___vfiprintf_internal_r+0xd2c>
  808ab4:	9023883a 	mov	r17,r18
  808ab8:	da802317 	ldw	r10,140(sp)
  808abc:	5455883a 	add	r10,r10,r17
  808ac0:	da802315 	stw	r10,140(sp)
  808ac4:	103e4126 	beq	r2,zero,8083cc <__alt_mem_descriptor_memory+0xff7883cc>
  808ac8:	d9402117 	ldw	r5,132(sp)
  808acc:	d9002017 	ldw	r4,128(sp)
  808ad0:	d9801a04 	addi	r6,sp,104
  808ad4:	0807c780 	call	807c78 <__sprint_r.part.0>
  808ad8:	103e3c26 	beq	r2,zero,8083cc <__alt_mem_descriptor_memory+0xff7883cc>
  808adc:	dd002117 	ldw	r20,132(sp)
  808ae0:	a080030b 	ldhu	r2,12(r20)
  808ae4:	1080100c 	andi	r2,r2,64
  808ae8:	1001231e 	bne	r2,zero,808f78 <___vfiprintf_internal_r+0x11ec>
  808aec:	d8802317 	ldw	r2,140(sp)
  808af0:	003d7b06 	br	8080e0 <__alt_mem_descriptor_memory+0xff7880e0>
  808af4:	1000991e 	bne	r2,zero,808d5c <___vfiprintf_internal_r+0xfd0>
  808af8:	00c00044 	movi	r3,1
  808afc:	9805883a 	mov	r2,r19
  808b00:	dd400015 	stw	r21,0(sp)
  808b04:	dcc00115 	stw	r19,4(sp)
  808b08:	dcc01c15 	stw	r19,112(sp)
  808b0c:	d8c01b15 	stw	r3,108(sp)
  808b10:	d811883a 	mov	r8,sp
  808b14:	42000204 	addi	r8,r8,8
  808b18:	a2c0010c 	andi	r11,r20,4
  808b1c:	583fe426 	beq	r11,zero,808ab0 <__alt_mem_descriptor_memory+0xff788ab0>
  808b20:	8ca7c83a 	sub	r19,r17,r18
  808b24:	04ffe20e 	bge	zero,r19,808ab0 <__alt_mem_descriptor_memory+0xff788ab0>
  808b28:	01c00404 	movi	r7,16
  808b2c:	3cffcc0e 	bge	r7,r19,808a60 <__alt_mem_descriptor_memory+0xff788a60>
  808b30:	02802074 	movhi	r10,129
  808b34:	52904d04 	addi	r10,r10,16692
  808b38:	d9001b17 	ldw	r4,108(sp)
  808b3c:	da802415 	stw	r10,144(sp)
  808b40:	382b883a 	mov	r21,r7
  808b44:	050001c4 	movi	r20,7
  808b48:	df002017 	ldw	fp,128(sp)
  808b4c:	00000506 	br	808b64 <___vfiprintf_internal_r+0xdd8>
  808b50:	21400084 	addi	r5,r4,2
  808b54:	42000204 	addi	r8,r8,8
  808b58:	1809883a 	mov	r4,r3
  808b5c:	9cfffc04 	addi	r19,r19,-16
  808b60:	acffc40e 	bge	r21,r19,808a74 <__alt_mem_descriptor_memory+0xff788a74>
  808b64:	10800404 	addi	r2,r2,16
  808b68:	20c00044 	addi	r3,r4,1
  808b6c:	45800015 	stw	r22,0(r8)
  808b70:	45400115 	stw	r21,4(r8)
  808b74:	d8801c15 	stw	r2,112(sp)
  808b78:	d8c01b15 	stw	r3,108(sp)
  808b7c:	a0fff40e 	bge	r20,r3,808b50 <__alt_mem_descriptor_memory+0xff788b50>
  808b80:	1000041e 	bne	r2,zero,808b94 <___vfiprintf_internal_r+0xe08>
  808b84:	01400044 	movi	r5,1
  808b88:	0009883a 	mov	r4,zero
  808b8c:	d811883a 	mov	r8,sp
  808b90:	003ff206 	br	808b5c <__alt_mem_descriptor_memory+0xff788b5c>
  808b94:	d9402117 	ldw	r5,132(sp)
  808b98:	d9801a04 	addi	r6,sp,104
  808b9c:	e009883a 	mov	r4,fp
  808ba0:	0807c780 	call	807c78 <__sprint_r.part.0>
  808ba4:	103fcd1e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808ba8:	d9001b17 	ldw	r4,108(sp)
  808bac:	d8801c17 	ldw	r2,112(sp)
  808bb0:	d811883a 	mov	r8,sp
  808bb4:	21400044 	addi	r5,r4,1
  808bb8:	003fe806 	br	808b5c <__alt_mem_descriptor_memory+0xff788b5c>
  808bbc:	d9402117 	ldw	r5,132(sp)
  808bc0:	d9002017 	ldw	r4,128(sp)
  808bc4:	d9801a04 	addi	r6,sp,104
  808bc8:	d9c02b15 	stw	r7,172(sp)
  808bcc:	db402a15 	stw	r13,168(sp)
  808bd0:	0807c780 	call	807c78 <__sprint_r.part.0>
  808bd4:	d9c02b17 	ldw	r7,172(sp)
  808bd8:	db402a17 	ldw	r13,168(sp)
  808bdc:	103fbf1e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808be0:	d9401b17 	ldw	r5,108(sp)
  808be4:	d8801c17 	ldw	r2,112(sp)
  808be8:	d811883a 	mov	r8,sp
  808bec:	29800044 	addi	r6,r5,1
  808bf0:	003dc406 	br	808304 <__alt_mem_descriptor_memory+0xff788304>
  808bf4:	1000d21e 	bne	r2,zero,808f40 <___vfiprintf_internal_r+0x11b4>
  808bf8:	d8c01d87 	ldb	r3,118(sp)
  808bfc:	18009526 	beq	r3,zero,808e54 <___vfiprintf_internal_r+0x10c8>
  808c00:	00800044 	movi	r2,1
  808c04:	d8c01d84 	addi	r3,sp,118
  808c08:	1009883a 	mov	r4,r2
  808c0c:	d8c00015 	stw	r3,0(sp)
  808c10:	d8800115 	stw	r2,4(sp)
  808c14:	d811883a 	mov	r8,sp
  808c18:	200b883a 	mov	r5,r4
  808c1c:	42000204 	addi	r8,r8,8
  808c20:	21000044 	addi	r4,r4,1
  808c24:	003d9706 	br	808284 <__alt_mem_descriptor_memory+0xff788284>
  808c28:	d9001d04 	addi	r4,sp,116
  808c2c:	00800084 	movi	r2,2
  808c30:	d9000015 	stw	r4,0(sp)
  808c34:	d8800115 	stw	r2,4(sp)
  808c38:	1809883a 	mov	r4,r3
  808c3c:	d811883a 	mov	r8,sp
  808c40:	200b883a 	mov	r5,r4
  808c44:	42000204 	addi	r8,r8,8
  808c48:	21000044 	addi	r4,r4,1
  808c4c:	003f4e06 	br	808988 <__alt_mem_descriptor_memory+0xff788988>
  808c50:	d8001d85 	stb	zero,118(sp)
  808c54:	48005016 	blt	r9,zero,808d98 <___vfiprintf_internal_r+0x100c>
  808c58:	00ffdfc4 	movi	r3,-129
  808c5c:	94c4b03a 	or	r2,r18,r19
  808c60:	a0e8703a 	and	r20,r20,r3
  808c64:	103d4426 	beq	r2,zero,808178 <__alt_mem_descriptor_memory+0xff788178>
  808c68:	0039883a 	mov	fp,zero
  808c6c:	d9002617 	ldw	r4,152(sp)
  808c70:	dd401a04 	addi	r21,sp,104
  808c74:	908003cc 	andi	r2,r18,15
  808c78:	9806973a 	slli	r3,r19,28
  808c7c:	2085883a 	add	r2,r4,r2
  808c80:	9024d13a 	srli	r18,r18,4
  808c84:	10800003 	ldbu	r2,0(r2)
  808c88:	9826d13a 	srli	r19,r19,4
  808c8c:	ad7fffc4 	addi	r21,r21,-1
  808c90:	1ca4b03a 	or	r18,r3,r18
  808c94:	a8800005 	stb	r2,0(r21)
  808c98:	94c4b03a 	or	r2,r18,r19
  808c9c:	103ff51e 	bne	r2,zero,808c74 <__alt_mem_descriptor_memory+0xff788c74>
  808ca0:	003e5906 	br	808608 <__alt_mem_descriptor_memory+0xff788608>
  808ca4:	d9402117 	ldw	r5,132(sp)
  808ca8:	d9002017 	ldw	r4,128(sp)
  808cac:	d9801a04 	addi	r6,sp,104
  808cb0:	0807c780 	call	807c78 <__sprint_r.part.0>
  808cb4:	103f891e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808cb8:	d8801c17 	ldw	r2,112(sp)
  808cbc:	d811883a 	mov	r8,sp
  808cc0:	003f9506 	br	808b18 <__alt_mem_descriptor_memory+0xff788b18>
  808cc4:	d9402117 	ldw	r5,132(sp)
  808cc8:	d9002017 	ldw	r4,128(sp)
  808ccc:	d9801a04 	addi	r6,sp,104
  808cd0:	0807c780 	call	807c78 <__sprint_r.part.0>
  808cd4:	103f811e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808cd8:	d811883a 	mov	r8,sp
  808cdc:	003ced06 	br	808094 <__alt_mem_descriptor_memory+0xff788094>
  808ce0:	d9402117 	ldw	r5,132(sp)
  808ce4:	d9002017 	ldw	r4,128(sp)
  808ce8:	d9801a04 	addi	r6,sp,104
  808cec:	da402c15 	stw	r9,176(sp)
  808cf0:	db802a15 	stw	r14,168(sp)
  808cf4:	0807c780 	call	807c78 <__sprint_r.part.0>
  808cf8:	da402c17 	ldw	r9,176(sp)
  808cfc:	db802a17 	ldw	r14,168(sp)
  808d00:	103f761e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808d04:	d9401b17 	ldw	r5,108(sp)
  808d08:	d8801c17 	ldw	r2,112(sp)
  808d0c:	d811883a 	mov	r8,sp
  808d10:	29000044 	addi	r4,r5,1
  808d14:	003d5b06 	br	808284 <__alt_mem_descriptor_memory+0xff788284>
  808d18:	d9402117 	ldw	r5,132(sp)
  808d1c:	d9002017 	ldw	r4,128(sp)
  808d20:	d9801a04 	addi	r6,sp,104
  808d24:	da402c15 	stw	r9,176(sp)
  808d28:	0807c780 	call	807c78 <__sprint_r.part.0>
  808d2c:	da402c17 	ldw	r9,176(sp)
  808d30:	103f6a1e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808d34:	d9401b17 	ldw	r5,108(sp)
  808d38:	d8801c17 	ldw	r2,112(sp)
  808d3c:	d811883a 	mov	r8,sp
  808d40:	29000044 	addi	r4,r5,1
  808d44:	003f1006 	br	808988 <__alt_mem_descriptor_memory+0xff788988>
  808d48:	1000c31e 	bne	r2,zero,809058 <___vfiprintf_internal_r+0x12cc>
  808d4c:	01000044 	movi	r4,1
  808d50:	000b883a 	mov	r5,zero
  808d54:	d811883a 	mov	r8,sp
  808d58:	003f0d06 	br	808990 <__alt_mem_descriptor_memory+0xff788990>
  808d5c:	d9402117 	ldw	r5,132(sp)
  808d60:	d9002017 	ldw	r4,128(sp)
  808d64:	d9801a04 	addi	r6,sp,104
  808d68:	0807c780 	call	807c78 <__sprint_r.part.0>
  808d6c:	103f5b1e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808d70:	d9001b17 	ldw	r4,108(sp)
  808d74:	d8801c17 	ldw	r2,112(sp)
  808d78:	d811883a 	mov	r8,sp
  808d7c:	21000044 	addi	r4,r4,1
  808d80:	003d8006 	br	808384 <__alt_mem_descriptor_memory+0xff788384>
  808d84:	01002074 	movhi	r4,129
  808d88:	210fe804 	addi	r4,r4,16288
  808d8c:	d9002615 	stw	r4,152(sp)
  808d90:	d8c02215 	stw	r3,136(sp)
  808d94:	1029883a 	mov	r20,r2
  808d98:	94c4b03a 	or	r2,r18,r19
  808d9c:	103fb21e 	bne	r2,zero,808c68 <__alt_mem_descriptor_memory+0xff788c68>
  808da0:	0039883a 	mov	fp,zero
  808da4:	00800084 	movi	r2,2
  808da8:	003e6b06 	br	808758 <__alt_mem_descriptor_memory+0xff788758>
  808dac:	da802217 	ldw	r10,136(sp)
  808db0:	d8001d85 	stb	zero,118(sp)
  808db4:	0027883a 	mov	r19,zero
  808db8:	50800104 	addi	r2,r10,4
  808dbc:	54800017 	ldw	r18,0(r10)
  808dc0:	483e6016 	blt	r9,zero,808744 <__alt_mem_descriptor_memory+0xff788744>
  808dc4:	00ffdfc4 	movi	r3,-129
  808dc8:	d8802215 	stw	r2,136(sp)
  808dcc:	a0e8703a 	and	r20,r20,r3
  808dd0:	0039883a 	mov	fp,zero
  808dd4:	903ebb26 	beq	r18,zero,8088c4 <__alt_mem_descriptor_memory+0xff7888c4>
  808dd8:	00800244 	movi	r2,9
  808ddc:	14bdee36 	bltu	r2,r18,808598 <__alt_mem_descriptor_memory+0xff788598>
  808de0:	003eba06 	br	8088cc <__alt_mem_descriptor_memory+0xff7888cc>
  808de4:	00800c04 	movi	r2,48
  808de8:	d8c01d45 	stb	r3,117(sp)
  808dec:	d8801d05 	stb	r2,116(sp)
  808df0:	d8001d85 	stb	zero,118(sp)
  808df4:	a0c00094 	ori	r3,r20,2
  808df8:	4800a916 	blt	r9,zero,8090a0 <___vfiprintf_internal_r+0x1314>
  808dfc:	00bfdfc4 	movi	r2,-129
  808e00:	a096703a 	and	r11,r20,r2
  808e04:	5d000094 	ori	r20,r11,2
  808e08:	0039883a 	mov	fp,zero
  808e0c:	003f9706 	br	808c6c <__alt_mem_descriptor_memory+0xff788c6c>
  808e10:	8025883a 	mov	r18,r16
  808e14:	003c2e06 	br	807ed0 <__alt_mem_descriptor_memory+0xff787ed0>
  808e18:	00802074 	movhi	r2,129
  808e1c:	108fe804 	addi	r2,r2,16288
  808e20:	0039883a 	mov	fp,zero
  808e24:	d8802615 	stw	r2,152(sp)
  808e28:	003f9006 	br	808c6c <__alt_mem_descriptor_memory+0xff788c6c>
  808e2c:	04a5c83a 	sub	r18,zero,r18
  808e30:	07000b44 	movi	fp,45
  808e34:	9004c03a 	cmpne	r2,r18,zero
  808e38:	04e7c83a 	sub	r19,zero,r19
  808e3c:	df001d85 	stb	fp,118(sp)
  808e40:	98a7c83a 	sub	r19,r19,r2
  808e44:	48009f16 	blt	r9,zero,8090c4 <___vfiprintf_internal_r+0x1338>
  808e48:	00bfdfc4 	movi	r2,-129
  808e4c:	a0a8703a 	and	r20,r20,r2
  808e50:	003dd006 	br	808594 <__alt_mem_descriptor_memory+0xff788594>
  808e54:	70004c26 	beq	r14,zero,808f88 <___vfiprintf_internal_r+0x11fc>
  808e58:	00800084 	movi	r2,2
  808e5c:	d8c01d04 	addi	r3,sp,116
  808e60:	d8c00015 	stw	r3,0(sp)
  808e64:	d8800115 	stw	r2,4(sp)
  808e68:	01000044 	movi	r4,1
  808e6c:	d811883a 	mov	r8,sp
  808e70:	003f7306 	br	808c40 <__alt_mem_descriptor_memory+0xff788c40>
  808e74:	a080100c 	andi	r2,r20,64
  808e78:	da802217 	ldw	r10,136(sp)
  808e7c:	103e0626 	beq	r2,zero,808698 <__alt_mem_descriptor_memory+0xff788698>
  808e80:	5480000f 	ldh	r18,0(r10)
  808e84:	52800104 	addi	r10,r10,4
  808e88:	da802215 	stw	r10,136(sp)
  808e8c:	9027d7fa 	srai	r19,r18,31
  808e90:	9805883a 	mov	r2,r19
  808e94:	003db806 	br	808578 <__alt_mem_descriptor_memory+0xff788578>
  808e98:	a080040c 	andi	r2,r20,16
  808e9c:	1000091e 	bne	r2,zero,808ec4 <___vfiprintf_internal_r+0x1138>
  808ea0:	a2c0100c 	andi	r11,r20,64
  808ea4:	58000726 	beq	r11,zero,808ec4 <___vfiprintf_internal_r+0x1138>
  808ea8:	da802217 	ldw	r10,136(sp)
  808eac:	50800017 	ldw	r2,0(r10)
  808eb0:	52800104 	addi	r10,r10,4
  808eb4:	da802215 	stw	r10,136(sp)
  808eb8:	da802317 	ldw	r10,140(sp)
  808ebc:	1280000d 	sth	r10,0(r2)
  808ec0:	003be706 	br	807e60 <__alt_mem_descriptor_memory+0xff787e60>
  808ec4:	da802217 	ldw	r10,136(sp)
  808ec8:	50800017 	ldw	r2,0(r10)
  808ecc:	52800104 	addi	r10,r10,4
  808ed0:	da802215 	stw	r10,136(sp)
  808ed4:	da802317 	ldw	r10,140(sp)
  808ed8:	12800015 	stw	r10,0(r2)
  808edc:	003be006 	br	807e60 <__alt_mem_descriptor_memory+0xff787e60>
  808ee0:	a080100c 	andi	r2,r20,64
  808ee4:	da802217 	ldw	r10,136(sp)
  808ee8:	10003026 	beq	r2,zero,808fac <___vfiprintf_internal_r+0x1220>
  808eec:	5480000b 	ldhu	r18,0(r10)
  808ef0:	52800104 	addi	r10,r10,4
  808ef4:	0027883a 	mov	r19,zero
  808ef8:	da802215 	stw	r10,136(sp)
  808efc:	003d8006 	br	808500 <__alt_mem_descriptor_memory+0xff788500>
  808f00:	80c00007 	ldb	r3,0(r16)
  808f04:	003c0006 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  808f08:	a080100c 	andi	r2,r20,64
  808f0c:	d8001d85 	stb	zero,118(sp)
  808f10:	da802217 	ldw	r10,136(sp)
  808f14:	1000201e 	bne	r2,zero,808f98 <___vfiprintf_internal_r+0x120c>
  808f18:	50800104 	addi	r2,r10,4
  808f1c:	54800017 	ldw	r18,0(r10)
  808f20:	0027883a 	mov	r19,zero
  808f24:	483def0e 	bge	r9,zero,8086e4 <__alt_mem_descriptor_memory+0xff7886e4>
  808f28:	94c6b03a 	or	r3,r18,r19
  808f2c:	d8802215 	stw	r2,136(sp)
  808f30:	183d4e1e 	bne	r3,zero,80846c <__alt_mem_descriptor_memory+0xff78846c>
  808f34:	0039883a 	mov	fp,zero
  808f38:	0005883a 	mov	r2,zero
  808f3c:	003e0606 	br	808758 <__alt_mem_descriptor_memory+0xff788758>
  808f40:	d9402117 	ldw	r5,132(sp)
  808f44:	d9002017 	ldw	r4,128(sp)
  808f48:	d9801a04 	addi	r6,sp,104
  808f4c:	da402c15 	stw	r9,176(sp)
  808f50:	db802a15 	stw	r14,168(sp)
  808f54:	0807c780 	call	807c78 <__sprint_r.part.0>
  808f58:	da402c17 	ldw	r9,176(sp)
  808f5c:	db802a17 	ldw	r14,168(sp)
  808f60:	103ede1e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  808f64:	d9401b17 	ldw	r5,108(sp)
  808f68:	d8801c17 	ldw	r2,112(sp)
  808f6c:	d811883a 	mov	r8,sp
  808f70:	29000044 	addi	r4,r5,1
  808f74:	003e7406 	br	808948 <__alt_mem_descriptor_memory+0xff788948>
  808f78:	00bfffc4 	movi	r2,-1
  808f7c:	003c5806 	br	8080e0 <__alt_mem_descriptor_memory+0xff7880e0>
  808f80:	d811883a 	mov	r8,sp
  808f84:	003ee806 	br	808b28 <__alt_mem_descriptor_memory+0xff788b28>
  808f88:	000b883a 	mov	r5,zero
  808f8c:	01000044 	movi	r4,1
  808f90:	d811883a 	mov	r8,sp
  808f94:	003e7c06 	br	808988 <__alt_mem_descriptor_memory+0xff788988>
  808f98:	50800104 	addi	r2,r10,4
  808f9c:	5480000b 	ldhu	r18,0(r10)
  808fa0:	0027883a 	mov	r19,zero
  808fa4:	483dcf0e 	bge	r9,zero,8086e4 <__alt_mem_descriptor_memory+0xff7886e4>
  808fa8:	003fdf06 	br	808f28 <__alt_mem_descriptor_memory+0xff788f28>
  808fac:	54800017 	ldw	r18,0(r10)
  808fb0:	52800104 	addi	r10,r10,4
  808fb4:	0027883a 	mov	r19,zero
  808fb8:	da802215 	stw	r10,136(sp)
  808fbc:	003d5006 	br	808500 <__alt_mem_descriptor_memory+0xff788500>
  808fc0:	50800104 	addi	r2,r10,4
  808fc4:	5480000b 	ldhu	r18,0(r10)
  808fc8:	0027883a 	mov	r19,zero
  808fcc:	483f7d0e 	bge	r9,zero,808dc4 <__alt_mem_descriptor_memory+0xff788dc4>
  808fd0:	003ddc06 	br	808744 <__alt_mem_descriptor_memory+0xff788744>
  808fd4:	d8c02215 	stw	r3,136(sp)
  808fd8:	0039883a 	mov	fp,zero
  808fdc:	003ddb06 	br	80874c <__alt_mem_descriptor_memory+0xff78874c>
  808fe0:	02802074 	movhi	r10,129
  808fe4:	52904904 	addi	r10,r10,16676
  808fe8:	da802415 	stw	r10,144(sp)
  808fec:	003e8306 	br	8089fc <__alt_mem_descriptor_memory+0xff7889fc>
  808ff0:	d8801c17 	ldw	r2,112(sp)
  808ff4:	dd002117 	ldw	r20,132(sp)
  808ff8:	103eb926 	beq	r2,zero,808ae0 <__alt_mem_descriptor_memory+0xff788ae0>
  808ffc:	d9002017 	ldw	r4,128(sp)
  809000:	d9801a04 	addi	r6,sp,104
  809004:	a00b883a 	mov	r5,r20
  809008:	0807c780 	call	807c78 <__sprint_r.part.0>
  80900c:	003eb406 	br	808ae0 <__alt_mem_descriptor_memory+0xff788ae0>
  809010:	80c00043 	ldbu	r3,1(r16)
  809014:	a5000814 	ori	r20,r20,32
  809018:	84000044 	addi	r16,r16,1
  80901c:	18c03fcc 	andi	r3,r3,255
  809020:	18c0201c 	xori	r3,r3,128
  809024:	18ffe004 	addi	r3,r3,-128
  809028:	003bb706 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  80902c:	a809883a 	mov	r4,r21
  809030:	d8c02a15 	stw	r3,168(sp)
  809034:	da002b15 	stw	r8,172(sp)
  809038:	0807be00 	call	807be0 <strlen>
  80903c:	d8c02a17 	ldw	r3,168(sp)
  809040:	1027883a 	mov	r19,r2
  809044:	df001d83 	ldbu	fp,118(sp)
  809048:	d8c02215 	stw	r3,136(sp)
  80904c:	0013883a 	mov	r9,zero
  809050:	da002b17 	ldw	r8,172(sp)
  809054:	003c4d06 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  809058:	d9402117 	ldw	r5,132(sp)
  80905c:	d9002017 	ldw	r4,128(sp)
  809060:	d9801a04 	addi	r6,sp,104
  809064:	da402c15 	stw	r9,176(sp)
  809068:	0807c780 	call	807c78 <__sprint_r.part.0>
  80906c:	da402c17 	ldw	r9,176(sp)
  809070:	103e9a1e 	bne	r2,zero,808adc <__alt_mem_descriptor_memory+0xff788adc>
  809074:	d9401b17 	ldw	r5,108(sp)
  809078:	d8801c17 	ldw	r2,112(sp)
  80907c:	d811883a 	mov	r8,sp
  809080:	29000044 	addi	r4,r5,1
  809084:	003e4206 	br	808990 <__alt_mem_descriptor_memory+0xff788990>
  809088:	d9401b17 	ldw	r5,108(sp)
  80908c:	01002074 	movhi	r4,129
  809090:	21104d04 	addi	r4,r4,16692
  809094:	d9002415 	stw	r4,144(sp)
  809098:	29400044 	addi	r5,r5,1
  80909c:	003c6d06 	br	808254 <__alt_mem_descriptor_memory+0xff788254>
  8090a0:	0039883a 	mov	fp,zero
  8090a4:	00800084 	movi	r2,2
  8090a8:	10803fcc 	andi	r2,r2,255
  8090ac:	01000044 	movi	r4,1
  8090b0:	11001e26 	beq	r2,r4,80912c <___vfiprintf_internal_r+0x13a0>
  8090b4:	01000084 	movi	r4,2
  8090b8:	11001e1e 	bne	r2,r4,809134 <___vfiprintf_internal_r+0x13a8>
  8090bc:	1829883a 	mov	r20,r3
  8090c0:	003eea06 	br	808c6c <__alt_mem_descriptor_memory+0xff788c6c>
  8090c4:	a007883a 	mov	r3,r20
  8090c8:	00800044 	movi	r2,1
  8090cc:	003ff606 	br	8090a8 <__alt_mem_descriptor_memory+0xff7890a8>
  8090d0:	00800184 	movi	r2,6
  8090d4:	1240012e 	bgeu	r2,r9,8090dc <___vfiprintf_internal_r+0x1350>
  8090d8:	1013883a 	mov	r9,r2
  8090dc:	4827883a 	mov	r19,r9
  8090e0:	4825883a 	mov	r18,r9
  8090e4:	48001516 	blt	r9,zero,80913c <___vfiprintf_internal_r+0x13b0>
  8090e8:	05402074 	movhi	r21,129
  8090ec:	d8c02215 	stw	r3,136(sp)
  8090f0:	ad4fed04 	addi	r21,r21,16308
  8090f4:	003d1406 	br	808548 <__alt_mem_descriptor_memory+0xff788548>
  8090f8:	02802074 	movhi	r10,129
  8090fc:	52904904 	addi	r10,r10,16676
  809100:	da802415 	stw	r10,144(sp)
  809104:	200d883a 	mov	r6,r4
  809108:	003c9106 	br	808350 <__alt_mem_descriptor_memory+0xff788350>
  80910c:	5021883a 	mov	r16,r10
  809110:	0013883a 	mov	r9,zero
  809114:	003b7d06 	br	807f0c <__alt_mem_descriptor_memory+0xff787f0c>
  809118:	4827883a 	mov	r19,r9
  80911c:	df001d83 	ldbu	fp,118(sp)
  809120:	d8c02215 	stw	r3,136(sp)
  809124:	0013883a 	mov	r9,zero
  809128:	003c1806 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  80912c:	1829883a 	mov	r20,r3
  809130:	003d1806 	br	808594 <__alt_mem_descriptor_memory+0xff788594>
  809134:	1829883a 	mov	r20,r3
  809138:	003ccd06 	br	808470 <__alt_mem_descriptor_memory+0xff788470>
  80913c:	0025883a 	mov	r18,zero
  809140:	003fe906 	br	8090e8 <__alt_mem_descriptor_memory+0xff7890e8>
  809144:	d8802217 	ldw	r2,136(sp)
  809148:	80c00043 	ldbu	r3,1(r16)
  80914c:	5021883a 	mov	r16,r10
  809150:	12400017 	ldw	r9,0(r2)
  809154:	10800104 	addi	r2,r2,4
  809158:	d8802215 	stw	r2,136(sp)
  80915c:	483faf0e 	bge	r9,zero,80901c <__alt_mem_descriptor_memory+0xff78901c>
  809160:	18c03fcc 	andi	r3,r3,255
  809164:	18c0201c 	xori	r3,r3,128
  809168:	027fffc4 	movi	r9,-1
  80916c:	18ffe004 	addi	r3,r3,-128
  809170:	003b6506 	br	807f08 <__alt_mem_descriptor_memory+0xff787f08>
  809174:	d9c01d85 	stb	r7,118(sp)
  809178:	003ca006 	br	8083fc <__alt_mem_descriptor_memory+0xff7883fc>
  80917c:	d9c01d85 	stb	r7,118(sp)
  809180:	003cad06 	br	808438 <__alt_mem_descriptor_memory+0xff788438>
  809184:	d9c01d85 	stb	r7,118(sp)
  809188:	003d7d06 	br	808780 <__alt_mem_descriptor_memory+0xff788780>
  80918c:	d9c01d85 	stb	r7,118(sp)
  809190:	003d5f06 	br	808710 <__alt_mem_descriptor_memory+0xff788710>
  809194:	a080004c 	andi	r2,r20,1
  809198:	0039883a 	mov	fp,zero
  80919c:	10000526 	beq	r2,zero,8091b4 <___vfiprintf_internal_r+0x1428>
  8091a0:	00800c04 	movi	r2,48
  8091a4:	d88019c5 	stb	r2,103(sp)
  8091a8:	dcc02717 	ldw	r19,156(sp)
  8091ac:	dd4019c4 	addi	r21,sp,103
  8091b0:	003bf606 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  8091b4:	0027883a 	mov	r19,zero
  8091b8:	dd401a04 	addi	r21,sp,104
  8091bc:	003bf306 	br	80818c <__alt_mem_descriptor_memory+0xff78818c>
  8091c0:	d9c01d85 	stb	r7,118(sp)
  8091c4:	003dc806 	br	8088e8 <__alt_mem_descriptor_memory+0xff7888e8>
  8091c8:	d9c01d85 	stb	r7,118(sp)
  8091cc:	003d3a06 	br	8086b8 <__alt_mem_descriptor_memory+0xff7886b8>
  8091d0:	d9c01d85 	stb	r7,118(sp)
  8091d4:	003d2a06 	br	808680 <__alt_mem_descriptor_memory+0xff788680>
  8091d8:	d9c01d85 	stb	r7,118(sp)
  8091dc:	003cde06 	br	808558 <__alt_mem_descriptor_memory+0xff788558>
  8091e0:	d9c01d85 	stb	r7,118(sp)
  8091e4:	003cbc06 	br	8084d8 <__alt_mem_descriptor_memory+0xff7884d8>

008091e8 <__vfiprintf_internal>:
  8091e8:	00802074 	movhi	r2,129
  8091ec:	1098ac04 	addi	r2,r2,25264
  8091f0:	300f883a 	mov	r7,r6
  8091f4:	280d883a 	mov	r6,r5
  8091f8:	200b883a 	mov	r5,r4
  8091fc:	11000017 	ldw	r4,0(r2)
  809200:	0807d8c1 	jmpi	807d8c <___vfiprintf_internal_r>

00809204 <__sbprintf>:
  809204:	2880030b 	ldhu	r2,12(r5)
  809208:	2ac01917 	ldw	r11,100(r5)
  80920c:	2a80038b 	ldhu	r10,14(r5)
  809210:	2a400717 	ldw	r9,28(r5)
  809214:	2a000917 	ldw	r8,36(r5)
  809218:	defee204 	addi	sp,sp,-1144
  80921c:	00c10004 	movi	r3,1024
  809220:	dc011a15 	stw	r16,1128(sp)
  809224:	10bfff4c 	andi	r2,r2,65533
  809228:	2821883a 	mov	r16,r5
  80922c:	d8cb883a 	add	r5,sp,r3
  809230:	dc811c15 	stw	r18,1136(sp)
  809234:	dc411b15 	stw	r17,1132(sp)
  809238:	dfc11d15 	stw	ra,1140(sp)
  80923c:	2025883a 	mov	r18,r4
  809240:	d881030d 	sth	r2,1036(sp)
  809244:	dac11915 	stw	r11,1124(sp)
  809248:	da81038d 	sth	r10,1038(sp)
  80924c:	da410715 	stw	r9,1052(sp)
  809250:	da010915 	stw	r8,1060(sp)
  809254:	dec10015 	stw	sp,1024(sp)
  809258:	dec10415 	stw	sp,1040(sp)
  80925c:	d8c10215 	stw	r3,1032(sp)
  809260:	d8c10515 	stw	r3,1044(sp)
  809264:	d8010615 	stw	zero,1048(sp)
  809268:	0807d8c0 	call	807d8c <___vfiprintf_internal_r>
  80926c:	1023883a 	mov	r17,r2
  809270:	10000416 	blt	r2,zero,809284 <__sbprintf+0x80>
  809274:	d9410004 	addi	r5,sp,1024
  809278:	9009883a 	mov	r4,r18
  80927c:	080524c0 	call	80524c <_fflush_r>
  809280:	10000d1e 	bne	r2,zero,8092b8 <__sbprintf+0xb4>
  809284:	d881030b 	ldhu	r2,1036(sp)
  809288:	1080100c 	andi	r2,r2,64
  80928c:	10000326 	beq	r2,zero,80929c <__sbprintf+0x98>
  809290:	8080030b 	ldhu	r2,12(r16)
  809294:	10801014 	ori	r2,r2,64
  809298:	8080030d 	sth	r2,12(r16)
  80929c:	8805883a 	mov	r2,r17
  8092a0:	dfc11d17 	ldw	ra,1140(sp)
  8092a4:	dc811c17 	ldw	r18,1136(sp)
  8092a8:	dc411b17 	ldw	r17,1132(sp)
  8092ac:	dc011a17 	ldw	r16,1128(sp)
  8092b0:	dec11e04 	addi	sp,sp,1144
  8092b4:	f800283a 	ret
  8092b8:	047fffc4 	movi	r17,-1
  8092bc:	003ff106 	br	809284 <__alt_mem_descriptor_memory+0xff789284>

008092c0 <_write_r>:
  8092c0:	defffd04 	addi	sp,sp,-12
  8092c4:	2805883a 	mov	r2,r5
  8092c8:	dc000015 	stw	r16,0(sp)
  8092cc:	04002074 	movhi	r16,129
  8092d0:	dc400115 	stw	r17,4(sp)
  8092d4:	300b883a 	mov	r5,r6
  8092d8:	8418d004 	addi	r16,r16,25408
  8092dc:	2023883a 	mov	r17,r4
  8092e0:	380d883a 	mov	r6,r7
  8092e4:	1009883a 	mov	r4,r2
  8092e8:	dfc00215 	stw	ra,8(sp)
  8092ec:	80000015 	stw	zero,0(r16)
  8092f0:	080e1680 	call	80e168 <write>
  8092f4:	00ffffc4 	movi	r3,-1
  8092f8:	10c00526 	beq	r2,r3,809310 <_write_r+0x50>
  8092fc:	dfc00217 	ldw	ra,8(sp)
  809300:	dc400117 	ldw	r17,4(sp)
  809304:	dc000017 	ldw	r16,0(sp)
  809308:	dec00304 	addi	sp,sp,12
  80930c:	f800283a 	ret
  809310:	80c00017 	ldw	r3,0(r16)
  809314:	183ff926 	beq	r3,zero,8092fc <__alt_mem_descriptor_memory+0xff7892fc>
  809318:	88c00015 	stw	r3,0(r17)
  80931c:	003ff706 	br	8092fc <__alt_mem_descriptor_memory+0xff7892fc>

00809320 <_close_r>:
  809320:	defffd04 	addi	sp,sp,-12
  809324:	dc000015 	stw	r16,0(sp)
  809328:	04002074 	movhi	r16,129
  80932c:	dc400115 	stw	r17,4(sp)
  809330:	8418d004 	addi	r16,r16,25408
  809334:	2023883a 	mov	r17,r4
  809338:	2809883a 	mov	r4,r5
  80933c:	dfc00215 	stw	ra,8(sp)
  809340:	80000015 	stw	zero,0(r16)
  809344:	080da140 	call	80da14 <close>
  809348:	00ffffc4 	movi	r3,-1
  80934c:	10c00526 	beq	r2,r3,809364 <_close_r+0x44>
  809350:	dfc00217 	ldw	ra,8(sp)
  809354:	dc400117 	ldw	r17,4(sp)
  809358:	dc000017 	ldw	r16,0(sp)
  80935c:	dec00304 	addi	sp,sp,12
  809360:	f800283a 	ret
  809364:	80c00017 	ldw	r3,0(r16)
  809368:	183ff926 	beq	r3,zero,809350 <__alt_mem_descriptor_memory+0xff789350>
  80936c:	88c00015 	stw	r3,0(r17)
  809370:	003ff706 	br	809350 <__alt_mem_descriptor_memory+0xff789350>

00809374 <_calloc_r>:
  809374:	298b383a 	mul	r5,r5,r6
  809378:	defffe04 	addi	sp,sp,-8
  80937c:	dfc00115 	stw	ra,4(sp)
  809380:	dc000015 	stw	r16,0(sp)
  809384:	0805ecc0 	call	805ecc <_malloc_r>
  809388:	10002926 	beq	r2,zero,809430 <_calloc_r+0xbc>
  80938c:	11bfff17 	ldw	r6,-4(r2)
  809390:	1021883a 	mov	r16,r2
  809394:	00bfff04 	movi	r2,-4
  809398:	308c703a 	and	r6,r6,r2
  80939c:	00c00904 	movi	r3,36
  8093a0:	308d883a 	add	r6,r6,r2
  8093a4:	19801636 	bltu	r3,r6,809400 <_calloc_r+0x8c>
  8093a8:	008004c4 	movi	r2,19
  8093ac:	11800b2e 	bgeu	r2,r6,8093dc <_calloc_r+0x68>
  8093b0:	80000015 	stw	zero,0(r16)
  8093b4:	80000115 	stw	zero,4(r16)
  8093b8:	008006c4 	movi	r2,27
  8093bc:	11801a2e 	bgeu	r2,r6,809428 <_calloc_r+0xb4>
  8093c0:	80000215 	stw	zero,8(r16)
  8093c4:	80000315 	stw	zero,12(r16)
  8093c8:	30c0151e 	bne	r6,r3,809420 <_calloc_r+0xac>
  8093cc:	80000415 	stw	zero,16(r16)
  8093d0:	80800604 	addi	r2,r16,24
  8093d4:	80000515 	stw	zero,20(r16)
  8093d8:	00000106 	br	8093e0 <_calloc_r+0x6c>
  8093dc:	8005883a 	mov	r2,r16
  8093e0:	10000015 	stw	zero,0(r2)
  8093e4:	10000115 	stw	zero,4(r2)
  8093e8:	10000215 	stw	zero,8(r2)
  8093ec:	8005883a 	mov	r2,r16
  8093f0:	dfc00117 	ldw	ra,4(sp)
  8093f4:	dc000017 	ldw	r16,0(sp)
  8093f8:	dec00204 	addi	sp,sp,8
  8093fc:	f800283a 	ret
  809400:	000b883a 	mov	r5,zero
  809404:	8009883a 	mov	r4,r16
  809408:	08011f00 	call	8011f0 <memset>
  80940c:	8005883a 	mov	r2,r16
  809410:	dfc00117 	ldw	ra,4(sp)
  809414:	dc000017 	ldw	r16,0(sp)
  809418:	dec00204 	addi	sp,sp,8
  80941c:	f800283a 	ret
  809420:	80800404 	addi	r2,r16,16
  809424:	003fee06 	br	8093e0 <__alt_mem_descriptor_memory+0xff7893e0>
  809428:	80800204 	addi	r2,r16,8
  80942c:	003fec06 	br	8093e0 <__alt_mem_descriptor_memory+0xff7893e0>
  809430:	0005883a 	mov	r2,zero
  809434:	003fee06 	br	8093f0 <__alt_mem_descriptor_memory+0xff7893f0>

00809438 <_fclose_r>:
  809438:	28003926 	beq	r5,zero,809520 <_fclose_r+0xe8>
  80943c:	defffc04 	addi	sp,sp,-16
  809440:	dc400115 	stw	r17,4(sp)
  809444:	dc000015 	stw	r16,0(sp)
  809448:	dfc00315 	stw	ra,12(sp)
  80944c:	dc800215 	stw	r18,8(sp)
  809450:	2023883a 	mov	r17,r4
  809454:	2821883a 	mov	r16,r5
  809458:	20000226 	beq	r4,zero,809464 <_fclose_r+0x2c>
  80945c:	20800e17 	ldw	r2,56(r4)
  809460:	10002726 	beq	r2,zero,809500 <_fclose_r+0xc8>
  809464:	8080030f 	ldh	r2,12(r16)
  809468:	1000071e 	bne	r2,zero,809488 <_fclose_r+0x50>
  80946c:	0005883a 	mov	r2,zero
  809470:	dfc00317 	ldw	ra,12(sp)
  809474:	dc800217 	ldw	r18,8(sp)
  809478:	dc400117 	ldw	r17,4(sp)
  80947c:	dc000017 	ldw	r16,0(sp)
  809480:	dec00404 	addi	sp,sp,16
  809484:	f800283a 	ret
  809488:	800b883a 	mov	r5,r16
  80948c:	8809883a 	mov	r4,r17
  809490:	08050300 	call	805030 <__sflush_r>
  809494:	1025883a 	mov	r18,r2
  809498:	80800b17 	ldw	r2,44(r16)
  80949c:	10000426 	beq	r2,zero,8094b0 <_fclose_r+0x78>
  8094a0:	81400717 	ldw	r5,28(r16)
  8094a4:	8809883a 	mov	r4,r17
  8094a8:	103ee83a 	callr	r2
  8094ac:	10001616 	blt	r2,zero,809508 <_fclose_r+0xd0>
  8094b0:	8080030b 	ldhu	r2,12(r16)
  8094b4:	1080200c 	andi	r2,r2,128
  8094b8:	1000151e 	bne	r2,zero,809510 <_fclose_r+0xd8>
  8094bc:	81400c17 	ldw	r5,48(r16)
  8094c0:	28000526 	beq	r5,zero,8094d8 <_fclose_r+0xa0>
  8094c4:	80801004 	addi	r2,r16,64
  8094c8:	28800226 	beq	r5,r2,8094d4 <_fclose_r+0x9c>
  8094cc:	8809883a 	mov	r4,r17
  8094d0:	080579c0 	call	80579c <_free_r>
  8094d4:	80000c15 	stw	zero,48(r16)
  8094d8:	81401117 	ldw	r5,68(r16)
  8094dc:	28000326 	beq	r5,zero,8094ec <_fclose_r+0xb4>
  8094e0:	8809883a 	mov	r4,r17
  8094e4:	080579c0 	call	80579c <_free_r>
  8094e8:	80001115 	stw	zero,68(r16)
  8094ec:	08056380 	call	805638 <__sfp_lock_acquire>
  8094f0:	8000030d 	sth	zero,12(r16)
  8094f4:	080563c0 	call	80563c <__sfp_lock_release>
  8094f8:	9005883a 	mov	r2,r18
  8094fc:	003fdc06 	br	809470 <__alt_mem_descriptor_memory+0xff789470>
  809500:	08056280 	call	805628 <__sinit>
  809504:	003fd706 	br	809464 <__alt_mem_descriptor_memory+0xff789464>
  809508:	04bfffc4 	movi	r18,-1
  80950c:	003fe806 	br	8094b0 <__alt_mem_descriptor_memory+0xff7894b0>
  809510:	81400417 	ldw	r5,16(r16)
  809514:	8809883a 	mov	r4,r17
  809518:	080579c0 	call	80579c <_free_r>
  80951c:	003fe706 	br	8094bc <__alt_mem_descriptor_memory+0xff7894bc>
  809520:	0005883a 	mov	r2,zero
  809524:	f800283a 	ret

00809528 <fclose>:
  809528:	00802074 	movhi	r2,129
  80952c:	1098ac04 	addi	r2,r2,25264
  809530:	200b883a 	mov	r5,r4
  809534:	11000017 	ldw	r4,0(r2)
  809538:	08094381 	jmpi	809438 <_fclose_r>

0080953c <__fputwc>:
  80953c:	defff804 	addi	sp,sp,-32
  809540:	dcc00415 	stw	r19,16(sp)
  809544:	dc800315 	stw	r18,12(sp)
  809548:	dc000115 	stw	r16,4(sp)
  80954c:	dfc00715 	stw	ra,28(sp)
  809550:	dd400615 	stw	r21,24(sp)
  809554:	dd000515 	stw	r20,20(sp)
  809558:	dc400215 	stw	r17,8(sp)
  80955c:	2027883a 	mov	r19,r4
  809560:	2825883a 	mov	r18,r5
  809564:	3021883a 	mov	r16,r6
  809568:	0805cbc0 	call	805cbc <__locale_mb_cur_max>
  80956c:	00c00044 	movi	r3,1
  809570:	10c03e26 	beq	r2,r3,80966c <__fputwc+0x130>
  809574:	81c01704 	addi	r7,r16,92
  809578:	900d883a 	mov	r6,r18
  80957c:	d80b883a 	mov	r5,sp
  809580:	9809883a 	mov	r4,r19
  809584:	080a5880 	call	80a588 <_wcrtomb_r>
  809588:	1029883a 	mov	r20,r2
  80958c:	00bfffc4 	movi	r2,-1
  809590:	a0802026 	beq	r20,r2,809614 <__fputwc+0xd8>
  809594:	d9400003 	ldbu	r5,0(sp)
  809598:	a0001c26 	beq	r20,zero,80960c <__fputwc+0xd0>
  80959c:	0023883a 	mov	r17,zero
  8095a0:	05400284 	movi	r21,10
  8095a4:	00000906 	br	8095cc <__fputwc+0x90>
  8095a8:	80800017 	ldw	r2,0(r16)
  8095ac:	11400005 	stb	r5,0(r2)
  8095b0:	80c00017 	ldw	r3,0(r16)
  8095b4:	18c00044 	addi	r3,r3,1
  8095b8:	80c00015 	stw	r3,0(r16)
  8095bc:	8c400044 	addi	r17,r17,1
  8095c0:	dc45883a 	add	r2,sp,r17
  8095c4:	8d00112e 	bgeu	r17,r20,80960c <__fputwc+0xd0>
  8095c8:	11400003 	ldbu	r5,0(r2)
  8095cc:	80c00217 	ldw	r3,8(r16)
  8095d0:	18ffffc4 	addi	r3,r3,-1
  8095d4:	80c00215 	stw	r3,8(r16)
  8095d8:	183ff30e 	bge	r3,zero,8095a8 <__alt_mem_descriptor_memory+0xff7895a8>
  8095dc:	80800617 	ldw	r2,24(r16)
  8095e0:	18801916 	blt	r3,r2,809648 <__fputwc+0x10c>
  8095e4:	80800017 	ldw	r2,0(r16)
  8095e8:	11400005 	stb	r5,0(r2)
  8095ec:	80800017 	ldw	r2,0(r16)
  8095f0:	10c00003 	ldbu	r3,0(r2)
  8095f4:	10800044 	addi	r2,r2,1
  8095f8:	1d402326 	beq	r3,r21,809688 <__fputwc+0x14c>
  8095fc:	80800015 	stw	r2,0(r16)
  809600:	8c400044 	addi	r17,r17,1
  809604:	dc45883a 	add	r2,sp,r17
  809608:	8d3fef36 	bltu	r17,r20,8095c8 <__alt_mem_descriptor_memory+0xff7895c8>
  80960c:	9005883a 	mov	r2,r18
  809610:	00000406 	br	809624 <__fputwc+0xe8>
  809614:	80c0030b 	ldhu	r3,12(r16)
  809618:	a005883a 	mov	r2,r20
  80961c:	18c01014 	ori	r3,r3,64
  809620:	80c0030d 	sth	r3,12(r16)
  809624:	dfc00717 	ldw	ra,28(sp)
  809628:	dd400617 	ldw	r21,24(sp)
  80962c:	dd000517 	ldw	r20,20(sp)
  809630:	dcc00417 	ldw	r19,16(sp)
  809634:	dc800317 	ldw	r18,12(sp)
  809638:	dc400217 	ldw	r17,8(sp)
  80963c:	dc000117 	ldw	r16,4(sp)
  809640:	dec00804 	addi	sp,sp,32
  809644:	f800283a 	ret
  809648:	800d883a 	mov	r6,r16
  80964c:	29403fcc 	andi	r5,r5,255
  809650:	9809883a 	mov	r4,r19
  809654:	080a4300 	call	80a430 <__swbuf_r>
  809658:	10bfffe0 	cmpeqi	r2,r2,-1
  80965c:	10803fcc 	andi	r2,r2,255
  809660:	103fd626 	beq	r2,zero,8095bc <__alt_mem_descriptor_memory+0xff7895bc>
  809664:	00bfffc4 	movi	r2,-1
  809668:	003fee06 	br	809624 <__alt_mem_descriptor_memory+0xff789624>
  80966c:	90ffffc4 	addi	r3,r18,-1
  809670:	01003f84 	movi	r4,254
  809674:	20ffbf36 	bltu	r4,r3,809574 <__alt_mem_descriptor_memory+0xff789574>
  809678:	900b883a 	mov	r5,r18
  80967c:	dc800005 	stb	r18,0(sp)
  809680:	1029883a 	mov	r20,r2
  809684:	003fc506 	br	80959c <__alt_mem_descriptor_memory+0xff78959c>
  809688:	800d883a 	mov	r6,r16
  80968c:	a80b883a 	mov	r5,r21
  809690:	9809883a 	mov	r4,r19
  809694:	080a4300 	call	80a430 <__swbuf_r>
  809698:	10bfffe0 	cmpeqi	r2,r2,-1
  80969c:	003fef06 	br	80965c <__alt_mem_descriptor_memory+0xff78965c>

008096a0 <_fputwc_r>:
  8096a0:	3080030b 	ldhu	r2,12(r6)
  8096a4:	10c8000c 	andi	r3,r2,8192
  8096a8:	1800051e 	bne	r3,zero,8096c0 <_fputwc_r+0x20>
  8096ac:	30c01917 	ldw	r3,100(r6)
  8096b0:	10880014 	ori	r2,r2,8192
  8096b4:	3080030d 	sth	r2,12(r6)
  8096b8:	18880014 	ori	r2,r3,8192
  8096bc:	30801915 	stw	r2,100(r6)
  8096c0:	080953c1 	jmpi	80953c <__fputwc>

008096c4 <fputwc>:
  8096c4:	00802074 	movhi	r2,129
  8096c8:	defffc04 	addi	sp,sp,-16
  8096cc:	1098ac04 	addi	r2,r2,25264
  8096d0:	dc000115 	stw	r16,4(sp)
  8096d4:	14000017 	ldw	r16,0(r2)
  8096d8:	dc400215 	stw	r17,8(sp)
  8096dc:	dfc00315 	stw	ra,12(sp)
  8096e0:	2023883a 	mov	r17,r4
  8096e4:	80000226 	beq	r16,zero,8096f0 <fputwc+0x2c>
  8096e8:	80800e17 	ldw	r2,56(r16)
  8096ec:	10001026 	beq	r2,zero,809730 <fputwc+0x6c>
  8096f0:	2880030b 	ldhu	r2,12(r5)
  8096f4:	10c8000c 	andi	r3,r2,8192
  8096f8:	1800051e 	bne	r3,zero,809710 <fputwc+0x4c>
  8096fc:	28c01917 	ldw	r3,100(r5)
  809700:	10880014 	ori	r2,r2,8192
  809704:	2880030d 	sth	r2,12(r5)
  809708:	18880014 	ori	r2,r3,8192
  80970c:	28801915 	stw	r2,100(r5)
  809710:	280d883a 	mov	r6,r5
  809714:	8009883a 	mov	r4,r16
  809718:	880b883a 	mov	r5,r17
  80971c:	dfc00317 	ldw	ra,12(sp)
  809720:	dc400217 	ldw	r17,8(sp)
  809724:	dc000117 	ldw	r16,4(sp)
  809728:	dec00404 	addi	sp,sp,16
  80972c:	080953c1 	jmpi	80953c <__fputwc>
  809730:	8009883a 	mov	r4,r16
  809734:	d9400015 	stw	r5,0(sp)
  809738:	08056280 	call	805628 <__sinit>
  80973c:	d9400017 	ldw	r5,0(sp)
  809740:	003feb06 	br	8096f0 <__alt_mem_descriptor_memory+0xff7896f0>

00809744 <_fstat_r>:
  809744:	defffd04 	addi	sp,sp,-12
  809748:	2805883a 	mov	r2,r5
  80974c:	dc000015 	stw	r16,0(sp)
  809750:	04002074 	movhi	r16,129
  809754:	dc400115 	stw	r17,4(sp)
  809758:	8418d004 	addi	r16,r16,25408
  80975c:	2023883a 	mov	r17,r4
  809760:	300b883a 	mov	r5,r6
  809764:	1009883a 	mov	r4,r2
  809768:	dfc00215 	stw	ra,8(sp)
  80976c:	80000015 	stw	zero,0(r16)
  809770:	080db4c0 	call	80db4c <fstat>
  809774:	00ffffc4 	movi	r3,-1
  809778:	10c00526 	beq	r2,r3,809790 <_fstat_r+0x4c>
  80977c:	dfc00217 	ldw	ra,8(sp)
  809780:	dc400117 	ldw	r17,4(sp)
  809784:	dc000017 	ldw	r16,0(sp)
  809788:	dec00304 	addi	sp,sp,12
  80978c:	f800283a 	ret
  809790:	80c00017 	ldw	r3,0(r16)
  809794:	183ff926 	beq	r3,zero,80977c <__alt_mem_descriptor_memory+0xff78977c>
  809798:	88c00015 	stw	r3,0(r17)
  80979c:	003ff706 	br	80977c <__alt_mem_descriptor_memory+0xff78977c>

008097a0 <__sfvwrite_r>:
  8097a0:	30800217 	ldw	r2,8(r6)
  8097a4:	10006726 	beq	r2,zero,809944 <__sfvwrite_r+0x1a4>
  8097a8:	28c0030b 	ldhu	r3,12(r5)
  8097ac:	defff404 	addi	sp,sp,-48
  8097b0:	dd400715 	stw	r21,28(sp)
  8097b4:	dd000615 	stw	r20,24(sp)
  8097b8:	dc000215 	stw	r16,8(sp)
  8097bc:	dfc00b15 	stw	ra,44(sp)
  8097c0:	df000a15 	stw	fp,40(sp)
  8097c4:	ddc00915 	stw	r23,36(sp)
  8097c8:	dd800815 	stw	r22,32(sp)
  8097cc:	dcc00515 	stw	r19,20(sp)
  8097d0:	dc800415 	stw	r18,16(sp)
  8097d4:	dc400315 	stw	r17,12(sp)
  8097d8:	1880020c 	andi	r2,r3,8
  8097dc:	2821883a 	mov	r16,r5
  8097e0:	202b883a 	mov	r21,r4
  8097e4:	3029883a 	mov	r20,r6
  8097e8:	10002726 	beq	r2,zero,809888 <__sfvwrite_r+0xe8>
  8097ec:	28800417 	ldw	r2,16(r5)
  8097f0:	10002526 	beq	r2,zero,809888 <__sfvwrite_r+0xe8>
  8097f4:	1880008c 	andi	r2,r3,2
  8097f8:	a4400017 	ldw	r17,0(r20)
  8097fc:	10002a26 	beq	r2,zero,8098a8 <__sfvwrite_r+0x108>
  809800:	05a00034 	movhi	r22,32768
  809804:	0027883a 	mov	r19,zero
  809808:	0025883a 	mov	r18,zero
  80980c:	b5bf0004 	addi	r22,r22,-1024
  809810:	980d883a 	mov	r6,r19
  809814:	a809883a 	mov	r4,r21
  809818:	90004626 	beq	r18,zero,809934 <__sfvwrite_r+0x194>
  80981c:	900f883a 	mov	r7,r18
  809820:	b480022e 	bgeu	r22,r18,80982c <__sfvwrite_r+0x8c>
  809824:	01e00034 	movhi	r7,32768
  809828:	39ff0004 	addi	r7,r7,-1024
  80982c:	80800917 	ldw	r2,36(r16)
  809830:	81400717 	ldw	r5,28(r16)
  809834:	103ee83a 	callr	r2
  809838:	0080570e 	bge	zero,r2,809998 <__sfvwrite_r+0x1f8>
  80983c:	a0c00217 	ldw	r3,8(r20)
  809840:	98a7883a 	add	r19,r19,r2
  809844:	90a5c83a 	sub	r18,r18,r2
  809848:	1885c83a 	sub	r2,r3,r2
  80984c:	a0800215 	stw	r2,8(r20)
  809850:	103fef1e 	bne	r2,zero,809810 <__alt_mem_descriptor_memory+0xff789810>
  809854:	0005883a 	mov	r2,zero
  809858:	dfc00b17 	ldw	ra,44(sp)
  80985c:	df000a17 	ldw	fp,40(sp)
  809860:	ddc00917 	ldw	r23,36(sp)
  809864:	dd800817 	ldw	r22,32(sp)
  809868:	dd400717 	ldw	r21,28(sp)
  80986c:	dd000617 	ldw	r20,24(sp)
  809870:	dcc00517 	ldw	r19,20(sp)
  809874:	dc800417 	ldw	r18,16(sp)
  809878:	dc400317 	ldw	r17,12(sp)
  80987c:	dc000217 	ldw	r16,8(sp)
  809880:	dec00c04 	addi	sp,sp,48
  809884:	f800283a 	ret
  809888:	800b883a 	mov	r5,r16
  80988c:	a809883a 	mov	r4,r21
  809890:	08036540 	call	803654 <__swsetup_r>
  809894:	1000eb1e 	bne	r2,zero,809c44 <__sfvwrite_r+0x4a4>
  809898:	80c0030b 	ldhu	r3,12(r16)
  80989c:	a4400017 	ldw	r17,0(r20)
  8098a0:	1880008c 	andi	r2,r3,2
  8098a4:	103fd61e 	bne	r2,zero,809800 <__alt_mem_descriptor_memory+0xff789800>
  8098a8:	1880004c 	andi	r2,r3,1
  8098ac:	10003f1e 	bne	r2,zero,8099ac <__sfvwrite_r+0x20c>
  8098b0:	0039883a 	mov	fp,zero
  8098b4:	0025883a 	mov	r18,zero
  8098b8:	90001a26 	beq	r18,zero,809924 <__sfvwrite_r+0x184>
  8098bc:	1880800c 	andi	r2,r3,512
  8098c0:	84c00217 	ldw	r19,8(r16)
  8098c4:	10002126 	beq	r2,zero,80994c <__sfvwrite_r+0x1ac>
  8098c8:	982f883a 	mov	r23,r19
  8098cc:	94c09336 	bltu	r18,r19,809b1c <__sfvwrite_r+0x37c>
  8098d0:	1881200c 	andi	r2,r3,1152
  8098d4:	10009e1e 	bne	r2,zero,809b50 <__sfvwrite_r+0x3b0>
  8098d8:	81000017 	ldw	r4,0(r16)
  8098dc:	b80d883a 	mov	r6,r23
  8098e0:	e00b883a 	mov	r5,fp
  8098e4:	0809d100 	call	809d10 <memmove>
  8098e8:	80c00217 	ldw	r3,8(r16)
  8098ec:	81000017 	ldw	r4,0(r16)
  8098f0:	9005883a 	mov	r2,r18
  8098f4:	1ce7c83a 	sub	r19,r3,r19
  8098f8:	25cf883a 	add	r7,r4,r23
  8098fc:	84c00215 	stw	r19,8(r16)
  809900:	81c00015 	stw	r7,0(r16)
  809904:	a0c00217 	ldw	r3,8(r20)
  809908:	e0b9883a 	add	fp,fp,r2
  80990c:	90a5c83a 	sub	r18,r18,r2
  809910:	18a7c83a 	sub	r19,r3,r2
  809914:	a4c00215 	stw	r19,8(r20)
  809918:	983fce26 	beq	r19,zero,809854 <__alt_mem_descriptor_memory+0xff789854>
  80991c:	80c0030b 	ldhu	r3,12(r16)
  809920:	903fe61e 	bne	r18,zero,8098bc <__alt_mem_descriptor_memory+0xff7898bc>
  809924:	8f000017 	ldw	fp,0(r17)
  809928:	8c800117 	ldw	r18,4(r17)
  80992c:	8c400204 	addi	r17,r17,8
  809930:	003fe106 	br	8098b8 <__alt_mem_descriptor_memory+0xff7898b8>
  809934:	8cc00017 	ldw	r19,0(r17)
  809938:	8c800117 	ldw	r18,4(r17)
  80993c:	8c400204 	addi	r17,r17,8
  809940:	003fb306 	br	809810 <__alt_mem_descriptor_memory+0xff789810>
  809944:	0005883a 	mov	r2,zero
  809948:	f800283a 	ret
  80994c:	81000017 	ldw	r4,0(r16)
  809950:	80800417 	ldw	r2,16(r16)
  809954:	11005736 	bltu	r2,r4,809ab4 <__sfvwrite_r+0x314>
  809958:	85c00517 	ldw	r23,20(r16)
  80995c:	95c05536 	bltu	r18,r23,809ab4 <__sfvwrite_r+0x314>
  809960:	00a00034 	movhi	r2,32768
  809964:	10bfffc4 	addi	r2,r2,-1
  809968:	9009883a 	mov	r4,r18
  80996c:	1480012e 	bgeu	r2,r18,809974 <__sfvwrite_r+0x1d4>
  809970:	1009883a 	mov	r4,r2
  809974:	b80b883a 	mov	r5,r23
  809978:	080b2200 	call	80b220 <__divsi3>
  80997c:	15cf383a 	mul	r7,r2,r23
  809980:	81400717 	ldw	r5,28(r16)
  809984:	80800917 	ldw	r2,36(r16)
  809988:	e00d883a 	mov	r6,fp
  80998c:	a809883a 	mov	r4,r21
  809990:	103ee83a 	callr	r2
  809994:	00bfdb16 	blt	zero,r2,809904 <__alt_mem_descriptor_memory+0xff789904>
  809998:	8080030b 	ldhu	r2,12(r16)
  80999c:	10801014 	ori	r2,r2,64
  8099a0:	8080030d 	sth	r2,12(r16)
  8099a4:	00bfffc4 	movi	r2,-1
  8099a8:	003fab06 	br	809858 <__alt_mem_descriptor_memory+0xff789858>
  8099ac:	0027883a 	mov	r19,zero
  8099b0:	0011883a 	mov	r8,zero
  8099b4:	0039883a 	mov	fp,zero
  8099b8:	0025883a 	mov	r18,zero
  8099bc:	90001f26 	beq	r18,zero,809a3c <__sfvwrite_r+0x29c>
  8099c0:	40005a26 	beq	r8,zero,809b2c <__sfvwrite_r+0x38c>
  8099c4:	982d883a 	mov	r22,r19
  8099c8:	94c0012e 	bgeu	r18,r19,8099d0 <__sfvwrite_r+0x230>
  8099cc:	902d883a 	mov	r22,r18
  8099d0:	81000017 	ldw	r4,0(r16)
  8099d4:	80800417 	ldw	r2,16(r16)
  8099d8:	b02f883a 	mov	r23,r22
  8099dc:	81c00517 	ldw	r7,20(r16)
  8099e0:	1100032e 	bgeu	r2,r4,8099f0 <__sfvwrite_r+0x250>
  8099e4:	80c00217 	ldw	r3,8(r16)
  8099e8:	38c7883a 	add	r3,r7,r3
  8099ec:	1d801816 	blt	r3,r22,809a50 <__sfvwrite_r+0x2b0>
  8099f0:	b1c03e16 	blt	r22,r7,809aec <__sfvwrite_r+0x34c>
  8099f4:	80800917 	ldw	r2,36(r16)
  8099f8:	81400717 	ldw	r5,28(r16)
  8099fc:	e00d883a 	mov	r6,fp
  809a00:	da000115 	stw	r8,4(sp)
  809a04:	a809883a 	mov	r4,r21
  809a08:	103ee83a 	callr	r2
  809a0c:	102f883a 	mov	r23,r2
  809a10:	da000117 	ldw	r8,4(sp)
  809a14:	00bfe00e 	bge	zero,r2,809998 <__alt_mem_descriptor_memory+0xff789998>
  809a18:	9de7c83a 	sub	r19,r19,r23
  809a1c:	98001f26 	beq	r19,zero,809a9c <__sfvwrite_r+0x2fc>
  809a20:	a0800217 	ldw	r2,8(r20)
  809a24:	e5f9883a 	add	fp,fp,r23
  809a28:	95e5c83a 	sub	r18,r18,r23
  809a2c:	15efc83a 	sub	r23,r2,r23
  809a30:	a5c00215 	stw	r23,8(r20)
  809a34:	b83f8726 	beq	r23,zero,809854 <__alt_mem_descriptor_memory+0xff789854>
  809a38:	903fe11e 	bne	r18,zero,8099c0 <__alt_mem_descriptor_memory+0xff7899c0>
  809a3c:	8f000017 	ldw	fp,0(r17)
  809a40:	8c800117 	ldw	r18,4(r17)
  809a44:	0011883a 	mov	r8,zero
  809a48:	8c400204 	addi	r17,r17,8
  809a4c:	003fdb06 	br	8099bc <__alt_mem_descriptor_memory+0xff7899bc>
  809a50:	180d883a 	mov	r6,r3
  809a54:	e00b883a 	mov	r5,fp
  809a58:	da000115 	stw	r8,4(sp)
  809a5c:	d8c00015 	stw	r3,0(sp)
  809a60:	0809d100 	call	809d10 <memmove>
  809a64:	d8c00017 	ldw	r3,0(sp)
  809a68:	80800017 	ldw	r2,0(r16)
  809a6c:	800b883a 	mov	r5,r16
  809a70:	a809883a 	mov	r4,r21
  809a74:	10c5883a 	add	r2,r2,r3
  809a78:	80800015 	stw	r2,0(r16)
  809a7c:	d8c00015 	stw	r3,0(sp)
  809a80:	080524c0 	call	80524c <_fflush_r>
  809a84:	d8c00017 	ldw	r3,0(sp)
  809a88:	da000117 	ldw	r8,4(sp)
  809a8c:	103fc21e 	bne	r2,zero,809998 <__alt_mem_descriptor_memory+0xff789998>
  809a90:	182f883a 	mov	r23,r3
  809a94:	9de7c83a 	sub	r19,r19,r23
  809a98:	983fe11e 	bne	r19,zero,809a20 <__alt_mem_descriptor_memory+0xff789a20>
  809a9c:	800b883a 	mov	r5,r16
  809aa0:	a809883a 	mov	r4,r21
  809aa4:	080524c0 	call	80524c <_fflush_r>
  809aa8:	103fbb1e 	bne	r2,zero,809998 <__alt_mem_descriptor_memory+0xff789998>
  809aac:	0011883a 	mov	r8,zero
  809ab0:	003fdb06 	br	809a20 <__alt_mem_descriptor_memory+0xff789a20>
  809ab4:	94c0012e 	bgeu	r18,r19,809abc <__sfvwrite_r+0x31c>
  809ab8:	9027883a 	mov	r19,r18
  809abc:	980d883a 	mov	r6,r19
  809ac0:	e00b883a 	mov	r5,fp
  809ac4:	0809d100 	call	809d10 <memmove>
  809ac8:	80800217 	ldw	r2,8(r16)
  809acc:	80c00017 	ldw	r3,0(r16)
  809ad0:	14c5c83a 	sub	r2,r2,r19
  809ad4:	1cc7883a 	add	r3,r3,r19
  809ad8:	80800215 	stw	r2,8(r16)
  809adc:	80c00015 	stw	r3,0(r16)
  809ae0:	10004326 	beq	r2,zero,809bf0 <__sfvwrite_r+0x450>
  809ae4:	9805883a 	mov	r2,r19
  809ae8:	003f8606 	br	809904 <__alt_mem_descriptor_memory+0xff789904>
  809aec:	b00d883a 	mov	r6,r22
  809af0:	e00b883a 	mov	r5,fp
  809af4:	da000115 	stw	r8,4(sp)
  809af8:	0809d100 	call	809d10 <memmove>
  809afc:	80800217 	ldw	r2,8(r16)
  809b00:	80c00017 	ldw	r3,0(r16)
  809b04:	da000117 	ldw	r8,4(sp)
  809b08:	1585c83a 	sub	r2,r2,r22
  809b0c:	1dad883a 	add	r22,r3,r22
  809b10:	80800215 	stw	r2,8(r16)
  809b14:	85800015 	stw	r22,0(r16)
  809b18:	003fbf06 	br	809a18 <__alt_mem_descriptor_memory+0xff789a18>
  809b1c:	81000017 	ldw	r4,0(r16)
  809b20:	9027883a 	mov	r19,r18
  809b24:	902f883a 	mov	r23,r18
  809b28:	003f6c06 	br	8098dc <__alt_mem_descriptor_memory+0xff7898dc>
  809b2c:	900d883a 	mov	r6,r18
  809b30:	01400284 	movi	r5,10
  809b34:	e009883a 	mov	r4,fp
  809b38:	08066d80 	call	8066d8 <memchr>
  809b3c:	10003e26 	beq	r2,zero,809c38 <__sfvwrite_r+0x498>
  809b40:	10800044 	addi	r2,r2,1
  809b44:	1727c83a 	sub	r19,r2,fp
  809b48:	02000044 	movi	r8,1
  809b4c:	003f9d06 	br	8099c4 <__alt_mem_descriptor_memory+0xff7899c4>
  809b50:	80800517 	ldw	r2,20(r16)
  809b54:	81400417 	ldw	r5,16(r16)
  809b58:	81c00017 	ldw	r7,0(r16)
  809b5c:	10a7883a 	add	r19,r2,r2
  809b60:	9885883a 	add	r2,r19,r2
  809b64:	1026d7fa 	srli	r19,r2,31
  809b68:	396dc83a 	sub	r22,r7,r5
  809b6c:	b1000044 	addi	r4,r22,1
  809b70:	9885883a 	add	r2,r19,r2
  809b74:	1027d07a 	srai	r19,r2,1
  809b78:	2485883a 	add	r2,r4,r18
  809b7c:	980d883a 	mov	r6,r19
  809b80:	9880022e 	bgeu	r19,r2,809b8c <__sfvwrite_r+0x3ec>
  809b84:	1027883a 	mov	r19,r2
  809b88:	100d883a 	mov	r6,r2
  809b8c:	18c1000c 	andi	r3,r3,1024
  809b90:	18001c26 	beq	r3,zero,809c04 <__sfvwrite_r+0x464>
  809b94:	300b883a 	mov	r5,r6
  809b98:	a809883a 	mov	r4,r21
  809b9c:	0805ecc0 	call	805ecc <_malloc_r>
  809ba0:	102f883a 	mov	r23,r2
  809ba4:	10002926 	beq	r2,zero,809c4c <__sfvwrite_r+0x4ac>
  809ba8:	81400417 	ldw	r5,16(r16)
  809bac:	b00d883a 	mov	r6,r22
  809bb0:	1009883a 	mov	r4,r2
  809bb4:	08067bc0 	call	8067bc <memcpy>
  809bb8:	8080030b 	ldhu	r2,12(r16)
  809bbc:	00fedfc4 	movi	r3,-1153
  809bc0:	10c4703a 	and	r2,r2,r3
  809bc4:	10802014 	ori	r2,r2,128
  809bc8:	8080030d 	sth	r2,12(r16)
  809bcc:	bd89883a 	add	r4,r23,r22
  809bd0:	9d8fc83a 	sub	r7,r19,r22
  809bd4:	85c00415 	stw	r23,16(r16)
  809bd8:	84c00515 	stw	r19,20(r16)
  809bdc:	81000015 	stw	r4,0(r16)
  809be0:	9027883a 	mov	r19,r18
  809be4:	81c00215 	stw	r7,8(r16)
  809be8:	902f883a 	mov	r23,r18
  809bec:	003f3b06 	br	8098dc <__alt_mem_descriptor_memory+0xff7898dc>
  809bf0:	800b883a 	mov	r5,r16
  809bf4:	a809883a 	mov	r4,r21
  809bf8:	080524c0 	call	80524c <_fflush_r>
  809bfc:	103fb926 	beq	r2,zero,809ae4 <__alt_mem_descriptor_memory+0xff789ae4>
  809c00:	003f6506 	br	809998 <__alt_mem_descriptor_memory+0xff789998>
  809c04:	a809883a 	mov	r4,r21
  809c08:	0809ecc0 	call	809ecc <_realloc_r>
  809c0c:	102f883a 	mov	r23,r2
  809c10:	103fee1e 	bne	r2,zero,809bcc <__alt_mem_descriptor_memory+0xff789bcc>
  809c14:	81400417 	ldw	r5,16(r16)
  809c18:	a809883a 	mov	r4,r21
  809c1c:	080579c0 	call	80579c <_free_r>
  809c20:	8080030b 	ldhu	r2,12(r16)
  809c24:	00ffdfc4 	movi	r3,-129
  809c28:	1884703a 	and	r2,r3,r2
  809c2c:	00c00304 	movi	r3,12
  809c30:	a8c00015 	stw	r3,0(r21)
  809c34:	003f5906 	br	80999c <__alt_mem_descriptor_memory+0xff78999c>
  809c38:	94c00044 	addi	r19,r18,1
  809c3c:	02000044 	movi	r8,1
  809c40:	003f6006 	br	8099c4 <__alt_mem_descriptor_memory+0xff7899c4>
  809c44:	00bfffc4 	movi	r2,-1
  809c48:	003f0306 	br	809858 <__alt_mem_descriptor_memory+0xff789858>
  809c4c:	00800304 	movi	r2,12
  809c50:	a8800015 	stw	r2,0(r21)
  809c54:	8080030b 	ldhu	r2,12(r16)
  809c58:	003f5006 	br	80999c <__alt_mem_descriptor_memory+0xff78999c>

00809c5c <_isatty_r>:
  809c5c:	defffd04 	addi	sp,sp,-12
  809c60:	dc000015 	stw	r16,0(sp)
  809c64:	04002074 	movhi	r16,129
  809c68:	dc400115 	stw	r17,4(sp)
  809c6c:	8418d004 	addi	r16,r16,25408
  809c70:	2023883a 	mov	r17,r4
  809c74:	2809883a 	mov	r4,r5
  809c78:	dfc00215 	stw	ra,8(sp)
  809c7c:	80000015 	stw	zero,0(r16)
  809c80:	080dc380 	call	80dc38 <isatty>
  809c84:	00ffffc4 	movi	r3,-1
  809c88:	10c00526 	beq	r2,r3,809ca0 <_isatty_r+0x44>
  809c8c:	dfc00217 	ldw	ra,8(sp)
  809c90:	dc400117 	ldw	r17,4(sp)
  809c94:	dc000017 	ldw	r16,0(sp)
  809c98:	dec00304 	addi	sp,sp,12
  809c9c:	f800283a 	ret
  809ca0:	80c00017 	ldw	r3,0(r16)
  809ca4:	183ff926 	beq	r3,zero,809c8c <__alt_mem_descriptor_memory+0xff789c8c>
  809ca8:	88c00015 	stw	r3,0(r17)
  809cac:	003ff706 	br	809c8c <__alt_mem_descriptor_memory+0xff789c8c>

00809cb0 <_lseek_r>:
  809cb0:	defffd04 	addi	sp,sp,-12
  809cb4:	2805883a 	mov	r2,r5
  809cb8:	dc000015 	stw	r16,0(sp)
  809cbc:	04002074 	movhi	r16,129
  809cc0:	dc400115 	stw	r17,4(sp)
  809cc4:	300b883a 	mov	r5,r6
  809cc8:	8418d004 	addi	r16,r16,25408
  809ccc:	2023883a 	mov	r17,r4
  809cd0:	380d883a 	mov	r6,r7
  809cd4:	1009883a 	mov	r4,r2
  809cd8:	dfc00215 	stw	ra,8(sp)
  809cdc:	80000015 	stw	zero,0(r16)
  809ce0:	080dd180 	call	80dd18 <lseek>
  809ce4:	00ffffc4 	movi	r3,-1
  809ce8:	10c00526 	beq	r2,r3,809d00 <_lseek_r+0x50>
  809cec:	dfc00217 	ldw	ra,8(sp)
  809cf0:	dc400117 	ldw	r17,4(sp)
  809cf4:	dc000017 	ldw	r16,0(sp)
  809cf8:	dec00304 	addi	sp,sp,12
  809cfc:	f800283a 	ret
  809d00:	80c00017 	ldw	r3,0(r16)
  809d04:	183ff926 	beq	r3,zero,809cec <__alt_mem_descriptor_memory+0xff789cec>
  809d08:	88c00015 	stw	r3,0(r17)
  809d0c:	003ff706 	br	809cec <__alt_mem_descriptor_memory+0xff789cec>

00809d10 <memmove>:
  809d10:	2005883a 	mov	r2,r4
  809d14:	29000b2e 	bgeu	r5,r4,809d44 <memmove+0x34>
  809d18:	298f883a 	add	r7,r5,r6
  809d1c:	21c0092e 	bgeu	r4,r7,809d44 <memmove+0x34>
  809d20:	2187883a 	add	r3,r4,r6
  809d24:	198bc83a 	sub	r5,r3,r6
  809d28:	30004826 	beq	r6,zero,809e4c <memmove+0x13c>
  809d2c:	39ffffc4 	addi	r7,r7,-1
  809d30:	39000003 	ldbu	r4,0(r7)
  809d34:	18ffffc4 	addi	r3,r3,-1
  809d38:	19000005 	stb	r4,0(r3)
  809d3c:	28fffb1e 	bne	r5,r3,809d2c <__alt_mem_descriptor_memory+0xff789d2c>
  809d40:	f800283a 	ret
  809d44:	00c003c4 	movi	r3,15
  809d48:	1980412e 	bgeu	r3,r6,809e50 <memmove+0x140>
  809d4c:	2886b03a 	or	r3,r5,r2
  809d50:	18c000cc 	andi	r3,r3,3
  809d54:	1800401e 	bne	r3,zero,809e58 <memmove+0x148>
  809d58:	33fffc04 	addi	r15,r6,-16
  809d5c:	781ed13a 	srli	r15,r15,4
  809d60:	28c00104 	addi	r3,r5,4
  809d64:	13400104 	addi	r13,r2,4
  809d68:	781c913a 	slli	r14,r15,4
  809d6c:	2b000204 	addi	r12,r5,8
  809d70:	12c00204 	addi	r11,r2,8
  809d74:	73800504 	addi	r14,r14,20
  809d78:	2a800304 	addi	r10,r5,12
  809d7c:	12400304 	addi	r9,r2,12
  809d80:	2b9d883a 	add	r14,r5,r14
  809d84:	2811883a 	mov	r8,r5
  809d88:	100f883a 	mov	r7,r2
  809d8c:	41000017 	ldw	r4,0(r8)
  809d90:	39c00404 	addi	r7,r7,16
  809d94:	18c00404 	addi	r3,r3,16
  809d98:	393ffc15 	stw	r4,-16(r7)
  809d9c:	193ffc17 	ldw	r4,-16(r3)
  809da0:	6b400404 	addi	r13,r13,16
  809da4:	5ac00404 	addi	r11,r11,16
  809da8:	693ffc15 	stw	r4,-16(r13)
  809dac:	61000017 	ldw	r4,0(r12)
  809db0:	4a400404 	addi	r9,r9,16
  809db4:	42000404 	addi	r8,r8,16
  809db8:	593ffc15 	stw	r4,-16(r11)
  809dbc:	51000017 	ldw	r4,0(r10)
  809dc0:	63000404 	addi	r12,r12,16
  809dc4:	52800404 	addi	r10,r10,16
  809dc8:	493ffc15 	stw	r4,-16(r9)
  809dcc:	1bbfef1e 	bne	r3,r14,809d8c <__alt_mem_descriptor_memory+0xff789d8c>
  809dd0:	79000044 	addi	r4,r15,1
  809dd4:	2008913a 	slli	r4,r4,4
  809dd8:	328003cc 	andi	r10,r6,15
  809ddc:	02c000c4 	movi	r11,3
  809de0:	1107883a 	add	r3,r2,r4
  809de4:	290b883a 	add	r5,r5,r4
  809de8:	5a801e2e 	bgeu	r11,r10,809e64 <memmove+0x154>
  809dec:	1813883a 	mov	r9,r3
  809df0:	2811883a 	mov	r8,r5
  809df4:	500f883a 	mov	r7,r10
  809df8:	41000017 	ldw	r4,0(r8)
  809dfc:	4a400104 	addi	r9,r9,4
  809e00:	39ffff04 	addi	r7,r7,-4
  809e04:	493fff15 	stw	r4,-4(r9)
  809e08:	42000104 	addi	r8,r8,4
  809e0c:	59fffa36 	bltu	r11,r7,809df8 <__alt_mem_descriptor_memory+0xff789df8>
  809e10:	513fff04 	addi	r4,r10,-4
  809e14:	2008d0ba 	srli	r4,r4,2
  809e18:	318000cc 	andi	r6,r6,3
  809e1c:	21000044 	addi	r4,r4,1
  809e20:	2109883a 	add	r4,r4,r4
  809e24:	2109883a 	add	r4,r4,r4
  809e28:	1907883a 	add	r3,r3,r4
  809e2c:	290b883a 	add	r5,r5,r4
  809e30:	30000b26 	beq	r6,zero,809e60 <memmove+0x150>
  809e34:	198d883a 	add	r6,r3,r6
  809e38:	29c00003 	ldbu	r7,0(r5)
  809e3c:	18c00044 	addi	r3,r3,1
  809e40:	29400044 	addi	r5,r5,1
  809e44:	19ffffc5 	stb	r7,-1(r3)
  809e48:	19bffb1e 	bne	r3,r6,809e38 <__alt_mem_descriptor_memory+0xff789e38>
  809e4c:	f800283a 	ret
  809e50:	1007883a 	mov	r3,r2
  809e54:	003ff606 	br	809e30 <__alt_mem_descriptor_memory+0xff789e30>
  809e58:	1007883a 	mov	r3,r2
  809e5c:	003ff506 	br	809e34 <__alt_mem_descriptor_memory+0xff789e34>
  809e60:	f800283a 	ret
  809e64:	500d883a 	mov	r6,r10
  809e68:	003ff106 	br	809e30 <__alt_mem_descriptor_memory+0xff789e30>

00809e6c <_read_r>:
  809e6c:	defffd04 	addi	sp,sp,-12
  809e70:	2805883a 	mov	r2,r5
  809e74:	dc000015 	stw	r16,0(sp)
  809e78:	04002074 	movhi	r16,129
  809e7c:	dc400115 	stw	r17,4(sp)
  809e80:	300b883a 	mov	r5,r6
  809e84:	8418d004 	addi	r16,r16,25408
  809e88:	2023883a 	mov	r17,r4
  809e8c:	380d883a 	mov	r6,r7
  809e90:	1009883a 	mov	r4,r2
  809e94:	dfc00215 	stw	ra,8(sp)
  809e98:	80000015 	stw	zero,0(r16)
  809e9c:	080deec0 	call	80deec <read>
  809ea0:	00ffffc4 	movi	r3,-1
  809ea4:	10c00526 	beq	r2,r3,809ebc <_read_r+0x50>
  809ea8:	dfc00217 	ldw	ra,8(sp)
  809eac:	dc400117 	ldw	r17,4(sp)
  809eb0:	dc000017 	ldw	r16,0(sp)
  809eb4:	dec00304 	addi	sp,sp,12
  809eb8:	f800283a 	ret
  809ebc:	80c00017 	ldw	r3,0(r16)
  809ec0:	183ff926 	beq	r3,zero,809ea8 <__alt_mem_descriptor_memory+0xff789ea8>
  809ec4:	88c00015 	stw	r3,0(r17)
  809ec8:	003ff706 	br	809ea8 <__alt_mem_descriptor_memory+0xff789ea8>

00809ecc <_realloc_r>:
  809ecc:	defff604 	addi	sp,sp,-40
  809ed0:	dc800215 	stw	r18,8(sp)
  809ed4:	dfc00915 	stw	ra,36(sp)
  809ed8:	df000815 	stw	fp,32(sp)
  809edc:	ddc00715 	stw	r23,28(sp)
  809ee0:	dd800615 	stw	r22,24(sp)
  809ee4:	dd400515 	stw	r21,20(sp)
  809ee8:	dd000415 	stw	r20,16(sp)
  809eec:	dcc00315 	stw	r19,12(sp)
  809ef0:	dc400115 	stw	r17,4(sp)
  809ef4:	dc000015 	stw	r16,0(sp)
  809ef8:	3025883a 	mov	r18,r6
  809efc:	2800b726 	beq	r5,zero,80a1dc <_realloc_r+0x310>
  809f00:	282b883a 	mov	r21,r5
  809f04:	2029883a 	mov	r20,r4
  809f08:	080de680 	call	80de68 <__malloc_lock>
  809f0c:	a8bfff17 	ldw	r2,-4(r21)
  809f10:	043fff04 	movi	r16,-4
  809f14:	90c002c4 	addi	r3,r18,11
  809f18:	01000584 	movi	r4,22
  809f1c:	acfffe04 	addi	r19,r21,-8
  809f20:	1420703a 	and	r16,r2,r16
  809f24:	20c0332e 	bgeu	r4,r3,809ff4 <_realloc_r+0x128>
  809f28:	047ffe04 	movi	r17,-8
  809f2c:	1c62703a 	and	r17,r3,r17
  809f30:	8807883a 	mov	r3,r17
  809f34:	88005816 	blt	r17,zero,80a098 <_realloc_r+0x1cc>
  809f38:	8c805736 	bltu	r17,r18,80a098 <_realloc_r+0x1cc>
  809f3c:	80c0300e 	bge	r16,r3,80a000 <_realloc_r+0x134>
  809f40:	07002074 	movhi	fp,129
  809f44:	e7127204 	addi	fp,fp,18888
  809f48:	e1c00217 	ldw	r7,8(fp)
  809f4c:	9c09883a 	add	r4,r19,r16
  809f50:	22000117 	ldw	r8,4(r4)
  809f54:	21c06326 	beq	r4,r7,80a0e4 <_realloc_r+0x218>
  809f58:	017fff84 	movi	r5,-2
  809f5c:	414a703a 	and	r5,r8,r5
  809f60:	214b883a 	add	r5,r4,r5
  809f64:	29800117 	ldw	r6,4(r5)
  809f68:	3180004c 	andi	r6,r6,1
  809f6c:	30003f26 	beq	r6,zero,80a06c <_realloc_r+0x1a0>
  809f70:	1080004c 	andi	r2,r2,1
  809f74:	10008326 	beq	r2,zero,80a184 <_realloc_r+0x2b8>
  809f78:	900b883a 	mov	r5,r18
  809f7c:	a009883a 	mov	r4,r20
  809f80:	0805ecc0 	call	805ecc <_malloc_r>
  809f84:	1025883a 	mov	r18,r2
  809f88:	10011e26 	beq	r2,zero,80a404 <_realloc_r+0x538>
  809f8c:	a93fff17 	ldw	r4,-4(r21)
  809f90:	10fffe04 	addi	r3,r2,-8
  809f94:	00bfff84 	movi	r2,-2
  809f98:	2084703a 	and	r2,r4,r2
  809f9c:	9885883a 	add	r2,r19,r2
  809fa0:	1880ee26 	beq	r3,r2,80a35c <_realloc_r+0x490>
  809fa4:	81bfff04 	addi	r6,r16,-4
  809fa8:	00800904 	movi	r2,36
  809fac:	1180b836 	bltu	r2,r6,80a290 <_realloc_r+0x3c4>
  809fb0:	00c004c4 	movi	r3,19
  809fb4:	19809636 	bltu	r3,r6,80a210 <_realloc_r+0x344>
  809fb8:	9005883a 	mov	r2,r18
  809fbc:	a807883a 	mov	r3,r21
  809fc0:	19000017 	ldw	r4,0(r3)
  809fc4:	11000015 	stw	r4,0(r2)
  809fc8:	19000117 	ldw	r4,4(r3)
  809fcc:	11000115 	stw	r4,4(r2)
  809fd0:	18c00217 	ldw	r3,8(r3)
  809fd4:	10c00215 	stw	r3,8(r2)
  809fd8:	a80b883a 	mov	r5,r21
  809fdc:	a009883a 	mov	r4,r20
  809fe0:	080579c0 	call	80579c <_free_r>
  809fe4:	a009883a 	mov	r4,r20
  809fe8:	080de8c0 	call	80de8c <__malloc_unlock>
  809fec:	9005883a 	mov	r2,r18
  809ff0:	00001206 	br	80a03c <_realloc_r+0x170>
  809ff4:	00c00404 	movi	r3,16
  809ff8:	1823883a 	mov	r17,r3
  809ffc:	003fce06 	br	809f38 <__alt_mem_descriptor_memory+0xff789f38>
  80a000:	a825883a 	mov	r18,r21
  80a004:	8445c83a 	sub	r2,r16,r17
  80a008:	00c003c4 	movi	r3,15
  80a00c:	18802636 	bltu	r3,r2,80a0a8 <_realloc_r+0x1dc>
  80a010:	99800117 	ldw	r6,4(r19)
  80a014:	9c07883a 	add	r3,r19,r16
  80a018:	3180004c 	andi	r6,r6,1
  80a01c:	3420b03a 	or	r16,r6,r16
  80a020:	9c000115 	stw	r16,4(r19)
  80a024:	18800117 	ldw	r2,4(r3)
  80a028:	10800054 	ori	r2,r2,1
  80a02c:	18800115 	stw	r2,4(r3)
  80a030:	a009883a 	mov	r4,r20
  80a034:	080de8c0 	call	80de8c <__malloc_unlock>
  80a038:	9005883a 	mov	r2,r18
  80a03c:	dfc00917 	ldw	ra,36(sp)
  80a040:	df000817 	ldw	fp,32(sp)
  80a044:	ddc00717 	ldw	r23,28(sp)
  80a048:	dd800617 	ldw	r22,24(sp)
  80a04c:	dd400517 	ldw	r21,20(sp)
  80a050:	dd000417 	ldw	r20,16(sp)
  80a054:	dcc00317 	ldw	r19,12(sp)
  80a058:	dc800217 	ldw	r18,8(sp)
  80a05c:	dc400117 	ldw	r17,4(sp)
  80a060:	dc000017 	ldw	r16,0(sp)
  80a064:	dec00a04 	addi	sp,sp,40
  80a068:	f800283a 	ret
  80a06c:	017fff04 	movi	r5,-4
  80a070:	414a703a 	and	r5,r8,r5
  80a074:	814d883a 	add	r6,r16,r5
  80a078:	30c01f16 	blt	r6,r3,80a0f8 <_realloc_r+0x22c>
  80a07c:	20800317 	ldw	r2,12(r4)
  80a080:	20c00217 	ldw	r3,8(r4)
  80a084:	a825883a 	mov	r18,r21
  80a088:	3021883a 	mov	r16,r6
  80a08c:	18800315 	stw	r2,12(r3)
  80a090:	10c00215 	stw	r3,8(r2)
  80a094:	003fdb06 	br	80a004 <__alt_mem_descriptor_memory+0xff78a004>
  80a098:	00800304 	movi	r2,12
  80a09c:	a0800015 	stw	r2,0(r20)
  80a0a0:	0005883a 	mov	r2,zero
  80a0a4:	003fe506 	br	80a03c <__alt_mem_descriptor_memory+0xff78a03c>
  80a0a8:	98c00117 	ldw	r3,4(r19)
  80a0ac:	9c4b883a 	add	r5,r19,r17
  80a0b0:	11000054 	ori	r4,r2,1
  80a0b4:	18c0004c 	andi	r3,r3,1
  80a0b8:	1c62b03a 	or	r17,r3,r17
  80a0bc:	9c400115 	stw	r17,4(r19)
  80a0c0:	29000115 	stw	r4,4(r5)
  80a0c4:	2885883a 	add	r2,r5,r2
  80a0c8:	10c00117 	ldw	r3,4(r2)
  80a0cc:	29400204 	addi	r5,r5,8
  80a0d0:	a009883a 	mov	r4,r20
  80a0d4:	18c00054 	ori	r3,r3,1
  80a0d8:	10c00115 	stw	r3,4(r2)
  80a0dc:	080579c0 	call	80579c <_free_r>
  80a0e0:	003fd306 	br	80a030 <__alt_mem_descriptor_memory+0xff78a030>
  80a0e4:	017fff04 	movi	r5,-4
  80a0e8:	414a703a 	and	r5,r8,r5
  80a0ec:	89800404 	addi	r6,r17,16
  80a0f0:	8151883a 	add	r8,r16,r5
  80a0f4:	4180590e 	bge	r8,r6,80a25c <_realloc_r+0x390>
  80a0f8:	1080004c 	andi	r2,r2,1
  80a0fc:	103f9e1e 	bne	r2,zero,809f78 <__alt_mem_descriptor_memory+0xff789f78>
  80a100:	adbffe17 	ldw	r22,-8(r21)
  80a104:	00bfff04 	movi	r2,-4
  80a108:	9dadc83a 	sub	r22,r19,r22
  80a10c:	b1800117 	ldw	r6,4(r22)
  80a110:	3084703a 	and	r2,r6,r2
  80a114:	20002026 	beq	r4,zero,80a198 <_realloc_r+0x2cc>
  80a118:	80af883a 	add	r23,r16,r2
  80a11c:	b96f883a 	add	r23,r23,r5
  80a120:	21c05f26 	beq	r4,r7,80a2a0 <_realloc_r+0x3d4>
  80a124:	b8c01c16 	blt	r23,r3,80a198 <_realloc_r+0x2cc>
  80a128:	20800317 	ldw	r2,12(r4)
  80a12c:	20c00217 	ldw	r3,8(r4)
  80a130:	81bfff04 	addi	r6,r16,-4
  80a134:	01000904 	movi	r4,36
  80a138:	18800315 	stw	r2,12(r3)
  80a13c:	10c00215 	stw	r3,8(r2)
  80a140:	b0c00217 	ldw	r3,8(r22)
  80a144:	b0800317 	ldw	r2,12(r22)
  80a148:	b4800204 	addi	r18,r22,8
  80a14c:	18800315 	stw	r2,12(r3)
  80a150:	10c00215 	stw	r3,8(r2)
  80a154:	21801b36 	bltu	r4,r6,80a1c4 <_realloc_r+0x2f8>
  80a158:	008004c4 	movi	r2,19
  80a15c:	1180352e 	bgeu	r2,r6,80a234 <_realloc_r+0x368>
  80a160:	a8800017 	ldw	r2,0(r21)
  80a164:	b0800215 	stw	r2,8(r22)
  80a168:	a8800117 	ldw	r2,4(r21)
  80a16c:	b0800315 	stw	r2,12(r22)
  80a170:	008006c4 	movi	r2,27
  80a174:	11807f36 	bltu	r2,r6,80a374 <_realloc_r+0x4a8>
  80a178:	b0800404 	addi	r2,r22,16
  80a17c:	ad400204 	addi	r21,r21,8
  80a180:	00002d06 	br	80a238 <_realloc_r+0x36c>
  80a184:	adbffe17 	ldw	r22,-8(r21)
  80a188:	00bfff04 	movi	r2,-4
  80a18c:	9dadc83a 	sub	r22,r19,r22
  80a190:	b1000117 	ldw	r4,4(r22)
  80a194:	2084703a 	and	r2,r4,r2
  80a198:	b03f7726 	beq	r22,zero,809f78 <__alt_mem_descriptor_memory+0xff789f78>
  80a19c:	80af883a 	add	r23,r16,r2
  80a1a0:	b8ff7516 	blt	r23,r3,809f78 <__alt_mem_descriptor_memory+0xff789f78>
  80a1a4:	b0800317 	ldw	r2,12(r22)
  80a1a8:	b0c00217 	ldw	r3,8(r22)
  80a1ac:	81bfff04 	addi	r6,r16,-4
  80a1b0:	01000904 	movi	r4,36
  80a1b4:	18800315 	stw	r2,12(r3)
  80a1b8:	10c00215 	stw	r3,8(r2)
  80a1bc:	b4800204 	addi	r18,r22,8
  80a1c0:	21bfe52e 	bgeu	r4,r6,80a158 <__alt_mem_descriptor_memory+0xff78a158>
  80a1c4:	a80b883a 	mov	r5,r21
  80a1c8:	9009883a 	mov	r4,r18
  80a1cc:	0809d100 	call	809d10 <memmove>
  80a1d0:	b821883a 	mov	r16,r23
  80a1d4:	b027883a 	mov	r19,r22
  80a1d8:	003f8a06 	br	80a004 <__alt_mem_descriptor_memory+0xff78a004>
  80a1dc:	300b883a 	mov	r5,r6
  80a1e0:	dfc00917 	ldw	ra,36(sp)
  80a1e4:	df000817 	ldw	fp,32(sp)
  80a1e8:	ddc00717 	ldw	r23,28(sp)
  80a1ec:	dd800617 	ldw	r22,24(sp)
  80a1f0:	dd400517 	ldw	r21,20(sp)
  80a1f4:	dd000417 	ldw	r20,16(sp)
  80a1f8:	dcc00317 	ldw	r19,12(sp)
  80a1fc:	dc800217 	ldw	r18,8(sp)
  80a200:	dc400117 	ldw	r17,4(sp)
  80a204:	dc000017 	ldw	r16,0(sp)
  80a208:	dec00a04 	addi	sp,sp,40
  80a20c:	0805ecc1 	jmpi	805ecc <_malloc_r>
  80a210:	a8c00017 	ldw	r3,0(r21)
  80a214:	90c00015 	stw	r3,0(r18)
  80a218:	a8c00117 	ldw	r3,4(r21)
  80a21c:	90c00115 	stw	r3,4(r18)
  80a220:	00c006c4 	movi	r3,27
  80a224:	19804536 	bltu	r3,r6,80a33c <_realloc_r+0x470>
  80a228:	90800204 	addi	r2,r18,8
  80a22c:	a8c00204 	addi	r3,r21,8
  80a230:	003f6306 	br	809fc0 <__alt_mem_descriptor_memory+0xff789fc0>
  80a234:	9005883a 	mov	r2,r18
  80a238:	a8c00017 	ldw	r3,0(r21)
  80a23c:	b821883a 	mov	r16,r23
  80a240:	b027883a 	mov	r19,r22
  80a244:	10c00015 	stw	r3,0(r2)
  80a248:	a8c00117 	ldw	r3,4(r21)
  80a24c:	10c00115 	stw	r3,4(r2)
  80a250:	a8c00217 	ldw	r3,8(r21)
  80a254:	10c00215 	stw	r3,8(r2)
  80a258:	003f6a06 	br	80a004 <__alt_mem_descriptor_memory+0xff78a004>
  80a25c:	9c67883a 	add	r19,r19,r17
  80a260:	4445c83a 	sub	r2,r8,r17
  80a264:	e4c00215 	stw	r19,8(fp)
  80a268:	10800054 	ori	r2,r2,1
  80a26c:	98800115 	stw	r2,4(r19)
  80a270:	a8bfff17 	ldw	r2,-4(r21)
  80a274:	a009883a 	mov	r4,r20
  80a278:	1080004c 	andi	r2,r2,1
  80a27c:	1462b03a 	or	r17,r2,r17
  80a280:	ac7fff15 	stw	r17,-4(r21)
  80a284:	080de8c0 	call	80de8c <__malloc_unlock>
  80a288:	a805883a 	mov	r2,r21
  80a28c:	003f6b06 	br	80a03c <__alt_mem_descriptor_memory+0xff78a03c>
  80a290:	a80b883a 	mov	r5,r21
  80a294:	9009883a 	mov	r4,r18
  80a298:	0809d100 	call	809d10 <memmove>
  80a29c:	003f4e06 	br	809fd8 <__alt_mem_descriptor_memory+0xff789fd8>
  80a2a0:	89000404 	addi	r4,r17,16
  80a2a4:	b93fbc16 	blt	r23,r4,80a198 <__alt_mem_descriptor_memory+0xff78a198>
  80a2a8:	b0800317 	ldw	r2,12(r22)
  80a2ac:	b0c00217 	ldw	r3,8(r22)
  80a2b0:	81bfff04 	addi	r6,r16,-4
  80a2b4:	01000904 	movi	r4,36
  80a2b8:	18800315 	stw	r2,12(r3)
  80a2bc:	10c00215 	stw	r3,8(r2)
  80a2c0:	b4800204 	addi	r18,r22,8
  80a2c4:	21804336 	bltu	r4,r6,80a3d4 <_realloc_r+0x508>
  80a2c8:	008004c4 	movi	r2,19
  80a2cc:	11803f2e 	bgeu	r2,r6,80a3cc <_realloc_r+0x500>
  80a2d0:	a8800017 	ldw	r2,0(r21)
  80a2d4:	b0800215 	stw	r2,8(r22)
  80a2d8:	a8800117 	ldw	r2,4(r21)
  80a2dc:	b0800315 	stw	r2,12(r22)
  80a2e0:	008006c4 	movi	r2,27
  80a2e4:	11803f36 	bltu	r2,r6,80a3e4 <_realloc_r+0x518>
  80a2e8:	b0800404 	addi	r2,r22,16
  80a2ec:	ad400204 	addi	r21,r21,8
  80a2f0:	a8c00017 	ldw	r3,0(r21)
  80a2f4:	10c00015 	stw	r3,0(r2)
  80a2f8:	a8c00117 	ldw	r3,4(r21)
  80a2fc:	10c00115 	stw	r3,4(r2)
  80a300:	a8c00217 	ldw	r3,8(r21)
  80a304:	10c00215 	stw	r3,8(r2)
  80a308:	b447883a 	add	r3,r22,r17
  80a30c:	bc45c83a 	sub	r2,r23,r17
  80a310:	e0c00215 	stw	r3,8(fp)
  80a314:	10800054 	ori	r2,r2,1
  80a318:	18800115 	stw	r2,4(r3)
  80a31c:	b0800117 	ldw	r2,4(r22)
  80a320:	a009883a 	mov	r4,r20
  80a324:	1080004c 	andi	r2,r2,1
  80a328:	1462b03a 	or	r17,r2,r17
  80a32c:	b4400115 	stw	r17,4(r22)
  80a330:	080de8c0 	call	80de8c <__malloc_unlock>
  80a334:	9005883a 	mov	r2,r18
  80a338:	003f4006 	br	80a03c <__alt_mem_descriptor_memory+0xff78a03c>
  80a33c:	a8c00217 	ldw	r3,8(r21)
  80a340:	90c00215 	stw	r3,8(r18)
  80a344:	a8c00317 	ldw	r3,12(r21)
  80a348:	90c00315 	stw	r3,12(r18)
  80a34c:	30801126 	beq	r6,r2,80a394 <_realloc_r+0x4c8>
  80a350:	90800404 	addi	r2,r18,16
  80a354:	a8c00404 	addi	r3,r21,16
  80a358:	003f1906 	br	809fc0 <__alt_mem_descriptor_memory+0xff789fc0>
  80a35c:	90ffff17 	ldw	r3,-4(r18)
  80a360:	00bfff04 	movi	r2,-4
  80a364:	a825883a 	mov	r18,r21
  80a368:	1884703a 	and	r2,r3,r2
  80a36c:	80a1883a 	add	r16,r16,r2
  80a370:	003f2406 	br	80a004 <__alt_mem_descriptor_memory+0xff78a004>
  80a374:	a8800217 	ldw	r2,8(r21)
  80a378:	b0800415 	stw	r2,16(r22)
  80a37c:	a8800317 	ldw	r2,12(r21)
  80a380:	b0800515 	stw	r2,20(r22)
  80a384:	31000a26 	beq	r6,r4,80a3b0 <_realloc_r+0x4e4>
  80a388:	b0800604 	addi	r2,r22,24
  80a38c:	ad400404 	addi	r21,r21,16
  80a390:	003fa906 	br	80a238 <__alt_mem_descriptor_memory+0xff78a238>
  80a394:	a9000417 	ldw	r4,16(r21)
  80a398:	90800604 	addi	r2,r18,24
  80a39c:	a8c00604 	addi	r3,r21,24
  80a3a0:	91000415 	stw	r4,16(r18)
  80a3a4:	a9000517 	ldw	r4,20(r21)
  80a3a8:	91000515 	stw	r4,20(r18)
  80a3ac:	003f0406 	br	809fc0 <__alt_mem_descriptor_memory+0xff789fc0>
  80a3b0:	a8c00417 	ldw	r3,16(r21)
  80a3b4:	ad400604 	addi	r21,r21,24
  80a3b8:	b0800804 	addi	r2,r22,32
  80a3bc:	b0c00615 	stw	r3,24(r22)
  80a3c0:	a8ffff17 	ldw	r3,-4(r21)
  80a3c4:	b0c00715 	stw	r3,28(r22)
  80a3c8:	003f9b06 	br	80a238 <__alt_mem_descriptor_memory+0xff78a238>
  80a3cc:	9005883a 	mov	r2,r18
  80a3d0:	003fc706 	br	80a2f0 <__alt_mem_descriptor_memory+0xff78a2f0>
  80a3d4:	a80b883a 	mov	r5,r21
  80a3d8:	9009883a 	mov	r4,r18
  80a3dc:	0809d100 	call	809d10 <memmove>
  80a3e0:	003fc906 	br	80a308 <__alt_mem_descriptor_memory+0xff78a308>
  80a3e4:	a8800217 	ldw	r2,8(r21)
  80a3e8:	b0800415 	stw	r2,16(r22)
  80a3ec:	a8800317 	ldw	r2,12(r21)
  80a3f0:	b0800515 	stw	r2,20(r22)
  80a3f4:	31000726 	beq	r6,r4,80a414 <_realloc_r+0x548>
  80a3f8:	b0800604 	addi	r2,r22,24
  80a3fc:	ad400404 	addi	r21,r21,16
  80a400:	003fbb06 	br	80a2f0 <__alt_mem_descriptor_memory+0xff78a2f0>
  80a404:	a009883a 	mov	r4,r20
  80a408:	080de8c0 	call	80de8c <__malloc_unlock>
  80a40c:	0005883a 	mov	r2,zero
  80a410:	003f0a06 	br	80a03c <__alt_mem_descriptor_memory+0xff78a03c>
  80a414:	a8c00417 	ldw	r3,16(r21)
  80a418:	ad400604 	addi	r21,r21,24
  80a41c:	b0800804 	addi	r2,r22,32
  80a420:	b0c00615 	stw	r3,24(r22)
  80a424:	a8ffff17 	ldw	r3,-4(r21)
  80a428:	b0c00715 	stw	r3,28(r22)
  80a42c:	003fb006 	br	80a2f0 <__alt_mem_descriptor_memory+0xff78a2f0>

0080a430 <__swbuf_r>:
  80a430:	defffb04 	addi	sp,sp,-20
  80a434:	dcc00315 	stw	r19,12(sp)
  80a438:	dc800215 	stw	r18,8(sp)
  80a43c:	dc000015 	stw	r16,0(sp)
  80a440:	dfc00415 	stw	ra,16(sp)
  80a444:	dc400115 	stw	r17,4(sp)
  80a448:	2025883a 	mov	r18,r4
  80a44c:	2827883a 	mov	r19,r5
  80a450:	3021883a 	mov	r16,r6
  80a454:	20000226 	beq	r4,zero,80a460 <__swbuf_r+0x30>
  80a458:	20800e17 	ldw	r2,56(r4)
  80a45c:	10004226 	beq	r2,zero,80a568 <__swbuf_r+0x138>
  80a460:	80800617 	ldw	r2,24(r16)
  80a464:	8100030b 	ldhu	r4,12(r16)
  80a468:	80800215 	stw	r2,8(r16)
  80a46c:	2080020c 	andi	r2,r4,8
  80a470:	10003626 	beq	r2,zero,80a54c <__swbuf_r+0x11c>
  80a474:	80c00417 	ldw	r3,16(r16)
  80a478:	18003426 	beq	r3,zero,80a54c <__swbuf_r+0x11c>
  80a47c:	2088000c 	andi	r2,r4,8192
  80a480:	9c403fcc 	andi	r17,r19,255
  80a484:	10001a26 	beq	r2,zero,80a4f0 <__swbuf_r+0xc0>
  80a488:	80800017 	ldw	r2,0(r16)
  80a48c:	81000517 	ldw	r4,20(r16)
  80a490:	10c7c83a 	sub	r3,r2,r3
  80a494:	1900200e 	bge	r3,r4,80a518 <__swbuf_r+0xe8>
  80a498:	18c00044 	addi	r3,r3,1
  80a49c:	81000217 	ldw	r4,8(r16)
  80a4a0:	11400044 	addi	r5,r2,1
  80a4a4:	81400015 	stw	r5,0(r16)
  80a4a8:	213fffc4 	addi	r4,r4,-1
  80a4ac:	81000215 	stw	r4,8(r16)
  80a4b0:	14c00005 	stb	r19,0(r2)
  80a4b4:	80800517 	ldw	r2,20(r16)
  80a4b8:	10c01e26 	beq	r2,r3,80a534 <__swbuf_r+0x104>
  80a4bc:	8080030b 	ldhu	r2,12(r16)
  80a4c0:	1080004c 	andi	r2,r2,1
  80a4c4:	10000226 	beq	r2,zero,80a4d0 <__swbuf_r+0xa0>
  80a4c8:	00800284 	movi	r2,10
  80a4cc:	88801926 	beq	r17,r2,80a534 <__swbuf_r+0x104>
  80a4d0:	8805883a 	mov	r2,r17
  80a4d4:	dfc00417 	ldw	ra,16(sp)
  80a4d8:	dcc00317 	ldw	r19,12(sp)
  80a4dc:	dc800217 	ldw	r18,8(sp)
  80a4e0:	dc400117 	ldw	r17,4(sp)
  80a4e4:	dc000017 	ldw	r16,0(sp)
  80a4e8:	dec00504 	addi	sp,sp,20
  80a4ec:	f800283a 	ret
  80a4f0:	81401917 	ldw	r5,100(r16)
  80a4f4:	00b7ffc4 	movi	r2,-8193
  80a4f8:	21080014 	ori	r4,r4,8192
  80a4fc:	2884703a 	and	r2,r5,r2
  80a500:	80801915 	stw	r2,100(r16)
  80a504:	80800017 	ldw	r2,0(r16)
  80a508:	8100030d 	sth	r4,12(r16)
  80a50c:	81000517 	ldw	r4,20(r16)
  80a510:	10c7c83a 	sub	r3,r2,r3
  80a514:	193fe016 	blt	r3,r4,80a498 <__alt_mem_descriptor_memory+0xff78a498>
  80a518:	800b883a 	mov	r5,r16
  80a51c:	9009883a 	mov	r4,r18
  80a520:	080524c0 	call	80524c <_fflush_r>
  80a524:	1000071e 	bne	r2,zero,80a544 <__swbuf_r+0x114>
  80a528:	80800017 	ldw	r2,0(r16)
  80a52c:	00c00044 	movi	r3,1
  80a530:	003fda06 	br	80a49c <__alt_mem_descriptor_memory+0xff78a49c>
  80a534:	800b883a 	mov	r5,r16
  80a538:	9009883a 	mov	r4,r18
  80a53c:	080524c0 	call	80524c <_fflush_r>
  80a540:	103fe326 	beq	r2,zero,80a4d0 <__alt_mem_descriptor_memory+0xff78a4d0>
  80a544:	00bfffc4 	movi	r2,-1
  80a548:	003fe206 	br	80a4d4 <__alt_mem_descriptor_memory+0xff78a4d4>
  80a54c:	800b883a 	mov	r5,r16
  80a550:	9009883a 	mov	r4,r18
  80a554:	08036540 	call	803654 <__swsetup_r>
  80a558:	103ffa1e 	bne	r2,zero,80a544 <__alt_mem_descriptor_memory+0xff78a544>
  80a55c:	8100030b 	ldhu	r4,12(r16)
  80a560:	80c00417 	ldw	r3,16(r16)
  80a564:	003fc506 	br	80a47c <__alt_mem_descriptor_memory+0xff78a47c>
  80a568:	08056280 	call	805628 <__sinit>
  80a56c:	003fbc06 	br	80a460 <__alt_mem_descriptor_memory+0xff78a460>

0080a570 <__swbuf>:
  80a570:	00802074 	movhi	r2,129
  80a574:	1098ac04 	addi	r2,r2,25264
  80a578:	280d883a 	mov	r6,r5
  80a57c:	200b883a 	mov	r5,r4
  80a580:	11000017 	ldw	r4,0(r2)
  80a584:	080a4301 	jmpi	80a430 <__swbuf_r>

0080a588 <_wcrtomb_r>:
  80a588:	defff604 	addi	sp,sp,-40
  80a58c:	00802074 	movhi	r2,129
  80a590:	dc800815 	stw	r18,32(sp)
  80a594:	dc400715 	stw	r17,28(sp)
  80a598:	dc000615 	stw	r16,24(sp)
  80a59c:	1098b004 	addi	r2,r2,25280
  80a5a0:	dfc00915 	stw	ra,36(sp)
  80a5a4:	2021883a 	mov	r16,r4
  80a5a8:	3823883a 	mov	r17,r7
  80a5ac:	14800017 	ldw	r18,0(r2)
  80a5b0:	28001426 	beq	r5,zero,80a604 <_wcrtomb_r+0x7c>
  80a5b4:	d9400415 	stw	r5,16(sp)
  80a5b8:	d9800515 	stw	r6,20(sp)
  80a5bc:	0805cb00 	call	805cb0 <__locale_charset>
  80a5c0:	d9800517 	ldw	r6,20(sp)
  80a5c4:	d9400417 	ldw	r5,16(sp)
  80a5c8:	100f883a 	mov	r7,r2
  80a5cc:	dc400015 	stw	r17,0(sp)
  80a5d0:	8009883a 	mov	r4,r16
  80a5d4:	903ee83a 	callr	r18
  80a5d8:	00ffffc4 	movi	r3,-1
  80a5dc:	10c0031e 	bne	r2,r3,80a5ec <_wcrtomb_r+0x64>
  80a5e0:	88000015 	stw	zero,0(r17)
  80a5e4:	00c02284 	movi	r3,138
  80a5e8:	80c00015 	stw	r3,0(r16)
  80a5ec:	dfc00917 	ldw	ra,36(sp)
  80a5f0:	dc800817 	ldw	r18,32(sp)
  80a5f4:	dc400717 	ldw	r17,28(sp)
  80a5f8:	dc000617 	ldw	r16,24(sp)
  80a5fc:	dec00a04 	addi	sp,sp,40
  80a600:	f800283a 	ret
  80a604:	0805cb00 	call	805cb0 <__locale_charset>
  80a608:	100f883a 	mov	r7,r2
  80a60c:	dc400015 	stw	r17,0(sp)
  80a610:	000d883a 	mov	r6,zero
  80a614:	d9400104 	addi	r5,sp,4
  80a618:	8009883a 	mov	r4,r16
  80a61c:	903ee83a 	callr	r18
  80a620:	003fed06 	br	80a5d8 <__alt_mem_descriptor_memory+0xff78a5d8>

0080a624 <wcrtomb>:
  80a624:	defff604 	addi	sp,sp,-40
  80a628:	00802074 	movhi	r2,129
  80a62c:	dc800615 	stw	r18,24(sp)
  80a630:	dc400515 	stw	r17,20(sp)
  80a634:	1098ac04 	addi	r2,r2,25264
  80a638:	dfc00915 	stw	ra,36(sp)
  80a63c:	dd000815 	stw	r20,32(sp)
  80a640:	dcc00715 	stw	r19,28(sp)
  80a644:	dc000415 	stw	r16,16(sp)
  80a648:	3025883a 	mov	r18,r6
  80a64c:	14400017 	ldw	r17,0(r2)
  80a650:	20001926 	beq	r4,zero,80a6b8 <wcrtomb+0x94>
  80a654:	00802074 	movhi	r2,129
  80a658:	1098b004 	addi	r2,r2,25280
  80a65c:	15000017 	ldw	r20,0(r2)
  80a660:	2021883a 	mov	r16,r4
  80a664:	2827883a 	mov	r19,r5
  80a668:	0805cb00 	call	805cb0 <__locale_charset>
  80a66c:	100f883a 	mov	r7,r2
  80a670:	dc800015 	stw	r18,0(sp)
  80a674:	980d883a 	mov	r6,r19
  80a678:	800b883a 	mov	r5,r16
  80a67c:	8809883a 	mov	r4,r17
  80a680:	a03ee83a 	callr	r20
  80a684:	00ffffc4 	movi	r3,-1
  80a688:	10c0031e 	bne	r2,r3,80a698 <wcrtomb+0x74>
  80a68c:	90000015 	stw	zero,0(r18)
  80a690:	00c02284 	movi	r3,138
  80a694:	88c00015 	stw	r3,0(r17)
  80a698:	dfc00917 	ldw	ra,36(sp)
  80a69c:	dd000817 	ldw	r20,32(sp)
  80a6a0:	dcc00717 	ldw	r19,28(sp)
  80a6a4:	dc800617 	ldw	r18,24(sp)
  80a6a8:	dc400517 	ldw	r17,20(sp)
  80a6ac:	dc000417 	ldw	r16,16(sp)
  80a6b0:	dec00a04 	addi	sp,sp,40
  80a6b4:	f800283a 	ret
  80a6b8:	00802074 	movhi	r2,129
  80a6bc:	1098b004 	addi	r2,r2,25280
  80a6c0:	14000017 	ldw	r16,0(r2)
  80a6c4:	0805cb00 	call	805cb0 <__locale_charset>
  80a6c8:	100f883a 	mov	r7,r2
  80a6cc:	dc800015 	stw	r18,0(sp)
  80a6d0:	000d883a 	mov	r6,zero
  80a6d4:	d9400104 	addi	r5,sp,4
  80a6d8:	8809883a 	mov	r4,r17
  80a6dc:	803ee83a 	callr	r16
  80a6e0:	003fe806 	br	80a684 <__alt_mem_descriptor_memory+0xff78a684>

0080a6e4 <__ascii_wctomb>:
  80a6e4:	28000526 	beq	r5,zero,80a6fc <__ascii_wctomb+0x18>
  80a6e8:	00803fc4 	movi	r2,255
  80a6ec:	11800536 	bltu	r2,r6,80a704 <__ascii_wctomb+0x20>
  80a6f0:	29800005 	stb	r6,0(r5)
  80a6f4:	00800044 	movi	r2,1
  80a6f8:	f800283a 	ret
  80a6fc:	0005883a 	mov	r2,zero
  80a700:	f800283a 	ret
  80a704:	00802284 	movi	r2,138
  80a708:	20800015 	stw	r2,0(r4)
  80a70c:	00bfffc4 	movi	r2,-1
  80a710:	f800283a 	ret

0080a714 <_wctomb_r>:
  80a714:	00802074 	movhi	r2,129
  80a718:	defff904 	addi	sp,sp,-28
  80a71c:	1098b004 	addi	r2,r2,25280
  80a720:	dfc00615 	stw	ra,24(sp)
  80a724:	dc400515 	stw	r17,20(sp)
  80a728:	dc000415 	stw	r16,16(sp)
  80a72c:	3823883a 	mov	r17,r7
  80a730:	14000017 	ldw	r16,0(r2)
  80a734:	d9000115 	stw	r4,4(sp)
  80a738:	d9400215 	stw	r5,8(sp)
  80a73c:	d9800315 	stw	r6,12(sp)
  80a740:	0805cb00 	call	805cb0 <__locale_charset>
  80a744:	d9800317 	ldw	r6,12(sp)
  80a748:	d9400217 	ldw	r5,8(sp)
  80a74c:	d9000117 	ldw	r4,4(sp)
  80a750:	100f883a 	mov	r7,r2
  80a754:	dc400015 	stw	r17,0(sp)
  80a758:	803ee83a 	callr	r16
  80a75c:	dfc00617 	ldw	ra,24(sp)
  80a760:	dc400517 	ldw	r17,20(sp)
  80a764:	dc000417 	ldw	r16,16(sp)
  80a768:	dec00704 	addi	sp,sp,28
  80a76c:	f800283a 	ret

0080a770 <__udivdi3>:
  80a770:	defff504 	addi	sp,sp,-44
  80a774:	dcc00415 	stw	r19,16(sp)
  80a778:	dc000115 	stw	r16,4(sp)
  80a77c:	dfc00a15 	stw	ra,40(sp)
  80a780:	df000915 	stw	fp,36(sp)
  80a784:	ddc00815 	stw	r23,32(sp)
  80a788:	dd800715 	stw	r22,28(sp)
  80a78c:	dd400615 	stw	r21,24(sp)
  80a790:	dd000515 	stw	r20,20(sp)
  80a794:	dc800315 	stw	r18,12(sp)
  80a798:	dc400215 	stw	r17,8(sp)
  80a79c:	2027883a 	mov	r19,r4
  80a7a0:	2821883a 	mov	r16,r5
  80a7a4:	3800411e 	bne	r7,zero,80a8ac <__udivdi3+0x13c>
  80a7a8:	3023883a 	mov	r17,r6
  80a7ac:	2025883a 	mov	r18,r4
  80a7b0:	2980522e 	bgeu	r5,r6,80a8fc <__udivdi3+0x18c>
  80a7b4:	00bfffd4 	movui	r2,65535
  80a7b8:	282d883a 	mov	r22,r5
  80a7bc:	1180a836 	bltu	r2,r6,80aa60 <__udivdi3+0x2f0>
  80a7c0:	00803fc4 	movi	r2,255
  80a7c4:	1185803a 	cmpltu	r2,r2,r6
  80a7c8:	100490fa 	slli	r2,r2,3
  80a7cc:	3086d83a 	srl	r3,r6,r2
  80a7d0:	01002074 	movhi	r4,129
  80a7d4:	210f9ec4 	addi	r4,r4,15995
  80a7d8:	20c7883a 	add	r3,r4,r3
  80a7dc:	18c00003 	ldbu	r3,0(r3)
  80a7e0:	1885883a 	add	r2,r3,r2
  80a7e4:	00c00804 	movi	r3,32
  80a7e8:	1887c83a 	sub	r3,r3,r2
  80a7ec:	18000526 	beq	r3,zero,80a804 <__udivdi3+0x94>
  80a7f0:	80e0983a 	sll	r16,r16,r3
  80a7f4:	9884d83a 	srl	r2,r19,r2
  80a7f8:	30e2983a 	sll	r17,r6,r3
  80a7fc:	98e4983a 	sll	r18,r19,r3
  80a800:	142cb03a 	or	r22,r2,r16
  80a804:	882ad43a 	srli	r21,r17,16
  80a808:	b009883a 	mov	r4,r22
  80a80c:	8d3fffcc 	andi	r20,r17,65535
  80a810:	a80b883a 	mov	r5,r21
  80a814:	080b37c0 	call	80b37c <__umodsi3>
  80a818:	b009883a 	mov	r4,r22
  80a81c:	a80b883a 	mov	r5,r21
  80a820:	1027883a 	mov	r19,r2
  80a824:	080b3180 	call	80b318 <__udivsi3>
  80a828:	102d883a 	mov	r22,r2
  80a82c:	9826943a 	slli	r19,r19,16
  80a830:	9004d43a 	srli	r2,r18,16
  80a834:	a5a1383a 	mul	r16,r20,r22
  80a838:	14c4b03a 	or	r2,r2,r19
  80a83c:	1400052e 	bgeu	r2,r16,80a854 <__udivdi3+0xe4>
  80a840:	1445883a 	add	r2,r2,r17
  80a844:	b0ffffc4 	addi	r3,r22,-1
  80a848:	14400136 	bltu	r2,r17,80a850 <__udivdi3+0xe0>
  80a84c:	14012336 	bltu	r2,r16,80acdc <__udivdi3+0x56c>
  80a850:	182d883a 	mov	r22,r3
  80a854:	1421c83a 	sub	r16,r2,r16
  80a858:	a80b883a 	mov	r5,r21
  80a85c:	8009883a 	mov	r4,r16
  80a860:	080b37c0 	call	80b37c <__umodsi3>
  80a864:	1027883a 	mov	r19,r2
  80a868:	a80b883a 	mov	r5,r21
  80a86c:	8009883a 	mov	r4,r16
  80a870:	080b3180 	call	80b318 <__udivsi3>
  80a874:	9826943a 	slli	r19,r19,16
  80a878:	a0a9383a 	mul	r20,r20,r2
  80a87c:	94bfffcc 	andi	r18,r18,65535
  80a880:	94e4b03a 	or	r18,r18,r19
  80a884:	9500052e 	bgeu	r18,r20,80a89c <__udivdi3+0x12c>
  80a888:	8ca5883a 	add	r18,r17,r18
  80a88c:	10ffffc4 	addi	r3,r2,-1
  80a890:	9440f136 	bltu	r18,r17,80ac58 <__udivdi3+0x4e8>
  80a894:	9500f02e 	bgeu	r18,r20,80ac58 <__udivdi3+0x4e8>
  80a898:	10bfff84 	addi	r2,r2,-2
  80a89c:	b00c943a 	slli	r6,r22,16
  80a8a0:	0007883a 	mov	r3,zero
  80a8a4:	3084b03a 	or	r2,r6,r2
  80a8a8:	00005906 	br	80aa10 <__udivdi3+0x2a0>
  80a8ac:	29c05636 	bltu	r5,r7,80aa08 <__udivdi3+0x298>
  80a8b0:	00bfffd4 	movui	r2,65535
  80a8b4:	11c0622e 	bgeu	r2,r7,80aa40 <__udivdi3+0x2d0>
  80a8b8:	00804034 	movhi	r2,256
  80a8bc:	10bfffc4 	addi	r2,r2,-1
  80a8c0:	11c0ee36 	bltu	r2,r7,80ac7c <__udivdi3+0x50c>
  80a8c4:	00800404 	movi	r2,16
  80a8c8:	3886d83a 	srl	r3,r7,r2
  80a8cc:	01002074 	movhi	r4,129
  80a8d0:	210f9ec4 	addi	r4,r4,15995
  80a8d4:	20c7883a 	add	r3,r4,r3
  80a8d8:	18c00003 	ldbu	r3,0(r3)
  80a8dc:	05400804 	movi	r21,32
  80a8e0:	1885883a 	add	r2,r3,r2
  80a8e4:	a8abc83a 	sub	r21,r21,r2
  80a8e8:	a800621e 	bne	r21,zero,80aa74 <__udivdi3+0x304>
  80a8ec:	3c00e936 	bltu	r7,r16,80ac94 <__udivdi3+0x524>
  80a8f0:	9985403a 	cmpgeu	r2,r19,r6
  80a8f4:	0007883a 	mov	r3,zero
  80a8f8:	00004506 	br	80aa10 <__udivdi3+0x2a0>
  80a8fc:	3000041e 	bne	r6,zero,80a910 <__udivdi3+0x1a0>
  80a900:	000b883a 	mov	r5,zero
  80a904:	01000044 	movi	r4,1
  80a908:	080b3180 	call	80b318 <__udivsi3>
  80a90c:	1023883a 	mov	r17,r2
  80a910:	00bfffd4 	movui	r2,65535
  80a914:	14404e2e 	bgeu	r2,r17,80aa50 <__udivdi3+0x2e0>
  80a918:	00804034 	movhi	r2,256
  80a91c:	10bfffc4 	addi	r2,r2,-1
  80a920:	1440d836 	bltu	r2,r17,80ac84 <__udivdi3+0x514>
  80a924:	00800404 	movi	r2,16
  80a928:	8886d83a 	srl	r3,r17,r2
  80a92c:	01002074 	movhi	r4,129
  80a930:	210f9ec4 	addi	r4,r4,15995
  80a934:	20c7883a 	add	r3,r4,r3
  80a938:	18c00003 	ldbu	r3,0(r3)
  80a93c:	1885883a 	add	r2,r3,r2
  80a940:	00c00804 	movi	r3,32
  80a944:	1887c83a 	sub	r3,r3,r2
  80a948:	18008f1e 	bne	r3,zero,80ab88 <__udivdi3+0x418>
  80a94c:	882ad43a 	srli	r21,r17,16
  80a950:	8461c83a 	sub	r16,r16,r17
  80a954:	8d3fffcc 	andi	r20,r17,65535
  80a958:	00c00044 	movi	r3,1
  80a95c:	8009883a 	mov	r4,r16
  80a960:	a80b883a 	mov	r5,r21
  80a964:	d8c00015 	stw	r3,0(sp)
  80a968:	080b37c0 	call	80b37c <__umodsi3>
  80a96c:	8009883a 	mov	r4,r16
  80a970:	a80b883a 	mov	r5,r21
  80a974:	1027883a 	mov	r19,r2
  80a978:	080b3180 	call	80b318 <__udivsi3>
  80a97c:	9826943a 	slli	r19,r19,16
  80a980:	9008d43a 	srli	r4,r18,16
  80a984:	1521383a 	mul	r16,r2,r20
  80a988:	102d883a 	mov	r22,r2
  80a98c:	24c8b03a 	or	r4,r4,r19
  80a990:	d8c00017 	ldw	r3,0(sp)
  80a994:	2400052e 	bgeu	r4,r16,80a9ac <__udivdi3+0x23c>
  80a998:	2449883a 	add	r4,r4,r17
  80a99c:	b0bfffc4 	addi	r2,r22,-1
  80a9a0:	24400136 	bltu	r4,r17,80a9a8 <__udivdi3+0x238>
  80a9a4:	2400ca36 	bltu	r4,r16,80acd0 <__udivdi3+0x560>
  80a9a8:	102d883a 	mov	r22,r2
  80a9ac:	2421c83a 	sub	r16,r4,r16
  80a9b0:	a80b883a 	mov	r5,r21
  80a9b4:	8009883a 	mov	r4,r16
  80a9b8:	d8c00015 	stw	r3,0(sp)
  80a9bc:	080b37c0 	call	80b37c <__umodsi3>
  80a9c0:	1027883a 	mov	r19,r2
  80a9c4:	a80b883a 	mov	r5,r21
  80a9c8:	8009883a 	mov	r4,r16
  80a9cc:	080b3180 	call	80b318 <__udivsi3>
  80a9d0:	9826943a 	slli	r19,r19,16
  80a9d4:	1529383a 	mul	r20,r2,r20
  80a9d8:	94bfffcc 	andi	r18,r18,65535
  80a9dc:	94e4b03a 	or	r18,r18,r19
  80a9e0:	d8c00017 	ldw	r3,0(sp)
  80a9e4:	9500052e 	bgeu	r18,r20,80a9fc <__udivdi3+0x28c>
  80a9e8:	8ca5883a 	add	r18,r17,r18
  80a9ec:	113fffc4 	addi	r4,r2,-1
  80a9f0:	94409736 	bltu	r18,r17,80ac50 <__udivdi3+0x4e0>
  80a9f4:	9500962e 	bgeu	r18,r20,80ac50 <__udivdi3+0x4e0>
  80a9f8:	10bfff84 	addi	r2,r2,-2
  80a9fc:	b00c943a 	slli	r6,r22,16
  80aa00:	3084b03a 	or	r2,r6,r2
  80aa04:	00000206 	br	80aa10 <__udivdi3+0x2a0>
  80aa08:	0007883a 	mov	r3,zero
  80aa0c:	0005883a 	mov	r2,zero
  80aa10:	dfc00a17 	ldw	ra,40(sp)
  80aa14:	df000917 	ldw	fp,36(sp)
  80aa18:	ddc00817 	ldw	r23,32(sp)
  80aa1c:	dd800717 	ldw	r22,28(sp)
  80aa20:	dd400617 	ldw	r21,24(sp)
  80aa24:	dd000517 	ldw	r20,20(sp)
  80aa28:	dcc00417 	ldw	r19,16(sp)
  80aa2c:	dc800317 	ldw	r18,12(sp)
  80aa30:	dc400217 	ldw	r17,8(sp)
  80aa34:	dc000117 	ldw	r16,4(sp)
  80aa38:	dec00b04 	addi	sp,sp,44
  80aa3c:	f800283a 	ret
  80aa40:	00803fc4 	movi	r2,255
  80aa44:	11c5803a 	cmpltu	r2,r2,r7
  80aa48:	100490fa 	slli	r2,r2,3
  80aa4c:	003f9e06 	br	80a8c8 <__alt_mem_descriptor_memory+0xff78a8c8>
  80aa50:	00803fc4 	movi	r2,255
  80aa54:	1445803a 	cmpltu	r2,r2,r17
  80aa58:	100490fa 	slli	r2,r2,3
  80aa5c:	003fb206 	br	80a928 <__alt_mem_descriptor_memory+0xff78a928>
  80aa60:	00804034 	movhi	r2,256
  80aa64:	10bfffc4 	addi	r2,r2,-1
  80aa68:	11808836 	bltu	r2,r6,80ac8c <__udivdi3+0x51c>
  80aa6c:	00800404 	movi	r2,16
  80aa70:	003f5606 	br	80a7cc <__alt_mem_descriptor_memory+0xff78a7cc>
  80aa74:	30aed83a 	srl	r23,r6,r2
  80aa78:	3d4e983a 	sll	r7,r7,r21
  80aa7c:	80acd83a 	srl	r22,r16,r2
  80aa80:	9884d83a 	srl	r2,r19,r2
  80aa84:	3deeb03a 	or	r23,r7,r23
  80aa88:	b824d43a 	srli	r18,r23,16
  80aa8c:	8560983a 	sll	r16,r16,r21
  80aa90:	b009883a 	mov	r4,r22
  80aa94:	900b883a 	mov	r5,r18
  80aa98:	3568983a 	sll	r20,r6,r21
  80aa9c:	1420b03a 	or	r16,r2,r16
  80aaa0:	080b37c0 	call	80b37c <__umodsi3>
  80aaa4:	b009883a 	mov	r4,r22
  80aaa8:	900b883a 	mov	r5,r18
  80aaac:	1023883a 	mov	r17,r2
  80aab0:	080b3180 	call	80b318 <__udivsi3>
  80aab4:	8808943a 	slli	r4,r17,16
  80aab8:	bf3fffcc 	andi	fp,r23,65535
  80aabc:	8006d43a 	srli	r3,r16,16
  80aac0:	e0a3383a 	mul	r17,fp,r2
  80aac4:	100d883a 	mov	r6,r2
  80aac8:	1906b03a 	or	r3,r3,r4
  80aacc:	1c40042e 	bgeu	r3,r17,80aae0 <__udivdi3+0x370>
  80aad0:	1dc7883a 	add	r3,r3,r23
  80aad4:	10bfffc4 	addi	r2,r2,-1
  80aad8:	1dc0752e 	bgeu	r3,r23,80acb0 <__udivdi3+0x540>
  80aadc:	100d883a 	mov	r6,r2
  80aae0:	1c63c83a 	sub	r17,r3,r17
  80aae4:	900b883a 	mov	r5,r18
  80aae8:	8809883a 	mov	r4,r17
  80aaec:	d9800015 	stw	r6,0(sp)
  80aaf0:	080b37c0 	call	80b37c <__umodsi3>
  80aaf4:	102d883a 	mov	r22,r2
  80aaf8:	8809883a 	mov	r4,r17
  80aafc:	900b883a 	mov	r5,r18
  80ab00:	080b3180 	call	80b318 <__udivsi3>
  80ab04:	b02c943a 	slli	r22,r22,16
  80ab08:	e089383a 	mul	r4,fp,r2
  80ab0c:	843fffcc 	andi	r16,r16,65535
  80ab10:	85a0b03a 	or	r16,r16,r22
  80ab14:	d9800017 	ldw	r6,0(sp)
  80ab18:	8100042e 	bgeu	r16,r4,80ab2c <__udivdi3+0x3bc>
  80ab1c:	85e1883a 	add	r16,r16,r23
  80ab20:	10ffffc4 	addi	r3,r2,-1
  80ab24:	85c05e2e 	bgeu	r16,r23,80aca0 <__udivdi3+0x530>
  80ab28:	1805883a 	mov	r2,r3
  80ab2c:	300c943a 	slli	r6,r6,16
  80ab30:	a17fffcc 	andi	r5,r20,65535
  80ab34:	a028d43a 	srli	r20,r20,16
  80ab38:	3084b03a 	or	r2,r6,r2
  80ab3c:	10ffffcc 	andi	r3,r2,65535
  80ab40:	100cd43a 	srli	r6,r2,16
  80ab44:	194f383a 	mul	r7,r3,r5
  80ab48:	1d07383a 	mul	r3,r3,r20
  80ab4c:	314b383a 	mul	r5,r6,r5
  80ab50:	3810d43a 	srli	r8,r7,16
  80ab54:	8121c83a 	sub	r16,r16,r4
  80ab58:	1947883a 	add	r3,r3,r5
  80ab5c:	40c7883a 	add	r3,r8,r3
  80ab60:	350d383a 	mul	r6,r6,r20
  80ab64:	1940022e 	bgeu	r3,r5,80ab70 <__udivdi3+0x400>
  80ab68:	01000074 	movhi	r4,1
  80ab6c:	310d883a 	add	r6,r6,r4
  80ab70:	1828d43a 	srli	r20,r3,16
  80ab74:	a18d883a 	add	r6,r20,r6
  80ab78:	81803e36 	bltu	r16,r6,80ac74 <__udivdi3+0x504>
  80ab7c:	81803826 	beq	r16,r6,80ac60 <__udivdi3+0x4f0>
  80ab80:	0007883a 	mov	r3,zero
  80ab84:	003fa206 	br	80aa10 <__alt_mem_descriptor_memory+0xff78aa10>
  80ab88:	88e2983a 	sll	r17,r17,r3
  80ab8c:	80a8d83a 	srl	r20,r16,r2
  80ab90:	80e0983a 	sll	r16,r16,r3
  80ab94:	882ad43a 	srli	r21,r17,16
  80ab98:	9884d83a 	srl	r2,r19,r2
  80ab9c:	a009883a 	mov	r4,r20
  80aba0:	a80b883a 	mov	r5,r21
  80aba4:	142eb03a 	or	r23,r2,r16
  80aba8:	98e4983a 	sll	r18,r19,r3
  80abac:	080b37c0 	call	80b37c <__umodsi3>
  80abb0:	a009883a 	mov	r4,r20
  80abb4:	a80b883a 	mov	r5,r21
  80abb8:	1021883a 	mov	r16,r2
  80abbc:	080b3180 	call	80b318 <__udivsi3>
  80abc0:	1039883a 	mov	fp,r2
  80abc4:	8d3fffcc 	andi	r20,r17,65535
  80abc8:	8020943a 	slli	r16,r16,16
  80abcc:	b804d43a 	srli	r2,r23,16
  80abd0:	a72d383a 	mul	r22,r20,fp
  80abd4:	1404b03a 	or	r2,r2,r16
  80abd8:	1580062e 	bgeu	r2,r22,80abf4 <__udivdi3+0x484>
  80abdc:	1445883a 	add	r2,r2,r17
  80abe0:	e0ffffc4 	addi	r3,fp,-1
  80abe4:	14403836 	bltu	r2,r17,80acc8 <__udivdi3+0x558>
  80abe8:	1580372e 	bgeu	r2,r22,80acc8 <__udivdi3+0x558>
  80abec:	e73fff84 	addi	fp,fp,-2
  80abf0:	1445883a 	add	r2,r2,r17
  80abf4:	15adc83a 	sub	r22,r2,r22
  80abf8:	a80b883a 	mov	r5,r21
  80abfc:	b009883a 	mov	r4,r22
  80ac00:	080b37c0 	call	80b37c <__umodsi3>
  80ac04:	1027883a 	mov	r19,r2
  80ac08:	b009883a 	mov	r4,r22
  80ac0c:	a80b883a 	mov	r5,r21
  80ac10:	080b3180 	call	80b318 <__udivsi3>
  80ac14:	9826943a 	slli	r19,r19,16
  80ac18:	a0a1383a 	mul	r16,r20,r2
  80ac1c:	b93fffcc 	andi	r4,r23,65535
  80ac20:	24c8b03a 	or	r4,r4,r19
  80ac24:	2400062e 	bgeu	r4,r16,80ac40 <__udivdi3+0x4d0>
  80ac28:	2449883a 	add	r4,r4,r17
  80ac2c:	10ffffc4 	addi	r3,r2,-1
  80ac30:	24402336 	bltu	r4,r17,80acc0 <__udivdi3+0x550>
  80ac34:	2400222e 	bgeu	r4,r16,80acc0 <__udivdi3+0x550>
  80ac38:	10bfff84 	addi	r2,r2,-2
  80ac3c:	2449883a 	add	r4,r4,r17
  80ac40:	e038943a 	slli	fp,fp,16
  80ac44:	2421c83a 	sub	r16,r4,r16
  80ac48:	e086b03a 	or	r3,fp,r2
  80ac4c:	003f4306 	br	80a95c <__alt_mem_descriptor_memory+0xff78a95c>
  80ac50:	2005883a 	mov	r2,r4
  80ac54:	003f6906 	br	80a9fc <__alt_mem_descriptor_memory+0xff78a9fc>
  80ac58:	1805883a 	mov	r2,r3
  80ac5c:	003f0f06 	br	80a89c <__alt_mem_descriptor_memory+0xff78a89c>
  80ac60:	1806943a 	slli	r3,r3,16
  80ac64:	9d66983a 	sll	r19,r19,r21
  80ac68:	39ffffcc 	andi	r7,r7,65535
  80ac6c:	19c7883a 	add	r3,r3,r7
  80ac70:	98ffc32e 	bgeu	r19,r3,80ab80 <__alt_mem_descriptor_memory+0xff78ab80>
  80ac74:	10bfffc4 	addi	r2,r2,-1
  80ac78:	003fc106 	br	80ab80 <__alt_mem_descriptor_memory+0xff78ab80>
  80ac7c:	00800604 	movi	r2,24
  80ac80:	003f1106 	br	80a8c8 <__alt_mem_descriptor_memory+0xff78a8c8>
  80ac84:	00800604 	movi	r2,24
  80ac88:	003f2706 	br	80a928 <__alt_mem_descriptor_memory+0xff78a928>
  80ac8c:	00800604 	movi	r2,24
  80ac90:	003ece06 	br	80a7cc <__alt_mem_descriptor_memory+0xff78a7cc>
  80ac94:	0007883a 	mov	r3,zero
  80ac98:	00800044 	movi	r2,1
  80ac9c:	003f5c06 	br	80aa10 <__alt_mem_descriptor_memory+0xff78aa10>
  80aca0:	813fa12e 	bgeu	r16,r4,80ab28 <__alt_mem_descriptor_memory+0xff78ab28>
  80aca4:	10bfff84 	addi	r2,r2,-2
  80aca8:	85e1883a 	add	r16,r16,r23
  80acac:	003f9f06 	br	80ab2c <__alt_mem_descriptor_memory+0xff78ab2c>
  80acb0:	1c7f8a2e 	bgeu	r3,r17,80aadc <__alt_mem_descriptor_memory+0xff78aadc>
  80acb4:	31bfff84 	addi	r6,r6,-2
  80acb8:	1dc7883a 	add	r3,r3,r23
  80acbc:	003f8806 	br	80aae0 <__alt_mem_descriptor_memory+0xff78aae0>
  80acc0:	1805883a 	mov	r2,r3
  80acc4:	003fde06 	br	80ac40 <__alt_mem_descriptor_memory+0xff78ac40>
  80acc8:	1839883a 	mov	fp,r3
  80accc:	003fc906 	br	80abf4 <__alt_mem_descriptor_memory+0xff78abf4>
  80acd0:	b5bfff84 	addi	r22,r22,-2
  80acd4:	2449883a 	add	r4,r4,r17
  80acd8:	003f3406 	br	80a9ac <__alt_mem_descriptor_memory+0xff78a9ac>
  80acdc:	b5bfff84 	addi	r22,r22,-2
  80ace0:	1445883a 	add	r2,r2,r17
  80ace4:	003edb06 	br	80a854 <__alt_mem_descriptor_memory+0xff78a854>

0080ace8 <__umoddi3>:
  80ace8:	defff404 	addi	sp,sp,-48
  80acec:	df000a15 	stw	fp,40(sp)
  80acf0:	dc400315 	stw	r17,12(sp)
  80acf4:	dc000215 	stw	r16,8(sp)
  80acf8:	dfc00b15 	stw	ra,44(sp)
  80acfc:	ddc00915 	stw	r23,36(sp)
  80ad00:	dd800815 	stw	r22,32(sp)
  80ad04:	dd400715 	stw	r21,28(sp)
  80ad08:	dd000615 	stw	r20,24(sp)
  80ad0c:	dcc00515 	stw	r19,20(sp)
  80ad10:	dc800415 	stw	r18,16(sp)
  80ad14:	2021883a 	mov	r16,r4
  80ad18:	2823883a 	mov	r17,r5
  80ad1c:	2839883a 	mov	fp,r5
  80ad20:	38003c1e 	bne	r7,zero,80ae14 <__umoddi3+0x12c>
  80ad24:	3027883a 	mov	r19,r6
  80ad28:	2029883a 	mov	r20,r4
  80ad2c:	2980512e 	bgeu	r5,r6,80ae74 <__umoddi3+0x18c>
  80ad30:	00bfffd4 	movui	r2,65535
  80ad34:	11809a36 	bltu	r2,r6,80afa0 <__umoddi3+0x2b8>
  80ad38:	01003fc4 	movi	r4,255
  80ad3c:	2189803a 	cmpltu	r4,r4,r6
  80ad40:	200890fa 	slli	r4,r4,3
  80ad44:	3104d83a 	srl	r2,r6,r4
  80ad48:	00c02074 	movhi	r3,129
  80ad4c:	18cf9ec4 	addi	r3,r3,15995
  80ad50:	1885883a 	add	r2,r3,r2
  80ad54:	10c00003 	ldbu	r3,0(r2)
  80ad58:	00800804 	movi	r2,32
  80ad5c:	1909883a 	add	r4,r3,r4
  80ad60:	1125c83a 	sub	r18,r2,r4
  80ad64:	90000526 	beq	r18,zero,80ad7c <__umoddi3+0x94>
  80ad68:	8ca2983a 	sll	r17,r17,r18
  80ad6c:	8108d83a 	srl	r4,r16,r4
  80ad70:	34a6983a 	sll	r19,r6,r18
  80ad74:	84a8983a 	sll	r20,r16,r18
  80ad78:	2478b03a 	or	fp,r4,r17
  80ad7c:	982ed43a 	srli	r23,r19,16
  80ad80:	e009883a 	mov	r4,fp
  80ad84:	9dbfffcc 	andi	r22,r19,65535
  80ad88:	b80b883a 	mov	r5,r23
  80ad8c:	080b37c0 	call	80b37c <__umodsi3>
  80ad90:	e009883a 	mov	r4,fp
  80ad94:	b80b883a 	mov	r5,r23
  80ad98:	102b883a 	mov	r21,r2
  80ad9c:	080b3180 	call	80b318 <__udivsi3>
  80ada0:	a806943a 	slli	r3,r21,16
  80ada4:	a008d43a 	srli	r4,r20,16
  80ada8:	b085383a 	mul	r2,r22,r2
  80adac:	20c8b03a 	or	r4,r4,r3
  80adb0:	2080032e 	bgeu	r4,r2,80adc0 <__umoddi3+0xd8>
  80adb4:	24c9883a 	add	r4,r4,r19
  80adb8:	24c00136 	bltu	r4,r19,80adc0 <__umoddi3+0xd8>
  80adbc:	20811036 	bltu	r4,r2,80b200 <__umoddi3+0x518>
  80adc0:	20abc83a 	sub	r21,r4,r2
  80adc4:	b80b883a 	mov	r5,r23
  80adc8:	a809883a 	mov	r4,r21
  80adcc:	080b37c0 	call	80b37c <__umodsi3>
  80add0:	1023883a 	mov	r17,r2
  80add4:	b80b883a 	mov	r5,r23
  80add8:	a809883a 	mov	r4,r21
  80addc:	080b3180 	call	80b318 <__udivsi3>
  80ade0:	8822943a 	slli	r17,r17,16
  80ade4:	b085383a 	mul	r2,r22,r2
  80ade8:	a0ffffcc 	andi	r3,r20,65535
  80adec:	1c46b03a 	or	r3,r3,r17
  80adf0:	1880042e 	bgeu	r3,r2,80ae04 <__umoddi3+0x11c>
  80adf4:	1cc7883a 	add	r3,r3,r19
  80adf8:	1cc00236 	bltu	r3,r19,80ae04 <__umoddi3+0x11c>
  80adfc:	1880012e 	bgeu	r3,r2,80ae04 <__umoddi3+0x11c>
  80ae00:	1cc7883a 	add	r3,r3,r19
  80ae04:	1885c83a 	sub	r2,r3,r2
  80ae08:	1484d83a 	srl	r2,r2,r18
  80ae0c:	0007883a 	mov	r3,zero
  80ae10:	00004f06 	br	80af50 <__umoddi3+0x268>
  80ae14:	29c04c36 	bltu	r5,r7,80af48 <__umoddi3+0x260>
  80ae18:	00bfffd4 	movui	r2,65535
  80ae1c:	11c0582e 	bgeu	r2,r7,80af80 <__umoddi3+0x298>
  80ae20:	00804034 	movhi	r2,256
  80ae24:	10bfffc4 	addi	r2,r2,-1
  80ae28:	11c0e736 	bltu	r2,r7,80b1c8 <__umoddi3+0x4e0>
  80ae2c:	01000404 	movi	r4,16
  80ae30:	3904d83a 	srl	r2,r7,r4
  80ae34:	00c02074 	movhi	r3,129
  80ae38:	18cf9ec4 	addi	r3,r3,15995
  80ae3c:	1885883a 	add	r2,r3,r2
  80ae40:	14c00003 	ldbu	r19,0(r2)
  80ae44:	00c00804 	movi	r3,32
  80ae48:	9927883a 	add	r19,r19,r4
  80ae4c:	1ce9c83a 	sub	r20,r3,r19
  80ae50:	a000581e 	bne	r20,zero,80afb4 <__umoddi3+0x2cc>
  80ae54:	3c400136 	bltu	r7,r17,80ae5c <__umoddi3+0x174>
  80ae58:	8180eb36 	bltu	r16,r6,80b208 <__umoddi3+0x520>
  80ae5c:	8185c83a 	sub	r2,r16,r6
  80ae60:	89e3c83a 	sub	r17,r17,r7
  80ae64:	8089803a 	cmpltu	r4,r16,r2
  80ae68:	8939c83a 	sub	fp,r17,r4
  80ae6c:	e007883a 	mov	r3,fp
  80ae70:	00003706 	br	80af50 <__umoddi3+0x268>
  80ae74:	3000041e 	bne	r6,zero,80ae88 <__umoddi3+0x1a0>
  80ae78:	000b883a 	mov	r5,zero
  80ae7c:	01000044 	movi	r4,1
  80ae80:	080b3180 	call	80b318 <__udivsi3>
  80ae84:	1027883a 	mov	r19,r2
  80ae88:	00bfffd4 	movui	r2,65535
  80ae8c:	14c0402e 	bgeu	r2,r19,80af90 <__umoddi3+0x2a8>
  80ae90:	00804034 	movhi	r2,256
  80ae94:	10bfffc4 	addi	r2,r2,-1
  80ae98:	14c0cd36 	bltu	r2,r19,80b1d0 <__umoddi3+0x4e8>
  80ae9c:	00800404 	movi	r2,16
  80aea0:	9886d83a 	srl	r3,r19,r2
  80aea4:	01002074 	movhi	r4,129
  80aea8:	210f9ec4 	addi	r4,r4,15995
  80aeac:	20c7883a 	add	r3,r4,r3
  80aeb0:	18c00003 	ldbu	r3,0(r3)
  80aeb4:	1887883a 	add	r3,r3,r2
  80aeb8:	00800804 	movi	r2,32
  80aebc:	10e5c83a 	sub	r18,r2,r3
  80aec0:	9000901e 	bne	r18,zero,80b104 <__umoddi3+0x41c>
  80aec4:	982cd43a 	srli	r22,r19,16
  80aec8:	8ce3c83a 	sub	r17,r17,r19
  80aecc:	9d7fffcc 	andi	r21,r19,65535
  80aed0:	b00b883a 	mov	r5,r22
  80aed4:	8809883a 	mov	r4,r17
  80aed8:	080b37c0 	call	80b37c <__umodsi3>
  80aedc:	8809883a 	mov	r4,r17
  80aee0:	b00b883a 	mov	r5,r22
  80aee4:	1021883a 	mov	r16,r2
  80aee8:	080b3180 	call	80b318 <__udivsi3>
  80aeec:	8006943a 	slli	r3,r16,16
  80aef0:	a008d43a 	srli	r4,r20,16
  80aef4:	1545383a 	mul	r2,r2,r21
  80aef8:	20c8b03a 	or	r4,r4,r3
  80aefc:	2080042e 	bgeu	r4,r2,80af10 <__umoddi3+0x228>
  80af00:	24c9883a 	add	r4,r4,r19
  80af04:	24c00236 	bltu	r4,r19,80af10 <__umoddi3+0x228>
  80af08:	2080012e 	bgeu	r4,r2,80af10 <__umoddi3+0x228>
  80af0c:	24c9883a 	add	r4,r4,r19
  80af10:	20a1c83a 	sub	r16,r4,r2
  80af14:	b00b883a 	mov	r5,r22
  80af18:	8009883a 	mov	r4,r16
  80af1c:	080b37c0 	call	80b37c <__umodsi3>
  80af20:	1023883a 	mov	r17,r2
  80af24:	b00b883a 	mov	r5,r22
  80af28:	8009883a 	mov	r4,r16
  80af2c:	080b3180 	call	80b318 <__udivsi3>
  80af30:	8822943a 	slli	r17,r17,16
  80af34:	1545383a 	mul	r2,r2,r21
  80af38:	a53fffcc 	andi	r20,r20,65535
  80af3c:	a446b03a 	or	r3,r20,r17
  80af40:	18bfb02e 	bgeu	r3,r2,80ae04 <__alt_mem_descriptor_memory+0xff78ae04>
  80af44:	003fab06 	br	80adf4 <__alt_mem_descriptor_memory+0xff78adf4>
  80af48:	2005883a 	mov	r2,r4
  80af4c:	2807883a 	mov	r3,r5
  80af50:	dfc00b17 	ldw	ra,44(sp)
  80af54:	df000a17 	ldw	fp,40(sp)
  80af58:	ddc00917 	ldw	r23,36(sp)
  80af5c:	dd800817 	ldw	r22,32(sp)
  80af60:	dd400717 	ldw	r21,28(sp)
  80af64:	dd000617 	ldw	r20,24(sp)
  80af68:	dcc00517 	ldw	r19,20(sp)
  80af6c:	dc800417 	ldw	r18,16(sp)
  80af70:	dc400317 	ldw	r17,12(sp)
  80af74:	dc000217 	ldw	r16,8(sp)
  80af78:	dec00c04 	addi	sp,sp,48
  80af7c:	f800283a 	ret
  80af80:	04c03fc4 	movi	r19,255
  80af84:	99c9803a 	cmpltu	r4,r19,r7
  80af88:	200890fa 	slli	r4,r4,3
  80af8c:	003fa806 	br	80ae30 <__alt_mem_descriptor_memory+0xff78ae30>
  80af90:	00803fc4 	movi	r2,255
  80af94:	14c5803a 	cmpltu	r2,r2,r19
  80af98:	100490fa 	slli	r2,r2,3
  80af9c:	003fc006 	br	80aea0 <__alt_mem_descriptor_memory+0xff78aea0>
  80afa0:	00804034 	movhi	r2,256
  80afa4:	10bfffc4 	addi	r2,r2,-1
  80afa8:	11808b36 	bltu	r2,r6,80b1d8 <__umoddi3+0x4f0>
  80afac:	01000404 	movi	r4,16
  80afb0:	003f6406 	br	80ad44 <__alt_mem_descriptor_memory+0xff78ad44>
  80afb4:	34c4d83a 	srl	r2,r6,r19
  80afb8:	3d0e983a 	sll	r7,r7,r20
  80afbc:	8cf8d83a 	srl	fp,r17,r19
  80afc0:	8d10983a 	sll	r8,r17,r20
  80afc4:	38aab03a 	or	r21,r7,r2
  80afc8:	a82cd43a 	srli	r22,r21,16
  80afcc:	84e2d83a 	srl	r17,r16,r19
  80afd0:	e009883a 	mov	r4,fp
  80afd4:	b00b883a 	mov	r5,r22
  80afd8:	8a22b03a 	or	r17,r17,r8
  80afdc:	3524983a 	sll	r18,r6,r20
  80afe0:	080b37c0 	call	80b37c <__umodsi3>
  80afe4:	e009883a 	mov	r4,fp
  80afe8:	b00b883a 	mov	r5,r22
  80afec:	102f883a 	mov	r23,r2
  80aff0:	080b3180 	call	80b318 <__udivsi3>
  80aff4:	100d883a 	mov	r6,r2
  80aff8:	b808943a 	slli	r4,r23,16
  80affc:	aa3fffcc 	andi	r8,r21,65535
  80b000:	8804d43a 	srli	r2,r17,16
  80b004:	41af383a 	mul	r23,r8,r6
  80b008:	8520983a 	sll	r16,r16,r20
  80b00c:	1104b03a 	or	r2,r2,r4
  80b010:	15c0042e 	bgeu	r2,r23,80b024 <__umoddi3+0x33c>
  80b014:	1545883a 	add	r2,r2,r21
  80b018:	30ffffc4 	addi	r3,r6,-1
  80b01c:	1540742e 	bgeu	r2,r21,80b1f0 <__umoddi3+0x508>
  80b020:	180d883a 	mov	r6,r3
  80b024:	15efc83a 	sub	r23,r2,r23
  80b028:	b00b883a 	mov	r5,r22
  80b02c:	b809883a 	mov	r4,r23
  80b030:	d9800115 	stw	r6,4(sp)
  80b034:	da000015 	stw	r8,0(sp)
  80b038:	080b37c0 	call	80b37c <__umodsi3>
  80b03c:	b00b883a 	mov	r5,r22
  80b040:	b809883a 	mov	r4,r23
  80b044:	1039883a 	mov	fp,r2
  80b048:	080b3180 	call	80b318 <__udivsi3>
  80b04c:	da000017 	ldw	r8,0(sp)
  80b050:	e038943a 	slli	fp,fp,16
  80b054:	100b883a 	mov	r5,r2
  80b058:	4089383a 	mul	r4,r8,r2
  80b05c:	8a3fffcc 	andi	r8,r17,65535
  80b060:	4710b03a 	or	r8,r8,fp
  80b064:	d9800117 	ldw	r6,4(sp)
  80b068:	4100042e 	bgeu	r8,r4,80b07c <__umoddi3+0x394>
  80b06c:	4551883a 	add	r8,r8,r21
  80b070:	10bfffc4 	addi	r2,r2,-1
  80b074:	45405a2e 	bgeu	r8,r21,80b1e0 <__umoddi3+0x4f8>
  80b078:	100b883a 	mov	r5,r2
  80b07c:	300c943a 	slli	r6,r6,16
  80b080:	91ffffcc 	andi	r7,r18,65535
  80b084:	9004d43a 	srli	r2,r18,16
  80b088:	314cb03a 	or	r6,r6,r5
  80b08c:	317fffcc 	andi	r5,r6,65535
  80b090:	300cd43a 	srli	r6,r6,16
  80b094:	29d3383a 	mul	r9,r5,r7
  80b098:	288b383a 	mul	r5,r5,r2
  80b09c:	31cf383a 	mul	r7,r6,r7
  80b0a0:	4806d43a 	srli	r3,r9,16
  80b0a4:	4111c83a 	sub	r8,r8,r4
  80b0a8:	29cb883a 	add	r5,r5,r7
  80b0ac:	194b883a 	add	r5,r3,r5
  80b0b0:	3085383a 	mul	r2,r6,r2
  80b0b4:	29c0022e 	bgeu	r5,r7,80b0c0 <__umoddi3+0x3d8>
  80b0b8:	00c00074 	movhi	r3,1
  80b0bc:	10c5883a 	add	r2,r2,r3
  80b0c0:	2808d43a 	srli	r4,r5,16
  80b0c4:	280a943a 	slli	r5,r5,16
  80b0c8:	4a7fffcc 	andi	r9,r9,65535
  80b0cc:	2085883a 	add	r2,r4,r2
  80b0d0:	2a4b883a 	add	r5,r5,r9
  80b0d4:	40803636 	bltu	r8,r2,80b1b0 <__umoddi3+0x4c8>
  80b0d8:	40804d26 	beq	r8,r2,80b210 <__umoddi3+0x528>
  80b0dc:	4089c83a 	sub	r4,r8,r2
  80b0e0:	280f883a 	mov	r7,r5
  80b0e4:	81cfc83a 	sub	r7,r16,r7
  80b0e8:	81c7803a 	cmpltu	r3,r16,r7
  80b0ec:	20c7c83a 	sub	r3,r4,r3
  80b0f0:	1cc4983a 	sll	r2,r3,r19
  80b0f4:	3d0ed83a 	srl	r7,r7,r20
  80b0f8:	1d06d83a 	srl	r3,r3,r20
  80b0fc:	11c4b03a 	or	r2,r2,r7
  80b100:	003f9306 	br	80af50 <__alt_mem_descriptor_memory+0xff78af50>
  80b104:	9ca6983a 	sll	r19,r19,r18
  80b108:	88e8d83a 	srl	r20,r17,r3
  80b10c:	80c4d83a 	srl	r2,r16,r3
  80b110:	982cd43a 	srli	r22,r19,16
  80b114:	8ca2983a 	sll	r17,r17,r18
  80b118:	a009883a 	mov	r4,r20
  80b11c:	b00b883a 	mov	r5,r22
  80b120:	1478b03a 	or	fp,r2,r17
  80b124:	080b37c0 	call	80b37c <__umodsi3>
  80b128:	a009883a 	mov	r4,r20
  80b12c:	b00b883a 	mov	r5,r22
  80b130:	1023883a 	mov	r17,r2
  80b134:	080b3180 	call	80b318 <__udivsi3>
  80b138:	9d7fffcc 	andi	r21,r19,65535
  80b13c:	880a943a 	slli	r5,r17,16
  80b140:	e008d43a 	srli	r4,fp,16
  80b144:	a885383a 	mul	r2,r21,r2
  80b148:	84a8983a 	sll	r20,r16,r18
  80b14c:	2148b03a 	or	r4,r4,r5
  80b150:	2080042e 	bgeu	r4,r2,80b164 <__umoddi3+0x47c>
  80b154:	24c9883a 	add	r4,r4,r19
  80b158:	24c00236 	bltu	r4,r19,80b164 <__umoddi3+0x47c>
  80b15c:	2080012e 	bgeu	r4,r2,80b164 <__umoddi3+0x47c>
  80b160:	24c9883a 	add	r4,r4,r19
  80b164:	20a3c83a 	sub	r17,r4,r2
  80b168:	b00b883a 	mov	r5,r22
  80b16c:	8809883a 	mov	r4,r17
  80b170:	080b37c0 	call	80b37c <__umodsi3>
  80b174:	102f883a 	mov	r23,r2
  80b178:	8809883a 	mov	r4,r17
  80b17c:	b00b883a 	mov	r5,r22
  80b180:	080b3180 	call	80b318 <__udivsi3>
  80b184:	b82e943a 	slli	r23,r23,16
  80b188:	a885383a 	mul	r2,r21,r2
  80b18c:	e13fffcc 	andi	r4,fp,65535
  80b190:	25c8b03a 	or	r4,r4,r23
  80b194:	2080042e 	bgeu	r4,r2,80b1a8 <__umoddi3+0x4c0>
  80b198:	24c9883a 	add	r4,r4,r19
  80b19c:	24c00236 	bltu	r4,r19,80b1a8 <__umoddi3+0x4c0>
  80b1a0:	2080012e 	bgeu	r4,r2,80b1a8 <__umoddi3+0x4c0>
  80b1a4:	24c9883a 	add	r4,r4,r19
  80b1a8:	20a3c83a 	sub	r17,r4,r2
  80b1ac:	003f4806 	br	80aed0 <__alt_mem_descriptor_memory+0xff78aed0>
  80b1b0:	2c8fc83a 	sub	r7,r5,r18
  80b1b4:	1545c83a 	sub	r2,r2,r21
  80b1b8:	29cb803a 	cmpltu	r5,r5,r7
  80b1bc:	1145c83a 	sub	r2,r2,r5
  80b1c0:	4089c83a 	sub	r4,r8,r2
  80b1c4:	003fc706 	br	80b0e4 <__alt_mem_descriptor_memory+0xff78b0e4>
  80b1c8:	01000604 	movi	r4,24
  80b1cc:	003f1806 	br	80ae30 <__alt_mem_descriptor_memory+0xff78ae30>
  80b1d0:	00800604 	movi	r2,24
  80b1d4:	003f3206 	br	80aea0 <__alt_mem_descriptor_memory+0xff78aea0>
  80b1d8:	01000604 	movi	r4,24
  80b1dc:	003ed906 	br	80ad44 <__alt_mem_descriptor_memory+0xff78ad44>
  80b1e0:	413fa52e 	bgeu	r8,r4,80b078 <__alt_mem_descriptor_memory+0xff78b078>
  80b1e4:	297fff84 	addi	r5,r5,-2
  80b1e8:	4551883a 	add	r8,r8,r21
  80b1ec:	003fa306 	br	80b07c <__alt_mem_descriptor_memory+0xff78b07c>
  80b1f0:	15ff8b2e 	bgeu	r2,r23,80b020 <__alt_mem_descriptor_memory+0xff78b020>
  80b1f4:	31bfff84 	addi	r6,r6,-2
  80b1f8:	1545883a 	add	r2,r2,r21
  80b1fc:	003f8906 	br	80b024 <__alt_mem_descriptor_memory+0xff78b024>
  80b200:	24c9883a 	add	r4,r4,r19
  80b204:	003eee06 	br	80adc0 <__alt_mem_descriptor_memory+0xff78adc0>
  80b208:	8005883a 	mov	r2,r16
  80b20c:	003f1706 	br	80ae6c <__alt_mem_descriptor_memory+0xff78ae6c>
  80b210:	817fe736 	bltu	r16,r5,80b1b0 <__alt_mem_descriptor_memory+0xff78b1b0>
  80b214:	280f883a 	mov	r7,r5
  80b218:	0009883a 	mov	r4,zero
  80b21c:	003fb106 	br	80b0e4 <__alt_mem_descriptor_memory+0xff78b0e4>

0080b220 <__divsi3>:
  80b220:	20001b16 	blt	r4,zero,80b290 <__divsi3+0x70>
  80b224:	000f883a 	mov	r7,zero
  80b228:	28001616 	blt	r5,zero,80b284 <__divsi3+0x64>
  80b22c:	200d883a 	mov	r6,r4
  80b230:	29001a2e 	bgeu	r5,r4,80b29c <__divsi3+0x7c>
  80b234:	00800804 	movi	r2,32
  80b238:	00c00044 	movi	r3,1
  80b23c:	00000106 	br	80b244 <__divsi3+0x24>
  80b240:	10000d26 	beq	r2,zero,80b278 <__divsi3+0x58>
  80b244:	294b883a 	add	r5,r5,r5
  80b248:	10bfffc4 	addi	r2,r2,-1
  80b24c:	18c7883a 	add	r3,r3,r3
  80b250:	293ffb36 	bltu	r5,r4,80b240 <__alt_mem_descriptor_memory+0xff78b240>
  80b254:	0005883a 	mov	r2,zero
  80b258:	18000726 	beq	r3,zero,80b278 <__divsi3+0x58>
  80b25c:	0005883a 	mov	r2,zero
  80b260:	31400236 	bltu	r6,r5,80b26c <__divsi3+0x4c>
  80b264:	314dc83a 	sub	r6,r6,r5
  80b268:	10c4b03a 	or	r2,r2,r3
  80b26c:	1806d07a 	srli	r3,r3,1
  80b270:	280ad07a 	srli	r5,r5,1
  80b274:	183ffa1e 	bne	r3,zero,80b260 <__alt_mem_descriptor_memory+0xff78b260>
  80b278:	38000126 	beq	r7,zero,80b280 <__divsi3+0x60>
  80b27c:	0085c83a 	sub	r2,zero,r2
  80b280:	f800283a 	ret
  80b284:	014bc83a 	sub	r5,zero,r5
  80b288:	39c0005c 	xori	r7,r7,1
  80b28c:	003fe706 	br	80b22c <__alt_mem_descriptor_memory+0xff78b22c>
  80b290:	0109c83a 	sub	r4,zero,r4
  80b294:	01c00044 	movi	r7,1
  80b298:	003fe306 	br	80b228 <__alt_mem_descriptor_memory+0xff78b228>
  80b29c:	00c00044 	movi	r3,1
  80b2a0:	003fee06 	br	80b25c <__alt_mem_descriptor_memory+0xff78b25c>

0080b2a4 <__modsi3>:
  80b2a4:	20001716 	blt	r4,zero,80b304 <__modsi3+0x60>
  80b2a8:	000f883a 	mov	r7,zero
  80b2ac:	2005883a 	mov	r2,r4
  80b2b0:	28001216 	blt	r5,zero,80b2fc <__modsi3+0x58>
  80b2b4:	2900162e 	bgeu	r5,r4,80b310 <__modsi3+0x6c>
  80b2b8:	01800804 	movi	r6,32
  80b2bc:	00c00044 	movi	r3,1
  80b2c0:	00000106 	br	80b2c8 <__modsi3+0x24>
  80b2c4:	30000a26 	beq	r6,zero,80b2f0 <__modsi3+0x4c>
  80b2c8:	294b883a 	add	r5,r5,r5
  80b2cc:	31bfffc4 	addi	r6,r6,-1
  80b2d0:	18c7883a 	add	r3,r3,r3
  80b2d4:	293ffb36 	bltu	r5,r4,80b2c4 <__alt_mem_descriptor_memory+0xff78b2c4>
  80b2d8:	18000526 	beq	r3,zero,80b2f0 <__modsi3+0x4c>
  80b2dc:	1806d07a 	srli	r3,r3,1
  80b2e0:	11400136 	bltu	r2,r5,80b2e8 <__modsi3+0x44>
  80b2e4:	1145c83a 	sub	r2,r2,r5
  80b2e8:	280ad07a 	srli	r5,r5,1
  80b2ec:	183ffb1e 	bne	r3,zero,80b2dc <__alt_mem_descriptor_memory+0xff78b2dc>
  80b2f0:	38000126 	beq	r7,zero,80b2f8 <__modsi3+0x54>
  80b2f4:	0085c83a 	sub	r2,zero,r2
  80b2f8:	f800283a 	ret
  80b2fc:	014bc83a 	sub	r5,zero,r5
  80b300:	003fec06 	br	80b2b4 <__alt_mem_descriptor_memory+0xff78b2b4>
  80b304:	0109c83a 	sub	r4,zero,r4
  80b308:	01c00044 	movi	r7,1
  80b30c:	003fe706 	br	80b2ac <__alt_mem_descriptor_memory+0xff78b2ac>
  80b310:	00c00044 	movi	r3,1
  80b314:	003ff106 	br	80b2dc <__alt_mem_descriptor_memory+0xff78b2dc>

0080b318 <__udivsi3>:
  80b318:	200d883a 	mov	r6,r4
  80b31c:	2900152e 	bgeu	r5,r4,80b374 <__udivsi3+0x5c>
  80b320:	28001416 	blt	r5,zero,80b374 <__udivsi3+0x5c>
  80b324:	00800804 	movi	r2,32
  80b328:	00c00044 	movi	r3,1
  80b32c:	00000206 	br	80b338 <__udivsi3+0x20>
  80b330:	10000e26 	beq	r2,zero,80b36c <__udivsi3+0x54>
  80b334:	28000516 	blt	r5,zero,80b34c <__udivsi3+0x34>
  80b338:	294b883a 	add	r5,r5,r5
  80b33c:	10bfffc4 	addi	r2,r2,-1
  80b340:	18c7883a 	add	r3,r3,r3
  80b344:	293ffa36 	bltu	r5,r4,80b330 <__alt_mem_descriptor_memory+0xff78b330>
  80b348:	18000826 	beq	r3,zero,80b36c <__udivsi3+0x54>
  80b34c:	0005883a 	mov	r2,zero
  80b350:	31400236 	bltu	r6,r5,80b35c <__udivsi3+0x44>
  80b354:	314dc83a 	sub	r6,r6,r5
  80b358:	10c4b03a 	or	r2,r2,r3
  80b35c:	1806d07a 	srli	r3,r3,1
  80b360:	280ad07a 	srli	r5,r5,1
  80b364:	183ffa1e 	bne	r3,zero,80b350 <__alt_mem_descriptor_memory+0xff78b350>
  80b368:	f800283a 	ret
  80b36c:	0005883a 	mov	r2,zero
  80b370:	f800283a 	ret
  80b374:	00c00044 	movi	r3,1
  80b378:	003ff406 	br	80b34c <__alt_mem_descriptor_memory+0xff78b34c>

0080b37c <__umodsi3>:
  80b37c:	2005883a 	mov	r2,r4
  80b380:	2900122e 	bgeu	r5,r4,80b3cc <__umodsi3+0x50>
  80b384:	28001116 	blt	r5,zero,80b3cc <__umodsi3+0x50>
  80b388:	01800804 	movi	r6,32
  80b38c:	00c00044 	movi	r3,1
  80b390:	00000206 	br	80b39c <__umodsi3+0x20>
  80b394:	30000c26 	beq	r6,zero,80b3c8 <__umodsi3+0x4c>
  80b398:	28000516 	blt	r5,zero,80b3b0 <__umodsi3+0x34>
  80b39c:	294b883a 	add	r5,r5,r5
  80b3a0:	31bfffc4 	addi	r6,r6,-1
  80b3a4:	18c7883a 	add	r3,r3,r3
  80b3a8:	293ffa36 	bltu	r5,r4,80b394 <__alt_mem_descriptor_memory+0xff78b394>
  80b3ac:	18000626 	beq	r3,zero,80b3c8 <__umodsi3+0x4c>
  80b3b0:	1806d07a 	srli	r3,r3,1
  80b3b4:	11400136 	bltu	r2,r5,80b3bc <__umodsi3+0x40>
  80b3b8:	1145c83a 	sub	r2,r2,r5
  80b3bc:	280ad07a 	srli	r5,r5,1
  80b3c0:	183ffb1e 	bne	r3,zero,80b3b0 <__alt_mem_descriptor_memory+0xff78b3b0>
  80b3c4:	f800283a 	ret
  80b3c8:	f800283a 	ret
  80b3cc:	00c00044 	movi	r3,1
  80b3d0:	003ff706 	br	80b3b0 <__alt_mem_descriptor_memory+0xff78b3b0>

0080b3d4 <__adddf3>:
  80b3d4:	02c00434 	movhi	r11,16
  80b3d8:	5affffc4 	addi	r11,r11,-1
  80b3dc:	2806d7fa 	srli	r3,r5,31
  80b3e0:	2ad4703a 	and	r10,r5,r11
  80b3e4:	3ad2703a 	and	r9,r7,r11
  80b3e8:	3804d53a 	srli	r2,r7,20
  80b3ec:	3018d77a 	srli	r12,r6,29
  80b3f0:	280ad53a 	srli	r5,r5,20
  80b3f4:	501490fa 	slli	r10,r10,3
  80b3f8:	2010d77a 	srli	r8,r4,29
  80b3fc:	481290fa 	slli	r9,r9,3
  80b400:	380ed7fa 	srli	r7,r7,31
  80b404:	defffb04 	addi	sp,sp,-20
  80b408:	dc800215 	stw	r18,8(sp)
  80b40c:	dc400115 	stw	r17,4(sp)
  80b410:	dc000015 	stw	r16,0(sp)
  80b414:	dfc00415 	stw	ra,16(sp)
  80b418:	dcc00315 	stw	r19,12(sp)
  80b41c:	1c803fcc 	andi	r18,r3,255
  80b420:	2c01ffcc 	andi	r16,r5,2047
  80b424:	5210b03a 	or	r8,r10,r8
  80b428:	202290fa 	slli	r17,r4,3
  80b42c:	1081ffcc 	andi	r2,r2,2047
  80b430:	4b12b03a 	or	r9,r9,r12
  80b434:	300c90fa 	slli	r6,r6,3
  80b438:	91c07526 	beq	r18,r7,80b610 <__adddf3+0x23c>
  80b43c:	8087c83a 	sub	r3,r16,r2
  80b440:	00c0ab0e 	bge	zero,r3,80b6f0 <__adddf3+0x31c>
  80b444:	10002a1e 	bne	r2,zero,80b4f0 <__adddf3+0x11c>
  80b448:	4984b03a 	or	r2,r9,r6
  80b44c:	1000961e 	bne	r2,zero,80b6a8 <__adddf3+0x2d4>
  80b450:	888001cc 	andi	r2,r17,7
  80b454:	10000726 	beq	r2,zero,80b474 <__adddf3+0xa0>
  80b458:	888003cc 	andi	r2,r17,15
  80b45c:	00c00104 	movi	r3,4
  80b460:	10c00426 	beq	r2,r3,80b474 <__adddf3+0xa0>
  80b464:	88c7883a 	add	r3,r17,r3
  80b468:	1c63803a 	cmpltu	r17,r3,r17
  80b46c:	4451883a 	add	r8,r8,r17
  80b470:	1823883a 	mov	r17,r3
  80b474:	4080202c 	andhi	r2,r8,128
  80b478:	10005926 	beq	r2,zero,80b5e0 <__adddf3+0x20c>
  80b47c:	84000044 	addi	r16,r16,1
  80b480:	0081ffc4 	movi	r2,2047
  80b484:	8080ba26 	beq	r16,r2,80b770 <__adddf3+0x39c>
  80b488:	00bfe034 	movhi	r2,65408
  80b48c:	10bfffc4 	addi	r2,r2,-1
  80b490:	4090703a 	and	r8,r8,r2
  80b494:	4004977a 	slli	r2,r8,29
  80b498:	4010927a 	slli	r8,r8,9
  80b49c:	8822d0fa 	srli	r17,r17,3
  80b4a0:	8401ffcc 	andi	r16,r16,2047
  80b4a4:	4010d33a 	srli	r8,r8,12
  80b4a8:	9007883a 	mov	r3,r18
  80b4ac:	1444b03a 	or	r2,r2,r17
  80b4b0:	8401ffcc 	andi	r16,r16,2047
  80b4b4:	8020953a 	slli	r16,r16,20
  80b4b8:	18c03fcc 	andi	r3,r3,255
  80b4bc:	01000434 	movhi	r4,16
  80b4c0:	213fffc4 	addi	r4,r4,-1
  80b4c4:	180697fa 	slli	r3,r3,31
  80b4c8:	4110703a 	and	r8,r8,r4
  80b4cc:	4410b03a 	or	r8,r8,r16
  80b4d0:	40c6b03a 	or	r3,r8,r3
  80b4d4:	dfc00417 	ldw	ra,16(sp)
  80b4d8:	dcc00317 	ldw	r19,12(sp)
  80b4dc:	dc800217 	ldw	r18,8(sp)
  80b4e0:	dc400117 	ldw	r17,4(sp)
  80b4e4:	dc000017 	ldw	r16,0(sp)
  80b4e8:	dec00504 	addi	sp,sp,20
  80b4ec:	f800283a 	ret
  80b4f0:	0081ffc4 	movi	r2,2047
  80b4f4:	80bfd626 	beq	r16,r2,80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b4f8:	4a402034 	orhi	r9,r9,128
  80b4fc:	00800e04 	movi	r2,56
  80b500:	10c09f16 	blt	r2,r3,80b780 <__adddf3+0x3ac>
  80b504:	008007c4 	movi	r2,31
  80b508:	10c0c216 	blt	r2,r3,80b814 <__adddf3+0x440>
  80b50c:	00800804 	movi	r2,32
  80b510:	10c5c83a 	sub	r2,r2,r3
  80b514:	488a983a 	sll	r5,r9,r2
  80b518:	30c8d83a 	srl	r4,r6,r3
  80b51c:	3084983a 	sll	r2,r6,r2
  80b520:	48c6d83a 	srl	r3,r9,r3
  80b524:	290cb03a 	or	r6,r5,r4
  80b528:	1004c03a 	cmpne	r2,r2,zero
  80b52c:	308cb03a 	or	r6,r6,r2
  80b530:	898dc83a 	sub	r6,r17,r6
  80b534:	89a3803a 	cmpltu	r17,r17,r6
  80b538:	40d1c83a 	sub	r8,r8,r3
  80b53c:	4451c83a 	sub	r8,r8,r17
  80b540:	3023883a 	mov	r17,r6
  80b544:	4080202c 	andhi	r2,r8,128
  80b548:	10002326 	beq	r2,zero,80b5d8 <__adddf3+0x204>
  80b54c:	04c02034 	movhi	r19,128
  80b550:	9cffffc4 	addi	r19,r19,-1
  80b554:	44e6703a 	and	r19,r8,r19
  80b558:	98007626 	beq	r19,zero,80b734 <__adddf3+0x360>
  80b55c:	9809883a 	mov	r4,r19
  80b560:	080118c0 	call	80118c <__clzsi2>
  80b564:	10fffe04 	addi	r3,r2,-8
  80b568:	010007c4 	movi	r4,31
  80b56c:	20c07716 	blt	r4,r3,80b74c <__adddf3+0x378>
  80b570:	00800804 	movi	r2,32
  80b574:	10c5c83a 	sub	r2,r2,r3
  80b578:	8884d83a 	srl	r2,r17,r2
  80b57c:	98d0983a 	sll	r8,r19,r3
  80b580:	88e2983a 	sll	r17,r17,r3
  80b584:	1204b03a 	or	r2,r2,r8
  80b588:	1c007416 	blt	r3,r16,80b75c <__adddf3+0x388>
  80b58c:	1c21c83a 	sub	r16,r3,r16
  80b590:	82000044 	addi	r8,r16,1
  80b594:	00c007c4 	movi	r3,31
  80b598:	1a009116 	blt	r3,r8,80b7e0 <__adddf3+0x40c>
  80b59c:	00c00804 	movi	r3,32
  80b5a0:	1a07c83a 	sub	r3,r3,r8
  80b5a4:	8a08d83a 	srl	r4,r17,r8
  80b5a8:	88e2983a 	sll	r17,r17,r3
  80b5ac:	10c6983a 	sll	r3,r2,r3
  80b5b0:	1210d83a 	srl	r8,r2,r8
  80b5b4:	8804c03a 	cmpne	r2,r17,zero
  80b5b8:	1906b03a 	or	r3,r3,r4
  80b5bc:	18a2b03a 	or	r17,r3,r2
  80b5c0:	0021883a 	mov	r16,zero
  80b5c4:	003fa206 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b5c8:	1890b03a 	or	r8,r3,r2
  80b5cc:	40017d26 	beq	r8,zero,80bbc4 <__adddf3+0x7f0>
  80b5d0:	1011883a 	mov	r8,r2
  80b5d4:	1823883a 	mov	r17,r3
  80b5d8:	888001cc 	andi	r2,r17,7
  80b5dc:	103f9e1e 	bne	r2,zero,80b458 <__alt_mem_descriptor_memory+0xff78b458>
  80b5e0:	4004977a 	slli	r2,r8,29
  80b5e4:	8822d0fa 	srli	r17,r17,3
  80b5e8:	4010d0fa 	srli	r8,r8,3
  80b5ec:	9007883a 	mov	r3,r18
  80b5f0:	1444b03a 	or	r2,r2,r17
  80b5f4:	0101ffc4 	movi	r4,2047
  80b5f8:	81002426 	beq	r16,r4,80b68c <__adddf3+0x2b8>
  80b5fc:	8120703a 	and	r16,r16,r4
  80b600:	01000434 	movhi	r4,16
  80b604:	213fffc4 	addi	r4,r4,-1
  80b608:	4110703a 	and	r8,r8,r4
  80b60c:	003fa806 	br	80b4b0 <__alt_mem_descriptor_memory+0xff78b4b0>
  80b610:	8089c83a 	sub	r4,r16,r2
  80b614:	01005e0e 	bge	zero,r4,80b790 <__adddf3+0x3bc>
  80b618:	10002b26 	beq	r2,zero,80b6c8 <__adddf3+0x2f4>
  80b61c:	0081ffc4 	movi	r2,2047
  80b620:	80bf8b26 	beq	r16,r2,80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b624:	4a402034 	orhi	r9,r9,128
  80b628:	00800e04 	movi	r2,56
  80b62c:	1100a40e 	bge	r2,r4,80b8c0 <__adddf3+0x4ec>
  80b630:	498cb03a 	or	r6,r9,r6
  80b634:	300ac03a 	cmpne	r5,r6,zero
  80b638:	0013883a 	mov	r9,zero
  80b63c:	2c4b883a 	add	r5,r5,r17
  80b640:	2c63803a 	cmpltu	r17,r5,r17
  80b644:	4a11883a 	add	r8,r9,r8
  80b648:	8a11883a 	add	r8,r17,r8
  80b64c:	2823883a 	mov	r17,r5
  80b650:	4080202c 	andhi	r2,r8,128
  80b654:	103fe026 	beq	r2,zero,80b5d8 <__alt_mem_descriptor_memory+0xff78b5d8>
  80b658:	84000044 	addi	r16,r16,1
  80b65c:	0081ffc4 	movi	r2,2047
  80b660:	8080d226 	beq	r16,r2,80b9ac <__adddf3+0x5d8>
  80b664:	00bfe034 	movhi	r2,65408
  80b668:	10bfffc4 	addi	r2,r2,-1
  80b66c:	4090703a 	and	r8,r8,r2
  80b670:	880ad07a 	srli	r5,r17,1
  80b674:	400897fa 	slli	r4,r8,31
  80b678:	88c0004c 	andi	r3,r17,1
  80b67c:	28e2b03a 	or	r17,r5,r3
  80b680:	4010d07a 	srli	r8,r8,1
  80b684:	2462b03a 	or	r17,r4,r17
  80b688:	003f7106 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b68c:	4088b03a 	or	r4,r8,r2
  80b690:	20014526 	beq	r4,zero,80bba8 <__adddf3+0x7d4>
  80b694:	01000434 	movhi	r4,16
  80b698:	42000234 	orhi	r8,r8,8
  80b69c:	213fffc4 	addi	r4,r4,-1
  80b6a0:	4110703a 	and	r8,r8,r4
  80b6a4:	003f8206 	br	80b4b0 <__alt_mem_descriptor_memory+0xff78b4b0>
  80b6a8:	18ffffc4 	addi	r3,r3,-1
  80b6ac:	1800491e 	bne	r3,zero,80b7d4 <__adddf3+0x400>
  80b6b0:	898bc83a 	sub	r5,r17,r6
  80b6b4:	8963803a 	cmpltu	r17,r17,r5
  80b6b8:	4251c83a 	sub	r8,r8,r9
  80b6bc:	4451c83a 	sub	r8,r8,r17
  80b6c0:	2823883a 	mov	r17,r5
  80b6c4:	003f9f06 	br	80b544 <__alt_mem_descriptor_memory+0xff78b544>
  80b6c8:	4984b03a 	or	r2,r9,r6
  80b6cc:	103f6026 	beq	r2,zero,80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b6d0:	213fffc4 	addi	r4,r4,-1
  80b6d4:	2000931e 	bne	r4,zero,80b924 <__adddf3+0x550>
  80b6d8:	898d883a 	add	r6,r17,r6
  80b6dc:	3463803a 	cmpltu	r17,r6,r17
  80b6e0:	4251883a 	add	r8,r8,r9
  80b6e4:	8a11883a 	add	r8,r17,r8
  80b6e8:	3023883a 	mov	r17,r6
  80b6ec:	003fd806 	br	80b650 <__alt_mem_descriptor_memory+0xff78b650>
  80b6f0:	1800541e 	bne	r3,zero,80b844 <__adddf3+0x470>
  80b6f4:	80800044 	addi	r2,r16,1
  80b6f8:	1081ffcc 	andi	r2,r2,2047
  80b6fc:	00c00044 	movi	r3,1
  80b700:	1880a00e 	bge	r3,r2,80b984 <__adddf3+0x5b0>
  80b704:	8989c83a 	sub	r4,r17,r6
  80b708:	8905803a 	cmpltu	r2,r17,r4
  80b70c:	4267c83a 	sub	r19,r8,r9
  80b710:	98a7c83a 	sub	r19,r19,r2
  80b714:	9880202c 	andhi	r2,r19,128
  80b718:	10006326 	beq	r2,zero,80b8a8 <__adddf3+0x4d4>
  80b71c:	3463c83a 	sub	r17,r6,r17
  80b720:	4a07c83a 	sub	r3,r9,r8
  80b724:	344d803a 	cmpltu	r6,r6,r17
  80b728:	19a7c83a 	sub	r19,r3,r6
  80b72c:	3825883a 	mov	r18,r7
  80b730:	983f8a1e 	bne	r19,zero,80b55c <__alt_mem_descriptor_memory+0xff78b55c>
  80b734:	8809883a 	mov	r4,r17
  80b738:	080118c0 	call	80118c <__clzsi2>
  80b73c:	10800804 	addi	r2,r2,32
  80b740:	10fffe04 	addi	r3,r2,-8
  80b744:	010007c4 	movi	r4,31
  80b748:	20ff890e 	bge	r4,r3,80b570 <__alt_mem_descriptor_memory+0xff78b570>
  80b74c:	10bff604 	addi	r2,r2,-40
  80b750:	8884983a 	sll	r2,r17,r2
  80b754:	0023883a 	mov	r17,zero
  80b758:	1c3f8c0e 	bge	r3,r16,80b58c <__alt_mem_descriptor_memory+0xff78b58c>
  80b75c:	023fe034 	movhi	r8,65408
  80b760:	423fffc4 	addi	r8,r8,-1
  80b764:	80e1c83a 	sub	r16,r16,r3
  80b768:	1210703a 	and	r8,r2,r8
  80b76c:	003f3806 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b770:	9007883a 	mov	r3,r18
  80b774:	0011883a 	mov	r8,zero
  80b778:	0005883a 	mov	r2,zero
  80b77c:	003f4c06 	br	80b4b0 <__alt_mem_descriptor_memory+0xff78b4b0>
  80b780:	498cb03a 	or	r6,r9,r6
  80b784:	300cc03a 	cmpne	r6,r6,zero
  80b788:	0007883a 	mov	r3,zero
  80b78c:	003f6806 	br	80b530 <__alt_mem_descriptor_memory+0xff78b530>
  80b790:	20009c1e 	bne	r4,zero,80ba04 <__adddf3+0x630>
  80b794:	80800044 	addi	r2,r16,1
  80b798:	1141ffcc 	andi	r5,r2,2047
  80b79c:	01000044 	movi	r4,1
  80b7a0:	2140670e 	bge	r4,r5,80b940 <__adddf3+0x56c>
  80b7a4:	0101ffc4 	movi	r4,2047
  80b7a8:	11007f26 	beq	r2,r4,80b9a8 <__adddf3+0x5d4>
  80b7ac:	898d883a 	add	r6,r17,r6
  80b7b0:	4247883a 	add	r3,r8,r9
  80b7b4:	3451803a 	cmpltu	r8,r6,r17
  80b7b8:	40d1883a 	add	r8,r8,r3
  80b7bc:	402297fa 	slli	r17,r8,31
  80b7c0:	300cd07a 	srli	r6,r6,1
  80b7c4:	4010d07a 	srli	r8,r8,1
  80b7c8:	1021883a 	mov	r16,r2
  80b7cc:	89a2b03a 	or	r17,r17,r6
  80b7d0:	003f1f06 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b7d4:	0081ffc4 	movi	r2,2047
  80b7d8:	80bf481e 	bne	r16,r2,80b4fc <__alt_mem_descriptor_memory+0xff78b4fc>
  80b7dc:	003f1c06 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b7e0:	843ff844 	addi	r16,r16,-31
  80b7e4:	01000804 	movi	r4,32
  80b7e8:	1406d83a 	srl	r3,r2,r16
  80b7ec:	41005026 	beq	r8,r4,80b930 <__adddf3+0x55c>
  80b7f0:	01001004 	movi	r4,64
  80b7f4:	2211c83a 	sub	r8,r4,r8
  80b7f8:	1204983a 	sll	r2,r2,r8
  80b7fc:	88a2b03a 	or	r17,r17,r2
  80b800:	8822c03a 	cmpne	r17,r17,zero
  80b804:	1c62b03a 	or	r17,r3,r17
  80b808:	0011883a 	mov	r8,zero
  80b80c:	0021883a 	mov	r16,zero
  80b810:	003f7106 	br	80b5d8 <__alt_mem_descriptor_memory+0xff78b5d8>
  80b814:	193ff804 	addi	r4,r3,-32
  80b818:	00800804 	movi	r2,32
  80b81c:	4908d83a 	srl	r4,r9,r4
  80b820:	18804526 	beq	r3,r2,80b938 <__adddf3+0x564>
  80b824:	00801004 	movi	r2,64
  80b828:	10c5c83a 	sub	r2,r2,r3
  80b82c:	4886983a 	sll	r3,r9,r2
  80b830:	198cb03a 	or	r6,r3,r6
  80b834:	300cc03a 	cmpne	r6,r6,zero
  80b838:	218cb03a 	or	r6,r4,r6
  80b83c:	0007883a 	mov	r3,zero
  80b840:	003f3b06 	br	80b530 <__alt_mem_descriptor_memory+0xff78b530>
  80b844:	80002a26 	beq	r16,zero,80b8f0 <__adddf3+0x51c>
  80b848:	0101ffc4 	movi	r4,2047
  80b84c:	11006826 	beq	r2,r4,80b9f0 <__adddf3+0x61c>
  80b850:	00c7c83a 	sub	r3,zero,r3
  80b854:	42002034 	orhi	r8,r8,128
  80b858:	01000e04 	movi	r4,56
  80b85c:	20c07c16 	blt	r4,r3,80ba50 <__adddf3+0x67c>
  80b860:	010007c4 	movi	r4,31
  80b864:	20c0da16 	blt	r4,r3,80bbd0 <__adddf3+0x7fc>
  80b868:	01000804 	movi	r4,32
  80b86c:	20c9c83a 	sub	r4,r4,r3
  80b870:	4114983a 	sll	r10,r8,r4
  80b874:	88cad83a 	srl	r5,r17,r3
  80b878:	8908983a 	sll	r4,r17,r4
  80b87c:	40c6d83a 	srl	r3,r8,r3
  80b880:	5162b03a 	or	r17,r10,r5
  80b884:	2008c03a 	cmpne	r4,r4,zero
  80b888:	8922b03a 	or	r17,r17,r4
  80b88c:	3463c83a 	sub	r17,r6,r17
  80b890:	48c7c83a 	sub	r3,r9,r3
  80b894:	344d803a 	cmpltu	r6,r6,r17
  80b898:	1991c83a 	sub	r8,r3,r6
  80b89c:	1021883a 	mov	r16,r2
  80b8a0:	3825883a 	mov	r18,r7
  80b8a4:	003f2706 	br	80b544 <__alt_mem_descriptor_memory+0xff78b544>
  80b8a8:	24d0b03a 	or	r8,r4,r19
  80b8ac:	40001b1e 	bne	r8,zero,80b91c <__adddf3+0x548>
  80b8b0:	0005883a 	mov	r2,zero
  80b8b4:	0007883a 	mov	r3,zero
  80b8b8:	0021883a 	mov	r16,zero
  80b8bc:	003f4d06 	br	80b5f4 <__alt_mem_descriptor_memory+0xff78b5f4>
  80b8c0:	008007c4 	movi	r2,31
  80b8c4:	11003c16 	blt	r2,r4,80b9b8 <__adddf3+0x5e4>
  80b8c8:	00800804 	movi	r2,32
  80b8cc:	1105c83a 	sub	r2,r2,r4
  80b8d0:	488e983a 	sll	r7,r9,r2
  80b8d4:	310ad83a 	srl	r5,r6,r4
  80b8d8:	3084983a 	sll	r2,r6,r2
  80b8dc:	4912d83a 	srl	r9,r9,r4
  80b8e0:	394ab03a 	or	r5,r7,r5
  80b8e4:	1004c03a 	cmpne	r2,r2,zero
  80b8e8:	288ab03a 	or	r5,r5,r2
  80b8ec:	003f5306 	br	80b63c <__alt_mem_descriptor_memory+0xff78b63c>
  80b8f0:	4448b03a 	or	r4,r8,r17
  80b8f4:	20003e26 	beq	r4,zero,80b9f0 <__adddf3+0x61c>
  80b8f8:	00c6303a 	nor	r3,zero,r3
  80b8fc:	18003a1e 	bne	r3,zero,80b9e8 <__adddf3+0x614>
  80b900:	3463c83a 	sub	r17,r6,r17
  80b904:	4a07c83a 	sub	r3,r9,r8
  80b908:	344d803a 	cmpltu	r6,r6,r17
  80b90c:	1991c83a 	sub	r8,r3,r6
  80b910:	1021883a 	mov	r16,r2
  80b914:	3825883a 	mov	r18,r7
  80b918:	003f0a06 	br	80b544 <__alt_mem_descriptor_memory+0xff78b544>
  80b91c:	2023883a 	mov	r17,r4
  80b920:	003f0d06 	br	80b558 <__alt_mem_descriptor_memory+0xff78b558>
  80b924:	0081ffc4 	movi	r2,2047
  80b928:	80bf3f1e 	bne	r16,r2,80b628 <__alt_mem_descriptor_memory+0xff78b628>
  80b92c:	003ec806 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b930:	0005883a 	mov	r2,zero
  80b934:	003fb106 	br	80b7fc <__alt_mem_descriptor_memory+0xff78b7fc>
  80b938:	0007883a 	mov	r3,zero
  80b93c:	003fbc06 	br	80b830 <__alt_mem_descriptor_memory+0xff78b830>
  80b940:	4444b03a 	or	r2,r8,r17
  80b944:	8000871e 	bne	r16,zero,80bb64 <__adddf3+0x790>
  80b948:	1000ba26 	beq	r2,zero,80bc34 <__adddf3+0x860>
  80b94c:	4984b03a 	or	r2,r9,r6
  80b950:	103ebf26 	beq	r2,zero,80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b954:	8985883a 	add	r2,r17,r6
  80b958:	4247883a 	add	r3,r8,r9
  80b95c:	1451803a 	cmpltu	r8,r2,r17
  80b960:	40d1883a 	add	r8,r8,r3
  80b964:	40c0202c 	andhi	r3,r8,128
  80b968:	1023883a 	mov	r17,r2
  80b96c:	183f1a26 	beq	r3,zero,80b5d8 <__alt_mem_descriptor_memory+0xff78b5d8>
  80b970:	00bfe034 	movhi	r2,65408
  80b974:	10bfffc4 	addi	r2,r2,-1
  80b978:	2021883a 	mov	r16,r4
  80b97c:	4090703a 	and	r8,r8,r2
  80b980:	003eb306 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b984:	4444b03a 	or	r2,r8,r17
  80b988:	8000291e 	bne	r16,zero,80ba30 <__adddf3+0x65c>
  80b98c:	10004b1e 	bne	r2,zero,80babc <__adddf3+0x6e8>
  80b990:	4990b03a 	or	r8,r9,r6
  80b994:	40008b26 	beq	r8,zero,80bbc4 <__adddf3+0x7f0>
  80b998:	4811883a 	mov	r8,r9
  80b99c:	3023883a 	mov	r17,r6
  80b9a0:	3825883a 	mov	r18,r7
  80b9a4:	003eaa06 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80b9a8:	1021883a 	mov	r16,r2
  80b9ac:	0011883a 	mov	r8,zero
  80b9b0:	0005883a 	mov	r2,zero
  80b9b4:	003f0f06 	br	80b5f4 <__alt_mem_descriptor_memory+0xff78b5f4>
  80b9b8:	217ff804 	addi	r5,r4,-32
  80b9bc:	00800804 	movi	r2,32
  80b9c0:	494ad83a 	srl	r5,r9,r5
  80b9c4:	20807d26 	beq	r4,r2,80bbbc <__adddf3+0x7e8>
  80b9c8:	00801004 	movi	r2,64
  80b9cc:	1109c83a 	sub	r4,r2,r4
  80b9d0:	4912983a 	sll	r9,r9,r4
  80b9d4:	498cb03a 	or	r6,r9,r6
  80b9d8:	300cc03a 	cmpne	r6,r6,zero
  80b9dc:	298ab03a 	or	r5,r5,r6
  80b9e0:	0013883a 	mov	r9,zero
  80b9e4:	003f1506 	br	80b63c <__alt_mem_descriptor_memory+0xff78b63c>
  80b9e8:	0101ffc4 	movi	r4,2047
  80b9ec:	113f9a1e 	bne	r2,r4,80b858 <__alt_mem_descriptor_memory+0xff78b858>
  80b9f0:	4811883a 	mov	r8,r9
  80b9f4:	3023883a 	mov	r17,r6
  80b9f8:	1021883a 	mov	r16,r2
  80b9fc:	3825883a 	mov	r18,r7
  80ba00:	003e9306 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80ba04:	8000161e 	bne	r16,zero,80ba60 <__adddf3+0x68c>
  80ba08:	444ab03a 	or	r5,r8,r17
  80ba0c:	28005126 	beq	r5,zero,80bb54 <__adddf3+0x780>
  80ba10:	0108303a 	nor	r4,zero,r4
  80ba14:	20004d1e 	bne	r4,zero,80bb4c <__adddf3+0x778>
  80ba18:	89a3883a 	add	r17,r17,r6
  80ba1c:	4253883a 	add	r9,r8,r9
  80ba20:	898d803a 	cmpltu	r6,r17,r6
  80ba24:	3251883a 	add	r8,r6,r9
  80ba28:	1021883a 	mov	r16,r2
  80ba2c:	003f0806 	br	80b650 <__alt_mem_descriptor_memory+0xff78b650>
  80ba30:	1000301e 	bne	r2,zero,80baf4 <__adddf3+0x720>
  80ba34:	4984b03a 	or	r2,r9,r6
  80ba38:	10007126 	beq	r2,zero,80bc00 <__adddf3+0x82c>
  80ba3c:	4811883a 	mov	r8,r9
  80ba40:	3023883a 	mov	r17,r6
  80ba44:	3825883a 	mov	r18,r7
  80ba48:	0401ffc4 	movi	r16,2047
  80ba4c:	003e8006 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80ba50:	4462b03a 	or	r17,r8,r17
  80ba54:	8822c03a 	cmpne	r17,r17,zero
  80ba58:	0007883a 	mov	r3,zero
  80ba5c:	003f8b06 	br	80b88c <__alt_mem_descriptor_memory+0xff78b88c>
  80ba60:	0141ffc4 	movi	r5,2047
  80ba64:	11403b26 	beq	r2,r5,80bb54 <__adddf3+0x780>
  80ba68:	0109c83a 	sub	r4,zero,r4
  80ba6c:	42002034 	orhi	r8,r8,128
  80ba70:	01400e04 	movi	r5,56
  80ba74:	29006716 	blt	r5,r4,80bc14 <__adddf3+0x840>
  80ba78:	014007c4 	movi	r5,31
  80ba7c:	29007016 	blt	r5,r4,80bc40 <__adddf3+0x86c>
  80ba80:	01400804 	movi	r5,32
  80ba84:	290bc83a 	sub	r5,r5,r4
  80ba88:	4154983a 	sll	r10,r8,r5
  80ba8c:	890ed83a 	srl	r7,r17,r4
  80ba90:	894a983a 	sll	r5,r17,r5
  80ba94:	4108d83a 	srl	r4,r8,r4
  80ba98:	51e2b03a 	or	r17,r10,r7
  80ba9c:	280ac03a 	cmpne	r5,r5,zero
  80baa0:	8962b03a 	or	r17,r17,r5
  80baa4:	89a3883a 	add	r17,r17,r6
  80baa8:	2253883a 	add	r9,r4,r9
  80baac:	898d803a 	cmpltu	r6,r17,r6
  80bab0:	3251883a 	add	r8,r6,r9
  80bab4:	1021883a 	mov	r16,r2
  80bab8:	003ee506 	br	80b650 <__alt_mem_descriptor_memory+0xff78b650>
  80babc:	4984b03a 	or	r2,r9,r6
  80bac0:	103e6326 	beq	r2,zero,80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80bac4:	8987c83a 	sub	r3,r17,r6
  80bac8:	88c9803a 	cmpltu	r4,r17,r3
  80bacc:	4245c83a 	sub	r2,r8,r9
  80bad0:	1105c83a 	sub	r2,r2,r4
  80bad4:	1100202c 	andhi	r4,r2,128
  80bad8:	203ebb26 	beq	r4,zero,80b5c8 <__alt_mem_descriptor_memory+0xff78b5c8>
  80badc:	3463c83a 	sub	r17,r6,r17
  80bae0:	4a07c83a 	sub	r3,r9,r8
  80bae4:	344d803a 	cmpltu	r6,r6,r17
  80bae8:	1991c83a 	sub	r8,r3,r6
  80baec:	3825883a 	mov	r18,r7
  80baf0:	003e5706 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80baf4:	4984b03a 	or	r2,r9,r6
  80baf8:	10002e26 	beq	r2,zero,80bbb4 <__adddf3+0x7e0>
  80bafc:	4004d0fa 	srli	r2,r8,3
  80bb00:	8822d0fa 	srli	r17,r17,3
  80bb04:	4010977a 	slli	r8,r8,29
  80bb08:	10c0022c 	andhi	r3,r2,8
  80bb0c:	4462b03a 	or	r17,r8,r17
  80bb10:	18000826 	beq	r3,zero,80bb34 <__adddf3+0x760>
  80bb14:	4808d0fa 	srli	r4,r9,3
  80bb18:	20c0022c 	andhi	r3,r4,8
  80bb1c:	1800051e 	bne	r3,zero,80bb34 <__adddf3+0x760>
  80bb20:	300cd0fa 	srli	r6,r6,3
  80bb24:	4806977a 	slli	r3,r9,29
  80bb28:	2005883a 	mov	r2,r4
  80bb2c:	3825883a 	mov	r18,r7
  80bb30:	19a2b03a 	or	r17,r3,r6
  80bb34:	8810d77a 	srli	r8,r17,29
  80bb38:	100490fa 	slli	r2,r2,3
  80bb3c:	882290fa 	slli	r17,r17,3
  80bb40:	0401ffc4 	movi	r16,2047
  80bb44:	4090b03a 	or	r8,r8,r2
  80bb48:	003e4106 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80bb4c:	0141ffc4 	movi	r5,2047
  80bb50:	117fc71e 	bne	r2,r5,80ba70 <__alt_mem_descriptor_memory+0xff78ba70>
  80bb54:	4811883a 	mov	r8,r9
  80bb58:	3023883a 	mov	r17,r6
  80bb5c:	1021883a 	mov	r16,r2
  80bb60:	003e3b06 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80bb64:	10002f26 	beq	r2,zero,80bc24 <__adddf3+0x850>
  80bb68:	4984b03a 	or	r2,r9,r6
  80bb6c:	10001126 	beq	r2,zero,80bbb4 <__adddf3+0x7e0>
  80bb70:	4004d0fa 	srli	r2,r8,3
  80bb74:	8822d0fa 	srli	r17,r17,3
  80bb78:	4010977a 	slli	r8,r8,29
  80bb7c:	10c0022c 	andhi	r3,r2,8
  80bb80:	4462b03a 	or	r17,r8,r17
  80bb84:	183feb26 	beq	r3,zero,80bb34 <__alt_mem_descriptor_memory+0xff78bb34>
  80bb88:	4808d0fa 	srli	r4,r9,3
  80bb8c:	20c0022c 	andhi	r3,r4,8
  80bb90:	183fe81e 	bne	r3,zero,80bb34 <__alt_mem_descriptor_memory+0xff78bb34>
  80bb94:	300cd0fa 	srli	r6,r6,3
  80bb98:	4806977a 	slli	r3,r9,29
  80bb9c:	2005883a 	mov	r2,r4
  80bba0:	19a2b03a 	or	r17,r3,r6
  80bba4:	003fe306 	br	80bb34 <__alt_mem_descriptor_memory+0xff78bb34>
  80bba8:	0011883a 	mov	r8,zero
  80bbac:	0005883a 	mov	r2,zero
  80bbb0:	003e3f06 	br	80b4b0 <__alt_mem_descriptor_memory+0xff78b4b0>
  80bbb4:	0401ffc4 	movi	r16,2047
  80bbb8:	003e2506 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80bbbc:	0013883a 	mov	r9,zero
  80bbc0:	003f8406 	br	80b9d4 <__alt_mem_descriptor_memory+0xff78b9d4>
  80bbc4:	0005883a 	mov	r2,zero
  80bbc8:	0007883a 	mov	r3,zero
  80bbcc:	003e8906 	br	80b5f4 <__alt_mem_descriptor_memory+0xff78b5f4>
  80bbd0:	197ff804 	addi	r5,r3,-32
  80bbd4:	01000804 	movi	r4,32
  80bbd8:	414ad83a 	srl	r5,r8,r5
  80bbdc:	19002426 	beq	r3,r4,80bc70 <__adddf3+0x89c>
  80bbe0:	01001004 	movi	r4,64
  80bbe4:	20c7c83a 	sub	r3,r4,r3
  80bbe8:	40c6983a 	sll	r3,r8,r3
  80bbec:	1c46b03a 	or	r3,r3,r17
  80bbf0:	1806c03a 	cmpne	r3,r3,zero
  80bbf4:	28e2b03a 	or	r17,r5,r3
  80bbf8:	0007883a 	mov	r3,zero
  80bbfc:	003f2306 	br	80b88c <__alt_mem_descriptor_memory+0xff78b88c>
  80bc00:	0007883a 	mov	r3,zero
  80bc04:	5811883a 	mov	r8,r11
  80bc08:	00bfffc4 	movi	r2,-1
  80bc0c:	0401ffc4 	movi	r16,2047
  80bc10:	003e7806 	br	80b5f4 <__alt_mem_descriptor_memory+0xff78b5f4>
  80bc14:	4462b03a 	or	r17,r8,r17
  80bc18:	8822c03a 	cmpne	r17,r17,zero
  80bc1c:	0009883a 	mov	r4,zero
  80bc20:	003fa006 	br	80baa4 <__alt_mem_descriptor_memory+0xff78baa4>
  80bc24:	4811883a 	mov	r8,r9
  80bc28:	3023883a 	mov	r17,r6
  80bc2c:	0401ffc4 	movi	r16,2047
  80bc30:	003e0706 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80bc34:	4811883a 	mov	r8,r9
  80bc38:	3023883a 	mov	r17,r6
  80bc3c:	003e0406 	br	80b450 <__alt_mem_descriptor_memory+0xff78b450>
  80bc40:	21fff804 	addi	r7,r4,-32
  80bc44:	01400804 	movi	r5,32
  80bc48:	41ced83a 	srl	r7,r8,r7
  80bc4c:	21400a26 	beq	r4,r5,80bc78 <__adddf3+0x8a4>
  80bc50:	01401004 	movi	r5,64
  80bc54:	2909c83a 	sub	r4,r5,r4
  80bc58:	4108983a 	sll	r4,r8,r4
  80bc5c:	2448b03a 	or	r4,r4,r17
  80bc60:	2008c03a 	cmpne	r4,r4,zero
  80bc64:	3922b03a 	or	r17,r7,r4
  80bc68:	0009883a 	mov	r4,zero
  80bc6c:	003f8d06 	br	80baa4 <__alt_mem_descriptor_memory+0xff78baa4>
  80bc70:	0007883a 	mov	r3,zero
  80bc74:	003fdd06 	br	80bbec <__alt_mem_descriptor_memory+0xff78bbec>
  80bc78:	0009883a 	mov	r4,zero
  80bc7c:	003ff706 	br	80bc5c <__alt_mem_descriptor_memory+0xff78bc5c>

0080bc80 <__divdf3>:
  80bc80:	defff204 	addi	sp,sp,-56
  80bc84:	dd400915 	stw	r21,36(sp)
  80bc88:	282ad53a 	srli	r21,r5,20
  80bc8c:	dd000815 	stw	r20,32(sp)
  80bc90:	2828d7fa 	srli	r20,r5,31
  80bc94:	dc000415 	stw	r16,16(sp)
  80bc98:	04000434 	movhi	r16,16
  80bc9c:	df000c15 	stw	fp,48(sp)
  80bca0:	843fffc4 	addi	r16,r16,-1
  80bca4:	dfc00d15 	stw	ra,52(sp)
  80bca8:	ddc00b15 	stw	r23,44(sp)
  80bcac:	dd800a15 	stw	r22,40(sp)
  80bcb0:	dcc00715 	stw	r19,28(sp)
  80bcb4:	dc800615 	stw	r18,24(sp)
  80bcb8:	dc400515 	stw	r17,20(sp)
  80bcbc:	ad41ffcc 	andi	r21,r21,2047
  80bcc0:	2c20703a 	and	r16,r5,r16
  80bcc4:	a7003fcc 	andi	fp,r20,255
  80bcc8:	a8006126 	beq	r21,zero,80be50 <__divdf3+0x1d0>
  80bccc:	0081ffc4 	movi	r2,2047
  80bcd0:	2025883a 	mov	r18,r4
  80bcd4:	a8803726 	beq	r21,r2,80bdb4 <__divdf3+0x134>
  80bcd8:	80800434 	orhi	r2,r16,16
  80bcdc:	100490fa 	slli	r2,r2,3
  80bce0:	2020d77a 	srli	r16,r4,29
  80bce4:	202490fa 	slli	r18,r4,3
  80bce8:	ad7f0044 	addi	r21,r21,-1023
  80bcec:	80a0b03a 	or	r16,r16,r2
  80bcf0:	0027883a 	mov	r19,zero
  80bcf4:	0013883a 	mov	r9,zero
  80bcf8:	3804d53a 	srli	r2,r7,20
  80bcfc:	382cd7fa 	srli	r22,r7,31
  80bd00:	04400434 	movhi	r17,16
  80bd04:	8c7fffc4 	addi	r17,r17,-1
  80bd08:	1081ffcc 	andi	r2,r2,2047
  80bd0c:	3011883a 	mov	r8,r6
  80bd10:	3c62703a 	and	r17,r7,r17
  80bd14:	b5c03fcc 	andi	r23,r22,255
  80bd18:	10006c26 	beq	r2,zero,80becc <__divdf3+0x24c>
  80bd1c:	00c1ffc4 	movi	r3,2047
  80bd20:	10c06426 	beq	r2,r3,80beb4 <__divdf3+0x234>
  80bd24:	88c00434 	orhi	r3,r17,16
  80bd28:	180690fa 	slli	r3,r3,3
  80bd2c:	3022d77a 	srli	r17,r6,29
  80bd30:	301090fa 	slli	r8,r6,3
  80bd34:	10bf0044 	addi	r2,r2,-1023
  80bd38:	88e2b03a 	or	r17,r17,r3
  80bd3c:	000f883a 	mov	r7,zero
  80bd40:	a58cf03a 	xor	r6,r20,r22
  80bd44:	3cc8b03a 	or	r4,r7,r19
  80bd48:	a8abc83a 	sub	r21,r21,r2
  80bd4c:	008003c4 	movi	r2,15
  80bd50:	3007883a 	mov	r3,r6
  80bd54:	34c03fcc 	andi	r19,r6,255
  80bd58:	11009036 	bltu	r2,r4,80bf9c <__divdf3+0x31c>
  80bd5c:	200890ba 	slli	r4,r4,2
  80bd60:	00802074 	movhi	r2,129
  80bd64:	10af5d04 	addi	r2,r2,-17036
  80bd68:	2089883a 	add	r4,r4,r2
  80bd6c:	20800017 	ldw	r2,0(r4)
  80bd70:	1000683a 	jmp	r2
  80bd74:	0080bf9c 	xori	r2,zero,766
  80bd78:	0080bdec 	andhi	r2,zero,759
  80bd7c:	0080bf8c 	andi	r2,zero,766
  80bd80:	0080bde0 	cmpeqi	r2,zero,759
  80bd84:	0080bf8c 	andi	r2,zero,766
  80bd88:	0080bf60 	cmpeqi	r2,zero,765
  80bd8c:	0080bf8c 	andi	r2,zero,766
  80bd90:	0080bde0 	cmpeqi	r2,zero,759
  80bd94:	0080bdec 	andhi	r2,zero,759
  80bd98:	0080bdec 	andhi	r2,zero,759
  80bd9c:	0080bf60 	cmpeqi	r2,zero,765
  80bda0:	0080bde0 	cmpeqi	r2,zero,759
  80bda4:	0080bdd0 	cmplti	r2,zero,759
  80bda8:	0080bdd0 	cmplti	r2,zero,759
  80bdac:	0080bdd0 	cmplti	r2,zero,759
  80bdb0:	0080c280 	call	80c28 <__alt_mem_new_sdram_controller_0-0x77f3d8>
  80bdb4:	2404b03a 	or	r2,r4,r16
  80bdb8:	1000661e 	bne	r2,zero,80bf54 <__divdf3+0x2d4>
  80bdbc:	04c00204 	movi	r19,8
  80bdc0:	0021883a 	mov	r16,zero
  80bdc4:	0025883a 	mov	r18,zero
  80bdc8:	02400084 	movi	r9,2
  80bdcc:	003fca06 	br	80bcf8 <__alt_mem_descriptor_memory+0xff78bcf8>
  80bdd0:	8023883a 	mov	r17,r16
  80bdd4:	9011883a 	mov	r8,r18
  80bdd8:	e02f883a 	mov	r23,fp
  80bddc:	480f883a 	mov	r7,r9
  80bde0:	00800084 	movi	r2,2
  80bde4:	3881311e 	bne	r7,r2,80c2ac <__divdf3+0x62c>
  80bde8:	b827883a 	mov	r19,r23
  80bdec:	98c0004c 	andi	r3,r19,1
  80bdf0:	0081ffc4 	movi	r2,2047
  80bdf4:	000b883a 	mov	r5,zero
  80bdf8:	0025883a 	mov	r18,zero
  80bdfc:	1004953a 	slli	r2,r2,20
  80be00:	18c03fcc 	andi	r3,r3,255
  80be04:	04400434 	movhi	r17,16
  80be08:	8c7fffc4 	addi	r17,r17,-1
  80be0c:	180697fa 	slli	r3,r3,31
  80be10:	2c4a703a 	and	r5,r5,r17
  80be14:	288ab03a 	or	r5,r5,r2
  80be18:	28c6b03a 	or	r3,r5,r3
  80be1c:	9005883a 	mov	r2,r18
  80be20:	dfc00d17 	ldw	ra,52(sp)
  80be24:	df000c17 	ldw	fp,48(sp)
  80be28:	ddc00b17 	ldw	r23,44(sp)
  80be2c:	dd800a17 	ldw	r22,40(sp)
  80be30:	dd400917 	ldw	r21,36(sp)
  80be34:	dd000817 	ldw	r20,32(sp)
  80be38:	dcc00717 	ldw	r19,28(sp)
  80be3c:	dc800617 	ldw	r18,24(sp)
  80be40:	dc400517 	ldw	r17,20(sp)
  80be44:	dc000417 	ldw	r16,16(sp)
  80be48:	dec00e04 	addi	sp,sp,56
  80be4c:	f800283a 	ret
  80be50:	2404b03a 	or	r2,r4,r16
  80be54:	2027883a 	mov	r19,r4
  80be58:	10003926 	beq	r2,zero,80bf40 <__divdf3+0x2c0>
  80be5c:	80012e26 	beq	r16,zero,80c318 <__divdf3+0x698>
  80be60:	8009883a 	mov	r4,r16
  80be64:	d9800315 	stw	r6,12(sp)
  80be68:	d9c00215 	stw	r7,8(sp)
  80be6c:	080118c0 	call	80118c <__clzsi2>
  80be70:	d9800317 	ldw	r6,12(sp)
  80be74:	d9c00217 	ldw	r7,8(sp)
  80be78:	113ffd44 	addi	r4,r2,-11
  80be7c:	00c00704 	movi	r3,28
  80be80:	19012116 	blt	r3,r4,80c308 <__divdf3+0x688>
  80be84:	00c00744 	movi	r3,29
  80be88:	147ffe04 	addi	r17,r2,-8
  80be8c:	1907c83a 	sub	r3,r3,r4
  80be90:	8460983a 	sll	r16,r16,r17
  80be94:	98c6d83a 	srl	r3,r19,r3
  80be98:	9c64983a 	sll	r18,r19,r17
  80be9c:	1c20b03a 	or	r16,r3,r16
  80bea0:	1080fcc4 	addi	r2,r2,1011
  80bea4:	00abc83a 	sub	r21,zero,r2
  80bea8:	0027883a 	mov	r19,zero
  80beac:	0013883a 	mov	r9,zero
  80beb0:	003f9106 	br	80bcf8 <__alt_mem_descriptor_memory+0xff78bcf8>
  80beb4:	3446b03a 	or	r3,r6,r17
  80beb8:	18001f1e 	bne	r3,zero,80bf38 <__divdf3+0x2b8>
  80bebc:	0023883a 	mov	r17,zero
  80bec0:	0011883a 	mov	r8,zero
  80bec4:	01c00084 	movi	r7,2
  80bec8:	003f9d06 	br	80bd40 <__alt_mem_descriptor_memory+0xff78bd40>
  80becc:	3446b03a 	or	r3,r6,r17
  80bed0:	18001526 	beq	r3,zero,80bf28 <__divdf3+0x2a8>
  80bed4:	88011b26 	beq	r17,zero,80c344 <__divdf3+0x6c4>
  80bed8:	8809883a 	mov	r4,r17
  80bedc:	d9800315 	stw	r6,12(sp)
  80bee0:	da400115 	stw	r9,4(sp)
  80bee4:	080118c0 	call	80118c <__clzsi2>
  80bee8:	d9800317 	ldw	r6,12(sp)
  80beec:	da400117 	ldw	r9,4(sp)
  80bef0:	113ffd44 	addi	r4,r2,-11
  80bef4:	00c00704 	movi	r3,28
  80bef8:	19010e16 	blt	r3,r4,80c334 <__divdf3+0x6b4>
  80befc:	00c00744 	movi	r3,29
  80bf00:	123ffe04 	addi	r8,r2,-8
  80bf04:	1907c83a 	sub	r3,r3,r4
  80bf08:	8a22983a 	sll	r17,r17,r8
  80bf0c:	30c6d83a 	srl	r3,r6,r3
  80bf10:	3210983a 	sll	r8,r6,r8
  80bf14:	1c62b03a 	or	r17,r3,r17
  80bf18:	1080fcc4 	addi	r2,r2,1011
  80bf1c:	0085c83a 	sub	r2,zero,r2
  80bf20:	000f883a 	mov	r7,zero
  80bf24:	003f8606 	br	80bd40 <__alt_mem_descriptor_memory+0xff78bd40>
  80bf28:	0023883a 	mov	r17,zero
  80bf2c:	0011883a 	mov	r8,zero
  80bf30:	01c00044 	movi	r7,1
  80bf34:	003f8206 	br	80bd40 <__alt_mem_descriptor_memory+0xff78bd40>
  80bf38:	01c000c4 	movi	r7,3
  80bf3c:	003f8006 	br	80bd40 <__alt_mem_descriptor_memory+0xff78bd40>
  80bf40:	04c00104 	movi	r19,4
  80bf44:	0021883a 	mov	r16,zero
  80bf48:	0025883a 	mov	r18,zero
  80bf4c:	02400044 	movi	r9,1
  80bf50:	003f6906 	br	80bcf8 <__alt_mem_descriptor_memory+0xff78bcf8>
  80bf54:	04c00304 	movi	r19,12
  80bf58:	024000c4 	movi	r9,3
  80bf5c:	003f6606 	br	80bcf8 <__alt_mem_descriptor_memory+0xff78bcf8>
  80bf60:	01400434 	movhi	r5,16
  80bf64:	0007883a 	mov	r3,zero
  80bf68:	297fffc4 	addi	r5,r5,-1
  80bf6c:	04bfffc4 	movi	r18,-1
  80bf70:	0081ffc4 	movi	r2,2047
  80bf74:	003fa106 	br	80bdfc <__alt_mem_descriptor_memory+0xff78bdfc>
  80bf78:	00c00044 	movi	r3,1
  80bf7c:	1887c83a 	sub	r3,r3,r2
  80bf80:	01000e04 	movi	r4,56
  80bf84:	20c1210e 	bge	r4,r3,80c40c <__divdf3+0x78c>
  80bf88:	98c0004c 	andi	r3,r19,1
  80bf8c:	0005883a 	mov	r2,zero
  80bf90:	000b883a 	mov	r5,zero
  80bf94:	0025883a 	mov	r18,zero
  80bf98:	003f9806 	br	80bdfc <__alt_mem_descriptor_memory+0xff78bdfc>
  80bf9c:	8c00fd36 	bltu	r17,r16,80c394 <__divdf3+0x714>
  80bfa0:	8440fb26 	beq	r16,r17,80c390 <__divdf3+0x710>
  80bfa4:	8007883a 	mov	r3,r16
  80bfa8:	ad7fffc4 	addi	r21,r21,-1
  80bfac:	0021883a 	mov	r16,zero
  80bfb0:	4004d63a 	srli	r2,r8,24
  80bfb4:	8822923a 	slli	r17,r17,8
  80bfb8:	1809883a 	mov	r4,r3
  80bfbc:	402c923a 	slli	r22,r8,8
  80bfc0:	88b8b03a 	or	fp,r17,r2
  80bfc4:	e028d43a 	srli	r20,fp,16
  80bfc8:	d8c00015 	stw	r3,0(sp)
  80bfcc:	e5ffffcc 	andi	r23,fp,65535
  80bfd0:	a00b883a 	mov	r5,r20
  80bfd4:	080b3180 	call	80b318 <__udivsi3>
  80bfd8:	d8c00017 	ldw	r3,0(sp)
  80bfdc:	a00b883a 	mov	r5,r20
  80bfe0:	d8800315 	stw	r2,12(sp)
  80bfe4:	1809883a 	mov	r4,r3
  80bfe8:	080b37c0 	call	80b37c <__umodsi3>
  80bfec:	d9800317 	ldw	r6,12(sp)
  80bff0:	1006943a 	slli	r3,r2,16
  80bff4:	9004d43a 	srli	r2,r18,16
  80bff8:	b9a3383a 	mul	r17,r23,r6
  80bffc:	10c4b03a 	or	r2,r2,r3
  80c000:	1440062e 	bgeu	r2,r17,80c01c <__divdf3+0x39c>
  80c004:	1705883a 	add	r2,r2,fp
  80c008:	30ffffc4 	addi	r3,r6,-1
  80c00c:	1700ee36 	bltu	r2,fp,80c3c8 <__divdf3+0x748>
  80c010:	1440ed2e 	bgeu	r2,r17,80c3c8 <__divdf3+0x748>
  80c014:	31bfff84 	addi	r6,r6,-2
  80c018:	1705883a 	add	r2,r2,fp
  80c01c:	1463c83a 	sub	r17,r2,r17
  80c020:	a00b883a 	mov	r5,r20
  80c024:	8809883a 	mov	r4,r17
  80c028:	d9800315 	stw	r6,12(sp)
  80c02c:	080b3180 	call	80b318 <__udivsi3>
  80c030:	a00b883a 	mov	r5,r20
  80c034:	8809883a 	mov	r4,r17
  80c038:	d8800215 	stw	r2,8(sp)
  80c03c:	080b37c0 	call	80b37c <__umodsi3>
  80c040:	d9c00217 	ldw	r7,8(sp)
  80c044:	1004943a 	slli	r2,r2,16
  80c048:	94bfffcc 	andi	r18,r18,65535
  80c04c:	b9d1383a 	mul	r8,r23,r7
  80c050:	90a4b03a 	or	r18,r18,r2
  80c054:	d9800317 	ldw	r6,12(sp)
  80c058:	9200062e 	bgeu	r18,r8,80c074 <__divdf3+0x3f4>
  80c05c:	9725883a 	add	r18,r18,fp
  80c060:	38bfffc4 	addi	r2,r7,-1
  80c064:	9700d636 	bltu	r18,fp,80c3c0 <__divdf3+0x740>
  80c068:	9200d52e 	bgeu	r18,r8,80c3c0 <__divdf3+0x740>
  80c06c:	39ffff84 	addi	r7,r7,-2
  80c070:	9725883a 	add	r18,r18,fp
  80c074:	3004943a 	slli	r2,r6,16
  80c078:	b012d43a 	srli	r9,r22,16
  80c07c:	b1bfffcc 	andi	r6,r22,65535
  80c080:	11e2b03a 	or	r17,r2,r7
  80c084:	8806d43a 	srli	r3,r17,16
  80c088:	893fffcc 	andi	r4,r17,65535
  80c08c:	218b383a 	mul	r5,r4,r6
  80c090:	30c5383a 	mul	r2,r6,r3
  80c094:	2249383a 	mul	r4,r4,r9
  80c098:	280ed43a 	srli	r7,r5,16
  80c09c:	9225c83a 	sub	r18,r18,r8
  80c0a0:	2089883a 	add	r4,r4,r2
  80c0a4:	3909883a 	add	r4,r7,r4
  80c0a8:	1a47383a 	mul	r3,r3,r9
  80c0ac:	2080022e 	bgeu	r4,r2,80c0b8 <__divdf3+0x438>
  80c0b0:	00800074 	movhi	r2,1
  80c0b4:	1887883a 	add	r3,r3,r2
  80c0b8:	2004d43a 	srli	r2,r4,16
  80c0bc:	2008943a 	slli	r4,r4,16
  80c0c0:	297fffcc 	andi	r5,r5,65535
  80c0c4:	10c7883a 	add	r3,r2,r3
  80c0c8:	2149883a 	add	r4,r4,r5
  80c0cc:	90c0a536 	bltu	r18,r3,80c364 <__divdf3+0x6e4>
  80c0d0:	90c0bf26 	beq	r18,r3,80c3d0 <__divdf3+0x750>
  80c0d4:	90c7c83a 	sub	r3,r18,r3
  80c0d8:	810fc83a 	sub	r7,r16,r4
  80c0dc:	81e5803a 	cmpltu	r18,r16,r7
  80c0e0:	1ca5c83a 	sub	r18,r3,r18
  80c0e4:	e480c126 	beq	fp,r18,80c3ec <__divdf3+0x76c>
  80c0e8:	a00b883a 	mov	r5,r20
  80c0ec:	9009883a 	mov	r4,r18
  80c0f0:	d9800315 	stw	r6,12(sp)
  80c0f4:	d9c00215 	stw	r7,8(sp)
  80c0f8:	da400115 	stw	r9,4(sp)
  80c0fc:	080b3180 	call	80b318 <__udivsi3>
  80c100:	a00b883a 	mov	r5,r20
  80c104:	9009883a 	mov	r4,r18
  80c108:	d8800015 	stw	r2,0(sp)
  80c10c:	080b37c0 	call	80b37c <__umodsi3>
  80c110:	d9c00217 	ldw	r7,8(sp)
  80c114:	da000017 	ldw	r8,0(sp)
  80c118:	1006943a 	slli	r3,r2,16
  80c11c:	3804d43a 	srli	r2,r7,16
  80c120:	ba21383a 	mul	r16,r23,r8
  80c124:	d9800317 	ldw	r6,12(sp)
  80c128:	10c4b03a 	or	r2,r2,r3
  80c12c:	da400117 	ldw	r9,4(sp)
  80c130:	1400062e 	bgeu	r2,r16,80c14c <__divdf3+0x4cc>
  80c134:	1705883a 	add	r2,r2,fp
  80c138:	40ffffc4 	addi	r3,r8,-1
  80c13c:	1700ad36 	bltu	r2,fp,80c3f4 <__divdf3+0x774>
  80c140:	1400ac2e 	bgeu	r2,r16,80c3f4 <__divdf3+0x774>
  80c144:	423fff84 	addi	r8,r8,-2
  80c148:	1705883a 	add	r2,r2,fp
  80c14c:	1421c83a 	sub	r16,r2,r16
  80c150:	a00b883a 	mov	r5,r20
  80c154:	8009883a 	mov	r4,r16
  80c158:	d9800315 	stw	r6,12(sp)
  80c15c:	d9c00215 	stw	r7,8(sp)
  80c160:	da000015 	stw	r8,0(sp)
  80c164:	da400115 	stw	r9,4(sp)
  80c168:	080b3180 	call	80b318 <__udivsi3>
  80c16c:	8009883a 	mov	r4,r16
  80c170:	a00b883a 	mov	r5,r20
  80c174:	1025883a 	mov	r18,r2
  80c178:	080b37c0 	call	80b37c <__umodsi3>
  80c17c:	d9c00217 	ldw	r7,8(sp)
  80c180:	1004943a 	slli	r2,r2,16
  80c184:	bcaf383a 	mul	r23,r23,r18
  80c188:	393fffcc 	andi	r4,r7,65535
  80c18c:	2088b03a 	or	r4,r4,r2
  80c190:	d9800317 	ldw	r6,12(sp)
  80c194:	da000017 	ldw	r8,0(sp)
  80c198:	da400117 	ldw	r9,4(sp)
  80c19c:	25c0062e 	bgeu	r4,r23,80c1b8 <__divdf3+0x538>
  80c1a0:	2709883a 	add	r4,r4,fp
  80c1a4:	90bfffc4 	addi	r2,r18,-1
  80c1a8:	27009436 	bltu	r4,fp,80c3fc <__divdf3+0x77c>
  80c1ac:	25c0932e 	bgeu	r4,r23,80c3fc <__divdf3+0x77c>
  80c1b0:	94bfff84 	addi	r18,r18,-2
  80c1b4:	2709883a 	add	r4,r4,fp
  80c1b8:	4004943a 	slli	r2,r8,16
  80c1bc:	25efc83a 	sub	r23,r4,r23
  80c1c0:	1490b03a 	or	r8,r2,r18
  80c1c4:	4008d43a 	srli	r4,r8,16
  80c1c8:	40ffffcc 	andi	r3,r8,65535
  80c1cc:	30c5383a 	mul	r2,r6,r3
  80c1d0:	1a47383a 	mul	r3,r3,r9
  80c1d4:	310d383a 	mul	r6,r6,r4
  80c1d8:	100ad43a 	srli	r5,r2,16
  80c1dc:	4913383a 	mul	r9,r9,r4
  80c1e0:	1987883a 	add	r3,r3,r6
  80c1e4:	28c7883a 	add	r3,r5,r3
  80c1e8:	1980022e 	bgeu	r3,r6,80c1f4 <__divdf3+0x574>
  80c1ec:	01000074 	movhi	r4,1
  80c1f0:	4913883a 	add	r9,r9,r4
  80c1f4:	1808d43a 	srli	r4,r3,16
  80c1f8:	1806943a 	slli	r3,r3,16
  80c1fc:	10bfffcc 	andi	r2,r2,65535
  80c200:	2253883a 	add	r9,r4,r9
  80c204:	1887883a 	add	r3,r3,r2
  80c208:	ba403836 	bltu	r23,r9,80c2ec <__divdf3+0x66c>
  80c20c:	ba403626 	beq	r23,r9,80c2e8 <__divdf3+0x668>
  80c210:	42000054 	ori	r8,r8,1
  80c214:	a880ffc4 	addi	r2,r21,1023
  80c218:	00bf570e 	bge	zero,r2,80bf78 <__alt_mem_descriptor_memory+0xff78bf78>
  80c21c:	40c001cc 	andi	r3,r8,7
  80c220:	18000726 	beq	r3,zero,80c240 <__divdf3+0x5c0>
  80c224:	40c003cc 	andi	r3,r8,15
  80c228:	01000104 	movi	r4,4
  80c22c:	19000426 	beq	r3,r4,80c240 <__divdf3+0x5c0>
  80c230:	4107883a 	add	r3,r8,r4
  80c234:	1a11803a 	cmpltu	r8,r3,r8
  80c238:	8a23883a 	add	r17,r17,r8
  80c23c:	1811883a 	mov	r8,r3
  80c240:	88c0402c 	andhi	r3,r17,256
  80c244:	18000426 	beq	r3,zero,80c258 <__divdf3+0x5d8>
  80c248:	00ffc034 	movhi	r3,65280
  80c24c:	18ffffc4 	addi	r3,r3,-1
  80c250:	a8810004 	addi	r2,r21,1024
  80c254:	88e2703a 	and	r17,r17,r3
  80c258:	00c1ff84 	movi	r3,2046
  80c25c:	18bee316 	blt	r3,r2,80bdec <__alt_mem_descriptor_memory+0xff78bdec>
  80c260:	8824977a 	slli	r18,r17,29
  80c264:	4010d0fa 	srli	r8,r8,3
  80c268:	8822927a 	slli	r17,r17,9
  80c26c:	1081ffcc 	andi	r2,r2,2047
  80c270:	9224b03a 	or	r18,r18,r8
  80c274:	880ad33a 	srli	r5,r17,12
  80c278:	98c0004c 	andi	r3,r19,1
  80c27c:	003edf06 	br	80bdfc <__alt_mem_descriptor_memory+0xff78bdfc>
  80c280:	8080022c 	andhi	r2,r16,8
  80c284:	10001226 	beq	r2,zero,80c2d0 <__divdf3+0x650>
  80c288:	8880022c 	andhi	r2,r17,8
  80c28c:	1000101e 	bne	r2,zero,80c2d0 <__divdf3+0x650>
  80c290:	00800434 	movhi	r2,16
  80c294:	89400234 	orhi	r5,r17,8
  80c298:	10bfffc4 	addi	r2,r2,-1
  80c29c:	b007883a 	mov	r3,r22
  80c2a0:	288a703a 	and	r5,r5,r2
  80c2a4:	4025883a 	mov	r18,r8
  80c2a8:	003f3106 	br	80bf70 <__alt_mem_descriptor_memory+0xff78bf70>
  80c2ac:	008000c4 	movi	r2,3
  80c2b0:	3880a626 	beq	r7,r2,80c54c <__divdf3+0x8cc>
  80c2b4:	00800044 	movi	r2,1
  80c2b8:	3880521e 	bne	r7,r2,80c404 <__divdf3+0x784>
  80c2bc:	b807883a 	mov	r3,r23
  80c2c0:	0005883a 	mov	r2,zero
  80c2c4:	000b883a 	mov	r5,zero
  80c2c8:	0025883a 	mov	r18,zero
  80c2cc:	003ecb06 	br	80bdfc <__alt_mem_descriptor_memory+0xff78bdfc>
  80c2d0:	00800434 	movhi	r2,16
  80c2d4:	81400234 	orhi	r5,r16,8
  80c2d8:	10bfffc4 	addi	r2,r2,-1
  80c2dc:	a007883a 	mov	r3,r20
  80c2e0:	288a703a 	and	r5,r5,r2
  80c2e4:	003f2206 	br	80bf70 <__alt_mem_descriptor_memory+0xff78bf70>
  80c2e8:	183fca26 	beq	r3,zero,80c214 <__alt_mem_descriptor_memory+0xff78c214>
  80c2ec:	e5ef883a 	add	r23,fp,r23
  80c2f0:	40bfffc4 	addi	r2,r8,-1
  80c2f4:	bf00392e 	bgeu	r23,fp,80c3dc <__divdf3+0x75c>
  80c2f8:	1011883a 	mov	r8,r2
  80c2fc:	ba7fc41e 	bne	r23,r9,80c210 <__alt_mem_descriptor_memory+0xff78c210>
  80c300:	b0ffc31e 	bne	r22,r3,80c210 <__alt_mem_descriptor_memory+0xff78c210>
  80c304:	003fc306 	br	80c214 <__alt_mem_descriptor_memory+0xff78c214>
  80c308:	143ff604 	addi	r16,r2,-40
  80c30c:	9c20983a 	sll	r16,r19,r16
  80c310:	0025883a 	mov	r18,zero
  80c314:	003ee206 	br	80bea0 <__alt_mem_descriptor_memory+0xff78bea0>
  80c318:	d9800315 	stw	r6,12(sp)
  80c31c:	d9c00215 	stw	r7,8(sp)
  80c320:	080118c0 	call	80118c <__clzsi2>
  80c324:	10800804 	addi	r2,r2,32
  80c328:	d9c00217 	ldw	r7,8(sp)
  80c32c:	d9800317 	ldw	r6,12(sp)
  80c330:	003ed106 	br	80be78 <__alt_mem_descriptor_memory+0xff78be78>
  80c334:	147ff604 	addi	r17,r2,-40
  80c338:	3462983a 	sll	r17,r6,r17
  80c33c:	0011883a 	mov	r8,zero
  80c340:	003ef506 	br	80bf18 <__alt_mem_descriptor_memory+0xff78bf18>
  80c344:	3009883a 	mov	r4,r6
  80c348:	d9800315 	stw	r6,12(sp)
  80c34c:	da400115 	stw	r9,4(sp)
  80c350:	080118c0 	call	80118c <__clzsi2>
  80c354:	10800804 	addi	r2,r2,32
  80c358:	da400117 	ldw	r9,4(sp)
  80c35c:	d9800317 	ldw	r6,12(sp)
  80c360:	003ee306 	br	80bef0 <__alt_mem_descriptor_memory+0xff78bef0>
  80c364:	85a1883a 	add	r16,r16,r22
  80c368:	8585803a 	cmpltu	r2,r16,r22
  80c36c:	1705883a 	add	r2,r2,fp
  80c370:	14a5883a 	add	r18,r2,r18
  80c374:	88bfffc4 	addi	r2,r17,-1
  80c378:	e4800c2e 	bgeu	fp,r18,80c3ac <__divdf3+0x72c>
  80c37c:	90c03e36 	bltu	r18,r3,80c478 <__divdf3+0x7f8>
  80c380:	1c806926 	beq	r3,r18,80c528 <__divdf3+0x8a8>
  80c384:	90c7c83a 	sub	r3,r18,r3
  80c388:	1023883a 	mov	r17,r2
  80c38c:	003f5206 	br	80c0d8 <__alt_mem_descriptor_memory+0xff78c0d8>
  80c390:	923f0436 	bltu	r18,r8,80bfa4 <__alt_mem_descriptor_memory+0xff78bfa4>
  80c394:	800897fa 	slli	r4,r16,31
  80c398:	9004d07a 	srli	r2,r18,1
  80c39c:	8006d07a 	srli	r3,r16,1
  80c3a0:	902097fa 	slli	r16,r18,31
  80c3a4:	20a4b03a 	or	r18,r4,r2
  80c3a8:	003f0106 	br	80bfb0 <__alt_mem_descriptor_memory+0xff78bfb0>
  80c3ac:	e4bff51e 	bne	fp,r18,80c384 <__alt_mem_descriptor_memory+0xff78c384>
  80c3b0:	85bff22e 	bgeu	r16,r22,80c37c <__alt_mem_descriptor_memory+0xff78c37c>
  80c3b4:	e0c7c83a 	sub	r3,fp,r3
  80c3b8:	1023883a 	mov	r17,r2
  80c3bc:	003f4606 	br	80c0d8 <__alt_mem_descriptor_memory+0xff78c0d8>
  80c3c0:	100f883a 	mov	r7,r2
  80c3c4:	003f2b06 	br	80c074 <__alt_mem_descriptor_memory+0xff78c074>
  80c3c8:	180d883a 	mov	r6,r3
  80c3cc:	003f1306 	br	80c01c <__alt_mem_descriptor_memory+0xff78c01c>
  80c3d0:	813fe436 	bltu	r16,r4,80c364 <__alt_mem_descriptor_memory+0xff78c364>
  80c3d4:	0007883a 	mov	r3,zero
  80c3d8:	003f3f06 	br	80c0d8 <__alt_mem_descriptor_memory+0xff78c0d8>
  80c3dc:	ba402c36 	bltu	r23,r9,80c490 <__divdf3+0x810>
  80c3e0:	4dc05426 	beq	r9,r23,80c534 <__divdf3+0x8b4>
  80c3e4:	1011883a 	mov	r8,r2
  80c3e8:	003f8906 	br	80c210 <__alt_mem_descriptor_memory+0xff78c210>
  80c3ec:	023fffc4 	movi	r8,-1
  80c3f0:	003f8806 	br	80c214 <__alt_mem_descriptor_memory+0xff78c214>
  80c3f4:	1811883a 	mov	r8,r3
  80c3f8:	003f5406 	br	80c14c <__alt_mem_descriptor_memory+0xff78c14c>
  80c3fc:	1025883a 	mov	r18,r2
  80c400:	003f6d06 	br	80c1b8 <__alt_mem_descriptor_memory+0xff78c1b8>
  80c404:	b827883a 	mov	r19,r23
  80c408:	003f8206 	br	80c214 <__alt_mem_descriptor_memory+0xff78c214>
  80c40c:	010007c4 	movi	r4,31
  80c410:	20c02616 	blt	r4,r3,80c4ac <__divdf3+0x82c>
  80c414:	00800804 	movi	r2,32
  80c418:	10c5c83a 	sub	r2,r2,r3
  80c41c:	888a983a 	sll	r5,r17,r2
  80c420:	40c8d83a 	srl	r4,r8,r3
  80c424:	4084983a 	sll	r2,r8,r2
  80c428:	88e2d83a 	srl	r17,r17,r3
  80c42c:	2906b03a 	or	r3,r5,r4
  80c430:	1004c03a 	cmpne	r2,r2,zero
  80c434:	1886b03a 	or	r3,r3,r2
  80c438:	188001cc 	andi	r2,r3,7
  80c43c:	10000726 	beq	r2,zero,80c45c <__divdf3+0x7dc>
  80c440:	188003cc 	andi	r2,r3,15
  80c444:	01000104 	movi	r4,4
  80c448:	11000426 	beq	r2,r4,80c45c <__divdf3+0x7dc>
  80c44c:	1805883a 	mov	r2,r3
  80c450:	10c00104 	addi	r3,r2,4
  80c454:	1885803a 	cmpltu	r2,r3,r2
  80c458:	88a3883a 	add	r17,r17,r2
  80c45c:	8880202c 	andhi	r2,r17,128
  80c460:	10002726 	beq	r2,zero,80c500 <__divdf3+0x880>
  80c464:	98c0004c 	andi	r3,r19,1
  80c468:	00800044 	movi	r2,1
  80c46c:	000b883a 	mov	r5,zero
  80c470:	0025883a 	mov	r18,zero
  80c474:	003e6106 	br	80bdfc <__alt_mem_descriptor_memory+0xff78bdfc>
  80c478:	85a1883a 	add	r16,r16,r22
  80c47c:	8585803a 	cmpltu	r2,r16,r22
  80c480:	1705883a 	add	r2,r2,fp
  80c484:	14a5883a 	add	r18,r2,r18
  80c488:	8c7fff84 	addi	r17,r17,-2
  80c48c:	003f1106 	br	80c0d4 <__alt_mem_descriptor_memory+0xff78c0d4>
  80c490:	b589883a 	add	r4,r22,r22
  80c494:	25ad803a 	cmpltu	r22,r4,r22
  80c498:	b739883a 	add	fp,r22,fp
  80c49c:	40bfff84 	addi	r2,r8,-2
  80c4a0:	bf2f883a 	add	r23,r23,fp
  80c4a4:	202d883a 	mov	r22,r4
  80c4a8:	003f9306 	br	80c2f8 <__alt_mem_descriptor_memory+0xff78c2f8>
  80c4ac:	013ff844 	movi	r4,-31
  80c4b0:	2085c83a 	sub	r2,r4,r2
  80c4b4:	8888d83a 	srl	r4,r17,r2
  80c4b8:	00800804 	movi	r2,32
  80c4bc:	18802126 	beq	r3,r2,80c544 <__divdf3+0x8c4>
  80c4c0:	00801004 	movi	r2,64
  80c4c4:	10c5c83a 	sub	r2,r2,r3
  80c4c8:	8884983a 	sll	r2,r17,r2
  80c4cc:	1204b03a 	or	r2,r2,r8
  80c4d0:	1004c03a 	cmpne	r2,r2,zero
  80c4d4:	2084b03a 	or	r2,r4,r2
  80c4d8:	144001cc 	andi	r17,r2,7
  80c4dc:	88000d1e 	bne	r17,zero,80c514 <__divdf3+0x894>
  80c4e0:	000b883a 	mov	r5,zero
  80c4e4:	1024d0fa 	srli	r18,r2,3
  80c4e8:	98c0004c 	andi	r3,r19,1
  80c4ec:	0005883a 	mov	r2,zero
  80c4f0:	9464b03a 	or	r18,r18,r17
  80c4f4:	003e4106 	br	80bdfc <__alt_mem_descriptor_memory+0xff78bdfc>
  80c4f8:	1007883a 	mov	r3,r2
  80c4fc:	0023883a 	mov	r17,zero
  80c500:	880a927a 	slli	r5,r17,9
  80c504:	1805883a 	mov	r2,r3
  80c508:	8822977a 	slli	r17,r17,29
  80c50c:	280ad33a 	srli	r5,r5,12
  80c510:	003ff406 	br	80c4e4 <__alt_mem_descriptor_memory+0xff78c4e4>
  80c514:	10c003cc 	andi	r3,r2,15
  80c518:	01000104 	movi	r4,4
  80c51c:	193ff626 	beq	r3,r4,80c4f8 <__alt_mem_descriptor_memory+0xff78c4f8>
  80c520:	0023883a 	mov	r17,zero
  80c524:	003fca06 	br	80c450 <__alt_mem_descriptor_memory+0xff78c450>
  80c528:	813fd336 	bltu	r16,r4,80c478 <__alt_mem_descriptor_memory+0xff78c478>
  80c52c:	1023883a 	mov	r17,r2
  80c530:	003fa806 	br	80c3d4 <__alt_mem_descriptor_memory+0xff78c3d4>
  80c534:	b0ffd636 	bltu	r22,r3,80c490 <__alt_mem_descriptor_memory+0xff78c490>
  80c538:	1011883a 	mov	r8,r2
  80c53c:	b0ff341e 	bne	r22,r3,80c210 <__alt_mem_descriptor_memory+0xff78c210>
  80c540:	003f3406 	br	80c214 <__alt_mem_descriptor_memory+0xff78c214>
  80c544:	0005883a 	mov	r2,zero
  80c548:	003fe006 	br	80c4cc <__alt_mem_descriptor_memory+0xff78c4cc>
  80c54c:	00800434 	movhi	r2,16
  80c550:	89400234 	orhi	r5,r17,8
  80c554:	10bfffc4 	addi	r2,r2,-1
  80c558:	b807883a 	mov	r3,r23
  80c55c:	288a703a 	and	r5,r5,r2
  80c560:	4025883a 	mov	r18,r8
  80c564:	003e8206 	br	80bf70 <__alt_mem_descriptor_memory+0xff78bf70>

0080c568 <__eqdf2>:
  80c568:	2804d53a 	srli	r2,r5,20
  80c56c:	3806d53a 	srli	r3,r7,20
  80c570:	02000434 	movhi	r8,16
  80c574:	423fffc4 	addi	r8,r8,-1
  80c578:	1081ffcc 	andi	r2,r2,2047
  80c57c:	0281ffc4 	movi	r10,2047
  80c580:	2a12703a 	and	r9,r5,r8
  80c584:	18c1ffcc 	andi	r3,r3,2047
  80c588:	3a10703a 	and	r8,r7,r8
  80c58c:	280ad7fa 	srli	r5,r5,31
  80c590:	380ed7fa 	srli	r7,r7,31
  80c594:	12801026 	beq	r2,r10,80c5d8 <__eqdf2+0x70>
  80c598:	0281ffc4 	movi	r10,2047
  80c59c:	1a800a26 	beq	r3,r10,80c5c8 <__eqdf2+0x60>
  80c5a0:	10c00226 	beq	r2,r3,80c5ac <__eqdf2+0x44>
  80c5a4:	00800044 	movi	r2,1
  80c5a8:	f800283a 	ret
  80c5ac:	4a3ffd1e 	bne	r9,r8,80c5a4 <__alt_mem_descriptor_memory+0xff78c5a4>
  80c5b0:	21bffc1e 	bne	r4,r6,80c5a4 <__alt_mem_descriptor_memory+0xff78c5a4>
  80c5b4:	29c00c26 	beq	r5,r7,80c5e8 <__eqdf2+0x80>
  80c5b8:	103ffa1e 	bne	r2,zero,80c5a4 <__alt_mem_descriptor_memory+0xff78c5a4>
  80c5bc:	2244b03a 	or	r2,r4,r9
  80c5c0:	1004c03a 	cmpne	r2,r2,zero
  80c5c4:	f800283a 	ret
  80c5c8:	3214b03a 	or	r10,r6,r8
  80c5cc:	503ff426 	beq	r10,zero,80c5a0 <__alt_mem_descriptor_memory+0xff78c5a0>
  80c5d0:	00800044 	movi	r2,1
  80c5d4:	f800283a 	ret
  80c5d8:	2254b03a 	or	r10,r4,r9
  80c5dc:	503fee26 	beq	r10,zero,80c598 <__alt_mem_descriptor_memory+0xff78c598>
  80c5e0:	00800044 	movi	r2,1
  80c5e4:	f800283a 	ret
  80c5e8:	0005883a 	mov	r2,zero
  80c5ec:	f800283a 	ret

0080c5f0 <__gedf2>:
  80c5f0:	2804d53a 	srli	r2,r5,20
  80c5f4:	3806d53a 	srli	r3,r7,20
  80c5f8:	02000434 	movhi	r8,16
  80c5fc:	423fffc4 	addi	r8,r8,-1
  80c600:	1081ffcc 	andi	r2,r2,2047
  80c604:	0241ffc4 	movi	r9,2047
  80c608:	2a14703a 	and	r10,r5,r8
  80c60c:	18c1ffcc 	andi	r3,r3,2047
  80c610:	3a10703a 	and	r8,r7,r8
  80c614:	280ad7fa 	srli	r5,r5,31
  80c618:	380ed7fa 	srli	r7,r7,31
  80c61c:	12401d26 	beq	r2,r9,80c694 <__gedf2+0xa4>
  80c620:	0241ffc4 	movi	r9,2047
  80c624:	1a401226 	beq	r3,r9,80c670 <__gedf2+0x80>
  80c628:	1000081e 	bne	r2,zero,80c64c <__gedf2+0x5c>
  80c62c:	2296b03a 	or	r11,r4,r10
  80c630:	5813003a 	cmpeq	r9,r11,zero
  80c634:	1800091e 	bne	r3,zero,80c65c <__gedf2+0x6c>
  80c638:	3218b03a 	or	r12,r6,r8
  80c63c:	6000071e 	bne	r12,zero,80c65c <__gedf2+0x6c>
  80c640:	0005883a 	mov	r2,zero
  80c644:	5800101e 	bne	r11,zero,80c688 <__gedf2+0x98>
  80c648:	f800283a 	ret
  80c64c:	18000c1e 	bne	r3,zero,80c680 <__gedf2+0x90>
  80c650:	3212b03a 	or	r9,r6,r8
  80c654:	48000c26 	beq	r9,zero,80c688 <__gedf2+0x98>
  80c658:	0013883a 	mov	r9,zero
  80c65c:	39c03fcc 	andi	r7,r7,255
  80c660:	48000826 	beq	r9,zero,80c684 <__gedf2+0x94>
  80c664:	38000926 	beq	r7,zero,80c68c <__gedf2+0x9c>
  80c668:	00800044 	movi	r2,1
  80c66c:	f800283a 	ret
  80c670:	3212b03a 	or	r9,r6,r8
  80c674:	483fec26 	beq	r9,zero,80c628 <__alt_mem_descriptor_memory+0xff78c628>
  80c678:	00bfff84 	movi	r2,-2
  80c67c:	f800283a 	ret
  80c680:	39c03fcc 	andi	r7,r7,255
  80c684:	29c00626 	beq	r5,r7,80c6a0 <__gedf2+0xb0>
  80c688:	283ff726 	beq	r5,zero,80c668 <__alt_mem_descriptor_memory+0xff78c668>
  80c68c:	00bfffc4 	movi	r2,-1
  80c690:	f800283a 	ret
  80c694:	2292b03a 	or	r9,r4,r10
  80c698:	483fe126 	beq	r9,zero,80c620 <__alt_mem_descriptor_memory+0xff78c620>
  80c69c:	003ff606 	br	80c678 <__alt_mem_descriptor_memory+0xff78c678>
  80c6a0:	18bff916 	blt	r3,r2,80c688 <__alt_mem_descriptor_memory+0xff78c688>
  80c6a4:	10c00316 	blt	r2,r3,80c6b4 <__gedf2+0xc4>
  80c6a8:	42bff736 	bltu	r8,r10,80c688 <__alt_mem_descriptor_memory+0xff78c688>
  80c6ac:	52000326 	beq	r10,r8,80c6bc <__gedf2+0xcc>
  80c6b0:	5200042e 	bgeu	r10,r8,80c6c4 <__gedf2+0xd4>
  80c6b4:	283fec1e 	bne	r5,zero,80c668 <__alt_mem_descriptor_memory+0xff78c668>
  80c6b8:	003ff406 	br	80c68c <__alt_mem_descriptor_memory+0xff78c68c>
  80c6bc:	313ff236 	bltu	r6,r4,80c688 <__alt_mem_descriptor_memory+0xff78c688>
  80c6c0:	21bffc36 	bltu	r4,r6,80c6b4 <__alt_mem_descriptor_memory+0xff78c6b4>
  80c6c4:	0005883a 	mov	r2,zero
  80c6c8:	f800283a 	ret

0080c6cc <__ledf2>:
  80c6cc:	2804d53a 	srli	r2,r5,20
  80c6d0:	3810d53a 	srli	r8,r7,20
  80c6d4:	00c00434 	movhi	r3,16
  80c6d8:	18ffffc4 	addi	r3,r3,-1
  80c6dc:	1081ffcc 	andi	r2,r2,2047
  80c6e0:	0241ffc4 	movi	r9,2047
  80c6e4:	28d4703a 	and	r10,r5,r3
  80c6e8:	4201ffcc 	andi	r8,r8,2047
  80c6ec:	38c6703a 	and	r3,r7,r3
  80c6f0:	280ad7fa 	srli	r5,r5,31
  80c6f4:	380ed7fa 	srli	r7,r7,31
  80c6f8:	12401f26 	beq	r2,r9,80c778 <__ledf2+0xac>
  80c6fc:	0241ffc4 	movi	r9,2047
  80c700:	42401426 	beq	r8,r9,80c754 <__ledf2+0x88>
  80c704:	1000091e 	bne	r2,zero,80c72c <__ledf2+0x60>
  80c708:	2296b03a 	or	r11,r4,r10
  80c70c:	5813003a 	cmpeq	r9,r11,zero
  80c710:	29403fcc 	andi	r5,r5,255
  80c714:	40000a1e 	bne	r8,zero,80c740 <__ledf2+0x74>
  80c718:	30d8b03a 	or	r12,r6,r3
  80c71c:	6000081e 	bne	r12,zero,80c740 <__ledf2+0x74>
  80c720:	0005883a 	mov	r2,zero
  80c724:	5800111e 	bne	r11,zero,80c76c <__ledf2+0xa0>
  80c728:	f800283a 	ret
  80c72c:	29403fcc 	andi	r5,r5,255
  80c730:	40000c1e 	bne	r8,zero,80c764 <__ledf2+0x98>
  80c734:	30d2b03a 	or	r9,r6,r3
  80c738:	48000c26 	beq	r9,zero,80c76c <__ledf2+0xa0>
  80c73c:	0013883a 	mov	r9,zero
  80c740:	39c03fcc 	andi	r7,r7,255
  80c744:	48000826 	beq	r9,zero,80c768 <__ledf2+0x9c>
  80c748:	38001126 	beq	r7,zero,80c790 <__ledf2+0xc4>
  80c74c:	00800044 	movi	r2,1
  80c750:	f800283a 	ret
  80c754:	30d2b03a 	or	r9,r6,r3
  80c758:	483fea26 	beq	r9,zero,80c704 <__alt_mem_descriptor_memory+0xff78c704>
  80c75c:	00800084 	movi	r2,2
  80c760:	f800283a 	ret
  80c764:	39c03fcc 	andi	r7,r7,255
  80c768:	39400726 	beq	r7,r5,80c788 <__ledf2+0xbc>
  80c76c:	2800081e 	bne	r5,zero,80c790 <__ledf2+0xc4>
  80c770:	00800044 	movi	r2,1
  80c774:	f800283a 	ret
  80c778:	2292b03a 	or	r9,r4,r10
  80c77c:	483fdf26 	beq	r9,zero,80c6fc <__alt_mem_descriptor_memory+0xff78c6fc>
  80c780:	00800084 	movi	r2,2
  80c784:	f800283a 	ret
  80c788:	4080030e 	bge	r8,r2,80c798 <__ledf2+0xcc>
  80c78c:	383fef26 	beq	r7,zero,80c74c <__alt_mem_descriptor_memory+0xff78c74c>
  80c790:	00bfffc4 	movi	r2,-1
  80c794:	f800283a 	ret
  80c798:	123feb16 	blt	r2,r8,80c748 <__alt_mem_descriptor_memory+0xff78c748>
  80c79c:	1abff336 	bltu	r3,r10,80c76c <__alt_mem_descriptor_memory+0xff78c76c>
  80c7a0:	50c00326 	beq	r10,r3,80c7b0 <__ledf2+0xe4>
  80c7a4:	50c0042e 	bgeu	r10,r3,80c7b8 <__ledf2+0xec>
  80c7a8:	283fe81e 	bne	r5,zero,80c74c <__alt_mem_descriptor_memory+0xff78c74c>
  80c7ac:	003ff806 	br	80c790 <__alt_mem_descriptor_memory+0xff78c790>
  80c7b0:	313fee36 	bltu	r6,r4,80c76c <__alt_mem_descriptor_memory+0xff78c76c>
  80c7b4:	21bffc36 	bltu	r4,r6,80c7a8 <__alt_mem_descriptor_memory+0xff78c7a8>
  80c7b8:	0005883a 	mov	r2,zero
  80c7bc:	f800283a 	ret

0080c7c0 <__muldf3>:
  80c7c0:	defff304 	addi	sp,sp,-52
  80c7c4:	2804d53a 	srli	r2,r5,20
  80c7c8:	dd800915 	stw	r22,36(sp)
  80c7cc:	282cd7fa 	srli	r22,r5,31
  80c7d0:	dc000315 	stw	r16,12(sp)
  80c7d4:	04000434 	movhi	r16,16
  80c7d8:	dd400815 	stw	r21,32(sp)
  80c7dc:	dc800515 	stw	r18,20(sp)
  80c7e0:	843fffc4 	addi	r16,r16,-1
  80c7e4:	dfc00c15 	stw	ra,48(sp)
  80c7e8:	df000b15 	stw	fp,44(sp)
  80c7ec:	ddc00a15 	stw	r23,40(sp)
  80c7f0:	dd000715 	stw	r20,28(sp)
  80c7f4:	dcc00615 	stw	r19,24(sp)
  80c7f8:	dc400415 	stw	r17,16(sp)
  80c7fc:	1481ffcc 	andi	r18,r2,2047
  80c800:	2c20703a 	and	r16,r5,r16
  80c804:	b02b883a 	mov	r21,r22
  80c808:	b2403fcc 	andi	r9,r22,255
  80c80c:	90006026 	beq	r18,zero,80c990 <__muldf3+0x1d0>
  80c810:	0081ffc4 	movi	r2,2047
  80c814:	2029883a 	mov	r20,r4
  80c818:	90803626 	beq	r18,r2,80c8f4 <__muldf3+0x134>
  80c81c:	80800434 	orhi	r2,r16,16
  80c820:	100490fa 	slli	r2,r2,3
  80c824:	2020d77a 	srli	r16,r4,29
  80c828:	202890fa 	slli	r20,r4,3
  80c82c:	94bf0044 	addi	r18,r18,-1023
  80c830:	80a0b03a 	or	r16,r16,r2
  80c834:	0027883a 	mov	r19,zero
  80c838:	0039883a 	mov	fp,zero
  80c83c:	3804d53a 	srli	r2,r7,20
  80c840:	382ed7fa 	srli	r23,r7,31
  80c844:	04400434 	movhi	r17,16
  80c848:	8c7fffc4 	addi	r17,r17,-1
  80c84c:	1081ffcc 	andi	r2,r2,2047
  80c850:	3011883a 	mov	r8,r6
  80c854:	3c62703a 	and	r17,r7,r17
  80c858:	ba803fcc 	andi	r10,r23,255
  80c85c:	10006d26 	beq	r2,zero,80ca14 <__muldf3+0x254>
  80c860:	00c1ffc4 	movi	r3,2047
  80c864:	10c06526 	beq	r2,r3,80c9fc <__muldf3+0x23c>
  80c868:	88c00434 	orhi	r3,r17,16
  80c86c:	180690fa 	slli	r3,r3,3
  80c870:	3022d77a 	srli	r17,r6,29
  80c874:	301090fa 	slli	r8,r6,3
  80c878:	10bf0044 	addi	r2,r2,-1023
  80c87c:	88e2b03a 	or	r17,r17,r3
  80c880:	000b883a 	mov	r5,zero
  80c884:	9085883a 	add	r2,r18,r2
  80c888:	2cc8b03a 	or	r4,r5,r19
  80c88c:	00c003c4 	movi	r3,15
  80c890:	bdacf03a 	xor	r22,r23,r22
  80c894:	12c00044 	addi	r11,r2,1
  80c898:	19009936 	bltu	r3,r4,80cb00 <__muldf3+0x340>
  80c89c:	200890ba 	slli	r4,r4,2
  80c8a0:	00c02074 	movhi	r3,129
  80c8a4:	18f22d04 	addi	r3,r3,-14156
  80c8a8:	20c9883a 	add	r4,r4,r3
  80c8ac:	20c00017 	ldw	r3,0(r4)
  80c8b0:	1800683a 	jmp	r3
  80c8b4:	0080cb00 	call	80cb0 <__alt_mem_new_sdram_controller_0-0x77f350>
  80c8b8:	0080c914 	movui	r2,804
  80c8bc:	0080c914 	movui	r2,804
  80c8c0:	0080c910 	cmplti	r2,zero,804
  80c8c4:	0080cadc 	xori	r2,zero,811
  80c8c8:	0080cadc 	xori	r2,zero,811
  80c8cc:	0080cac4 	movi	r2,811
  80c8d0:	0080c910 	cmplti	r2,zero,804
  80c8d4:	0080cadc 	xori	r2,zero,811
  80c8d8:	0080cac4 	movi	r2,811
  80c8dc:	0080cadc 	xori	r2,zero,811
  80c8e0:	0080c910 	cmplti	r2,zero,804
  80c8e4:	0080caec 	andhi	r2,zero,811
  80c8e8:	0080caec 	andhi	r2,zero,811
  80c8ec:	0080caec 	andhi	r2,zero,811
  80c8f0:	0080cd08 	cmpgei	r2,zero,820
  80c8f4:	2404b03a 	or	r2,r4,r16
  80c8f8:	10006f1e 	bne	r2,zero,80cab8 <__muldf3+0x2f8>
  80c8fc:	04c00204 	movi	r19,8
  80c900:	0021883a 	mov	r16,zero
  80c904:	0029883a 	mov	r20,zero
  80c908:	07000084 	movi	fp,2
  80c90c:	003fcb06 	br	80c83c <__alt_mem_descriptor_memory+0xff78c83c>
  80c910:	502d883a 	mov	r22,r10
  80c914:	00800084 	movi	r2,2
  80c918:	28805726 	beq	r5,r2,80ca78 <__muldf3+0x2b8>
  80c91c:	008000c4 	movi	r2,3
  80c920:	28816626 	beq	r5,r2,80cebc <__muldf3+0x6fc>
  80c924:	00800044 	movi	r2,1
  80c928:	2881411e 	bne	r5,r2,80ce30 <__muldf3+0x670>
  80c92c:	b02b883a 	mov	r21,r22
  80c930:	0005883a 	mov	r2,zero
  80c934:	000b883a 	mov	r5,zero
  80c938:	0029883a 	mov	r20,zero
  80c93c:	1004953a 	slli	r2,r2,20
  80c940:	a8c03fcc 	andi	r3,r21,255
  80c944:	04400434 	movhi	r17,16
  80c948:	8c7fffc4 	addi	r17,r17,-1
  80c94c:	180697fa 	slli	r3,r3,31
  80c950:	2c4a703a 	and	r5,r5,r17
  80c954:	288ab03a 	or	r5,r5,r2
  80c958:	28c6b03a 	or	r3,r5,r3
  80c95c:	a005883a 	mov	r2,r20
  80c960:	dfc00c17 	ldw	ra,48(sp)
  80c964:	df000b17 	ldw	fp,44(sp)
  80c968:	ddc00a17 	ldw	r23,40(sp)
  80c96c:	dd800917 	ldw	r22,36(sp)
  80c970:	dd400817 	ldw	r21,32(sp)
  80c974:	dd000717 	ldw	r20,28(sp)
  80c978:	dcc00617 	ldw	r19,24(sp)
  80c97c:	dc800517 	ldw	r18,20(sp)
  80c980:	dc400417 	ldw	r17,16(sp)
  80c984:	dc000317 	ldw	r16,12(sp)
  80c988:	dec00d04 	addi	sp,sp,52
  80c98c:	f800283a 	ret
  80c990:	2404b03a 	or	r2,r4,r16
  80c994:	2027883a 	mov	r19,r4
  80c998:	10004226 	beq	r2,zero,80caa4 <__muldf3+0x2e4>
  80c99c:	8000fc26 	beq	r16,zero,80cd90 <__muldf3+0x5d0>
  80c9a0:	8009883a 	mov	r4,r16
  80c9a4:	d9800215 	stw	r6,8(sp)
  80c9a8:	d9c00015 	stw	r7,0(sp)
  80c9ac:	da400115 	stw	r9,4(sp)
  80c9b0:	080118c0 	call	80118c <__clzsi2>
  80c9b4:	d9800217 	ldw	r6,8(sp)
  80c9b8:	d9c00017 	ldw	r7,0(sp)
  80c9bc:	da400117 	ldw	r9,4(sp)
  80c9c0:	113ffd44 	addi	r4,r2,-11
  80c9c4:	00c00704 	movi	r3,28
  80c9c8:	1900ed16 	blt	r3,r4,80cd80 <__muldf3+0x5c0>
  80c9cc:	00c00744 	movi	r3,29
  80c9d0:	147ffe04 	addi	r17,r2,-8
  80c9d4:	1907c83a 	sub	r3,r3,r4
  80c9d8:	8460983a 	sll	r16,r16,r17
  80c9dc:	98c6d83a 	srl	r3,r19,r3
  80c9e0:	9c68983a 	sll	r20,r19,r17
  80c9e4:	1c20b03a 	or	r16,r3,r16
  80c9e8:	1080fcc4 	addi	r2,r2,1011
  80c9ec:	00a5c83a 	sub	r18,zero,r2
  80c9f0:	0027883a 	mov	r19,zero
  80c9f4:	0039883a 	mov	fp,zero
  80c9f8:	003f9006 	br	80c83c <__alt_mem_descriptor_memory+0xff78c83c>
  80c9fc:	3446b03a 	or	r3,r6,r17
  80ca00:	1800261e 	bne	r3,zero,80ca9c <__muldf3+0x2dc>
  80ca04:	0023883a 	mov	r17,zero
  80ca08:	0011883a 	mov	r8,zero
  80ca0c:	01400084 	movi	r5,2
  80ca10:	003f9c06 	br	80c884 <__alt_mem_descriptor_memory+0xff78c884>
  80ca14:	3446b03a 	or	r3,r6,r17
  80ca18:	18001c26 	beq	r3,zero,80ca8c <__muldf3+0x2cc>
  80ca1c:	8800ce26 	beq	r17,zero,80cd58 <__muldf3+0x598>
  80ca20:	8809883a 	mov	r4,r17
  80ca24:	d9800215 	stw	r6,8(sp)
  80ca28:	da400115 	stw	r9,4(sp)
  80ca2c:	da800015 	stw	r10,0(sp)
  80ca30:	080118c0 	call	80118c <__clzsi2>
  80ca34:	d9800217 	ldw	r6,8(sp)
  80ca38:	da400117 	ldw	r9,4(sp)
  80ca3c:	da800017 	ldw	r10,0(sp)
  80ca40:	113ffd44 	addi	r4,r2,-11
  80ca44:	00c00704 	movi	r3,28
  80ca48:	1900bf16 	blt	r3,r4,80cd48 <__muldf3+0x588>
  80ca4c:	00c00744 	movi	r3,29
  80ca50:	123ffe04 	addi	r8,r2,-8
  80ca54:	1907c83a 	sub	r3,r3,r4
  80ca58:	8a22983a 	sll	r17,r17,r8
  80ca5c:	30c6d83a 	srl	r3,r6,r3
  80ca60:	3210983a 	sll	r8,r6,r8
  80ca64:	1c62b03a 	or	r17,r3,r17
  80ca68:	1080fcc4 	addi	r2,r2,1011
  80ca6c:	0085c83a 	sub	r2,zero,r2
  80ca70:	000b883a 	mov	r5,zero
  80ca74:	003f8306 	br	80c884 <__alt_mem_descriptor_memory+0xff78c884>
  80ca78:	b02b883a 	mov	r21,r22
  80ca7c:	0081ffc4 	movi	r2,2047
  80ca80:	000b883a 	mov	r5,zero
  80ca84:	0029883a 	mov	r20,zero
  80ca88:	003fac06 	br	80c93c <__alt_mem_descriptor_memory+0xff78c93c>
  80ca8c:	0023883a 	mov	r17,zero
  80ca90:	0011883a 	mov	r8,zero
  80ca94:	01400044 	movi	r5,1
  80ca98:	003f7a06 	br	80c884 <__alt_mem_descriptor_memory+0xff78c884>
  80ca9c:	014000c4 	movi	r5,3
  80caa0:	003f7806 	br	80c884 <__alt_mem_descriptor_memory+0xff78c884>
  80caa4:	04c00104 	movi	r19,4
  80caa8:	0021883a 	mov	r16,zero
  80caac:	0029883a 	mov	r20,zero
  80cab0:	07000044 	movi	fp,1
  80cab4:	003f6106 	br	80c83c <__alt_mem_descriptor_memory+0xff78c83c>
  80cab8:	04c00304 	movi	r19,12
  80cabc:	070000c4 	movi	fp,3
  80cac0:	003f5e06 	br	80c83c <__alt_mem_descriptor_memory+0xff78c83c>
  80cac4:	01400434 	movhi	r5,16
  80cac8:	002b883a 	mov	r21,zero
  80cacc:	297fffc4 	addi	r5,r5,-1
  80cad0:	053fffc4 	movi	r20,-1
  80cad4:	0081ffc4 	movi	r2,2047
  80cad8:	003f9806 	br	80c93c <__alt_mem_descriptor_memory+0xff78c93c>
  80cadc:	8023883a 	mov	r17,r16
  80cae0:	a011883a 	mov	r8,r20
  80cae4:	e00b883a 	mov	r5,fp
  80cae8:	003f8a06 	br	80c914 <__alt_mem_descriptor_memory+0xff78c914>
  80caec:	8023883a 	mov	r17,r16
  80caf0:	a011883a 	mov	r8,r20
  80caf4:	482d883a 	mov	r22,r9
  80caf8:	e00b883a 	mov	r5,fp
  80cafc:	003f8506 	br	80c914 <__alt_mem_descriptor_memory+0xff78c914>
  80cb00:	a00ad43a 	srli	r5,r20,16
  80cb04:	401ad43a 	srli	r13,r8,16
  80cb08:	a53fffcc 	andi	r20,r20,65535
  80cb0c:	423fffcc 	andi	r8,r8,65535
  80cb10:	4519383a 	mul	r12,r8,r20
  80cb14:	4147383a 	mul	r3,r8,r5
  80cb18:	6d09383a 	mul	r4,r13,r20
  80cb1c:	600cd43a 	srli	r6,r12,16
  80cb20:	2b5d383a 	mul	r14,r5,r13
  80cb24:	20c9883a 	add	r4,r4,r3
  80cb28:	310d883a 	add	r6,r6,r4
  80cb2c:	30c0022e 	bgeu	r6,r3,80cb38 <__muldf3+0x378>
  80cb30:	00c00074 	movhi	r3,1
  80cb34:	70dd883a 	add	r14,r14,r3
  80cb38:	8826d43a 	srli	r19,r17,16
  80cb3c:	8bffffcc 	andi	r15,r17,65535
  80cb40:	7d23383a 	mul	r17,r15,r20
  80cb44:	7949383a 	mul	r4,r15,r5
  80cb48:	9d29383a 	mul	r20,r19,r20
  80cb4c:	8814d43a 	srli	r10,r17,16
  80cb50:	3012943a 	slli	r9,r6,16
  80cb54:	a129883a 	add	r20,r20,r4
  80cb58:	633fffcc 	andi	r12,r12,65535
  80cb5c:	5515883a 	add	r10,r10,r20
  80cb60:	3006d43a 	srli	r3,r6,16
  80cb64:	4b13883a 	add	r9,r9,r12
  80cb68:	2ccb383a 	mul	r5,r5,r19
  80cb6c:	5100022e 	bgeu	r10,r4,80cb78 <__muldf3+0x3b8>
  80cb70:	01000074 	movhi	r4,1
  80cb74:	290b883a 	add	r5,r5,r4
  80cb78:	802ad43a 	srli	r21,r16,16
  80cb7c:	843fffcc 	andi	r16,r16,65535
  80cb80:	440d383a 	mul	r6,r8,r16
  80cb84:	4565383a 	mul	r18,r8,r21
  80cb88:	8349383a 	mul	r4,r16,r13
  80cb8c:	500e943a 	slli	r7,r10,16
  80cb90:	3010d43a 	srli	r8,r6,16
  80cb94:	5028d43a 	srli	r20,r10,16
  80cb98:	2489883a 	add	r4,r4,r18
  80cb9c:	8abfffcc 	andi	r10,r17,65535
  80cba0:	3a95883a 	add	r10,r7,r10
  80cba4:	4119883a 	add	r12,r8,r4
  80cba8:	a169883a 	add	r20,r20,r5
  80cbac:	1a87883a 	add	r3,r3,r10
  80cbb0:	6d5b383a 	mul	r13,r13,r21
  80cbb4:	6480022e 	bgeu	r12,r18,80cbc0 <__muldf3+0x400>
  80cbb8:	01000074 	movhi	r4,1
  80cbbc:	691b883a 	add	r13,r13,r4
  80cbc0:	7c25383a 	mul	r18,r15,r16
  80cbc4:	7d4b383a 	mul	r5,r15,r21
  80cbc8:	84cf383a 	mul	r7,r16,r19
  80cbcc:	901ed43a 	srli	r15,r18,16
  80cbd0:	6008d43a 	srli	r4,r12,16
  80cbd4:	6010943a 	slli	r8,r12,16
  80cbd8:	394f883a 	add	r7,r7,r5
  80cbdc:	333fffcc 	andi	r12,r6,65535
  80cbe0:	79df883a 	add	r15,r15,r7
  80cbe4:	235b883a 	add	r13,r4,r13
  80cbe8:	9d63383a 	mul	r17,r19,r21
  80cbec:	4309883a 	add	r4,r8,r12
  80cbf0:	7940022e 	bgeu	r15,r5,80cbfc <__muldf3+0x43c>
  80cbf4:	01400074 	movhi	r5,1
  80cbf8:	8963883a 	add	r17,r17,r5
  80cbfc:	780a943a 	slli	r5,r15,16
  80cc00:	91bfffcc 	andi	r6,r18,65535
  80cc04:	70c7883a 	add	r3,r14,r3
  80cc08:	298d883a 	add	r6,r5,r6
  80cc0c:	1a8f803a 	cmpltu	r7,r3,r10
  80cc10:	350b883a 	add	r5,r6,r20
  80cc14:	20c7883a 	add	r3,r4,r3
  80cc18:	3955883a 	add	r10,r7,r5
  80cc1c:	1909803a 	cmpltu	r4,r3,r4
  80cc20:	6a91883a 	add	r8,r13,r10
  80cc24:	780cd43a 	srli	r6,r15,16
  80cc28:	2219883a 	add	r12,r4,r8
  80cc2c:	2d0b803a 	cmpltu	r5,r5,r20
  80cc30:	51cf803a 	cmpltu	r7,r10,r7
  80cc34:	29ceb03a 	or	r7,r5,r7
  80cc38:	4351803a 	cmpltu	r8,r8,r13
  80cc3c:	610b803a 	cmpltu	r5,r12,r4
  80cc40:	4148b03a 	or	r4,r8,r5
  80cc44:	398f883a 	add	r7,r7,r6
  80cc48:	3909883a 	add	r4,r7,r4
  80cc4c:	1810927a 	slli	r8,r3,9
  80cc50:	2449883a 	add	r4,r4,r17
  80cc54:	2008927a 	slli	r4,r4,9
  80cc58:	6022d5fa 	srli	r17,r12,23
  80cc5c:	1806d5fa 	srli	r3,r3,23
  80cc60:	4252b03a 	or	r9,r8,r9
  80cc64:	600a927a 	slli	r5,r12,9
  80cc68:	4810c03a 	cmpne	r8,r9,zero
  80cc6c:	2462b03a 	or	r17,r4,r17
  80cc70:	40c6b03a 	or	r3,r8,r3
  80cc74:	8900402c 	andhi	r4,r17,256
  80cc78:	1950b03a 	or	r8,r3,r5
  80cc7c:	20000726 	beq	r4,zero,80cc9c <__muldf3+0x4dc>
  80cc80:	4006d07a 	srli	r3,r8,1
  80cc84:	880497fa 	slli	r2,r17,31
  80cc88:	4200004c 	andi	r8,r8,1
  80cc8c:	8822d07a 	srli	r17,r17,1
  80cc90:	1a10b03a 	or	r8,r3,r8
  80cc94:	1210b03a 	or	r8,r2,r8
  80cc98:	5805883a 	mov	r2,r11
  80cc9c:	1140ffc4 	addi	r5,r2,1023
  80cca0:	0140440e 	bge	zero,r5,80cdb4 <__muldf3+0x5f4>
  80cca4:	40c001cc 	andi	r3,r8,7
  80cca8:	18000726 	beq	r3,zero,80ccc8 <__muldf3+0x508>
  80ccac:	40c003cc 	andi	r3,r8,15
  80ccb0:	01000104 	movi	r4,4
  80ccb4:	19000426 	beq	r3,r4,80ccc8 <__muldf3+0x508>
  80ccb8:	4107883a 	add	r3,r8,r4
  80ccbc:	1a11803a 	cmpltu	r8,r3,r8
  80ccc0:	8a23883a 	add	r17,r17,r8
  80ccc4:	1811883a 	mov	r8,r3
  80ccc8:	88c0402c 	andhi	r3,r17,256
  80cccc:	18000426 	beq	r3,zero,80cce0 <__muldf3+0x520>
  80ccd0:	11410004 	addi	r5,r2,1024
  80ccd4:	00bfc034 	movhi	r2,65280
  80ccd8:	10bfffc4 	addi	r2,r2,-1
  80ccdc:	88a2703a 	and	r17,r17,r2
  80cce0:	0081ff84 	movi	r2,2046
  80cce4:	117f6416 	blt	r2,r5,80ca78 <__alt_mem_descriptor_memory+0xff78ca78>
  80cce8:	8828977a 	slli	r20,r17,29
  80ccec:	4010d0fa 	srli	r8,r8,3
  80ccf0:	8822927a 	slli	r17,r17,9
  80ccf4:	2881ffcc 	andi	r2,r5,2047
  80ccf8:	a228b03a 	or	r20,r20,r8
  80ccfc:	880ad33a 	srli	r5,r17,12
  80cd00:	b02b883a 	mov	r21,r22
  80cd04:	003f0d06 	br	80c93c <__alt_mem_descriptor_memory+0xff78c93c>
  80cd08:	8080022c 	andhi	r2,r16,8
  80cd0c:	10000926 	beq	r2,zero,80cd34 <__muldf3+0x574>
  80cd10:	8880022c 	andhi	r2,r17,8
  80cd14:	1000071e 	bne	r2,zero,80cd34 <__muldf3+0x574>
  80cd18:	00800434 	movhi	r2,16
  80cd1c:	89400234 	orhi	r5,r17,8
  80cd20:	10bfffc4 	addi	r2,r2,-1
  80cd24:	b82b883a 	mov	r21,r23
  80cd28:	288a703a 	and	r5,r5,r2
  80cd2c:	4029883a 	mov	r20,r8
  80cd30:	003f6806 	br	80cad4 <__alt_mem_descriptor_memory+0xff78cad4>
  80cd34:	00800434 	movhi	r2,16
  80cd38:	81400234 	orhi	r5,r16,8
  80cd3c:	10bfffc4 	addi	r2,r2,-1
  80cd40:	288a703a 	and	r5,r5,r2
  80cd44:	003f6306 	br	80cad4 <__alt_mem_descriptor_memory+0xff78cad4>
  80cd48:	147ff604 	addi	r17,r2,-40
  80cd4c:	3462983a 	sll	r17,r6,r17
  80cd50:	0011883a 	mov	r8,zero
  80cd54:	003f4406 	br	80ca68 <__alt_mem_descriptor_memory+0xff78ca68>
  80cd58:	3009883a 	mov	r4,r6
  80cd5c:	d9800215 	stw	r6,8(sp)
  80cd60:	da400115 	stw	r9,4(sp)
  80cd64:	da800015 	stw	r10,0(sp)
  80cd68:	080118c0 	call	80118c <__clzsi2>
  80cd6c:	10800804 	addi	r2,r2,32
  80cd70:	da800017 	ldw	r10,0(sp)
  80cd74:	da400117 	ldw	r9,4(sp)
  80cd78:	d9800217 	ldw	r6,8(sp)
  80cd7c:	003f3006 	br	80ca40 <__alt_mem_descriptor_memory+0xff78ca40>
  80cd80:	143ff604 	addi	r16,r2,-40
  80cd84:	9c20983a 	sll	r16,r19,r16
  80cd88:	0029883a 	mov	r20,zero
  80cd8c:	003f1606 	br	80c9e8 <__alt_mem_descriptor_memory+0xff78c9e8>
  80cd90:	d9800215 	stw	r6,8(sp)
  80cd94:	d9c00015 	stw	r7,0(sp)
  80cd98:	da400115 	stw	r9,4(sp)
  80cd9c:	080118c0 	call	80118c <__clzsi2>
  80cda0:	10800804 	addi	r2,r2,32
  80cda4:	da400117 	ldw	r9,4(sp)
  80cda8:	d9c00017 	ldw	r7,0(sp)
  80cdac:	d9800217 	ldw	r6,8(sp)
  80cdb0:	003f0306 	br	80c9c0 <__alt_mem_descriptor_memory+0xff78c9c0>
  80cdb4:	00c00044 	movi	r3,1
  80cdb8:	1947c83a 	sub	r3,r3,r5
  80cdbc:	00800e04 	movi	r2,56
  80cdc0:	10feda16 	blt	r2,r3,80c92c <__alt_mem_descriptor_memory+0xff78c92c>
  80cdc4:	008007c4 	movi	r2,31
  80cdc8:	10c01b16 	blt	r2,r3,80ce38 <__muldf3+0x678>
  80cdcc:	00800804 	movi	r2,32
  80cdd0:	10c5c83a 	sub	r2,r2,r3
  80cdd4:	888a983a 	sll	r5,r17,r2
  80cdd8:	40c8d83a 	srl	r4,r8,r3
  80cddc:	4084983a 	sll	r2,r8,r2
  80cde0:	88e2d83a 	srl	r17,r17,r3
  80cde4:	2906b03a 	or	r3,r5,r4
  80cde8:	1004c03a 	cmpne	r2,r2,zero
  80cdec:	1886b03a 	or	r3,r3,r2
  80cdf0:	188001cc 	andi	r2,r3,7
  80cdf4:	10000726 	beq	r2,zero,80ce14 <__muldf3+0x654>
  80cdf8:	188003cc 	andi	r2,r3,15
  80cdfc:	01000104 	movi	r4,4
  80ce00:	11000426 	beq	r2,r4,80ce14 <__muldf3+0x654>
  80ce04:	1805883a 	mov	r2,r3
  80ce08:	10c00104 	addi	r3,r2,4
  80ce0c:	1885803a 	cmpltu	r2,r3,r2
  80ce10:	88a3883a 	add	r17,r17,r2
  80ce14:	8880202c 	andhi	r2,r17,128
  80ce18:	10001c26 	beq	r2,zero,80ce8c <__muldf3+0x6cc>
  80ce1c:	b02b883a 	mov	r21,r22
  80ce20:	00800044 	movi	r2,1
  80ce24:	000b883a 	mov	r5,zero
  80ce28:	0029883a 	mov	r20,zero
  80ce2c:	003ec306 	br	80c93c <__alt_mem_descriptor_memory+0xff78c93c>
  80ce30:	5805883a 	mov	r2,r11
  80ce34:	003f9906 	br	80cc9c <__alt_mem_descriptor_memory+0xff78cc9c>
  80ce38:	00bff844 	movi	r2,-31
  80ce3c:	1145c83a 	sub	r2,r2,r5
  80ce40:	8888d83a 	srl	r4,r17,r2
  80ce44:	00800804 	movi	r2,32
  80ce48:	18801a26 	beq	r3,r2,80ceb4 <__muldf3+0x6f4>
  80ce4c:	00801004 	movi	r2,64
  80ce50:	10c5c83a 	sub	r2,r2,r3
  80ce54:	8884983a 	sll	r2,r17,r2
  80ce58:	1204b03a 	or	r2,r2,r8
  80ce5c:	1004c03a 	cmpne	r2,r2,zero
  80ce60:	2084b03a 	or	r2,r4,r2
  80ce64:	144001cc 	andi	r17,r2,7
  80ce68:	88000d1e 	bne	r17,zero,80cea0 <__muldf3+0x6e0>
  80ce6c:	000b883a 	mov	r5,zero
  80ce70:	1028d0fa 	srli	r20,r2,3
  80ce74:	b02b883a 	mov	r21,r22
  80ce78:	0005883a 	mov	r2,zero
  80ce7c:	a468b03a 	or	r20,r20,r17
  80ce80:	003eae06 	br	80c93c <__alt_mem_descriptor_memory+0xff78c93c>
  80ce84:	1007883a 	mov	r3,r2
  80ce88:	0023883a 	mov	r17,zero
  80ce8c:	880a927a 	slli	r5,r17,9
  80ce90:	1805883a 	mov	r2,r3
  80ce94:	8822977a 	slli	r17,r17,29
  80ce98:	280ad33a 	srli	r5,r5,12
  80ce9c:	003ff406 	br	80ce70 <__alt_mem_descriptor_memory+0xff78ce70>
  80cea0:	10c003cc 	andi	r3,r2,15
  80cea4:	01000104 	movi	r4,4
  80cea8:	193ff626 	beq	r3,r4,80ce84 <__alt_mem_descriptor_memory+0xff78ce84>
  80ceac:	0023883a 	mov	r17,zero
  80ceb0:	003fd506 	br	80ce08 <__alt_mem_descriptor_memory+0xff78ce08>
  80ceb4:	0005883a 	mov	r2,zero
  80ceb8:	003fe706 	br	80ce58 <__alt_mem_descriptor_memory+0xff78ce58>
  80cebc:	00800434 	movhi	r2,16
  80cec0:	89400234 	orhi	r5,r17,8
  80cec4:	10bfffc4 	addi	r2,r2,-1
  80cec8:	b02b883a 	mov	r21,r22
  80cecc:	288a703a 	and	r5,r5,r2
  80ced0:	4029883a 	mov	r20,r8
  80ced4:	003eff06 	br	80cad4 <__alt_mem_descriptor_memory+0xff78cad4>

0080ced8 <__subdf3>:
  80ced8:	02000434 	movhi	r8,16
  80cedc:	423fffc4 	addi	r8,r8,-1
  80cee0:	defffb04 	addi	sp,sp,-20
  80cee4:	2a14703a 	and	r10,r5,r8
  80cee8:	3812d53a 	srli	r9,r7,20
  80ceec:	3a10703a 	and	r8,r7,r8
  80cef0:	2006d77a 	srli	r3,r4,29
  80cef4:	3004d77a 	srli	r2,r6,29
  80cef8:	dc000015 	stw	r16,0(sp)
  80cefc:	501490fa 	slli	r10,r10,3
  80cf00:	2820d53a 	srli	r16,r5,20
  80cf04:	401090fa 	slli	r8,r8,3
  80cf08:	dc800215 	stw	r18,8(sp)
  80cf0c:	dc400115 	stw	r17,4(sp)
  80cf10:	dfc00415 	stw	ra,16(sp)
  80cf14:	202290fa 	slli	r17,r4,3
  80cf18:	dcc00315 	stw	r19,12(sp)
  80cf1c:	4a41ffcc 	andi	r9,r9,2047
  80cf20:	0101ffc4 	movi	r4,2047
  80cf24:	2824d7fa 	srli	r18,r5,31
  80cf28:	8401ffcc 	andi	r16,r16,2047
  80cf2c:	50c6b03a 	or	r3,r10,r3
  80cf30:	380ed7fa 	srli	r7,r7,31
  80cf34:	408ab03a 	or	r5,r8,r2
  80cf38:	300c90fa 	slli	r6,r6,3
  80cf3c:	49009626 	beq	r9,r4,80d198 <__subdf3+0x2c0>
  80cf40:	39c0005c 	xori	r7,r7,1
  80cf44:	8245c83a 	sub	r2,r16,r9
  80cf48:	3c807426 	beq	r7,r18,80d11c <__subdf3+0x244>
  80cf4c:	0080af0e 	bge	zero,r2,80d20c <__subdf3+0x334>
  80cf50:	48002a1e 	bne	r9,zero,80cffc <__subdf3+0x124>
  80cf54:	2988b03a 	or	r4,r5,r6
  80cf58:	20009a1e 	bne	r4,zero,80d1c4 <__subdf3+0x2ec>
  80cf5c:	888001cc 	andi	r2,r17,7
  80cf60:	10000726 	beq	r2,zero,80cf80 <__subdf3+0xa8>
  80cf64:	888003cc 	andi	r2,r17,15
  80cf68:	01000104 	movi	r4,4
  80cf6c:	11000426 	beq	r2,r4,80cf80 <__subdf3+0xa8>
  80cf70:	890b883a 	add	r5,r17,r4
  80cf74:	2c63803a 	cmpltu	r17,r5,r17
  80cf78:	1c47883a 	add	r3,r3,r17
  80cf7c:	2823883a 	mov	r17,r5
  80cf80:	1880202c 	andhi	r2,r3,128
  80cf84:	10005926 	beq	r2,zero,80d0ec <__subdf3+0x214>
  80cf88:	84000044 	addi	r16,r16,1
  80cf8c:	0081ffc4 	movi	r2,2047
  80cf90:	8080be26 	beq	r16,r2,80d28c <__subdf3+0x3b4>
  80cf94:	017fe034 	movhi	r5,65408
  80cf98:	297fffc4 	addi	r5,r5,-1
  80cf9c:	1946703a 	and	r3,r3,r5
  80cfa0:	1804977a 	slli	r2,r3,29
  80cfa4:	1806927a 	slli	r3,r3,9
  80cfa8:	8822d0fa 	srli	r17,r17,3
  80cfac:	8401ffcc 	andi	r16,r16,2047
  80cfb0:	180ad33a 	srli	r5,r3,12
  80cfb4:	9100004c 	andi	r4,r18,1
  80cfb8:	1444b03a 	or	r2,r2,r17
  80cfbc:	80c1ffcc 	andi	r3,r16,2047
  80cfc0:	1820953a 	slli	r16,r3,20
  80cfc4:	20c03fcc 	andi	r3,r4,255
  80cfc8:	180897fa 	slli	r4,r3,31
  80cfcc:	00c00434 	movhi	r3,16
  80cfd0:	18ffffc4 	addi	r3,r3,-1
  80cfd4:	28c6703a 	and	r3,r5,r3
  80cfd8:	1c06b03a 	or	r3,r3,r16
  80cfdc:	1906b03a 	or	r3,r3,r4
  80cfe0:	dfc00417 	ldw	ra,16(sp)
  80cfe4:	dcc00317 	ldw	r19,12(sp)
  80cfe8:	dc800217 	ldw	r18,8(sp)
  80cfec:	dc400117 	ldw	r17,4(sp)
  80cff0:	dc000017 	ldw	r16,0(sp)
  80cff4:	dec00504 	addi	sp,sp,20
  80cff8:	f800283a 	ret
  80cffc:	0101ffc4 	movi	r4,2047
  80d000:	813fd626 	beq	r16,r4,80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d004:	29402034 	orhi	r5,r5,128
  80d008:	01000e04 	movi	r4,56
  80d00c:	2080a316 	blt	r4,r2,80d29c <__subdf3+0x3c4>
  80d010:	010007c4 	movi	r4,31
  80d014:	2080c616 	blt	r4,r2,80d330 <__subdf3+0x458>
  80d018:	01000804 	movi	r4,32
  80d01c:	2089c83a 	sub	r4,r4,r2
  80d020:	2910983a 	sll	r8,r5,r4
  80d024:	308ed83a 	srl	r7,r6,r2
  80d028:	3108983a 	sll	r4,r6,r4
  80d02c:	2884d83a 	srl	r2,r5,r2
  80d030:	41ccb03a 	or	r6,r8,r7
  80d034:	2008c03a 	cmpne	r4,r4,zero
  80d038:	310cb03a 	or	r6,r6,r4
  80d03c:	898dc83a 	sub	r6,r17,r6
  80d040:	89a3803a 	cmpltu	r17,r17,r6
  80d044:	1887c83a 	sub	r3,r3,r2
  80d048:	1c47c83a 	sub	r3,r3,r17
  80d04c:	3023883a 	mov	r17,r6
  80d050:	1880202c 	andhi	r2,r3,128
  80d054:	10002326 	beq	r2,zero,80d0e4 <__subdf3+0x20c>
  80d058:	04c02034 	movhi	r19,128
  80d05c:	9cffffc4 	addi	r19,r19,-1
  80d060:	1ce6703a 	and	r19,r3,r19
  80d064:	98007a26 	beq	r19,zero,80d250 <__subdf3+0x378>
  80d068:	9809883a 	mov	r4,r19
  80d06c:	080118c0 	call	80118c <__clzsi2>
  80d070:	113ffe04 	addi	r4,r2,-8
  80d074:	00c007c4 	movi	r3,31
  80d078:	19007b16 	blt	r3,r4,80d268 <__subdf3+0x390>
  80d07c:	00800804 	movi	r2,32
  80d080:	1105c83a 	sub	r2,r2,r4
  80d084:	8884d83a 	srl	r2,r17,r2
  80d088:	9906983a 	sll	r3,r19,r4
  80d08c:	8922983a 	sll	r17,r17,r4
  80d090:	10c4b03a 	or	r2,r2,r3
  80d094:	24007816 	blt	r4,r16,80d278 <__subdf3+0x3a0>
  80d098:	2421c83a 	sub	r16,r4,r16
  80d09c:	80c00044 	addi	r3,r16,1
  80d0a0:	010007c4 	movi	r4,31
  80d0a4:	20c09516 	blt	r4,r3,80d2fc <__subdf3+0x424>
  80d0a8:	01400804 	movi	r5,32
  80d0ac:	28cbc83a 	sub	r5,r5,r3
  80d0b0:	88c8d83a 	srl	r4,r17,r3
  80d0b4:	8962983a 	sll	r17,r17,r5
  80d0b8:	114a983a 	sll	r5,r2,r5
  80d0bc:	10c6d83a 	srl	r3,r2,r3
  80d0c0:	8804c03a 	cmpne	r2,r17,zero
  80d0c4:	290ab03a 	or	r5,r5,r4
  80d0c8:	28a2b03a 	or	r17,r5,r2
  80d0cc:	0021883a 	mov	r16,zero
  80d0d0:	003fa206 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d0d4:	2090b03a 	or	r8,r4,r2
  80d0d8:	40018e26 	beq	r8,zero,80d714 <__subdf3+0x83c>
  80d0dc:	1007883a 	mov	r3,r2
  80d0e0:	2023883a 	mov	r17,r4
  80d0e4:	888001cc 	andi	r2,r17,7
  80d0e8:	103f9e1e 	bne	r2,zero,80cf64 <__alt_mem_descriptor_memory+0xff78cf64>
  80d0ec:	1804977a 	slli	r2,r3,29
  80d0f0:	8822d0fa 	srli	r17,r17,3
  80d0f4:	1810d0fa 	srli	r8,r3,3
  80d0f8:	9100004c 	andi	r4,r18,1
  80d0fc:	1444b03a 	or	r2,r2,r17
  80d100:	00c1ffc4 	movi	r3,2047
  80d104:	80c02826 	beq	r16,r3,80d1a8 <__subdf3+0x2d0>
  80d108:	01400434 	movhi	r5,16
  80d10c:	297fffc4 	addi	r5,r5,-1
  80d110:	80e0703a 	and	r16,r16,r3
  80d114:	414a703a 	and	r5,r8,r5
  80d118:	003fa806 	br	80cfbc <__alt_mem_descriptor_memory+0xff78cfbc>
  80d11c:	0080630e 	bge	zero,r2,80d2ac <__subdf3+0x3d4>
  80d120:	48003026 	beq	r9,zero,80d1e4 <__subdf3+0x30c>
  80d124:	0101ffc4 	movi	r4,2047
  80d128:	813f8c26 	beq	r16,r4,80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d12c:	29402034 	orhi	r5,r5,128
  80d130:	01000e04 	movi	r4,56
  80d134:	2080a90e 	bge	r4,r2,80d3dc <__subdf3+0x504>
  80d138:	298cb03a 	or	r6,r5,r6
  80d13c:	3012c03a 	cmpne	r9,r6,zero
  80d140:	0005883a 	mov	r2,zero
  80d144:	4c53883a 	add	r9,r9,r17
  80d148:	4c63803a 	cmpltu	r17,r9,r17
  80d14c:	10c7883a 	add	r3,r2,r3
  80d150:	88c7883a 	add	r3,r17,r3
  80d154:	4823883a 	mov	r17,r9
  80d158:	1880202c 	andhi	r2,r3,128
  80d15c:	1000d026 	beq	r2,zero,80d4a0 <__subdf3+0x5c8>
  80d160:	84000044 	addi	r16,r16,1
  80d164:	0081ffc4 	movi	r2,2047
  80d168:	8080fe26 	beq	r16,r2,80d564 <__subdf3+0x68c>
  80d16c:	00bfe034 	movhi	r2,65408
  80d170:	10bfffc4 	addi	r2,r2,-1
  80d174:	1886703a 	and	r3,r3,r2
  80d178:	880ad07a 	srli	r5,r17,1
  80d17c:	180497fa 	slli	r2,r3,31
  80d180:	8900004c 	andi	r4,r17,1
  80d184:	2922b03a 	or	r17,r5,r4
  80d188:	1806d07a 	srli	r3,r3,1
  80d18c:	1462b03a 	or	r17,r2,r17
  80d190:	3825883a 	mov	r18,r7
  80d194:	003f7106 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d198:	2984b03a 	or	r2,r5,r6
  80d19c:	103f6826 	beq	r2,zero,80cf40 <__alt_mem_descriptor_memory+0xff78cf40>
  80d1a0:	39c03fcc 	andi	r7,r7,255
  80d1a4:	003f6706 	br	80cf44 <__alt_mem_descriptor_memory+0xff78cf44>
  80d1a8:	4086b03a 	or	r3,r8,r2
  80d1ac:	18015226 	beq	r3,zero,80d6f8 <__subdf3+0x820>
  80d1b0:	00c00434 	movhi	r3,16
  80d1b4:	41400234 	orhi	r5,r8,8
  80d1b8:	18ffffc4 	addi	r3,r3,-1
  80d1bc:	28ca703a 	and	r5,r5,r3
  80d1c0:	003f7e06 	br	80cfbc <__alt_mem_descriptor_memory+0xff78cfbc>
  80d1c4:	10bfffc4 	addi	r2,r2,-1
  80d1c8:	1000491e 	bne	r2,zero,80d2f0 <__subdf3+0x418>
  80d1cc:	898fc83a 	sub	r7,r17,r6
  80d1d0:	89e3803a 	cmpltu	r17,r17,r7
  80d1d4:	1947c83a 	sub	r3,r3,r5
  80d1d8:	1c47c83a 	sub	r3,r3,r17
  80d1dc:	3823883a 	mov	r17,r7
  80d1e0:	003f9b06 	br	80d050 <__alt_mem_descriptor_memory+0xff78d050>
  80d1e4:	2988b03a 	or	r4,r5,r6
  80d1e8:	203f5c26 	beq	r4,zero,80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d1ec:	10bfffc4 	addi	r2,r2,-1
  80d1f0:	1000931e 	bne	r2,zero,80d440 <__subdf3+0x568>
  80d1f4:	898d883a 	add	r6,r17,r6
  80d1f8:	3463803a 	cmpltu	r17,r6,r17
  80d1fc:	1947883a 	add	r3,r3,r5
  80d200:	88c7883a 	add	r3,r17,r3
  80d204:	3023883a 	mov	r17,r6
  80d208:	003fd306 	br	80d158 <__alt_mem_descriptor_memory+0xff78d158>
  80d20c:	1000541e 	bne	r2,zero,80d360 <__subdf3+0x488>
  80d210:	80800044 	addi	r2,r16,1
  80d214:	1081ffcc 	andi	r2,r2,2047
  80d218:	01000044 	movi	r4,1
  80d21c:	2080a20e 	bge	r4,r2,80d4a8 <__subdf3+0x5d0>
  80d220:	8989c83a 	sub	r4,r17,r6
  80d224:	8905803a 	cmpltu	r2,r17,r4
  80d228:	1967c83a 	sub	r19,r3,r5
  80d22c:	98a7c83a 	sub	r19,r19,r2
  80d230:	9880202c 	andhi	r2,r19,128
  80d234:	10006326 	beq	r2,zero,80d3c4 <__subdf3+0x4ec>
  80d238:	3463c83a 	sub	r17,r6,r17
  80d23c:	28c7c83a 	sub	r3,r5,r3
  80d240:	344d803a 	cmpltu	r6,r6,r17
  80d244:	19a7c83a 	sub	r19,r3,r6
  80d248:	3825883a 	mov	r18,r7
  80d24c:	983f861e 	bne	r19,zero,80d068 <__alt_mem_descriptor_memory+0xff78d068>
  80d250:	8809883a 	mov	r4,r17
  80d254:	080118c0 	call	80118c <__clzsi2>
  80d258:	10800804 	addi	r2,r2,32
  80d25c:	113ffe04 	addi	r4,r2,-8
  80d260:	00c007c4 	movi	r3,31
  80d264:	193f850e 	bge	r3,r4,80d07c <__alt_mem_descriptor_memory+0xff78d07c>
  80d268:	10bff604 	addi	r2,r2,-40
  80d26c:	8884983a 	sll	r2,r17,r2
  80d270:	0023883a 	mov	r17,zero
  80d274:	243f880e 	bge	r4,r16,80d098 <__alt_mem_descriptor_memory+0xff78d098>
  80d278:	00ffe034 	movhi	r3,65408
  80d27c:	18ffffc4 	addi	r3,r3,-1
  80d280:	8121c83a 	sub	r16,r16,r4
  80d284:	10c6703a 	and	r3,r2,r3
  80d288:	003f3406 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d28c:	9100004c 	andi	r4,r18,1
  80d290:	000b883a 	mov	r5,zero
  80d294:	0005883a 	mov	r2,zero
  80d298:	003f4806 	br	80cfbc <__alt_mem_descriptor_memory+0xff78cfbc>
  80d29c:	298cb03a 	or	r6,r5,r6
  80d2a0:	300cc03a 	cmpne	r6,r6,zero
  80d2a4:	0005883a 	mov	r2,zero
  80d2a8:	003f6406 	br	80d03c <__alt_mem_descriptor_memory+0xff78d03c>
  80d2ac:	10009a1e 	bne	r2,zero,80d518 <__subdf3+0x640>
  80d2b0:	82400044 	addi	r9,r16,1
  80d2b4:	4881ffcc 	andi	r2,r9,2047
  80d2b8:	02800044 	movi	r10,1
  80d2bc:	5080670e 	bge	r10,r2,80d45c <__subdf3+0x584>
  80d2c0:	0081ffc4 	movi	r2,2047
  80d2c4:	4880af26 	beq	r9,r2,80d584 <__subdf3+0x6ac>
  80d2c8:	898d883a 	add	r6,r17,r6
  80d2cc:	1945883a 	add	r2,r3,r5
  80d2d0:	3447803a 	cmpltu	r3,r6,r17
  80d2d4:	1887883a 	add	r3,r3,r2
  80d2d8:	182297fa 	slli	r17,r3,31
  80d2dc:	300cd07a 	srli	r6,r6,1
  80d2e0:	1806d07a 	srli	r3,r3,1
  80d2e4:	4821883a 	mov	r16,r9
  80d2e8:	89a2b03a 	or	r17,r17,r6
  80d2ec:	003f1b06 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d2f0:	0101ffc4 	movi	r4,2047
  80d2f4:	813f441e 	bne	r16,r4,80d008 <__alt_mem_descriptor_memory+0xff78d008>
  80d2f8:	003f1806 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d2fc:	843ff844 	addi	r16,r16,-31
  80d300:	01400804 	movi	r5,32
  80d304:	1408d83a 	srl	r4,r2,r16
  80d308:	19405026 	beq	r3,r5,80d44c <__subdf3+0x574>
  80d30c:	01401004 	movi	r5,64
  80d310:	28c7c83a 	sub	r3,r5,r3
  80d314:	10c4983a 	sll	r2,r2,r3
  80d318:	88a2b03a 	or	r17,r17,r2
  80d31c:	8822c03a 	cmpne	r17,r17,zero
  80d320:	2462b03a 	or	r17,r4,r17
  80d324:	0007883a 	mov	r3,zero
  80d328:	0021883a 	mov	r16,zero
  80d32c:	003f6d06 	br	80d0e4 <__alt_mem_descriptor_memory+0xff78d0e4>
  80d330:	11fff804 	addi	r7,r2,-32
  80d334:	01000804 	movi	r4,32
  80d338:	29ced83a 	srl	r7,r5,r7
  80d33c:	11004526 	beq	r2,r4,80d454 <__subdf3+0x57c>
  80d340:	01001004 	movi	r4,64
  80d344:	2089c83a 	sub	r4,r4,r2
  80d348:	2904983a 	sll	r2,r5,r4
  80d34c:	118cb03a 	or	r6,r2,r6
  80d350:	300cc03a 	cmpne	r6,r6,zero
  80d354:	398cb03a 	or	r6,r7,r6
  80d358:	0005883a 	mov	r2,zero
  80d35c:	003f3706 	br	80d03c <__alt_mem_descriptor_memory+0xff78d03c>
  80d360:	80002a26 	beq	r16,zero,80d40c <__subdf3+0x534>
  80d364:	0101ffc4 	movi	r4,2047
  80d368:	49006626 	beq	r9,r4,80d504 <__subdf3+0x62c>
  80d36c:	0085c83a 	sub	r2,zero,r2
  80d370:	18c02034 	orhi	r3,r3,128
  80d374:	01000e04 	movi	r4,56
  80d378:	20807e16 	blt	r4,r2,80d574 <__subdf3+0x69c>
  80d37c:	010007c4 	movi	r4,31
  80d380:	2080e716 	blt	r4,r2,80d720 <__subdf3+0x848>
  80d384:	01000804 	movi	r4,32
  80d388:	2089c83a 	sub	r4,r4,r2
  80d38c:	1914983a 	sll	r10,r3,r4
  80d390:	8890d83a 	srl	r8,r17,r2
  80d394:	8908983a 	sll	r4,r17,r4
  80d398:	1884d83a 	srl	r2,r3,r2
  80d39c:	5222b03a 	or	r17,r10,r8
  80d3a0:	2006c03a 	cmpne	r3,r4,zero
  80d3a4:	88e2b03a 	or	r17,r17,r3
  80d3a8:	3463c83a 	sub	r17,r6,r17
  80d3ac:	2885c83a 	sub	r2,r5,r2
  80d3b0:	344d803a 	cmpltu	r6,r6,r17
  80d3b4:	1187c83a 	sub	r3,r2,r6
  80d3b8:	4821883a 	mov	r16,r9
  80d3bc:	3825883a 	mov	r18,r7
  80d3c0:	003f2306 	br	80d050 <__alt_mem_descriptor_memory+0xff78d050>
  80d3c4:	24d0b03a 	or	r8,r4,r19
  80d3c8:	40001b1e 	bne	r8,zero,80d438 <__subdf3+0x560>
  80d3cc:	0005883a 	mov	r2,zero
  80d3d0:	0009883a 	mov	r4,zero
  80d3d4:	0021883a 	mov	r16,zero
  80d3d8:	003f4906 	br	80d100 <__alt_mem_descriptor_memory+0xff78d100>
  80d3dc:	010007c4 	movi	r4,31
  80d3e0:	20803a16 	blt	r4,r2,80d4cc <__subdf3+0x5f4>
  80d3e4:	01000804 	movi	r4,32
  80d3e8:	2089c83a 	sub	r4,r4,r2
  80d3ec:	2912983a 	sll	r9,r5,r4
  80d3f0:	3090d83a 	srl	r8,r6,r2
  80d3f4:	3108983a 	sll	r4,r6,r4
  80d3f8:	2884d83a 	srl	r2,r5,r2
  80d3fc:	4a12b03a 	or	r9,r9,r8
  80d400:	2008c03a 	cmpne	r4,r4,zero
  80d404:	4912b03a 	or	r9,r9,r4
  80d408:	003f4e06 	br	80d144 <__alt_mem_descriptor_memory+0xff78d144>
  80d40c:	1c48b03a 	or	r4,r3,r17
  80d410:	20003c26 	beq	r4,zero,80d504 <__subdf3+0x62c>
  80d414:	0084303a 	nor	r2,zero,r2
  80d418:	1000381e 	bne	r2,zero,80d4fc <__subdf3+0x624>
  80d41c:	3463c83a 	sub	r17,r6,r17
  80d420:	28c5c83a 	sub	r2,r5,r3
  80d424:	344d803a 	cmpltu	r6,r6,r17
  80d428:	1187c83a 	sub	r3,r2,r6
  80d42c:	4821883a 	mov	r16,r9
  80d430:	3825883a 	mov	r18,r7
  80d434:	003f0606 	br	80d050 <__alt_mem_descriptor_memory+0xff78d050>
  80d438:	2023883a 	mov	r17,r4
  80d43c:	003f0906 	br	80d064 <__alt_mem_descriptor_memory+0xff78d064>
  80d440:	0101ffc4 	movi	r4,2047
  80d444:	813f3a1e 	bne	r16,r4,80d130 <__alt_mem_descriptor_memory+0xff78d130>
  80d448:	003ec406 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d44c:	0005883a 	mov	r2,zero
  80d450:	003fb106 	br	80d318 <__alt_mem_descriptor_memory+0xff78d318>
  80d454:	0005883a 	mov	r2,zero
  80d458:	003fbc06 	br	80d34c <__alt_mem_descriptor_memory+0xff78d34c>
  80d45c:	1c44b03a 	or	r2,r3,r17
  80d460:	80008e1e 	bne	r16,zero,80d69c <__subdf3+0x7c4>
  80d464:	1000c826 	beq	r2,zero,80d788 <__subdf3+0x8b0>
  80d468:	2984b03a 	or	r2,r5,r6
  80d46c:	103ebb26 	beq	r2,zero,80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d470:	8989883a 	add	r4,r17,r6
  80d474:	1945883a 	add	r2,r3,r5
  80d478:	2447803a 	cmpltu	r3,r4,r17
  80d47c:	1887883a 	add	r3,r3,r2
  80d480:	1880202c 	andhi	r2,r3,128
  80d484:	2023883a 	mov	r17,r4
  80d488:	103f1626 	beq	r2,zero,80d0e4 <__alt_mem_descriptor_memory+0xff78d0e4>
  80d48c:	00bfe034 	movhi	r2,65408
  80d490:	10bfffc4 	addi	r2,r2,-1
  80d494:	5021883a 	mov	r16,r10
  80d498:	1886703a 	and	r3,r3,r2
  80d49c:	003eaf06 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d4a0:	3825883a 	mov	r18,r7
  80d4a4:	003f0f06 	br	80d0e4 <__alt_mem_descriptor_memory+0xff78d0e4>
  80d4a8:	1c44b03a 	or	r2,r3,r17
  80d4ac:	8000251e 	bne	r16,zero,80d544 <__subdf3+0x66c>
  80d4b0:	1000661e 	bne	r2,zero,80d64c <__subdf3+0x774>
  80d4b4:	2990b03a 	or	r8,r5,r6
  80d4b8:	40009626 	beq	r8,zero,80d714 <__subdf3+0x83c>
  80d4bc:	2807883a 	mov	r3,r5
  80d4c0:	3023883a 	mov	r17,r6
  80d4c4:	3825883a 	mov	r18,r7
  80d4c8:	003ea406 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d4cc:	127ff804 	addi	r9,r2,-32
  80d4d0:	01000804 	movi	r4,32
  80d4d4:	2a52d83a 	srl	r9,r5,r9
  80d4d8:	11008c26 	beq	r2,r4,80d70c <__subdf3+0x834>
  80d4dc:	01001004 	movi	r4,64
  80d4e0:	2085c83a 	sub	r2,r4,r2
  80d4e4:	2884983a 	sll	r2,r5,r2
  80d4e8:	118cb03a 	or	r6,r2,r6
  80d4ec:	300cc03a 	cmpne	r6,r6,zero
  80d4f0:	4992b03a 	or	r9,r9,r6
  80d4f4:	0005883a 	mov	r2,zero
  80d4f8:	003f1206 	br	80d144 <__alt_mem_descriptor_memory+0xff78d144>
  80d4fc:	0101ffc4 	movi	r4,2047
  80d500:	493f9c1e 	bne	r9,r4,80d374 <__alt_mem_descriptor_memory+0xff78d374>
  80d504:	2807883a 	mov	r3,r5
  80d508:	3023883a 	mov	r17,r6
  80d50c:	4821883a 	mov	r16,r9
  80d510:	3825883a 	mov	r18,r7
  80d514:	003e9106 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d518:	80001f1e 	bne	r16,zero,80d598 <__subdf3+0x6c0>
  80d51c:	1c48b03a 	or	r4,r3,r17
  80d520:	20005a26 	beq	r4,zero,80d68c <__subdf3+0x7b4>
  80d524:	0084303a 	nor	r2,zero,r2
  80d528:	1000561e 	bne	r2,zero,80d684 <__subdf3+0x7ac>
  80d52c:	89a3883a 	add	r17,r17,r6
  80d530:	1945883a 	add	r2,r3,r5
  80d534:	898d803a 	cmpltu	r6,r17,r6
  80d538:	3087883a 	add	r3,r6,r2
  80d53c:	4821883a 	mov	r16,r9
  80d540:	003f0506 	br	80d158 <__alt_mem_descriptor_memory+0xff78d158>
  80d544:	10002b1e 	bne	r2,zero,80d5f4 <__subdf3+0x71c>
  80d548:	2984b03a 	or	r2,r5,r6
  80d54c:	10008026 	beq	r2,zero,80d750 <__subdf3+0x878>
  80d550:	2807883a 	mov	r3,r5
  80d554:	3023883a 	mov	r17,r6
  80d558:	3825883a 	mov	r18,r7
  80d55c:	0401ffc4 	movi	r16,2047
  80d560:	003e7e06 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d564:	3809883a 	mov	r4,r7
  80d568:	0011883a 	mov	r8,zero
  80d56c:	0005883a 	mov	r2,zero
  80d570:	003ee306 	br	80d100 <__alt_mem_descriptor_memory+0xff78d100>
  80d574:	1c62b03a 	or	r17,r3,r17
  80d578:	8822c03a 	cmpne	r17,r17,zero
  80d57c:	0005883a 	mov	r2,zero
  80d580:	003f8906 	br	80d3a8 <__alt_mem_descriptor_memory+0xff78d3a8>
  80d584:	3809883a 	mov	r4,r7
  80d588:	4821883a 	mov	r16,r9
  80d58c:	0011883a 	mov	r8,zero
  80d590:	0005883a 	mov	r2,zero
  80d594:	003eda06 	br	80d100 <__alt_mem_descriptor_memory+0xff78d100>
  80d598:	0101ffc4 	movi	r4,2047
  80d59c:	49003b26 	beq	r9,r4,80d68c <__subdf3+0x7b4>
  80d5a0:	0085c83a 	sub	r2,zero,r2
  80d5a4:	18c02034 	orhi	r3,r3,128
  80d5a8:	01000e04 	movi	r4,56
  80d5ac:	20806e16 	blt	r4,r2,80d768 <__subdf3+0x890>
  80d5b0:	010007c4 	movi	r4,31
  80d5b4:	20807716 	blt	r4,r2,80d794 <__subdf3+0x8bc>
  80d5b8:	01000804 	movi	r4,32
  80d5bc:	2089c83a 	sub	r4,r4,r2
  80d5c0:	1914983a 	sll	r10,r3,r4
  80d5c4:	8890d83a 	srl	r8,r17,r2
  80d5c8:	8908983a 	sll	r4,r17,r4
  80d5cc:	1884d83a 	srl	r2,r3,r2
  80d5d0:	5222b03a 	or	r17,r10,r8
  80d5d4:	2006c03a 	cmpne	r3,r4,zero
  80d5d8:	88e2b03a 	or	r17,r17,r3
  80d5dc:	89a3883a 	add	r17,r17,r6
  80d5e0:	1145883a 	add	r2,r2,r5
  80d5e4:	898d803a 	cmpltu	r6,r17,r6
  80d5e8:	3087883a 	add	r3,r6,r2
  80d5ec:	4821883a 	mov	r16,r9
  80d5f0:	003ed906 	br	80d158 <__alt_mem_descriptor_memory+0xff78d158>
  80d5f4:	2984b03a 	or	r2,r5,r6
  80d5f8:	10004226 	beq	r2,zero,80d704 <__subdf3+0x82c>
  80d5fc:	1808d0fa 	srli	r4,r3,3
  80d600:	8822d0fa 	srli	r17,r17,3
  80d604:	1806977a 	slli	r3,r3,29
  80d608:	2080022c 	andhi	r2,r4,8
  80d60c:	1c62b03a 	or	r17,r3,r17
  80d610:	10000826 	beq	r2,zero,80d634 <__subdf3+0x75c>
  80d614:	2812d0fa 	srli	r9,r5,3
  80d618:	4880022c 	andhi	r2,r9,8
  80d61c:	1000051e 	bne	r2,zero,80d634 <__subdf3+0x75c>
  80d620:	300cd0fa 	srli	r6,r6,3
  80d624:	2804977a 	slli	r2,r5,29
  80d628:	4809883a 	mov	r4,r9
  80d62c:	3825883a 	mov	r18,r7
  80d630:	11a2b03a 	or	r17,r2,r6
  80d634:	8806d77a 	srli	r3,r17,29
  80d638:	200890fa 	slli	r4,r4,3
  80d63c:	882290fa 	slli	r17,r17,3
  80d640:	0401ffc4 	movi	r16,2047
  80d644:	1906b03a 	or	r3,r3,r4
  80d648:	003e4406 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d64c:	2984b03a 	or	r2,r5,r6
  80d650:	103e4226 	beq	r2,zero,80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d654:	8989c83a 	sub	r4,r17,r6
  80d658:	8911803a 	cmpltu	r8,r17,r4
  80d65c:	1945c83a 	sub	r2,r3,r5
  80d660:	1205c83a 	sub	r2,r2,r8
  80d664:	1200202c 	andhi	r8,r2,128
  80d668:	403e9a26 	beq	r8,zero,80d0d4 <__alt_mem_descriptor_memory+0xff78d0d4>
  80d66c:	3463c83a 	sub	r17,r6,r17
  80d670:	28c5c83a 	sub	r2,r5,r3
  80d674:	344d803a 	cmpltu	r6,r6,r17
  80d678:	1187c83a 	sub	r3,r2,r6
  80d67c:	3825883a 	mov	r18,r7
  80d680:	003e3606 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d684:	0101ffc4 	movi	r4,2047
  80d688:	493fc71e 	bne	r9,r4,80d5a8 <__alt_mem_descriptor_memory+0xff78d5a8>
  80d68c:	2807883a 	mov	r3,r5
  80d690:	3023883a 	mov	r17,r6
  80d694:	4821883a 	mov	r16,r9
  80d698:	003e3006 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d69c:	10003626 	beq	r2,zero,80d778 <__subdf3+0x8a0>
  80d6a0:	2984b03a 	or	r2,r5,r6
  80d6a4:	10001726 	beq	r2,zero,80d704 <__subdf3+0x82c>
  80d6a8:	1808d0fa 	srli	r4,r3,3
  80d6ac:	8822d0fa 	srli	r17,r17,3
  80d6b0:	1806977a 	slli	r3,r3,29
  80d6b4:	2080022c 	andhi	r2,r4,8
  80d6b8:	1c62b03a 	or	r17,r3,r17
  80d6bc:	10000726 	beq	r2,zero,80d6dc <__subdf3+0x804>
  80d6c0:	2812d0fa 	srli	r9,r5,3
  80d6c4:	4880022c 	andhi	r2,r9,8
  80d6c8:	1000041e 	bne	r2,zero,80d6dc <__subdf3+0x804>
  80d6cc:	300cd0fa 	srli	r6,r6,3
  80d6d0:	2804977a 	slli	r2,r5,29
  80d6d4:	4809883a 	mov	r4,r9
  80d6d8:	11a2b03a 	or	r17,r2,r6
  80d6dc:	8806d77a 	srli	r3,r17,29
  80d6e0:	200890fa 	slli	r4,r4,3
  80d6e4:	882290fa 	slli	r17,r17,3
  80d6e8:	3825883a 	mov	r18,r7
  80d6ec:	1906b03a 	or	r3,r3,r4
  80d6f0:	0401ffc4 	movi	r16,2047
  80d6f4:	003e1906 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d6f8:	000b883a 	mov	r5,zero
  80d6fc:	0005883a 	mov	r2,zero
  80d700:	003e2e06 	br	80cfbc <__alt_mem_descriptor_memory+0xff78cfbc>
  80d704:	0401ffc4 	movi	r16,2047
  80d708:	003e1406 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d70c:	0005883a 	mov	r2,zero
  80d710:	003f7506 	br	80d4e8 <__alt_mem_descriptor_memory+0xff78d4e8>
  80d714:	0005883a 	mov	r2,zero
  80d718:	0009883a 	mov	r4,zero
  80d71c:	003e7806 	br	80d100 <__alt_mem_descriptor_memory+0xff78d100>
  80d720:	123ff804 	addi	r8,r2,-32
  80d724:	01000804 	movi	r4,32
  80d728:	1a10d83a 	srl	r8,r3,r8
  80d72c:	11002526 	beq	r2,r4,80d7c4 <__subdf3+0x8ec>
  80d730:	01001004 	movi	r4,64
  80d734:	2085c83a 	sub	r2,r4,r2
  80d738:	1884983a 	sll	r2,r3,r2
  80d73c:	1444b03a 	or	r2,r2,r17
  80d740:	1004c03a 	cmpne	r2,r2,zero
  80d744:	40a2b03a 	or	r17,r8,r2
  80d748:	0005883a 	mov	r2,zero
  80d74c:	003f1606 	br	80d3a8 <__alt_mem_descriptor_memory+0xff78d3a8>
  80d750:	02000434 	movhi	r8,16
  80d754:	0009883a 	mov	r4,zero
  80d758:	423fffc4 	addi	r8,r8,-1
  80d75c:	00bfffc4 	movi	r2,-1
  80d760:	0401ffc4 	movi	r16,2047
  80d764:	003e6606 	br	80d100 <__alt_mem_descriptor_memory+0xff78d100>
  80d768:	1c62b03a 	or	r17,r3,r17
  80d76c:	8822c03a 	cmpne	r17,r17,zero
  80d770:	0005883a 	mov	r2,zero
  80d774:	003f9906 	br	80d5dc <__alt_mem_descriptor_memory+0xff78d5dc>
  80d778:	2807883a 	mov	r3,r5
  80d77c:	3023883a 	mov	r17,r6
  80d780:	0401ffc4 	movi	r16,2047
  80d784:	003df506 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d788:	2807883a 	mov	r3,r5
  80d78c:	3023883a 	mov	r17,r6
  80d790:	003df206 	br	80cf5c <__alt_mem_descriptor_memory+0xff78cf5c>
  80d794:	123ff804 	addi	r8,r2,-32
  80d798:	01000804 	movi	r4,32
  80d79c:	1a10d83a 	srl	r8,r3,r8
  80d7a0:	11000a26 	beq	r2,r4,80d7cc <__subdf3+0x8f4>
  80d7a4:	01001004 	movi	r4,64
  80d7a8:	2085c83a 	sub	r2,r4,r2
  80d7ac:	1884983a 	sll	r2,r3,r2
  80d7b0:	1444b03a 	or	r2,r2,r17
  80d7b4:	1004c03a 	cmpne	r2,r2,zero
  80d7b8:	40a2b03a 	or	r17,r8,r2
  80d7bc:	0005883a 	mov	r2,zero
  80d7c0:	003f8606 	br	80d5dc <__alt_mem_descriptor_memory+0xff78d5dc>
  80d7c4:	0005883a 	mov	r2,zero
  80d7c8:	003fdc06 	br	80d73c <__alt_mem_descriptor_memory+0xff78d73c>
  80d7cc:	0005883a 	mov	r2,zero
  80d7d0:	003ff706 	br	80d7b0 <__alt_mem_descriptor_memory+0xff78d7b0>

0080d7d4 <__fixdfsi>:
  80d7d4:	280cd53a 	srli	r6,r5,20
  80d7d8:	00c00434 	movhi	r3,16
  80d7dc:	18ffffc4 	addi	r3,r3,-1
  80d7e0:	3181ffcc 	andi	r6,r6,2047
  80d7e4:	01c0ff84 	movi	r7,1022
  80d7e8:	28c6703a 	and	r3,r5,r3
  80d7ec:	280ad7fa 	srli	r5,r5,31
  80d7f0:	3980120e 	bge	r7,r6,80d83c <__fixdfsi+0x68>
  80d7f4:	00810744 	movi	r2,1053
  80d7f8:	11800c16 	blt	r2,r6,80d82c <__fixdfsi+0x58>
  80d7fc:	00810cc4 	movi	r2,1075
  80d800:	1185c83a 	sub	r2,r2,r6
  80d804:	01c007c4 	movi	r7,31
  80d808:	18c00434 	orhi	r3,r3,16
  80d80c:	38800d16 	blt	r7,r2,80d844 <__fixdfsi+0x70>
  80d810:	31befb44 	addi	r6,r6,-1043
  80d814:	2084d83a 	srl	r2,r4,r2
  80d818:	1986983a 	sll	r3,r3,r6
  80d81c:	1884b03a 	or	r2,r3,r2
  80d820:	28000726 	beq	r5,zero,80d840 <__fixdfsi+0x6c>
  80d824:	0085c83a 	sub	r2,zero,r2
  80d828:	f800283a 	ret
  80d82c:	00a00034 	movhi	r2,32768
  80d830:	10bfffc4 	addi	r2,r2,-1
  80d834:	2885883a 	add	r2,r5,r2
  80d838:	f800283a 	ret
  80d83c:	0005883a 	mov	r2,zero
  80d840:	f800283a 	ret
  80d844:	008104c4 	movi	r2,1043
  80d848:	1185c83a 	sub	r2,r2,r6
  80d84c:	1884d83a 	srl	r2,r3,r2
  80d850:	003ff306 	br	80d820 <__alt_mem_descriptor_memory+0xff78d820>

0080d854 <__floatsidf>:
  80d854:	defffd04 	addi	sp,sp,-12
  80d858:	dfc00215 	stw	ra,8(sp)
  80d85c:	dc400115 	stw	r17,4(sp)
  80d860:	dc000015 	stw	r16,0(sp)
  80d864:	20002b26 	beq	r4,zero,80d914 <__floatsidf+0xc0>
  80d868:	2023883a 	mov	r17,r4
  80d86c:	2020d7fa 	srli	r16,r4,31
  80d870:	20002d16 	blt	r4,zero,80d928 <__floatsidf+0xd4>
  80d874:	8809883a 	mov	r4,r17
  80d878:	080118c0 	call	80118c <__clzsi2>
  80d87c:	01410784 	movi	r5,1054
  80d880:	288bc83a 	sub	r5,r5,r2
  80d884:	01010cc4 	movi	r4,1075
  80d888:	2149c83a 	sub	r4,r4,r5
  80d88c:	00c007c4 	movi	r3,31
  80d890:	1900160e 	bge	r3,r4,80d8ec <__floatsidf+0x98>
  80d894:	00c104c4 	movi	r3,1043
  80d898:	1947c83a 	sub	r3,r3,r5
  80d89c:	88c6983a 	sll	r3,r17,r3
  80d8a0:	00800434 	movhi	r2,16
  80d8a4:	10bfffc4 	addi	r2,r2,-1
  80d8a8:	1886703a 	and	r3,r3,r2
  80d8ac:	2941ffcc 	andi	r5,r5,2047
  80d8b0:	800d883a 	mov	r6,r16
  80d8b4:	0005883a 	mov	r2,zero
  80d8b8:	280a953a 	slli	r5,r5,20
  80d8bc:	31803fcc 	andi	r6,r6,255
  80d8c0:	01000434 	movhi	r4,16
  80d8c4:	300c97fa 	slli	r6,r6,31
  80d8c8:	213fffc4 	addi	r4,r4,-1
  80d8cc:	1906703a 	and	r3,r3,r4
  80d8d0:	1946b03a 	or	r3,r3,r5
  80d8d4:	1986b03a 	or	r3,r3,r6
  80d8d8:	dfc00217 	ldw	ra,8(sp)
  80d8dc:	dc400117 	ldw	r17,4(sp)
  80d8e0:	dc000017 	ldw	r16,0(sp)
  80d8e4:	dec00304 	addi	sp,sp,12
  80d8e8:	f800283a 	ret
  80d8ec:	00c002c4 	movi	r3,11
  80d8f0:	1887c83a 	sub	r3,r3,r2
  80d8f4:	88c6d83a 	srl	r3,r17,r3
  80d8f8:	8904983a 	sll	r2,r17,r4
  80d8fc:	01000434 	movhi	r4,16
  80d900:	213fffc4 	addi	r4,r4,-1
  80d904:	2941ffcc 	andi	r5,r5,2047
  80d908:	1906703a 	and	r3,r3,r4
  80d90c:	800d883a 	mov	r6,r16
  80d910:	003fe906 	br	80d8b8 <__alt_mem_descriptor_memory+0xff78d8b8>
  80d914:	000d883a 	mov	r6,zero
  80d918:	000b883a 	mov	r5,zero
  80d91c:	0007883a 	mov	r3,zero
  80d920:	0005883a 	mov	r2,zero
  80d924:	003fe406 	br	80d8b8 <__alt_mem_descriptor_memory+0xff78d8b8>
  80d928:	0123c83a 	sub	r17,zero,r4
  80d92c:	003fd106 	br	80d874 <__alt_mem_descriptor_memory+0xff78d874>

0080d930 <__floatunsidf>:
  80d930:	defffe04 	addi	sp,sp,-8
  80d934:	dc000015 	stw	r16,0(sp)
  80d938:	dfc00115 	stw	ra,4(sp)
  80d93c:	2021883a 	mov	r16,r4
  80d940:	20002226 	beq	r4,zero,80d9cc <__floatunsidf+0x9c>
  80d944:	080118c0 	call	80118c <__clzsi2>
  80d948:	01010784 	movi	r4,1054
  80d94c:	2089c83a 	sub	r4,r4,r2
  80d950:	01810cc4 	movi	r6,1075
  80d954:	310dc83a 	sub	r6,r6,r4
  80d958:	00c007c4 	movi	r3,31
  80d95c:	1980120e 	bge	r3,r6,80d9a8 <__floatunsidf+0x78>
  80d960:	00c104c4 	movi	r3,1043
  80d964:	1907c83a 	sub	r3,r3,r4
  80d968:	80ca983a 	sll	r5,r16,r3
  80d96c:	00800434 	movhi	r2,16
  80d970:	10bfffc4 	addi	r2,r2,-1
  80d974:	2101ffcc 	andi	r4,r4,2047
  80d978:	0021883a 	mov	r16,zero
  80d97c:	288a703a 	and	r5,r5,r2
  80d980:	2008953a 	slli	r4,r4,20
  80d984:	00c00434 	movhi	r3,16
  80d988:	18ffffc4 	addi	r3,r3,-1
  80d98c:	28c6703a 	and	r3,r5,r3
  80d990:	8005883a 	mov	r2,r16
  80d994:	1906b03a 	or	r3,r3,r4
  80d998:	dfc00117 	ldw	ra,4(sp)
  80d99c:	dc000017 	ldw	r16,0(sp)
  80d9a0:	dec00204 	addi	sp,sp,8
  80d9a4:	f800283a 	ret
  80d9a8:	00c002c4 	movi	r3,11
  80d9ac:	188bc83a 	sub	r5,r3,r2
  80d9b0:	814ad83a 	srl	r5,r16,r5
  80d9b4:	00c00434 	movhi	r3,16
  80d9b8:	18ffffc4 	addi	r3,r3,-1
  80d9bc:	81a0983a 	sll	r16,r16,r6
  80d9c0:	2101ffcc 	andi	r4,r4,2047
  80d9c4:	28ca703a 	and	r5,r5,r3
  80d9c8:	003fed06 	br	80d980 <__alt_mem_descriptor_memory+0xff78d980>
  80d9cc:	0009883a 	mov	r4,zero
  80d9d0:	000b883a 	mov	r5,zero
  80d9d4:	003fea06 	br	80d980 <__alt_mem_descriptor_memory+0xff78d980>

0080d9d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80d9d8:	defffe04 	addi	sp,sp,-8
  80d9dc:	dfc00115 	stw	ra,4(sp)
  80d9e0:	df000015 	stw	fp,0(sp)
  80d9e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80d9e8:	d0a01a17 	ldw	r2,-32664(gp)
  80d9ec:	10000326 	beq	r2,zero,80d9fc <alt_get_errno+0x24>
  80d9f0:	d0a01a17 	ldw	r2,-32664(gp)
  80d9f4:	103ee83a 	callr	r2
  80d9f8:	00000106 	br	80da00 <alt_get_errno+0x28>
  80d9fc:	d0a03404 	addi	r2,gp,-32560
}
  80da00:	e037883a 	mov	sp,fp
  80da04:	dfc00117 	ldw	ra,4(sp)
  80da08:	df000017 	ldw	fp,0(sp)
  80da0c:	dec00204 	addi	sp,sp,8
  80da10:	f800283a 	ret

0080da14 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
  80da14:	defffb04 	addi	sp,sp,-20
  80da18:	dfc00415 	stw	ra,16(sp)
  80da1c:	df000315 	stw	fp,12(sp)
  80da20:	df000304 	addi	fp,sp,12
  80da24:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
  80da28:	e0bfff17 	ldw	r2,-4(fp)
  80da2c:	10000616 	blt	r2,zero,80da48 <close+0x34>
  80da30:	e0bfff17 	ldw	r2,-4(fp)
  80da34:	10c00324 	muli	r3,r2,12
  80da38:	00802074 	movhi	r2,129
  80da3c:	10937e04 	addi	r2,r2,19960
  80da40:	1885883a 	add	r2,r3,r2
  80da44:	00000106 	br	80da4c <close+0x38>
  80da48:	0005883a 	mov	r2,zero
  80da4c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
  80da50:	e0bffd17 	ldw	r2,-12(fp)
  80da54:	10001926 	beq	r2,zero,80dabc <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
  80da58:	e0bffd17 	ldw	r2,-12(fp)
  80da5c:	10800017 	ldw	r2,0(r2)
  80da60:	10800417 	ldw	r2,16(r2)
  80da64:	10000626 	beq	r2,zero,80da80 <close+0x6c>
  80da68:	e0bffd17 	ldw	r2,-12(fp)
  80da6c:	10800017 	ldw	r2,0(r2)
  80da70:	10800417 	ldw	r2,16(r2)
  80da74:	e13ffd17 	ldw	r4,-12(fp)
  80da78:	103ee83a 	callr	r2
  80da7c:	00000106 	br	80da84 <close+0x70>
  80da80:	0005883a 	mov	r2,zero
  80da84:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
  80da88:	e13fff17 	ldw	r4,-4(fp)
  80da8c:	080dfe80 	call	80dfe8 <alt_release_fd>
    if (rval < 0)
  80da90:	e0bffe17 	ldw	r2,-8(fp)
  80da94:	1000070e 	bge	r2,zero,80dab4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
  80da98:	080d9d80 	call	80d9d8 <alt_get_errno>
  80da9c:	1007883a 	mov	r3,r2
  80daa0:	e0bffe17 	ldw	r2,-8(fp)
  80daa4:	0085c83a 	sub	r2,zero,r2
  80daa8:	18800015 	stw	r2,0(r3)
      return -1;
  80daac:	00bfffc4 	movi	r2,-1
  80dab0:	00000706 	br	80dad0 <close+0xbc>
    }
    return 0;
  80dab4:	0005883a 	mov	r2,zero
  80dab8:	00000506 	br	80dad0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dabc:	080d9d80 	call	80d9d8 <alt_get_errno>
  80dac0:	1007883a 	mov	r3,r2
  80dac4:	00801444 	movi	r2,81
  80dac8:	18800015 	stw	r2,0(r3)
    return -1;
  80dacc:	00bfffc4 	movi	r2,-1
  }
}
  80dad0:	e037883a 	mov	sp,fp
  80dad4:	dfc00117 	ldw	ra,4(sp)
  80dad8:	df000017 	ldw	fp,0(sp)
  80dadc:	dec00204 	addi	sp,sp,8
  80dae0:	f800283a 	ret

0080dae4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
  80dae4:	defffc04 	addi	sp,sp,-16
  80dae8:	df000315 	stw	fp,12(sp)
  80daec:	df000304 	addi	fp,sp,12
  80daf0:	e13ffd15 	stw	r4,-12(fp)
  80daf4:	e17ffe15 	stw	r5,-8(fp)
  80daf8:	e1bfff15 	stw	r6,-4(fp)
  return len;
  80dafc:	e0bfff17 	ldw	r2,-4(fp)
}
  80db00:	e037883a 	mov	sp,fp
  80db04:	df000017 	ldw	fp,0(sp)
  80db08:	dec00104 	addi	sp,sp,4
  80db0c:	f800283a 	ret

0080db10 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80db10:	defffe04 	addi	sp,sp,-8
  80db14:	dfc00115 	stw	ra,4(sp)
  80db18:	df000015 	stw	fp,0(sp)
  80db1c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80db20:	d0a01a17 	ldw	r2,-32664(gp)
  80db24:	10000326 	beq	r2,zero,80db34 <alt_get_errno+0x24>
  80db28:	d0a01a17 	ldw	r2,-32664(gp)
  80db2c:	103ee83a 	callr	r2
  80db30:	00000106 	br	80db38 <alt_get_errno+0x28>
  80db34:	d0a03404 	addi	r2,gp,-32560
}
  80db38:	e037883a 	mov	sp,fp
  80db3c:	dfc00117 	ldw	ra,4(sp)
  80db40:	df000017 	ldw	fp,0(sp)
  80db44:	dec00204 	addi	sp,sp,8
  80db48:	f800283a 	ret

0080db4c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
  80db4c:	defffb04 	addi	sp,sp,-20
  80db50:	dfc00415 	stw	ra,16(sp)
  80db54:	df000315 	stw	fp,12(sp)
  80db58:	df000304 	addi	fp,sp,12
  80db5c:	e13ffe15 	stw	r4,-8(fp)
  80db60:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80db64:	e0bffe17 	ldw	r2,-8(fp)
  80db68:	10000616 	blt	r2,zero,80db84 <fstat+0x38>
  80db6c:	e0bffe17 	ldw	r2,-8(fp)
  80db70:	10c00324 	muli	r3,r2,12
  80db74:	00802074 	movhi	r2,129
  80db78:	10937e04 	addi	r2,r2,19960
  80db7c:	1885883a 	add	r2,r3,r2
  80db80:	00000106 	br	80db88 <fstat+0x3c>
  80db84:	0005883a 	mov	r2,zero
  80db88:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
  80db8c:	e0bffd17 	ldw	r2,-12(fp)
  80db90:	10001026 	beq	r2,zero,80dbd4 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
  80db94:	e0bffd17 	ldw	r2,-12(fp)
  80db98:	10800017 	ldw	r2,0(r2)
  80db9c:	10800817 	ldw	r2,32(r2)
  80dba0:	10000726 	beq	r2,zero,80dbc0 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
  80dba4:	e0bffd17 	ldw	r2,-12(fp)
  80dba8:	10800017 	ldw	r2,0(r2)
  80dbac:	10800817 	ldw	r2,32(r2)
  80dbb0:	e17fff17 	ldw	r5,-4(fp)
  80dbb4:	e13ffd17 	ldw	r4,-12(fp)
  80dbb8:	103ee83a 	callr	r2
  80dbbc:	00000a06 	br	80dbe8 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
  80dbc0:	e0bfff17 	ldw	r2,-4(fp)
  80dbc4:	00c80004 	movi	r3,8192
  80dbc8:	10c00115 	stw	r3,4(r2)
      return 0;
  80dbcc:	0005883a 	mov	r2,zero
  80dbd0:	00000506 	br	80dbe8 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dbd4:	080db100 	call	80db10 <alt_get_errno>
  80dbd8:	1007883a 	mov	r3,r2
  80dbdc:	00801444 	movi	r2,81
  80dbe0:	18800015 	stw	r2,0(r3)
    return -1;
  80dbe4:	00bfffc4 	movi	r2,-1
  }
}
  80dbe8:	e037883a 	mov	sp,fp
  80dbec:	dfc00117 	ldw	ra,4(sp)
  80dbf0:	df000017 	ldw	fp,0(sp)
  80dbf4:	dec00204 	addi	sp,sp,8
  80dbf8:	f800283a 	ret

0080dbfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dbfc:	defffe04 	addi	sp,sp,-8
  80dc00:	dfc00115 	stw	ra,4(sp)
  80dc04:	df000015 	stw	fp,0(sp)
  80dc08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dc0c:	d0a01a17 	ldw	r2,-32664(gp)
  80dc10:	10000326 	beq	r2,zero,80dc20 <alt_get_errno+0x24>
  80dc14:	d0a01a17 	ldw	r2,-32664(gp)
  80dc18:	103ee83a 	callr	r2
  80dc1c:	00000106 	br	80dc24 <alt_get_errno+0x28>
  80dc20:	d0a03404 	addi	r2,gp,-32560
}
  80dc24:	e037883a 	mov	sp,fp
  80dc28:	dfc00117 	ldw	ra,4(sp)
  80dc2c:	df000017 	ldw	fp,0(sp)
  80dc30:	dec00204 	addi	sp,sp,8
  80dc34:	f800283a 	ret

0080dc38 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
  80dc38:	deffed04 	addi	sp,sp,-76
  80dc3c:	dfc01215 	stw	ra,72(sp)
  80dc40:	df001115 	stw	fp,68(sp)
  80dc44:	df001104 	addi	fp,sp,68
  80dc48:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dc4c:	e0bfff17 	ldw	r2,-4(fp)
  80dc50:	10000616 	blt	r2,zero,80dc6c <isatty+0x34>
  80dc54:	e0bfff17 	ldw	r2,-4(fp)
  80dc58:	10c00324 	muli	r3,r2,12
  80dc5c:	00802074 	movhi	r2,129
  80dc60:	10937e04 	addi	r2,r2,19960
  80dc64:	1885883a 	add	r2,r3,r2
  80dc68:	00000106 	br	80dc70 <isatty+0x38>
  80dc6c:	0005883a 	mov	r2,zero
  80dc70:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
  80dc74:	e0bfef17 	ldw	r2,-68(fp)
  80dc78:	10000e26 	beq	r2,zero,80dcb4 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
  80dc7c:	e0bfef17 	ldw	r2,-68(fp)
  80dc80:	10800017 	ldw	r2,0(r2)
  80dc84:	10800817 	ldw	r2,32(r2)
  80dc88:	1000021e 	bne	r2,zero,80dc94 <isatty+0x5c>
    {
      return 1;
  80dc8c:	00800044 	movi	r2,1
  80dc90:	00000d06 	br	80dcc8 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
  80dc94:	e0bff004 	addi	r2,fp,-64
  80dc98:	100b883a 	mov	r5,r2
  80dc9c:	e13fff17 	ldw	r4,-4(fp)
  80dca0:	080db4c0 	call	80db4c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
  80dca4:	e0bff117 	ldw	r2,-60(fp)
  80dca8:	10880020 	cmpeqi	r2,r2,8192
  80dcac:	10803fcc 	andi	r2,r2,255
  80dcb0:	00000506 	br	80dcc8 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
  80dcb4:	080dbfc0 	call	80dbfc <alt_get_errno>
  80dcb8:	1007883a 	mov	r3,r2
  80dcbc:	00801444 	movi	r2,81
  80dcc0:	18800015 	stw	r2,0(r3)
    return 0;
  80dcc4:	0005883a 	mov	r2,zero
  }
}
  80dcc8:	e037883a 	mov	sp,fp
  80dccc:	dfc00117 	ldw	ra,4(sp)
  80dcd0:	df000017 	ldw	fp,0(sp)
  80dcd4:	dec00204 	addi	sp,sp,8
  80dcd8:	f800283a 	ret

0080dcdc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80dcdc:	defffe04 	addi	sp,sp,-8
  80dce0:	dfc00115 	stw	ra,4(sp)
  80dce4:	df000015 	stw	fp,0(sp)
  80dce8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dcec:	d0a01a17 	ldw	r2,-32664(gp)
  80dcf0:	10000326 	beq	r2,zero,80dd00 <alt_get_errno+0x24>
  80dcf4:	d0a01a17 	ldw	r2,-32664(gp)
  80dcf8:	103ee83a 	callr	r2
  80dcfc:	00000106 	br	80dd04 <alt_get_errno+0x28>
  80dd00:	d0a03404 	addi	r2,gp,-32560
}
  80dd04:	e037883a 	mov	sp,fp
  80dd08:	dfc00117 	ldw	ra,4(sp)
  80dd0c:	df000017 	ldw	fp,0(sp)
  80dd10:	dec00204 	addi	sp,sp,8
  80dd14:	f800283a 	ret

0080dd18 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
  80dd18:	defff904 	addi	sp,sp,-28
  80dd1c:	dfc00615 	stw	ra,24(sp)
  80dd20:	df000515 	stw	fp,20(sp)
  80dd24:	df000504 	addi	fp,sp,20
  80dd28:	e13ffd15 	stw	r4,-12(fp)
  80dd2c:	e17ffe15 	stw	r5,-8(fp)
  80dd30:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
  80dd34:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80dd38:	e0bffd17 	ldw	r2,-12(fp)
  80dd3c:	10000616 	blt	r2,zero,80dd58 <lseek+0x40>
  80dd40:	e0bffd17 	ldw	r2,-12(fp)
  80dd44:	10c00324 	muli	r3,r2,12
  80dd48:	00802074 	movhi	r2,129
  80dd4c:	10937e04 	addi	r2,r2,19960
  80dd50:	1885883a 	add	r2,r3,r2
  80dd54:	00000106 	br	80dd5c <lseek+0x44>
  80dd58:	0005883a 	mov	r2,zero
  80dd5c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
  80dd60:	e0bffc17 	ldw	r2,-16(fp)
  80dd64:	10001026 	beq	r2,zero,80dda8 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
  80dd68:	e0bffc17 	ldw	r2,-16(fp)
  80dd6c:	10800017 	ldw	r2,0(r2)
  80dd70:	10800717 	ldw	r2,28(r2)
  80dd74:	10000926 	beq	r2,zero,80dd9c <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
  80dd78:	e0bffc17 	ldw	r2,-16(fp)
  80dd7c:	10800017 	ldw	r2,0(r2)
  80dd80:	10800717 	ldw	r2,28(r2)
  80dd84:	e1bfff17 	ldw	r6,-4(fp)
  80dd88:	e17ffe17 	ldw	r5,-8(fp)
  80dd8c:	e13ffc17 	ldw	r4,-16(fp)
  80dd90:	103ee83a 	callr	r2
  80dd94:	e0bffb15 	stw	r2,-20(fp)
  80dd98:	00000506 	br	80ddb0 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
  80dd9c:	00bfde84 	movi	r2,-134
  80dda0:	e0bffb15 	stw	r2,-20(fp)
  80dda4:	00000206 	br	80ddb0 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
  80dda8:	00bfebc4 	movi	r2,-81
  80ddac:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
  80ddb0:	e0bffb17 	ldw	r2,-20(fp)
  80ddb4:	1000070e 	bge	r2,zero,80ddd4 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
  80ddb8:	080dcdc0 	call	80dcdc <alt_get_errno>
  80ddbc:	1007883a 	mov	r3,r2
  80ddc0:	e0bffb17 	ldw	r2,-20(fp)
  80ddc4:	0085c83a 	sub	r2,zero,r2
  80ddc8:	18800015 	stw	r2,0(r3)
    rc = -1;
  80ddcc:	00bfffc4 	movi	r2,-1
  80ddd0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
  80ddd4:	e0bffb17 	ldw	r2,-20(fp)
}
  80ddd8:	e037883a 	mov	sp,fp
  80dddc:	dfc00117 	ldw	ra,4(sp)
  80dde0:	df000017 	ldw	fp,0(sp)
  80dde4:	dec00204 	addi	sp,sp,8
  80dde8:	f800283a 	ret

0080ddec <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
  80ddec:	defffd04 	addi	sp,sp,-12
  80ddf0:	dfc00215 	stw	ra,8(sp)
  80ddf4:	df000115 	stw	fp,4(sp)
  80ddf8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
  80ddfc:	0009883a 	mov	r4,zero
  80de00:	080e2940 	call	80e294 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
  80de04:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
  80de08:	080e2cc0 	call	80e2cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
  80de0c:	01802074 	movhi	r6,129
  80de10:	31905404 	addi	r6,r6,16720
  80de14:	01402074 	movhi	r5,129
  80de18:	29505404 	addi	r5,r5,16720
  80de1c:	01002074 	movhi	r4,129
  80de20:	21105404 	addi	r4,r4,16720
  80de24:	08130180 	call	813018 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
  80de28:	0812aa80 	call	812aa8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
  80de2c:	01002074 	movhi	r4,129
  80de30:	210ac204 	addi	r4,r4,11016
  80de34:	08139600 	call	813960 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
  80de38:	d0a03517 	ldw	r2,-32556(gp)
  80de3c:	d0e03617 	ldw	r3,-32552(gp)
  80de40:	d1203717 	ldw	r4,-32548(gp)
  80de44:	200d883a 	mov	r6,r4
  80de48:	180b883a 	mov	r5,r3
  80de4c:	1009883a 	mov	r4,r2
  80de50:	08009280 	call	800928 <main>
  80de54:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
  80de58:	01000044 	movi	r4,1
  80de5c:	080da140 	call	80da14 <close>
  exit (result);
  80de60:	e13fff17 	ldw	r4,-4(fp)
  80de64:	08139740 	call	813974 <exit>

0080de68 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
  80de68:	defffe04 	addi	sp,sp,-8
  80de6c:	df000115 	stw	fp,4(sp)
  80de70:	df000104 	addi	fp,sp,4
  80de74:	e13fff15 	stw	r4,-4(fp)
}
  80de78:	0001883a 	nop
  80de7c:	e037883a 	mov	sp,fp
  80de80:	df000017 	ldw	fp,0(sp)
  80de84:	dec00104 	addi	sp,sp,4
  80de88:	f800283a 	ret

0080de8c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
  80de8c:	defffe04 	addi	sp,sp,-8
  80de90:	df000115 	stw	fp,4(sp)
  80de94:	df000104 	addi	fp,sp,4
  80de98:	e13fff15 	stw	r4,-4(fp)
}
  80de9c:	0001883a 	nop
  80dea0:	e037883a 	mov	sp,fp
  80dea4:	df000017 	ldw	fp,0(sp)
  80dea8:	dec00104 	addi	sp,sp,4
  80deac:	f800283a 	ret

0080deb0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80deb0:	defffe04 	addi	sp,sp,-8
  80deb4:	dfc00115 	stw	ra,4(sp)
  80deb8:	df000015 	stw	fp,0(sp)
  80debc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80dec0:	d0a01a17 	ldw	r2,-32664(gp)
  80dec4:	10000326 	beq	r2,zero,80ded4 <alt_get_errno+0x24>
  80dec8:	d0a01a17 	ldw	r2,-32664(gp)
  80decc:	103ee83a 	callr	r2
  80ded0:	00000106 	br	80ded8 <alt_get_errno+0x28>
  80ded4:	d0a03404 	addi	r2,gp,-32560
}
  80ded8:	e037883a 	mov	sp,fp
  80dedc:	dfc00117 	ldw	ra,4(sp)
  80dee0:	df000017 	ldw	fp,0(sp)
  80dee4:	dec00204 	addi	sp,sp,8
  80dee8:	f800283a 	ret

0080deec <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
  80deec:	defff904 	addi	sp,sp,-28
  80def0:	dfc00615 	stw	ra,24(sp)
  80def4:	df000515 	stw	fp,20(sp)
  80def8:	df000504 	addi	fp,sp,20
  80defc:	e13ffd15 	stw	r4,-12(fp)
  80df00:	e17ffe15 	stw	r5,-8(fp)
  80df04:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80df08:	e0bffd17 	ldw	r2,-12(fp)
  80df0c:	10000616 	blt	r2,zero,80df28 <read+0x3c>
  80df10:	e0bffd17 	ldw	r2,-12(fp)
  80df14:	10c00324 	muli	r3,r2,12
  80df18:	00802074 	movhi	r2,129
  80df1c:	10937e04 	addi	r2,r2,19960
  80df20:	1885883a 	add	r2,r3,r2
  80df24:	00000106 	br	80df2c <read+0x40>
  80df28:	0005883a 	mov	r2,zero
  80df2c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80df30:	e0bffb17 	ldw	r2,-20(fp)
  80df34:	10002226 	beq	r2,zero,80dfc0 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80df38:	e0bffb17 	ldw	r2,-20(fp)
  80df3c:	10800217 	ldw	r2,8(r2)
  80df40:	108000cc 	andi	r2,r2,3
  80df44:	10800060 	cmpeqi	r2,r2,1
  80df48:	1000181e 	bne	r2,zero,80dfac <read+0xc0>
        (fd->dev->read))
  80df4c:	e0bffb17 	ldw	r2,-20(fp)
  80df50:	10800017 	ldw	r2,0(r2)
  80df54:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
  80df58:	10001426 	beq	r2,zero,80dfac <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
  80df5c:	e0bffb17 	ldw	r2,-20(fp)
  80df60:	10800017 	ldw	r2,0(r2)
  80df64:	10800517 	ldw	r2,20(r2)
  80df68:	e0ffff17 	ldw	r3,-4(fp)
  80df6c:	180d883a 	mov	r6,r3
  80df70:	e17ffe17 	ldw	r5,-8(fp)
  80df74:	e13ffb17 	ldw	r4,-20(fp)
  80df78:	103ee83a 	callr	r2
  80df7c:	e0bffc15 	stw	r2,-16(fp)
  80df80:	e0bffc17 	ldw	r2,-16(fp)
  80df84:	1000070e 	bge	r2,zero,80dfa4 <read+0xb8>
        {
          ALT_ERRNO = -rval;
  80df88:	080deb00 	call	80deb0 <alt_get_errno>
  80df8c:	1007883a 	mov	r3,r2
  80df90:	e0bffc17 	ldw	r2,-16(fp)
  80df94:	0085c83a 	sub	r2,zero,r2
  80df98:	18800015 	stw	r2,0(r3)
          return -1;
  80df9c:	00bfffc4 	movi	r2,-1
  80dfa0:	00000c06 	br	80dfd4 <read+0xe8>
        }
        return rval;
  80dfa4:	e0bffc17 	ldw	r2,-16(fp)
  80dfa8:	00000a06 	br	80dfd4 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
  80dfac:	080deb00 	call	80deb0 <alt_get_errno>
  80dfb0:	1007883a 	mov	r3,r2
  80dfb4:	00800344 	movi	r2,13
  80dfb8:	18800015 	stw	r2,0(r3)
  80dfbc:	00000406 	br	80dfd0 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
  80dfc0:	080deb00 	call	80deb0 <alt_get_errno>
  80dfc4:	1007883a 	mov	r3,r2
  80dfc8:	00801444 	movi	r2,81
  80dfcc:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80dfd0:	00bfffc4 	movi	r2,-1
}
  80dfd4:	e037883a 	mov	sp,fp
  80dfd8:	dfc00117 	ldw	ra,4(sp)
  80dfdc:	df000017 	ldw	fp,0(sp)
  80dfe0:	dec00204 	addi	sp,sp,8
  80dfe4:	f800283a 	ret

0080dfe8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
  80dfe8:	defffe04 	addi	sp,sp,-8
  80dfec:	df000115 	stw	fp,4(sp)
  80dff0:	df000104 	addi	fp,sp,4
  80dff4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
  80dff8:	e0bfff17 	ldw	r2,-4(fp)
  80dffc:	108000d0 	cmplti	r2,r2,3
  80e000:	10000d1e 	bne	r2,zero,80e038 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
  80e004:	00802074 	movhi	r2,129
  80e008:	10937e04 	addi	r2,r2,19960
  80e00c:	e0ffff17 	ldw	r3,-4(fp)
  80e010:	18c00324 	muli	r3,r3,12
  80e014:	10c5883a 	add	r2,r2,r3
  80e018:	10800204 	addi	r2,r2,8
  80e01c:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
  80e020:	00802074 	movhi	r2,129
  80e024:	10937e04 	addi	r2,r2,19960
  80e028:	e0ffff17 	ldw	r3,-4(fp)
  80e02c:	18c00324 	muli	r3,r3,12
  80e030:	10c5883a 	add	r2,r2,r3
  80e034:	10000015 	stw	zero,0(r2)
  }
}
  80e038:	0001883a 	nop
  80e03c:	e037883a 	mov	sp,fp
  80e040:	df000017 	ldw	fp,0(sp)
  80e044:	dec00104 	addi	sp,sp,4
  80e048:	f800283a 	ret

0080e04c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
  80e04c:	defff904 	addi	sp,sp,-28
  80e050:	df000615 	stw	fp,24(sp)
  80e054:	df000604 	addi	fp,sp,24
  80e058:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80e05c:	0005303a 	rdctl	r2,status
  80e060:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80e064:	e0fffe17 	ldw	r3,-8(fp)
  80e068:	00bfff84 	movi	r2,-2
  80e06c:	1884703a 	and	r2,r3,r2
  80e070:	1001703a 	wrctl	status,r2
  
  return context;
  80e074:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
  80e078:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
  80e07c:	d0a01b17 	ldw	r2,-32660(gp)
  80e080:	10c000c4 	addi	r3,r2,3
  80e084:	00bfff04 	movi	r2,-4
  80e088:	1884703a 	and	r2,r3,r2
  80e08c:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
  80e090:	d0e01b17 	ldw	r3,-32660(gp)
  80e094:	e0bfff17 	ldw	r2,-4(fp)
  80e098:	1887883a 	add	r3,r3,r2
  80e09c:	00804034 	movhi	r2,256
  80e0a0:	10800004 	addi	r2,r2,0
  80e0a4:	10c0062e 	bgeu	r2,r3,80e0c0 <sbrk+0x74>
  80e0a8:	e0bffb17 	ldw	r2,-20(fp)
  80e0ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80e0b0:	e0bffa17 	ldw	r2,-24(fp)
  80e0b4:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  80e0b8:	00bfffc4 	movi	r2,-1
  80e0bc:	00000b06 	br	80e0ec <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
  80e0c0:	d0a01b17 	ldw	r2,-32660(gp)
  80e0c4:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
  80e0c8:	d0e01b17 	ldw	r3,-32660(gp)
  80e0cc:	e0bfff17 	ldw	r2,-4(fp)
  80e0d0:	1885883a 	add	r2,r3,r2
  80e0d4:	d0a01b15 	stw	r2,-32660(gp)
  80e0d8:	e0bffb17 	ldw	r2,-20(fp)
  80e0dc:	e0bffc15 	stw	r2,-16(fp)
  80e0e0:	e0bffc17 	ldw	r2,-16(fp)
  80e0e4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
  80e0e8:	e0bffd17 	ldw	r2,-12(fp)
} 
  80e0ec:	e037883a 	mov	sp,fp
  80e0f0:	df000017 	ldw	fp,0(sp)
  80e0f4:	dec00104 	addi	sp,sp,4
  80e0f8:	f800283a 	ret

0080e0fc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  80e0fc:	defffd04 	addi	sp,sp,-12
  80e100:	dfc00215 	stw	ra,8(sp)
  80e104:	df000115 	stw	fp,4(sp)
  80e108:	df000104 	addi	fp,sp,4
  80e10c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
  80e110:	e13fff17 	ldw	r4,-4(fp)
  80e114:	08127f80 	call	8127f8 <alt_busy_sleep>
}
  80e118:	e037883a 	mov	sp,fp
  80e11c:	dfc00117 	ldw	ra,4(sp)
  80e120:	df000017 	ldw	fp,0(sp)
  80e124:	dec00204 	addi	sp,sp,8
  80e128:	f800283a 	ret

0080e12c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80e12c:	defffe04 	addi	sp,sp,-8
  80e130:	dfc00115 	stw	ra,4(sp)
  80e134:	df000015 	stw	fp,0(sp)
  80e138:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80e13c:	d0a01a17 	ldw	r2,-32664(gp)
  80e140:	10000326 	beq	r2,zero,80e150 <alt_get_errno+0x24>
  80e144:	d0a01a17 	ldw	r2,-32664(gp)
  80e148:	103ee83a 	callr	r2
  80e14c:	00000106 	br	80e154 <alt_get_errno+0x28>
  80e150:	d0a03404 	addi	r2,gp,-32560
}
  80e154:	e037883a 	mov	sp,fp
  80e158:	dfc00117 	ldw	ra,4(sp)
  80e15c:	df000017 	ldw	fp,0(sp)
  80e160:	dec00204 	addi	sp,sp,8
  80e164:	f800283a 	ret

0080e168 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
  80e168:	defff904 	addi	sp,sp,-28
  80e16c:	dfc00615 	stw	ra,24(sp)
  80e170:	df000515 	stw	fp,20(sp)
  80e174:	df000504 	addi	fp,sp,20
  80e178:	e13ffd15 	stw	r4,-12(fp)
  80e17c:	e17ffe15 	stw	r5,-8(fp)
  80e180:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
  80e184:	e0bffd17 	ldw	r2,-12(fp)
  80e188:	10000616 	blt	r2,zero,80e1a4 <write+0x3c>
  80e18c:	e0bffd17 	ldw	r2,-12(fp)
  80e190:	10c00324 	muli	r3,r2,12
  80e194:	00802074 	movhi	r2,129
  80e198:	10937e04 	addi	r2,r2,19960
  80e19c:	1885883a 	add	r2,r3,r2
  80e1a0:	00000106 	br	80e1a8 <write+0x40>
  80e1a4:	0005883a 	mov	r2,zero
  80e1a8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
  80e1ac:	e0bffb17 	ldw	r2,-20(fp)
  80e1b0:	10002126 	beq	r2,zero,80e238 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
  80e1b4:	e0bffb17 	ldw	r2,-20(fp)
  80e1b8:	10800217 	ldw	r2,8(r2)
  80e1bc:	108000cc 	andi	r2,r2,3
  80e1c0:	10001826 	beq	r2,zero,80e224 <write+0xbc>
  80e1c4:	e0bffb17 	ldw	r2,-20(fp)
  80e1c8:	10800017 	ldw	r2,0(r2)
  80e1cc:	10800617 	ldw	r2,24(r2)
  80e1d0:	10001426 	beq	r2,zero,80e224 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
  80e1d4:	e0bffb17 	ldw	r2,-20(fp)
  80e1d8:	10800017 	ldw	r2,0(r2)
  80e1dc:	10800617 	ldw	r2,24(r2)
  80e1e0:	e0ffff17 	ldw	r3,-4(fp)
  80e1e4:	180d883a 	mov	r6,r3
  80e1e8:	e17ffe17 	ldw	r5,-8(fp)
  80e1ec:	e13ffb17 	ldw	r4,-20(fp)
  80e1f0:	103ee83a 	callr	r2
  80e1f4:	e0bffc15 	stw	r2,-16(fp)
  80e1f8:	e0bffc17 	ldw	r2,-16(fp)
  80e1fc:	1000070e 	bge	r2,zero,80e21c <write+0xb4>
      {
        ALT_ERRNO = -rval;
  80e200:	080e12c0 	call	80e12c <alt_get_errno>
  80e204:	1007883a 	mov	r3,r2
  80e208:	e0bffc17 	ldw	r2,-16(fp)
  80e20c:	0085c83a 	sub	r2,zero,r2
  80e210:	18800015 	stw	r2,0(r3)
        return -1;
  80e214:	00bfffc4 	movi	r2,-1
  80e218:	00000c06 	br	80e24c <write+0xe4>
      }
      return rval;
  80e21c:	e0bffc17 	ldw	r2,-16(fp)
  80e220:	00000a06 	br	80e24c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
  80e224:	080e12c0 	call	80e12c <alt_get_errno>
  80e228:	1007883a 	mov	r3,r2
  80e22c:	00800344 	movi	r2,13
  80e230:	18800015 	stw	r2,0(r3)
  80e234:	00000406 	br	80e248 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
  80e238:	080e12c0 	call	80e12c <alt_get_errno>
  80e23c:	1007883a 	mov	r3,r2
  80e240:	00801444 	movi	r2,81
  80e244:	18800015 	stw	r2,0(r3)
  }
  return -1;
  80e248:	00bfffc4 	movi	r2,-1
}
  80e24c:	e037883a 	mov	sp,fp
  80e250:	dfc00117 	ldw	ra,4(sp)
  80e254:	df000017 	ldw	fp,0(sp)
  80e258:	dec00204 	addi	sp,sp,8
  80e25c:	f800283a 	ret

0080e260 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
  80e260:	defffd04 	addi	sp,sp,-12
  80e264:	dfc00215 	stw	ra,8(sp)
  80e268:	df000115 	stw	fp,4(sp)
  80e26c:	df000104 	addi	fp,sp,4
  80e270:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
  80e274:	d1601704 	addi	r5,gp,-32676
  80e278:	e13fff17 	ldw	r4,-4(fp)
  80e27c:	0812a040 	call	812a04 <alt_dev_llist_insert>
}
  80e280:	e037883a 	mov	sp,fp
  80e284:	dfc00117 	ldw	ra,4(sp)
  80e288:	df000017 	ldw	fp,0(sp)
  80e28c:	dec00204 	addi	sp,sp,8
  80e290:	f800283a 	ret

0080e294 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
  80e294:	defffd04 	addi	sp,sp,-12
  80e298:	dfc00215 	stw	ra,8(sp)
  80e29c:	df000115 	stw	fp,4(sp)
  80e2a0:	df000104 	addi	fp,sp,4
  80e2a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_0, nios2_0);
  80e2a8:	08136f40 	call	8136f4 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
  80e2ac:	00800044 	movi	r2,1
  80e2b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
  80e2b4:	0001883a 	nop
  80e2b8:	e037883a 	mov	sp,fp
  80e2bc:	dfc00117 	ldw	ra,4(sp)
  80e2c0:	df000017 	ldw	fp,0(sp)
  80e2c4:	dec00204 	addi	sp,sp,8
  80e2c8:	f800283a 	ret

0080e2cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
  80e2cc:	defffe04 	addi	sp,sp,-8
  80e2d0:	dfc00115 	stw	ra,4(sp)
  80e2d4:	df000015 	stw	fp,0(sp)
  80e2d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
  80e2dc:	01c0fa04 	movi	r7,1000
  80e2e0:	01800044 	movi	r6,1
  80e2e4:	000b883a 	mov	r5,zero
  80e2e8:	01004234 	movhi	r4,264
  80e2ec:	21090804 	addi	r4,r4,9248
  80e2f0:	080ee980 	call	80ee98 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART_0, jtaguart_0);
  80e2f4:	000d883a 	mov	r6,zero
  80e2f8:	000b883a 	mov	r5,zero
  80e2fc:	01002074 	movhi	r4,129
  80e300:	2113ea04 	addi	r4,r4,20392
  80e304:	080e51c0 	call	80e51c <altera_avalon_jtag_uart_init>
  80e308:	01002074 	movhi	r4,129
  80e30c:	2113e004 	addi	r4,r4,20352
  80e310:	080e2600 	call	80e260 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
  80e314:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
  80e318:	01800104 	movi	r6,4
  80e31c:	000b883a 	mov	r5,zero
  80e320:	01002074 	movhi	r4,129
  80e324:	21180204 	addi	r4,r4,24584
  80e328:	080f0240 	call	80f024 <altera_avalon_uart_init>
  80e32c:	01002074 	movhi	r4,129
  80e330:	2117f804 	addi	r4,r4,24544
  80e334:	080e2600 	call	80e260 <alt_dev_reg>
    ALTERA_ETH_TSE_INIT ( TSE_0_TSE, tse_0_tse);
  80e338:	0001883a 	nop
    ALTERA_MSGDMA_INIT ( TSE_0_DMA_RX, tse_0_dma_rx);
  80e33c:	00802074 	movhi	r2,129
  80e340:	10982c04 	addi	r2,r2,24752
  80e344:	10c00717 	ldw	r3,28(r2)
  80e348:	00802074 	movhi	r2,129
  80e34c:	10982c04 	addi	r2,r2,24752
  80e350:	10800817 	ldw	r2,32(r2)
  80e354:	100d883a 	mov	r6,r2
  80e358:	180b883a 	mov	r5,r3
  80e35c:	01002074 	movhi	r4,129
  80e360:	21182c04 	addi	r4,r4,24752
  80e364:	08114dc0 	call	8114dc <alt_msgdma_init>
    ALTERA_MSGDMA_INIT ( TSE_0_DMA_TX, tse_0_dma_tx);
  80e368:	00802074 	movhi	r2,129
  80e36c:	10984404 	addi	r2,r2,24848
  80e370:	10c00717 	ldw	r3,28(r2)
  80e374:	00802074 	movhi	r2,129
  80e378:	10984404 	addi	r2,r2,24848
  80e37c:	10800817 	ldw	r2,32(r2)
  80e380:	100d883a 	mov	r6,r2
  80e384:	180b883a 	mov	r5,r3
  80e388:	01002074 	movhi	r4,129
  80e38c:	21184404 	addi	r4,r4,24848
  80e390:	08114dc0 	call	8114dc <alt_msgdma_init>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
  80e394:	01002074 	movhi	r4,129
  80e398:	21185c04 	addi	r4,r4,24944
  80e39c:	08120400 	call	812040 <altera_onchip_flash_init>
}
  80e3a0:	0001883a 	nop
  80e3a4:	e037883a 	mov	sp,fp
  80e3a8:	dfc00117 	ldw	ra,4(sp)
  80e3ac:	df000017 	ldw	fp,0(sp)
  80e3b0:	dec00204 	addi	sp,sp,8
  80e3b4:	f800283a 	ret

0080e3b8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80e3b8:	defffa04 	addi	sp,sp,-24
  80e3bc:	dfc00515 	stw	ra,20(sp)
  80e3c0:	df000415 	stw	fp,16(sp)
  80e3c4:	df000404 	addi	fp,sp,16
  80e3c8:	e13ffd15 	stw	r4,-12(fp)
  80e3cc:	e17ffe15 	stw	r5,-8(fp)
  80e3d0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e3d4:	e0bffd17 	ldw	r2,-12(fp)
  80e3d8:	10800017 	ldw	r2,0(r2)
  80e3dc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
  80e3e0:	e0bffc17 	ldw	r2,-16(fp)
  80e3e4:	10c00a04 	addi	r3,r2,40
  80e3e8:	e0bffd17 	ldw	r2,-12(fp)
  80e3ec:	10800217 	ldw	r2,8(r2)
  80e3f0:	100f883a 	mov	r7,r2
  80e3f4:	e1bfff17 	ldw	r6,-4(fp)
  80e3f8:	e17ffe17 	ldw	r5,-8(fp)
  80e3fc:	1809883a 	mov	r4,r3
  80e400:	080e9e00 	call	80e9e0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
  80e404:	e037883a 	mov	sp,fp
  80e408:	dfc00117 	ldw	ra,4(sp)
  80e40c:	df000017 	ldw	fp,0(sp)
  80e410:	dec00204 	addi	sp,sp,8
  80e414:	f800283a 	ret

0080e418 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80e418:	defffa04 	addi	sp,sp,-24
  80e41c:	dfc00515 	stw	ra,20(sp)
  80e420:	df000415 	stw	fp,16(sp)
  80e424:	df000404 	addi	fp,sp,16
  80e428:	e13ffd15 	stw	r4,-12(fp)
  80e42c:	e17ffe15 	stw	r5,-8(fp)
  80e430:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e434:	e0bffd17 	ldw	r2,-12(fp)
  80e438:	10800017 	ldw	r2,0(r2)
  80e43c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
  80e440:	e0bffc17 	ldw	r2,-16(fp)
  80e444:	10c00a04 	addi	r3,r2,40
  80e448:	e0bffd17 	ldw	r2,-12(fp)
  80e44c:	10800217 	ldw	r2,8(r2)
  80e450:	100f883a 	mov	r7,r2
  80e454:	e1bfff17 	ldw	r6,-4(fp)
  80e458:	e17ffe17 	ldw	r5,-8(fp)
  80e45c:	1809883a 	mov	r4,r3
  80e460:	080ebfc0 	call	80ebfc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
  80e464:	e037883a 	mov	sp,fp
  80e468:	dfc00117 	ldw	ra,4(sp)
  80e46c:	df000017 	ldw	fp,0(sp)
  80e470:	dec00204 	addi	sp,sp,8
  80e474:	f800283a 	ret

0080e478 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
  80e478:	defffc04 	addi	sp,sp,-16
  80e47c:	dfc00315 	stw	ra,12(sp)
  80e480:	df000215 	stw	fp,8(sp)
  80e484:	df000204 	addi	fp,sp,8
  80e488:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
  80e48c:	e0bfff17 	ldw	r2,-4(fp)
  80e490:	10800017 	ldw	r2,0(r2)
  80e494:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
  80e498:	e0bffe17 	ldw	r2,-8(fp)
  80e49c:	10c00a04 	addi	r3,r2,40
  80e4a0:	e0bfff17 	ldw	r2,-4(fp)
  80e4a4:	10800217 	ldw	r2,8(r2)
  80e4a8:	100b883a 	mov	r5,r2
  80e4ac:	1809883a 	mov	r4,r3
  80e4b0:	080e8880 	call	80e888 <altera_avalon_jtag_uart_close>
}
  80e4b4:	e037883a 	mov	sp,fp
  80e4b8:	dfc00117 	ldw	ra,4(sp)
  80e4bc:	df000017 	ldw	fp,0(sp)
  80e4c0:	dec00204 	addi	sp,sp,8
  80e4c4:	f800283a 	ret

0080e4c8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
  80e4c8:	defffa04 	addi	sp,sp,-24
  80e4cc:	dfc00515 	stw	ra,20(sp)
  80e4d0:	df000415 	stw	fp,16(sp)
  80e4d4:	df000404 	addi	fp,sp,16
  80e4d8:	e13ffd15 	stw	r4,-12(fp)
  80e4dc:	e17ffe15 	stw	r5,-8(fp)
  80e4e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
  80e4e4:	e0bffd17 	ldw	r2,-12(fp)
  80e4e8:	10800017 	ldw	r2,0(r2)
  80e4ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
  80e4f0:	e0bffc17 	ldw	r2,-16(fp)
  80e4f4:	10800a04 	addi	r2,r2,40
  80e4f8:	e1bfff17 	ldw	r6,-4(fp)
  80e4fc:	e17ffe17 	ldw	r5,-8(fp)
  80e500:	1009883a 	mov	r4,r2
  80e504:	080e8f00 	call	80e8f0 <altera_avalon_jtag_uart_ioctl>
}
  80e508:	e037883a 	mov	sp,fp
  80e50c:	dfc00117 	ldw	ra,4(sp)
  80e510:	df000017 	ldw	fp,0(sp)
  80e514:	dec00204 	addi	sp,sp,8
  80e518:	f800283a 	ret

0080e51c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
  80e51c:	defffa04 	addi	sp,sp,-24
  80e520:	dfc00515 	stw	ra,20(sp)
  80e524:	df000415 	stw	fp,16(sp)
  80e528:	df000404 	addi	fp,sp,16
  80e52c:	e13ffd15 	stw	r4,-12(fp)
  80e530:	e17ffe15 	stw	r5,-8(fp)
  80e534:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e538:	e0bffd17 	ldw	r2,-12(fp)
  80e53c:	00c00044 	movi	r3,1
  80e540:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
  80e544:	e0bffd17 	ldw	r2,-12(fp)
  80e548:	10800017 	ldw	r2,0(r2)
  80e54c:	10800104 	addi	r2,r2,4
  80e550:	1007883a 	mov	r3,r2
  80e554:	e0bffd17 	ldw	r2,-12(fp)
  80e558:	10800817 	ldw	r2,32(r2)
  80e55c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
  80e560:	e0bffe17 	ldw	r2,-8(fp)
  80e564:	e0ffff17 	ldw	r3,-4(fp)
  80e568:	d8000015 	stw	zero,0(sp)
  80e56c:	e1fffd17 	ldw	r7,-12(fp)
  80e570:	01802074 	movhi	r6,129
  80e574:	31b97704 	addi	r6,r6,-6692
  80e578:	180b883a 	mov	r5,r3
  80e57c:	1009883a 	mov	r4,r2
  80e580:	0812cb40 	call	812cb4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
  80e584:	e0bffd17 	ldw	r2,-12(fp)
  80e588:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
  80e58c:	e0bffd17 	ldw	r2,-12(fp)
  80e590:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  80e594:	d0e03917 	ldw	r3,-32540(gp)
  80e598:	e1fffd17 	ldw	r7,-12(fp)
  80e59c:	01802074 	movhi	r6,129
  80e5a0:	31b9fa04 	addi	r6,r6,-6168
  80e5a4:	180b883a 	mov	r5,r3
  80e5a8:	1009883a 	mov	r4,r2
  80e5ac:	08126cc0 	call	8126cc <alt_alarm_start>
  80e5b0:	1000040e 	bge	r2,zero,80e5c4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
  80e5b4:	e0fffd17 	ldw	r3,-12(fp)
  80e5b8:	00a00034 	movhi	r2,32768
  80e5bc:	10bfffc4 	addi	r2,r2,-1
  80e5c0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
  80e5c4:	0001883a 	nop
  80e5c8:	e037883a 	mov	sp,fp
  80e5cc:	dfc00117 	ldw	ra,4(sp)
  80e5d0:	df000017 	ldw	fp,0(sp)
  80e5d4:	dec00204 	addi	sp,sp,8
  80e5d8:	f800283a 	ret

0080e5dc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
  80e5dc:	defff804 	addi	sp,sp,-32
  80e5e0:	df000715 	stw	fp,28(sp)
  80e5e4:	df000704 	addi	fp,sp,28
  80e5e8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
  80e5ec:	e0bfff17 	ldw	r2,-4(fp)
  80e5f0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
  80e5f4:	e0bffb17 	ldw	r2,-20(fp)
  80e5f8:	10800017 	ldw	r2,0(r2)
  80e5fc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e600:	e0bffc17 	ldw	r2,-16(fp)
  80e604:	10800104 	addi	r2,r2,4
  80e608:	10800037 	ldwio	r2,0(r2)
  80e60c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
  80e610:	e0bffd17 	ldw	r2,-12(fp)
  80e614:	1080c00c 	andi	r2,r2,768
  80e618:	10006d26 	beq	r2,zero,80e7d0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
  80e61c:	e0bffd17 	ldw	r2,-12(fp)
  80e620:	1080400c 	andi	r2,r2,256
  80e624:	10003526 	beq	r2,zero,80e6fc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
  80e628:	00800074 	movhi	r2,1
  80e62c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e630:	e0bffb17 	ldw	r2,-20(fp)
  80e634:	10800a17 	ldw	r2,40(r2)
  80e638:	10800044 	addi	r2,r2,1
  80e63c:	1081ffcc 	andi	r2,r2,2047
  80e640:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
  80e644:	e0bffb17 	ldw	r2,-20(fp)
  80e648:	10c00b17 	ldw	r3,44(r2)
  80e64c:	e0bffe17 	ldw	r2,-8(fp)
  80e650:	18801526 	beq	r3,r2,80e6a8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
  80e654:	e0bffc17 	ldw	r2,-16(fp)
  80e658:	10800037 	ldwio	r2,0(r2)
  80e65c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
  80e660:	e0bff917 	ldw	r2,-28(fp)
  80e664:	10a0000c 	andi	r2,r2,32768
  80e668:	10001126 	beq	r2,zero,80e6b0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
  80e66c:	e0bffb17 	ldw	r2,-20(fp)
  80e670:	10800a17 	ldw	r2,40(r2)
  80e674:	e0fff917 	ldw	r3,-28(fp)
  80e678:	1809883a 	mov	r4,r3
  80e67c:	e0fffb17 	ldw	r3,-20(fp)
  80e680:	1885883a 	add	r2,r3,r2
  80e684:	10800e04 	addi	r2,r2,56
  80e688:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e68c:	e0bffb17 	ldw	r2,-20(fp)
  80e690:	10800a17 	ldw	r2,40(r2)
  80e694:	10800044 	addi	r2,r2,1
  80e698:	10c1ffcc 	andi	r3,r2,2047
  80e69c:	e0bffb17 	ldw	r2,-20(fp)
  80e6a0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
  80e6a4:	003fe206 	br	80e630 <__alt_mem_descriptor_memory+0xff78e630>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
  80e6a8:	0001883a 	nop
  80e6ac:	00000106 	br	80e6b4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
  80e6b0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
  80e6b4:	e0bff917 	ldw	r2,-28(fp)
  80e6b8:	10bfffec 	andhi	r2,r2,65535
  80e6bc:	10000f26 	beq	r2,zero,80e6fc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80e6c0:	e0bffb17 	ldw	r2,-20(fp)
  80e6c4:	10c00817 	ldw	r3,32(r2)
  80e6c8:	00bfff84 	movi	r2,-2
  80e6cc:	1886703a 	and	r3,r3,r2
  80e6d0:	e0bffb17 	ldw	r2,-20(fp)
  80e6d4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
  80e6d8:	e0bffc17 	ldw	r2,-16(fp)
  80e6dc:	10800104 	addi	r2,r2,4
  80e6e0:	1007883a 	mov	r3,r2
  80e6e4:	e0bffb17 	ldw	r2,-20(fp)
  80e6e8:	10800817 	ldw	r2,32(r2)
  80e6ec:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e6f0:	e0bffc17 	ldw	r2,-16(fp)
  80e6f4:	10800104 	addi	r2,r2,4
  80e6f8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
  80e6fc:	e0bffd17 	ldw	r2,-12(fp)
  80e700:	1080800c 	andi	r2,r2,512
  80e704:	103fbe26 	beq	r2,zero,80e600 <__alt_mem_descriptor_memory+0xff78e600>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
  80e708:	e0bffd17 	ldw	r2,-12(fp)
  80e70c:	1004d43a 	srli	r2,r2,16
  80e710:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e714:	00001406 	br	80e768 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
  80e718:	e0bffc17 	ldw	r2,-16(fp)
  80e71c:	e0fffb17 	ldw	r3,-20(fp)
  80e720:	18c00d17 	ldw	r3,52(r3)
  80e724:	e13ffb17 	ldw	r4,-20(fp)
  80e728:	20c7883a 	add	r3,r4,r3
  80e72c:	18c20e04 	addi	r3,r3,2104
  80e730:	18c00003 	ldbu	r3,0(r3)
  80e734:	18c03fcc 	andi	r3,r3,255
  80e738:	18c0201c 	xori	r3,r3,128
  80e73c:	18ffe004 	addi	r3,r3,-128
  80e740:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80e744:	e0bffb17 	ldw	r2,-20(fp)
  80e748:	10800d17 	ldw	r2,52(r2)
  80e74c:	10800044 	addi	r2,r2,1
  80e750:	10c1ffcc 	andi	r3,r2,2047
  80e754:	e0bffb17 	ldw	r2,-20(fp)
  80e758:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
  80e75c:	e0bffa17 	ldw	r2,-24(fp)
  80e760:	10bfffc4 	addi	r2,r2,-1
  80e764:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
  80e768:	e0bffa17 	ldw	r2,-24(fp)
  80e76c:	10000526 	beq	r2,zero,80e784 <altera_avalon_jtag_uart_irq+0x1a8>
  80e770:	e0bffb17 	ldw	r2,-20(fp)
  80e774:	10c00d17 	ldw	r3,52(r2)
  80e778:	e0bffb17 	ldw	r2,-20(fp)
  80e77c:	10800c17 	ldw	r2,48(r2)
  80e780:	18bfe51e 	bne	r3,r2,80e718 <__alt_mem_descriptor_memory+0xff78e718>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
  80e784:	e0bffa17 	ldw	r2,-24(fp)
  80e788:	103f9d26 	beq	r2,zero,80e600 <__alt_mem_descriptor_memory+0xff78e600>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80e78c:	e0bffb17 	ldw	r2,-20(fp)
  80e790:	10c00817 	ldw	r3,32(r2)
  80e794:	00bfff44 	movi	r2,-3
  80e798:	1886703a 	and	r3,r3,r2
  80e79c:	e0bffb17 	ldw	r2,-20(fp)
  80e7a0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80e7a4:	e0bffb17 	ldw	r2,-20(fp)
  80e7a8:	10800017 	ldw	r2,0(r2)
  80e7ac:	10800104 	addi	r2,r2,4
  80e7b0:	1007883a 	mov	r3,r2
  80e7b4:	e0bffb17 	ldw	r2,-20(fp)
  80e7b8:	10800817 	ldw	r2,32(r2)
  80e7bc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
  80e7c0:	e0bffc17 	ldw	r2,-16(fp)
  80e7c4:	10800104 	addi	r2,r2,4
  80e7c8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
  80e7cc:	003f8c06 	br	80e600 <__alt_mem_descriptor_memory+0xff78e600>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
  80e7d0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
  80e7d4:	0001883a 	nop
  80e7d8:	e037883a 	mov	sp,fp
  80e7dc:	df000017 	ldw	fp,0(sp)
  80e7e0:	dec00104 	addi	sp,sp,4
  80e7e4:	f800283a 	ret

0080e7e8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
  80e7e8:	defff804 	addi	sp,sp,-32
  80e7ec:	df000715 	stw	fp,28(sp)
  80e7f0:	df000704 	addi	fp,sp,28
  80e7f4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
  80e7f8:	e0bffb17 	ldw	r2,-20(fp)
  80e7fc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
  80e800:	e0bff917 	ldw	r2,-28(fp)
  80e804:	10800017 	ldw	r2,0(r2)
  80e808:	10800104 	addi	r2,r2,4
  80e80c:	10800037 	ldwio	r2,0(r2)
  80e810:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
  80e814:	e0bffa17 	ldw	r2,-24(fp)
  80e818:	1081000c 	andi	r2,r2,1024
  80e81c:	10000b26 	beq	r2,zero,80e84c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
  80e820:	e0bff917 	ldw	r2,-28(fp)
  80e824:	10800017 	ldw	r2,0(r2)
  80e828:	10800104 	addi	r2,r2,4
  80e82c:	1007883a 	mov	r3,r2
  80e830:	e0bff917 	ldw	r2,-28(fp)
  80e834:	10800817 	ldw	r2,32(r2)
  80e838:	10810014 	ori	r2,r2,1024
  80e83c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
  80e840:	e0bff917 	ldw	r2,-28(fp)
  80e844:	10000915 	stw	zero,36(r2)
  80e848:	00000a06 	br	80e874 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
  80e84c:	e0bff917 	ldw	r2,-28(fp)
  80e850:	10c00917 	ldw	r3,36(r2)
  80e854:	00a00034 	movhi	r2,32768
  80e858:	10bfff04 	addi	r2,r2,-4
  80e85c:	10c00536 	bltu	r2,r3,80e874 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
  80e860:	e0bff917 	ldw	r2,-28(fp)
  80e864:	10800917 	ldw	r2,36(r2)
  80e868:	10c00044 	addi	r3,r2,1
  80e86c:	e0bff917 	ldw	r2,-28(fp)
  80e870:	10c00915 	stw	r3,36(r2)
  80e874:	d0a03917 	ldw	r2,-32540(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
  80e878:	e037883a 	mov	sp,fp
  80e87c:	df000017 	ldw	fp,0(sp)
  80e880:	dec00104 	addi	sp,sp,4
  80e884:	f800283a 	ret

0080e888 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
  80e888:	defffd04 	addi	sp,sp,-12
  80e88c:	df000215 	stw	fp,8(sp)
  80e890:	df000204 	addi	fp,sp,8
  80e894:	e13ffe15 	stw	r4,-8(fp)
  80e898:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e89c:	00000506 	br	80e8b4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80e8a0:	e0bfff17 	ldw	r2,-4(fp)
  80e8a4:	1090000c 	andi	r2,r2,16384
  80e8a8:	10000226 	beq	r2,zero,80e8b4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80e8ac:	00bffd44 	movi	r2,-11
  80e8b0:	00000b06 	br	80e8e0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
  80e8b4:	e0bffe17 	ldw	r2,-8(fp)
  80e8b8:	10c00d17 	ldw	r3,52(r2)
  80e8bc:	e0bffe17 	ldw	r2,-8(fp)
  80e8c0:	10800c17 	ldw	r2,48(r2)
  80e8c4:	18800526 	beq	r3,r2,80e8dc <altera_avalon_jtag_uart_close+0x54>
  80e8c8:	e0bffe17 	ldw	r2,-8(fp)
  80e8cc:	10c00917 	ldw	r3,36(r2)
  80e8d0:	e0bffe17 	ldw	r2,-8(fp)
  80e8d4:	10800117 	ldw	r2,4(r2)
  80e8d8:	18bff136 	bltu	r3,r2,80e8a0 <__alt_mem_descriptor_memory+0xff78e8a0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80e8dc:	0005883a 	mov	r2,zero
}
  80e8e0:	e037883a 	mov	sp,fp
  80e8e4:	df000017 	ldw	fp,0(sp)
  80e8e8:	dec00104 	addi	sp,sp,4
  80e8ec:	f800283a 	ret

0080e8f0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
  80e8f0:	defffa04 	addi	sp,sp,-24
  80e8f4:	df000515 	stw	fp,20(sp)
  80e8f8:	df000504 	addi	fp,sp,20
  80e8fc:	e13ffd15 	stw	r4,-12(fp)
  80e900:	e17ffe15 	stw	r5,-8(fp)
  80e904:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
  80e908:	00bff9c4 	movi	r2,-25
  80e90c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
  80e910:	e0bffe17 	ldw	r2,-8(fp)
  80e914:	10da8060 	cmpeqi	r3,r2,27137
  80e918:	1800031e 	bne	r3,zero,80e928 <altera_avalon_jtag_uart_ioctl+0x38>
  80e91c:	109a80a0 	cmpeqi	r2,r2,27138
  80e920:	1000181e 	bne	r2,zero,80e984 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
  80e924:	00002906 	br	80e9cc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
  80e928:	e0bffd17 	ldw	r2,-12(fp)
  80e92c:	10c00117 	ldw	r3,4(r2)
  80e930:	00a00034 	movhi	r2,32768
  80e934:	10bfffc4 	addi	r2,r2,-1
  80e938:	18802126 	beq	r3,r2,80e9c0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
  80e93c:	e0bfff17 	ldw	r2,-4(fp)
  80e940:	10800017 	ldw	r2,0(r2)
  80e944:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
  80e948:	e0bffc17 	ldw	r2,-16(fp)
  80e94c:	10800090 	cmplti	r2,r2,2
  80e950:	1000061e 	bne	r2,zero,80e96c <altera_avalon_jtag_uart_ioctl+0x7c>
  80e954:	e0fffc17 	ldw	r3,-16(fp)
  80e958:	00a00034 	movhi	r2,32768
  80e95c:	10bfffc4 	addi	r2,r2,-1
  80e960:	18800226 	beq	r3,r2,80e96c <altera_avalon_jtag_uart_ioctl+0x7c>
  80e964:	e0bffc17 	ldw	r2,-16(fp)
  80e968:	00000206 	br	80e974 <altera_avalon_jtag_uart_ioctl+0x84>
  80e96c:	00a00034 	movhi	r2,32768
  80e970:	10bfff84 	addi	r2,r2,-2
  80e974:	e0fffd17 	ldw	r3,-12(fp)
  80e978:	18800115 	stw	r2,4(r3)
      rc = 0;
  80e97c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80e980:	00000f06 	br	80e9c0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
  80e984:	e0bffd17 	ldw	r2,-12(fp)
  80e988:	10c00117 	ldw	r3,4(r2)
  80e98c:	00a00034 	movhi	r2,32768
  80e990:	10bfffc4 	addi	r2,r2,-1
  80e994:	18800c26 	beq	r3,r2,80e9c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
  80e998:	e0bffd17 	ldw	r2,-12(fp)
  80e99c:	10c00917 	ldw	r3,36(r2)
  80e9a0:	e0bffd17 	ldw	r2,-12(fp)
  80e9a4:	10800117 	ldw	r2,4(r2)
  80e9a8:	1885803a 	cmpltu	r2,r3,r2
  80e9ac:	10c03fcc 	andi	r3,r2,255
  80e9b0:	e0bfff17 	ldw	r2,-4(fp)
  80e9b4:	10c00015 	stw	r3,0(r2)
      rc = 0;
  80e9b8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
  80e9bc:	00000206 	br	80e9c8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
  80e9c0:	0001883a 	nop
  80e9c4:	00000106 	br	80e9cc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
  80e9c8:	0001883a 	nop

  default:
    break;
  }

  return rc;
  80e9cc:	e0bffb17 	ldw	r2,-20(fp)
}
  80e9d0:	e037883a 	mov	sp,fp
  80e9d4:	df000017 	ldw	fp,0(sp)
  80e9d8:	dec00104 	addi	sp,sp,4
  80e9dc:	f800283a 	ret

0080e9e0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
  80e9e0:	defff304 	addi	sp,sp,-52
  80e9e4:	dfc00c15 	stw	ra,48(sp)
  80e9e8:	df000b15 	stw	fp,44(sp)
  80e9ec:	df000b04 	addi	fp,sp,44
  80e9f0:	e13ffc15 	stw	r4,-16(fp)
  80e9f4:	e17ffd15 	stw	r5,-12(fp)
  80e9f8:	e1bffe15 	stw	r6,-8(fp)
  80e9fc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
  80ea00:	e0bffd17 	ldw	r2,-12(fp)
  80ea04:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80ea08:	00004706 	br	80eb28 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
  80ea0c:	e0bffc17 	ldw	r2,-16(fp)
  80ea10:	10800a17 	ldw	r2,40(r2)
  80ea14:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
  80ea18:	e0bffc17 	ldw	r2,-16(fp)
  80ea1c:	10800b17 	ldw	r2,44(r2)
  80ea20:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
  80ea24:	e0fff717 	ldw	r3,-36(fp)
  80ea28:	e0bff817 	ldw	r2,-32(fp)
  80ea2c:	18800536 	bltu	r3,r2,80ea44 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
  80ea30:	e0fff717 	ldw	r3,-36(fp)
  80ea34:	e0bff817 	ldw	r2,-32(fp)
  80ea38:	1885c83a 	sub	r2,r3,r2
  80ea3c:	e0bff615 	stw	r2,-40(fp)
  80ea40:	00000406 	br	80ea54 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
  80ea44:	00c20004 	movi	r3,2048
  80ea48:	e0bff817 	ldw	r2,-32(fp)
  80ea4c:	1885c83a 	sub	r2,r3,r2
  80ea50:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ea54:	e0bff617 	ldw	r2,-40(fp)
  80ea58:	10001e26 	beq	r2,zero,80ead4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
  80ea5c:	e0fffe17 	ldw	r3,-8(fp)
  80ea60:	e0bff617 	ldw	r2,-40(fp)
  80ea64:	1880022e 	bgeu	r3,r2,80ea70 <altera_avalon_jtag_uart_read+0x90>
        n = space;
  80ea68:	e0bffe17 	ldw	r2,-8(fp)
  80ea6c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
  80ea70:	e0bffc17 	ldw	r2,-16(fp)
  80ea74:	10c00e04 	addi	r3,r2,56
  80ea78:	e0bff817 	ldw	r2,-32(fp)
  80ea7c:	1885883a 	add	r2,r3,r2
  80ea80:	e1bff617 	ldw	r6,-40(fp)
  80ea84:	100b883a 	mov	r5,r2
  80ea88:	e13ff517 	ldw	r4,-44(fp)
  80ea8c:	08067bc0 	call	8067bc <memcpy>
      ptr   += n;
  80ea90:	e0fff517 	ldw	r3,-44(fp)
  80ea94:	e0bff617 	ldw	r2,-40(fp)
  80ea98:	1885883a 	add	r2,r3,r2
  80ea9c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
  80eaa0:	e0fffe17 	ldw	r3,-8(fp)
  80eaa4:	e0bff617 	ldw	r2,-40(fp)
  80eaa8:	1885c83a 	sub	r2,r3,r2
  80eaac:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80eab0:	e0fff817 	ldw	r3,-32(fp)
  80eab4:	e0bff617 	ldw	r2,-40(fp)
  80eab8:	1885883a 	add	r2,r3,r2
  80eabc:	10c1ffcc 	andi	r3,r2,2047
  80eac0:	e0bffc17 	ldw	r2,-16(fp)
  80eac4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
  80eac8:	e0bffe17 	ldw	r2,-8(fp)
  80eacc:	00bfcf16 	blt	zero,r2,80ea0c <__alt_mem_descriptor_memory+0xff78ea0c>
  80ead0:	00000106 	br	80ead8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
  80ead4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
  80ead8:	e0fff517 	ldw	r3,-44(fp)
  80eadc:	e0bffd17 	ldw	r2,-12(fp)
  80eae0:	1880141e 	bne	r3,r2,80eb34 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
  80eae4:	e0bfff17 	ldw	r2,-4(fp)
  80eae8:	1090000c 	andi	r2,r2,16384
  80eaec:	1000131e 	bne	r2,zero,80eb3c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
  80eaf0:	0001883a 	nop
  80eaf4:	e0bffc17 	ldw	r2,-16(fp)
  80eaf8:	10c00a17 	ldw	r3,40(r2)
  80eafc:	e0bff717 	ldw	r2,-36(fp)
  80eb00:	1880051e 	bne	r3,r2,80eb18 <altera_avalon_jtag_uart_read+0x138>
  80eb04:	e0bffc17 	ldw	r2,-16(fp)
  80eb08:	10c00917 	ldw	r3,36(r2)
  80eb0c:	e0bffc17 	ldw	r2,-16(fp)
  80eb10:	10800117 	ldw	r2,4(r2)
  80eb14:	18bff736 	bltu	r3,r2,80eaf4 <__alt_mem_descriptor_memory+0xff78eaf4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
  80eb18:	e0bffc17 	ldw	r2,-16(fp)
  80eb1c:	10c00a17 	ldw	r3,40(r2)
  80eb20:	e0bff717 	ldw	r2,-36(fp)
  80eb24:	18800726 	beq	r3,r2,80eb44 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
  80eb28:	e0bffe17 	ldw	r2,-8(fp)
  80eb2c:	00bfb716 	blt	zero,r2,80ea0c <__alt_mem_descriptor_memory+0xff78ea0c>
  80eb30:	00000506 	br	80eb48 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
  80eb34:	0001883a 	nop
  80eb38:	00000306 	br	80eb48 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
  80eb3c:	0001883a 	nop
  80eb40:	00000106 	br	80eb48 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
  80eb44:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
  80eb48:	e0fff517 	ldw	r3,-44(fp)
  80eb4c:	e0bffd17 	ldw	r2,-12(fp)
  80eb50:	18801826 	beq	r3,r2,80ebb4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80eb54:	0005303a 	rdctl	r2,status
  80eb58:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80eb5c:	e0fffb17 	ldw	r3,-20(fp)
  80eb60:	00bfff84 	movi	r2,-2
  80eb64:	1884703a 	and	r2,r3,r2
  80eb68:	1001703a 	wrctl	status,r2
  
  return context;
  80eb6c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
  80eb70:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
  80eb74:	e0bffc17 	ldw	r2,-16(fp)
  80eb78:	10800817 	ldw	r2,32(r2)
  80eb7c:	10c00054 	ori	r3,r2,1
  80eb80:	e0bffc17 	ldw	r2,-16(fp)
  80eb84:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80eb88:	e0bffc17 	ldw	r2,-16(fp)
  80eb8c:	10800017 	ldw	r2,0(r2)
  80eb90:	10800104 	addi	r2,r2,4
  80eb94:	1007883a 	mov	r3,r2
  80eb98:	e0bffc17 	ldw	r2,-16(fp)
  80eb9c:	10800817 	ldw	r2,32(r2)
  80eba0:	18800035 	stwio	r2,0(r3)
  80eba4:	e0bffa17 	ldw	r2,-24(fp)
  80eba8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ebac:	e0bff917 	ldw	r2,-28(fp)
  80ebb0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
  80ebb4:	e0fff517 	ldw	r3,-44(fp)
  80ebb8:	e0bffd17 	ldw	r2,-12(fp)
  80ebbc:	18800426 	beq	r3,r2,80ebd0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
  80ebc0:	e0fff517 	ldw	r3,-44(fp)
  80ebc4:	e0bffd17 	ldw	r2,-12(fp)
  80ebc8:	1885c83a 	sub	r2,r3,r2
  80ebcc:	00000606 	br	80ebe8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
  80ebd0:	e0bfff17 	ldw	r2,-4(fp)
  80ebd4:	1090000c 	andi	r2,r2,16384
  80ebd8:	10000226 	beq	r2,zero,80ebe4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
  80ebdc:	00bffd44 	movi	r2,-11
  80ebe0:	00000106 	br	80ebe8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
  80ebe4:	00bffec4 	movi	r2,-5
}
  80ebe8:	e037883a 	mov	sp,fp
  80ebec:	dfc00117 	ldw	ra,4(sp)
  80ebf0:	df000017 	ldw	fp,0(sp)
  80ebf4:	dec00204 	addi	sp,sp,8
  80ebf8:	f800283a 	ret

0080ebfc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  80ebfc:	defff304 	addi	sp,sp,-52
  80ec00:	dfc00c15 	stw	ra,48(sp)
  80ec04:	df000b15 	stw	fp,44(sp)
  80ec08:	df000b04 	addi	fp,sp,44
  80ec0c:	e13ffc15 	stw	r4,-16(fp)
  80ec10:	e17ffd15 	stw	r5,-12(fp)
  80ec14:	e1bffe15 	stw	r6,-8(fp)
  80ec18:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
  80ec1c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
  80ec20:	e0bffd17 	ldw	r2,-12(fp)
  80ec24:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ec28:	00003706 	br	80ed08 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
  80ec2c:	e0bffc17 	ldw	r2,-16(fp)
  80ec30:	10800c17 	ldw	r2,48(r2)
  80ec34:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
  80ec38:	e0bffc17 	ldw	r2,-16(fp)
  80ec3c:	10800d17 	ldw	r2,52(r2)
  80ec40:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
  80ec44:	e0fff917 	ldw	r3,-28(fp)
  80ec48:	e0bff517 	ldw	r2,-44(fp)
  80ec4c:	1880062e 	bgeu	r3,r2,80ec68 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
  80ec50:	e0fff517 	ldw	r3,-44(fp)
  80ec54:	e0bff917 	ldw	r2,-28(fp)
  80ec58:	1885c83a 	sub	r2,r3,r2
  80ec5c:	10bfffc4 	addi	r2,r2,-1
  80ec60:	e0bff615 	stw	r2,-40(fp)
  80ec64:	00000b06 	br	80ec94 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
  80ec68:	e0bff517 	ldw	r2,-44(fp)
  80ec6c:	10000526 	beq	r2,zero,80ec84 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
  80ec70:	00c20004 	movi	r3,2048
  80ec74:	e0bff917 	ldw	r2,-28(fp)
  80ec78:	1885c83a 	sub	r2,r3,r2
  80ec7c:	e0bff615 	stw	r2,-40(fp)
  80ec80:	00000406 	br	80ec94 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
  80ec84:	00c1ffc4 	movi	r3,2047
  80ec88:	e0bff917 	ldw	r2,-28(fp)
  80ec8c:	1885c83a 	sub	r2,r3,r2
  80ec90:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
  80ec94:	e0bff617 	ldw	r2,-40(fp)
  80ec98:	10001e26 	beq	r2,zero,80ed14 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
  80ec9c:	e0fffe17 	ldw	r3,-8(fp)
  80eca0:	e0bff617 	ldw	r2,-40(fp)
  80eca4:	1880022e 	bgeu	r3,r2,80ecb0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
  80eca8:	e0bffe17 	ldw	r2,-8(fp)
  80ecac:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
  80ecb0:	e0bffc17 	ldw	r2,-16(fp)
  80ecb4:	10c20e04 	addi	r3,r2,2104
  80ecb8:	e0bff917 	ldw	r2,-28(fp)
  80ecbc:	1885883a 	add	r2,r3,r2
  80ecc0:	e1bff617 	ldw	r6,-40(fp)
  80ecc4:	e17ffd17 	ldw	r5,-12(fp)
  80ecc8:	1009883a 	mov	r4,r2
  80eccc:	08067bc0 	call	8067bc <memcpy>
      ptr   += n;
  80ecd0:	e0fffd17 	ldw	r3,-12(fp)
  80ecd4:	e0bff617 	ldw	r2,-40(fp)
  80ecd8:	1885883a 	add	r2,r3,r2
  80ecdc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
  80ece0:	e0fffe17 	ldw	r3,-8(fp)
  80ece4:	e0bff617 	ldw	r2,-40(fp)
  80ece8:	1885c83a 	sub	r2,r3,r2
  80ecec:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
  80ecf0:	e0fff917 	ldw	r3,-28(fp)
  80ecf4:	e0bff617 	ldw	r2,-40(fp)
  80ecf8:	1885883a 	add	r2,r3,r2
  80ecfc:	10c1ffcc 	andi	r3,r2,2047
  80ed00:	e0bffc17 	ldw	r2,-16(fp)
  80ed04:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
  80ed08:	e0bffe17 	ldw	r2,-8(fp)
  80ed0c:	00bfc716 	blt	zero,r2,80ec2c <__alt_mem_descriptor_memory+0xff78ec2c>
  80ed10:	00000106 	br	80ed18 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
  80ed14:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ed18:	0005303a 	rdctl	r2,status
  80ed1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ed20:	e0fffb17 	ldw	r3,-20(fp)
  80ed24:	00bfff84 	movi	r2,-2
  80ed28:	1884703a 	and	r2,r3,r2
  80ed2c:	1001703a 	wrctl	status,r2
  
  return context;
  80ed30:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
  80ed34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
  80ed38:	e0bffc17 	ldw	r2,-16(fp)
  80ed3c:	10800817 	ldw	r2,32(r2)
  80ed40:	10c00094 	ori	r3,r2,2
  80ed44:	e0bffc17 	ldw	r2,-16(fp)
  80ed48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
  80ed4c:	e0bffc17 	ldw	r2,-16(fp)
  80ed50:	10800017 	ldw	r2,0(r2)
  80ed54:	10800104 	addi	r2,r2,4
  80ed58:	1007883a 	mov	r3,r2
  80ed5c:	e0bffc17 	ldw	r2,-16(fp)
  80ed60:	10800817 	ldw	r2,32(r2)
  80ed64:	18800035 	stwio	r2,0(r3)
  80ed68:	e0bffa17 	ldw	r2,-24(fp)
  80ed6c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ed70:	e0bff817 	ldw	r2,-32(fp)
  80ed74:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
  80ed78:	e0bffe17 	ldw	r2,-8(fp)
  80ed7c:	0080100e 	bge	zero,r2,80edc0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
  80ed80:	e0bfff17 	ldw	r2,-4(fp)
  80ed84:	1090000c 	andi	r2,r2,16384
  80ed88:	1000101e 	bne	r2,zero,80edcc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
  80ed8c:	0001883a 	nop
  80ed90:	e0bffc17 	ldw	r2,-16(fp)
  80ed94:	10c00d17 	ldw	r3,52(r2)
  80ed98:	e0bff517 	ldw	r2,-44(fp)
  80ed9c:	1880051e 	bne	r3,r2,80edb4 <altera_avalon_jtag_uart_write+0x1b8>
  80eda0:	e0bffc17 	ldw	r2,-16(fp)
  80eda4:	10c00917 	ldw	r3,36(r2)
  80eda8:	e0bffc17 	ldw	r2,-16(fp)
  80edac:	10800117 	ldw	r2,4(r2)
  80edb0:	18bff736 	bltu	r3,r2,80ed90 <__alt_mem_descriptor_memory+0xff78ed90>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
  80edb4:	e0bffc17 	ldw	r2,-16(fp)
  80edb8:	10800917 	ldw	r2,36(r2)
  80edbc:	1000051e 	bne	r2,zero,80edd4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
  80edc0:	e0bffe17 	ldw	r2,-8(fp)
  80edc4:	00bfd016 	blt	zero,r2,80ed08 <__alt_mem_descriptor_memory+0xff78ed08>
  80edc8:	00000306 	br	80edd8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
  80edcc:	0001883a 	nop
  80edd0:	00000106 	br	80edd8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
  80edd4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
  80edd8:	e0fffd17 	ldw	r3,-12(fp)
  80eddc:	e0bff717 	ldw	r2,-36(fp)
  80ede0:	18800426 	beq	r3,r2,80edf4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
  80ede4:	e0fffd17 	ldw	r3,-12(fp)
  80ede8:	e0bff717 	ldw	r2,-36(fp)
  80edec:	1885c83a 	sub	r2,r3,r2
  80edf0:	00000606 	br	80ee0c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
  80edf4:	e0bfff17 	ldw	r2,-4(fp)
  80edf8:	1090000c 	andi	r2,r2,16384
  80edfc:	10000226 	beq	r2,zero,80ee08 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
  80ee00:	00bffd44 	movi	r2,-11
  80ee04:	00000106 	br	80ee0c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
  80ee08:	00bffec4 	movi	r2,-5
}
  80ee0c:	e037883a 	mov	sp,fp
  80ee10:	dfc00117 	ldw	ra,4(sp)
  80ee14:	df000017 	ldw	fp,0(sp)
  80ee18:	dec00204 	addi	sp,sp,8
  80ee1c:	f800283a 	ret

0080ee20 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
  80ee20:	defffa04 	addi	sp,sp,-24
  80ee24:	dfc00515 	stw	ra,20(sp)
  80ee28:	df000415 	stw	fp,16(sp)
  80ee2c:	df000404 	addi	fp,sp,16
  80ee30:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
  80ee34:	0007883a 	mov	r3,zero
  80ee38:	e0bfff17 	ldw	r2,-4(fp)
  80ee3c:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
  80ee40:	e0bfff17 	ldw	r2,-4(fp)
  80ee44:	10800104 	addi	r2,r2,4
  80ee48:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ee4c:	0005303a 	rdctl	r2,status
  80ee50:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ee54:	e0fffd17 	ldw	r3,-12(fp)
  80ee58:	00bfff84 	movi	r2,-2
  80ee5c:	1884703a 	and	r2,r3,r2
  80ee60:	1001703a 	wrctl	status,r2
  
  return context;
  80ee64:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
  80ee68:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
  80ee6c:	08135ec0 	call	8135ec <alt_tick>
  80ee70:	e0bffc17 	ldw	r2,-16(fp)
  80ee74:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ee78:	e0bffe17 	ldw	r2,-8(fp)
  80ee7c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
  80ee80:	0001883a 	nop
  80ee84:	e037883a 	mov	sp,fp
  80ee88:	dfc00117 	ldw	ra,4(sp)
  80ee8c:	df000017 	ldw	fp,0(sp)
  80ee90:	dec00204 	addi	sp,sp,8
  80ee94:	f800283a 	ret

0080ee98 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
  80ee98:	defff804 	addi	sp,sp,-32
  80ee9c:	dfc00715 	stw	ra,28(sp)
  80eea0:	df000615 	stw	fp,24(sp)
  80eea4:	df000604 	addi	fp,sp,24
  80eea8:	e13ffc15 	stw	r4,-16(fp)
  80eeac:	e17ffd15 	stw	r5,-12(fp)
  80eeb0:	e1bffe15 	stw	r6,-8(fp)
  80eeb4:	e1ffff15 	stw	r7,-4(fp)
  80eeb8:	e0bfff17 	ldw	r2,-4(fp)
  80eebc:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
  80eec0:	d0a03917 	ldw	r2,-32540(gp)
  80eec4:	1000021e 	bne	r2,zero,80eed0 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
  80eec8:	e0bffb17 	ldw	r2,-20(fp)
  80eecc:	d0a03915 	stw	r2,-32540(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
  80eed0:	e0bffc17 	ldw	r2,-16(fp)
  80eed4:	10800104 	addi	r2,r2,4
  80eed8:	00c001c4 	movi	r3,7
  80eedc:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
  80eee0:	d8000015 	stw	zero,0(sp)
  80eee4:	e1fffc17 	ldw	r7,-16(fp)
  80eee8:	01802074 	movhi	r6,129
  80eeec:	31bb8804 	addi	r6,r6,-4576
  80eef0:	e17ffe17 	ldw	r5,-8(fp)
  80eef4:	e13ffd17 	ldw	r4,-12(fp)
  80eef8:	0812cb40 	call	812cb4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
  80eefc:	0001883a 	nop
  80ef00:	e037883a 	mov	sp,fp
  80ef04:	dfc00117 	ldw	ra,4(sp)
  80ef08:	df000017 	ldw	fp,0(sp)
  80ef0c:	dec00204 	addi	sp,sp,8
  80ef10:	f800283a 	ret

0080ef14 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
  80ef14:	defffa04 	addi	sp,sp,-24
  80ef18:	dfc00515 	stw	ra,20(sp)
  80ef1c:	df000415 	stw	fp,16(sp)
  80ef20:	df000404 	addi	fp,sp,16
  80ef24:	e13ffd15 	stw	r4,-12(fp)
  80ef28:	e17ffe15 	stw	r5,-8(fp)
  80ef2c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ef30:	e0bffd17 	ldw	r2,-12(fp)
  80ef34:	10800017 	ldw	r2,0(r2)
  80ef38:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
  80ef3c:	e0bffc17 	ldw	r2,-16(fp)
  80ef40:	10c00a04 	addi	r3,r2,40
  80ef44:	e0bffd17 	ldw	r2,-12(fp)
  80ef48:	10800217 	ldw	r2,8(r2)
  80ef4c:	100f883a 	mov	r7,r2
  80ef50:	e1bfff17 	ldw	r6,-4(fp)
  80ef54:	e17ffe17 	ldw	r5,-8(fp)
  80ef58:	1809883a 	mov	r4,r3
  80ef5c:	080f4280 	call	80f428 <altera_avalon_uart_read>
      fd->fd_flags);
}
  80ef60:	e037883a 	mov	sp,fp
  80ef64:	dfc00117 	ldw	ra,4(sp)
  80ef68:	df000017 	ldw	fp,0(sp)
  80ef6c:	dec00204 	addi	sp,sp,8
  80ef70:	f800283a 	ret

0080ef74 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
  80ef74:	defffa04 	addi	sp,sp,-24
  80ef78:	dfc00515 	stw	ra,20(sp)
  80ef7c:	df000415 	stw	fp,16(sp)
  80ef80:	df000404 	addi	fp,sp,16
  80ef84:	e13ffd15 	stw	r4,-12(fp)
  80ef88:	e17ffe15 	stw	r5,-8(fp)
  80ef8c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80ef90:	e0bffd17 	ldw	r2,-12(fp)
  80ef94:	10800017 	ldw	r2,0(r2)
  80ef98:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
  80ef9c:	e0bffc17 	ldw	r2,-16(fp)
  80efa0:	10c00a04 	addi	r3,r2,40
  80efa4:	e0bffd17 	ldw	r2,-12(fp)
  80efa8:	10800217 	ldw	r2,8(r2)
  80efac:	100f883a 	mov	r7,r2
  80efb0:	e1bfff17 	ldw	r6,-4(fp)
  80efb4:	e17ffe17 	ldw	r5,-8(fp)
  80efb8:	1809883a 	mov	r4,r3
  80efbc:	080f6400 	call	80f640 <altera_avalon_uart_write>
      fd->fd_flags);
}
  80efc0:	e037883a 	mov	sp,fp
  80efc4:	dfc00117 	ldw	ra,4(sp)
  80efc8:	df000017 	ldw	fp,0(sp)
  80efcc:	dec00204 	addi	sp,sp,8
  80efd0:	f800283a 	ret

0080efd4 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
  80efd4:	defffc04 	addi	sp,sp,-16
  80efd8:	dfc00315 	stw	ra,12(sp)
  80efdc:	df000215 	stw	fp,8(sp)
  80efe0:	df000204 	addi	fp,sp,8
  80efe4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
  80efe8:	e0bfff17 	ldw	r2,-4(fp)
  80efec:	10800017 	ldw	r2,0(r2)
  80eff0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
  80eff4:	e0bffe17 	ldw	r2,-8(fp)
  80eff8:	10c00a04 	addi	r3,r2,40
  80effc:	e0bfff17 	ldw	r2,-4(fp)
  80f000:	10800217 	ldw	r2,8(r2)
  80f004:	100b883a 	mov	r5,r2
  80f008:	1809883a 	mov	r4,r3
  80f00c:	080f3980 	call	80f398 <altera_avalon_uart_close>
}
  80f010:	e037883a 	mov	sp,fp
  80f014:	dfc00117 	ldw	ra,4(sp)
  80f018:	df000017 	ldw	fp,0(sp)
  80f01c:	dec00204 	addi	sp,sp,8
  80f020:	f800283a 	ret

0080f024 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
  80f024:	defff804 	addi	sp,sp,-32
  80f028:	dfc00715 	stw	ra,28(sp)
  80f02c:	df000615 	stw	fp,24(sp)
  80f030:	df000604 	addi	fp,sp,24
  80f034:	e13ffd15 	stw	r4,-12(fp)
  80f038:	e17ffe15 	stw	r5,-8(fp)
  80f03c:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
  80f040:	e0bffd17 	ldw	r2,-12(fp)
  80f044:	10800017 	ldw	r2,0(r2)
  80f048:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
  80f04c:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80f050:	1000041e 	bne	r2,zero,80f064 <altera_avalon_uart_init+0x40>
  80f054:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80f058:	1000021e 	bne	r2,zero,80f064 <altera_avalon_uart_init+0x40>
  80f05c:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
  80f060:	10000226 	beq	r2,zero,80f06c <altera_avalon_uart_init+0x48>
  80f064:	00800044 	movi	r2,1
  80f068:	00000106 	br	80f070 <altera_avalon_uart_init+0x4c>
  80f06c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
  80f070:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
  80f074:	e0bffc17 	ldw	r2,-16(fp)
  80f078:	10000f1e 	bne	r2,zero,80f0b8 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
  80f07c:	e0bffd17 	ldw	r2,-12(fp)
  80f080:	00c32004 	movi	r3,3200
  80f084:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
  80f088:	e0bffb17 	ldw	r2,-20(fp)
  80f08c:	10800304 	addi	r2,r2,12
  80f090:	e0fffd17 	ldw	r3,-12(fp)
  80f094:	18c00117 	ldw	r3,4(r3)
  80f098:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
  80f09c:	d8000015 	stw	zero,0(sp)
  80f0a0:	e1fffd17 	ldw	r7,-12(fp)
  80f0a4:	01802074 	movhi	r6,129
  80f0a8:	31bc3404 	addi	r6,r6,-3888
  80f0ac:	e17fff17 	ldw	r5,-4(fp)
  80f0b0:	e13ffe17 	ldw	r4,-8(fp)
  80f0b4:	0812cb40 	call	812cb4 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
  80f0b8:	0001883a 	nop
  80f0bc:	e037883a 	mov	sp,fp
  80f0c0:	dfc00117 	ldw	ra,4(sp)
  80f0c4:	df000017 	ldw	fp,0(sp)
  80f0c8:	dec00204 	addi	sp,sp,8
  80f0cc:	f800283a 	ret

0080f0d0 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
  80f0d0:	defffa04 	addi	sp,sp,-24
  80f0d4:	dfc00515 	stw	ra,20(sp)
  80f0d8:	df000415 	stw	fp,16(sp)
  80f0dc:	df000404 	addi	fp,sp,16
  80f0e0:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
  80f0e4:	e0bfff17 	ldw	r2,-4(fp)
  80f0e8:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
  80f0ec:	e0bffc17 	ldw	r2,-16(fp)
  80f0f0:	10800017 	ldw	r2,0(r2)
  80f0f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
  80f0f8:	e0bffd17 	ldw	r2,-12(fp)
  80f0fc:	10800204 	addi	r2,r2,8
  80f100:	10800037 	ldwio	r2,0(r2)
  80f104:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
  80f108:	e0bffd17 	ldw	r2,-12(fp)
  80f10c:	10800204 	addi	r2,r2,8
  80f110:	0007883a 	mov	r3,zero
  80f114:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
  80f118:	e0bffd17 	ldw	r2,-12(fp)
  80f11c:	10800204 	addi	r2,r2,8
  80f120:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
  80f124:	e0bffe17 	ldw	r2,-8(fp)
  80f128:	1080200c 	andi	r2,r2,128
  80f12c:	10000326 	beq	r2,zero,80f13c <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
  80f130:	e17ffe17 	ldw	r5,-8(fp)
  80f134:	e13ffc17 	ldw	r4,-16(fp)
  80f138:	080f16c0 	call	80f16c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
  80f13c:	e0bffe17 	ldw	r2,-8(fp)
  80f140:	1081100c 	andi	r2,r2,1088
  80f144:	10000326 	beq	r2,zero,80f154 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
  80f148:	e17ffe17 	ldw	r5,-8(fp)
  80f14c:	e13ffc17 	ldw	r4,-16(fp)
  80f150:	080f2500 	call	80f250 <altera_avalon_uart_txirq>
  }
  

}
  80f154:	0001883a 	nop
  80f158:	e037883a 	mov	sp,fp
  80f15c:	dfc00117 	ldw	ra,4(sp)
  80f160:	df000017 	ldw	fp,0(sp)
  80f164:	dec00204 	addi	sp,sp,8
  80f168:	f800283a 	ret

0080f16c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80f16c:	defffc04 	addi	sp,sp,-16
  80f170:	df000315 	stw	fp,12(sp)
  80f174:	df000304 	addi	fp,sp,12
  80f178:	e13ffe15 	stw	r4,-8(fp)
  80f17c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
  80f180:	e0bfff17 	ldw	r2,-4(fp)
  80f184:	108000cc 	andi	r2,r2,3
  80f188:	10002c1e 	bne	r2,zero,80f23c <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
  80f18c:	e0bffe17 	ldw	r2,-8(fp)
  80f190:	10800317 	ldw	r2,12(r2)
  80f194:	e0bffe17 	ldw	r2,-8(fp)
  80f198:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f19c:	e0bffe17 	ldw	r2,-8(fp)
  80f1a0:	10800317 	ldw	r2,12(r2)
  80f1a4:	10800044 	addi	r2,r2,1
  80f1a8:	10800fcc 	andi	r2,r2,63
  80f1ac:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
  80f1b0:	e0bffe17 	ldw	r2,-8(fp)
  80f1b4:	10800317 	ldw	r2,12(r2)
  80f1b8:	e0fffe17 	ldw	r3,-8(fp)
  80f1bc:	18c00017 	ldw	r3,0(r3)
  80f1c0:	18c00037 	ldwio	r3,0(r3)
  80f1c4:	1809883a 	mov	r4,r3
  80f1c8:	e0fffe17 	ldw	r3,-8(fp)
  80f1cc:	1885883a 	add	r2,r3,r2
  80f1d0:	10800704 	addi	r2,r2,28
  80f1d4:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
  80f1d8:	e0bffe17 	ldw	r2,-8(fp)
  80f1dc:	e0fffd17 	ldw	r3,-12(fp)
  80f1e0:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f1e4:	e0bffe17 	ldw	r2,-8(fp)
  80f1e8:	10800317 	ldw	r2,12(r2)
  80f1ec:	10800044 	addi	r2,r2,1
  80f1f0:	10800fcc 	andi	r2,r2,63
  80f1f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
  80f1f8:	e0bffe17 	ldw	r2,-8(fp)
  80f1fc:	10c00217 	ldw	r3,8(r2)
  80f200:	e0bffd17 	ldw	r2,-12(fp)
  80f204:	18800e1e 	bne	r3,r2,80f240 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f208:	e0bffe17 	ldw	r2,-8(fp)
  80f20c:	10c00117 	ldw	r3,4(r2)
  80f210:	00bfdfc4 	movi	r2,-129
  80f214:	1886703a 	and	r3,r3,r2
  80f218:	e0bffe17 	ldw	r2,-8(fp)
  80f21c:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  80f220:	e0bffe17 	ldw	r2,-8(fp)
  80f224:	10800017 	ldw	r2,0(r2)
  80f228:	10800304 	addi	r2,r2,12
  80f22c:	e0fffe17 	ldw	r3,-8(fp)
  80f230:	18c00117 	ldw	r3,4(r3)
  80f234:	10c00035 	stwio	r3,0(r2)
  80f238:	00000106 	br	80f240 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
  80f23c:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
  80f240:	e037883a 	mov	sp,fp
  80f244:	df000017 	ldw	fp,0(sp)
  80f248:	dec00104 	addi	sp,sp,4
  80f24c:	f800283a 	ret

0080f250 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
  80f250:	defffb04 	addi	sp,sp,-20
  80f254:	df000415 	stw	fp,16(sp)
  80f258:	df000404 	addi	fp,sp,16
  80f25c:	e13ffc15 	stw	r4,-16(fp)
  80f260:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
  80f264:	e0bffc17 	ldw	r2,-16(fp)
  80f268:	10c00417 	ldw	r3,16(r2)
  80f26c:	e0bffc17 	ldw	r2,-16(fp)
  80f270:	10800517 	ldw	r2,20(r2)
  80f274:	18803226 	beq	r3,r2,80f340 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f278:	e0bffc17 	ldw	r2,-16(fp)
  80f27c:	10800617 	ldw	r2,24(r2)
  80f280:	1080008c 	andi	r2,r2,2
  80f284:	10000326 	beq	r2,zero,80f294 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80f288:	e0bffd17 	ldw	r2,-12(fp)
  80f28c:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
  80f290:	10001d26 	beq	r2,zero,80f308 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
  80f294:	e0bffc17 	ldw	r2,-16(fp)
  80f298:	10800417 	ldw	r2,16(r2)
  80f29c:	e0bffc17 	ldw	r2,-16(fp)
  80f2a0:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
  80f2a4:	e0bffc17 	ldw	r2,-16(fp)
  80f2a8:	10800017 	ldw	r2,0(r2)
  80f2ac:	10800104 	addi	r2,r2,4
  80f2b0:	e0fffc17 	ldw	r3,-16(fp)
  80f2b4:	18c00417 	ldw	r3,16(r3)
  80f2b8:	e13ffc17 	ldw	r4,-16(fp)
  80f2bc:	20c7883a 	add	r3,r4,r3
  80f2c0:	18c01704 	addi	r3,r3,92
  80f2c4:	18c00003 	ldbu	r3,0(r3)
  80f2c8:	18c03fcc 	andi	r3,r3,255
  80f2cc:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
  80f2d0:	e0bffc17 	ldw	r2,-16(fp)
  80f2d4:	10800417 	ldw	r2,16(r2)
  80f2d8:	10800044 	addi	r2,r2,1
  80f2dc:	e0fffc17 	ldw	r3,-16(fp)
  80f2e0:	18800415 	stw	r2,16(r3)
  80f2e4:	10c00fcc 	andi	r3,r2,63
  80f2e8:	e0bffc17 	ldw	r2,-16(fp)
  80f2ec:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f2f0:	e0bffc17 	ldw	r2,-16(fp)
  80f2f4:	10800117 	ldw	r2,4(r2)
  80f2f8:	10c01014 	ori	r3,r2,64
  80f2fc:	e0bffc17 	ldw	r2,-16(fp)
  80f300:	10c00115 	stw	r3,4(r2)
  80f304:	00000e06 	br	80f340 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
  80f308:	e0bffc17 	ldw	r2,-16(fp)
  80f30c:	10800017 	ldw	r2,0(r2)
  80f310:	10800204 	addi	r2,r2,8
  80f314:	10800037 	ldwio	r2,0(r2)
  80f318:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
  80f31c:	e0bffd17 	ldw	r2,-12(fp)
  80f320:	1082000c 	andi	r2,r2,2048
  80f324:	1000061e 	bne	r2,zero,80f340 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
  80f328:	e0bffc17 	ldw	r2,-16(fp)
  80f32c:	10c00117 	ldw	r3,4(r2)
  80f330:	00bfefc4 	movi	r2,-65
  80f334:	1886703a 	and	r3,r3,r2
  80f338:	e0bffc17 	ldw	r2,-16(fp)
  80f33c:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
  80f340:	e0bffc17 	ldw	r2,-16(fp)
  80f344:	10c00417 	ldw	r3,16(r2)
  80f348:	e0bffc17 	ldw	r2,-16(fp)
  80f34c:	10800517 	ldw	r2,20(r2)
  80f350:	1880061e 	bne	r3,r2,80f36c <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f354:	e0bffc17 	ldw	r2,-16(fp)
  80f358:	10c00117 	ldw	r3,4(r2)
  80f35c:	00beefc4 	movi	r2,-1089
  80f360:	1886703a 	and	r3,r3,r2
  80f364:	e0bffc17 	ldw	r2,-16(fp)
  80f368:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f36c:	e0bffc17 	ldw	r2,-16(fp)
  80f370:	10800017 	ldw	r2,0(r2)
  80f374:	10800304 	addi	r2,r2,12
  80f378:	e0fffc17 	ldw	r3,-16(fp)
  80f37c:	18c00117 	ldw	r3,4(r3)
  80f380:	10c00035 	stwio	r3,0(r2)
}
  80f384:	0001883a 	nop
  80f388:	e037883a 	mov	sp,fp
  80f38c:	df000017 	ldw	fp,0(sp)
  80f390:	dec00104 	addi	sp,sp,4
  80f394:	f800283a 	ret

0080f398 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  80f398:	defffd04 	addi	sp,sp,-12
  80f39c:	df000215 	stw	fp,8(sp)
  80f3a0:	df000204 	addi	fp,sp,8
  80f3a4:	e13ffe15 	stw	r4,-8(fp)
  80f3a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f3ac:	00000506 	br	80f3c4 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
  80f3b0:	e0bfff17 	ldw	r2,-4(fp)
  80f3b4:	1090000c 	andi	r2,r2,16384
  80f3b8:	10000226 	beq	r2,zero,80f3c4 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
  80f3bc:	00bffd44 	movi	r2,-11
  80f3c0:	00000606 	br	80f3dc <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
  80f3c4:	e0bffe17 	ldw	r2,-8(fp)
  80f3c8:	10c00417 	ldw	r3,16(r2)
  80f3cc:	e0bffe17 	ldw	r2,-8(fp)
  80f3d0:	10800517 	ldw	r2,20(r2)
  80f3d4:	18bff61e 	bne	r3,r2,80f3b0 <__alt_mem_descriptor_memory+0xff78f3b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
  80f3d8:	0005883a 	mov	r2,zero
}
  80f3dc:	e037883a 	mov	sp,fp
  80f3e0:	df000017 	ldw	fp,0(sp)
  80f3e4:	dec00104 	addi	sp,sp,4
  80f3e8:	f800283a 	ret

0080f3ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f3ec:	defffe04 	addi	sp,sp,-8
  80f3f0:	dfc00115 	stw	ra,4(sp)
  80f3f4:	df000015 	stw	fp,0(sp)
  80f3f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f3fc:	d0a01a17 	ldw	r2,-32664(gp)
  80f400:	10000326 	beq	r2,zero,80f410 <alt_get_errno+0x24>
  80f404:	d0a01a17 	ldw	r2,-32664(gp)
  80f408:	103ee83a 	callr	r2
  80f40c:	00000106 	br	80f414 <alt_get_errno+0x28>
  80f410:	d0a03404 	addi	r2,gp,-32560
}
  80f414:	e037883a 	mov	sp,fp
  80f418:	dfc00117 	ldw	ra,4(sp)
  80f41c:	df000017 	ldw	fp,0(sp)
  80f420:	dec00204 	addi	sp,sp,8
  80f424:	f800283a 	ret

0080f428 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
  80f428:	defff204 	addi	sp,sp,-56
  80f42c:	dfc00d15 	stw	ra,52(sp)
  80f430:	df000c15 	stw	fp,48(sp)
  80f434:	df000c04 	addi	fp,sp,48
  80f438:	e13ffc15 	stw	r4,-16(fp)
  80f43c:	e17ffd15 	stw	r5,-12(fp)
  80f440:	e1bffe15 	stw	r6,-8(fp)
  80f444:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
  80f448:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
  80f44c:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
  80f450:	e0bfff17 	ldw	r2,-4(fp)
  80f454:	1090000c 	andi	r2,r2,16384
  80f458:	1005003a 	cmpeq	r2,r2,zero
  80f45c:	10803fcc 	andi	r2,r2,255
  80f460:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f464:	00001306 	br	80f4b4 <altera_avalon_uart_read+0x8c>
    {
      count++;
  80f468:	e0bff517 	ldw	r2,-44(fp)
  80f46c:	10800044 	addi	r2,r2,1
  80f470:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
  80f474:	e0bffd17 	ldw	r2,-12(fp)
  80f478:	10c00044 	addi	r3,r2,1
  80f47c:	e0fffd15 	stw	r3,-12(fp)
  80f480:	e0fffc17 	ldw	r3,-16(fp)
  80f484:	18c00217 	ldw	r3,8(r3)
  80f488:	e13ffc17 	ldw	r4,-16(fp)
  80f48c:	20c7883a 	add	r3,r4,r3
  80f490:	18c00704 	addi	r3,r3,28
  80f494:	18c00003 	ldbu	r3,0(r3)
  80f498:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
  80f49c:	e0bffc17 	ldw	r2,-16(fp)
  80f4a0:	10800217 	ldw	r2,8(r2)
  80f4a4:	10800044 	addi	r2,r2,1
  80f4a8:	10c00fcc 	andi	r3,r2,63
  80f4ac:	e0bffc17 	ldw	r2,-16(fp)
  80f4b0:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
  80f4b4:	e0fff517 	ldw	r3,-44(fp)
  80f4b8:	e0bffe17 	ldw	r2,-8(fp)
  80f4bc:	1880050e 	bge	r3,r2,80f4d4 <altera_avalon_uart_read+0xac>
  80f4c0:	e0bffc17 	ldw	r2,-16(fp)
  80f4c4:	10c00217 	ldw	r3,8(r2)
  80f4c8:	e0bffc17 	ldw	r2,-16(fp)
  80f4cc:	10800317 	ldw	r2,12(r2)
  80f4d0:	18bfe51e 	bne	r3,r2,80f468 <__alt_mem_descriptor_memory+0xff78f468>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
  80f4d4:	e0bff517 	ldw	r2,-44(fp)
  80f4d8:	1000251e 	bne	r2,zero,80f570 <altera_avalon_uart_read+0x148>
  80f4dc:	e0bffc17 	ldw	r2,-16(fp)
  80f4e0:	10c00217 	ldw	r3,8(r2)
  80f4e4:	e0bffc17 	ldw	r2,-16(fp)
  80f4e8:	10800317 	ldw	r2,12(r2)
  80f4ec:	1880201e 	bne	r3,r2,80f570 <altera_avalon_uart_read+0x148>
    {
      if (!block)
  80f4f0:	e0bff617 	ldw	r2,-40(fp)
  80f4f4:	1000071e 	bne	r2,zero,80f514 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
  80f4f8:	080f3ec0 	call	80f3ec <alt_get_errno>
  80f4fc:	1007883a 	mov	r3,r2
  80f500:	008002c4 	movi	r2,11
  80f504:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
  80f508:	00800044 	movi	r2,1
  80f50c:	e0bff405 	stb	r2,-48(fp)
        break;
  80f510:	00001b06 	br	80f580 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f514:	0005303a 	rdctl	r2,status
  80f518:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f51c:	e0fff917 	ldw	r3,-28(fp)
  80f520:	00bfff84 	movi	r2,-2
  80f524:	1884703a 	and	r2,r3,r2
  80f528:	1001703a 	wrctl	status,r2
  
  return context;
  80f52c:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
  80f530:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f534:	e0bffc17 	ldw	r2,-16(fp)
  80f538:	10800117 	ldw	r2,4(r2)
  80f53c:	10c02014 	ori	r3,r2,128
  80f540:	e0bffc17 	ldw	r2,-16(fp)
  80f544:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f548:	e0bffc17 	ldw	r2,-16(fp)
  80f54c:	10800017 	ldw	r2,0(r2)
  80f550:	10800304 	addi	r2,r2,12
  80f554:	e0fffc17 	ldw	r3,-16(fp)
  80f558:	18c00117 	ldw	r3,4(r3)
  80f55c:	10c00035 	stwio	r3,0(r2)
  80f560:	e0bff817 	ldw	r2,-32(fp)
  80f564:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f568:	e0bffa17 	ldw	r2,-24(fp)
  80f56c:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
  80f570:	e0bff517 	ldw	r2,-44(fp)
  80f574:	1000021e 	bne	r2,zero,80f580 <altera_avalon_uart_read+0x158>
  80f578:	e0bffe17 	ldw	r2,-8(fp)
  80f57c:	103fcd1e 	bne	r2,zero,80f4b4 <__alt_mem_descriptor_memory+0xff78f4b4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f580:	0005303a 	rdctl	r2,status
  80f584:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f588:	e0fffb17 	ldw	r3,-20(fp)
  80f58c:	00bfff84 	movi	r2,-2
  80f590:	1884703a 	and	r2,r3,r2
  80f594:	1001703a 	wrctl	status,r2
  
  return context;
  80f598:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
  80f59c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
  80f5a0:	e0bffc17 	ldw	r2,-16(fp)
  80f5a4:	10800117 	ldw	r2,4(r2)
  80f5a8:	10c02014 	ori	r3,r2,128
  80f5ac:	e0bffc17 	ldw	r2,-16(fp)
  80f5b0:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f5b4:	e0bffc17 	ldw	r2,-16(fp)
  80f5b8:	10800017 	ldw	r2,0(r2)
  80f5bc:	10800304 	addi	r2,r2,12
  80f5c0:	e0fffc17 	ldw	r3,-16(fp)
  80f5c4:	18c00117 	ldw	r3,4(r3)
  80f5c8:	10c00035 	stwio	r3,0(r2)
  80f5cc:	e0bff817 	ldw	r2,-32(fp)
  80f5d0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f5d4:	e0bff717 	ldw	r2,-36(fp)
  80f5d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
  80f5dc:	e0bff403 	ldbu	r2,-48(fp)
  80f5e0:	10000226 	beq	r2,zero,80f5ec <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
  80f5e4:	00bffd44 	movi	r2,-11
  80f5e8:	00000106 	br	80f5f0 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
  80f5ec:	e0bff517 	ldw	r2,-44(fp)
  }
}
  80f5f0:	e037883a 	mov	sp,fp
  80f5f4:	dfc00117 	ldw	ra,4(sp)
  80f5f8:	df000017 	ldw	fp,0(sp)
  80f5fc:	dec00204 	addi	sp,sp,8
  80f600:	f800283a 	ret

0080f604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f604:	defffe04 	addi	sp,sp,-8
  80f608:	dfc00115 	stw	ra,4(sp)
  80f60c:	df000015 	stw	fp,0(sp)
  80f610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f614:	d0a01a17 	ldw	r2,-32664(gp)
  80f618:	10000326 	beq	r2,zero,80f628 <alt_get_errno+0x24>
  80f61c:	d0a01a17 	ldw	r2,-32664(gp)
  80f620:	103ee83a 	callr	r2
  80f624:	00000106 	br	80f62c <alt_get_errno+0x28>
  80f628:	d0a03404 	addi	r2,gp,-32560
}
  80f62c:	e037883a 	mov	sp,fp
  80f630:	dfc00117 	ldw	ra,4(sp)
  80f634:	df000017 	ldw	fp,0(sp)
  80f638:	dec00204 	addi	sp,sp,8
  80f63c:	f800283a 	ret

0080f640 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
  80f640:	defff204 	addi	sp,sp,-56
  80f644:	dfc00d15 	stw	ra,52(sp)
  80f648:	df000c15 	stw	fp,48(sp)
  80f64c:	df000c04 	addi	fp,sp,48
  80f650:	e13ffc15 	stw	r4,-16(fp)
  80f654:	e17ffd15 	stw	r5,-12(fp)
  80f658:	e1bffe15 	stw	r6,-8(fp)
  80f65c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
  80f660:	e0bffe17 	ldw	r2,-8(fp)
  80f664:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
  80f668:	e0bfff17 	ldw	r2,-4(fp)
  80f66c:	1090000c 	andi	r2,r2,16384
  80f670:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f674:	00003c06 	br	80f768 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
  80f678:	e0bffc17 	ldw	r2,-16(fp)
  80f67c:	10800517 	ldw	r2,20(r2)
  80f680:	10800044 	addi	r2,r2,1
  80f684:	10800fcc 	andi	r2,r2,63
  80f688:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
  80f68c:	e0bffc17 	ldw	r2,-16(fp)
  80f690:	10c00417 	ldw	r3,16(r2)
  80f694:	e0bff717 	ldw	r2,-36(fp)
  80f698:	1880221e 	bne	r3,r2,80f724 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
  80f69c:	e0bff517 	ldw	r2,-44(fp)
  80f6a0:	10000526 	beq	r2,zero,80f6b8 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
  80f6a4:	080f6040 	call	80f604 <alt_get_errno>
  80f6a8:	1007883a 	mov	r3,r2
  80f6ac:	008002c4 	movi	r2,11
  80f6b0:	18800015 	stw	r2,0(r3)
        break;
  80f6b4:	00002e06 	br	80f770 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f6b8:	0005303a 	rdctl	r2,status
  80f6bc:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f6c0:	e0fff917 	ldw	r3,-28(fp)
  80f6c4:	00bfff84 	movi	r2,-2
  80f6c8:	1884703a 	and	r2,r3,r2
  80f6cc:	1001703a 	wrctl	status,r2
  
  return context;
  80f6d0:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
  80f6d4:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f6d8:	e0bffc17 	ldw	r2,-16(fp)
  80f6dc:	10800117 	ldw	r2,4(r2)
  80f6e0:	10c11014 	ori	r3,r2,1088
  80f6e4:	e0bffc17 	ldw	r2,-16(fp)
  80f6e8:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f6ec:	e0bffc17 	ldw	r2,-16(fp)
  80f6f0:	10800017 	ldw	r2,0(r2)
  80f6f4:	10800304 	addi	r2,r2,12
  80f6f8:	e0fffc17 	ldw	r3,-16(fp)
  80f6fc:	18c00117 	ldw	r3,4(r3)
  80f700:	10c00035 	stwio	r3,0(r2)
  80f704:	e0bff817 	ldw	r2,-32(fp)
  80f708:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f70c:	e0bff617 	ldw	r2,-40(fp)
  80f710:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
  80f714:	e0bffc17 	ldw	r2,-16(fp)
  80f718:	10c00417 	ldw	r3,16(r2)
  80f71c:	e0bff717 	ldw	r2,-36(fp)
  80f720:	18bffc26 	beq	r3,r2,80f714 <__alt_mem_descriptor_memory+0xff78f714>
      }
    }

    count--;
  80f724:	e0bff417 	ldw	r2,-48(fp)
  80f728:	10bfffc4 	addi	r2,r2,-1
  80f72c:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
  80f730:	e0bffc17 	ldw	r2,-16(fp)
  80f734:	10c00517 	ldw	r3,20(r2)
  80f738:	e0bffd17 	ldw	r2,-12(fp)
  80f73c:	11000044 	addi	r4,r2,1
  80f740:	e13ffd15 	stw	r4,-12(fp)
  80f744:	10800003 	ldbu	r2,0(r2)
  80f748:	1009883a 	mov	r4,r2
  80f74c:	e0bffc17 	ldw	r2,-16(fp)
  80f750:	10c5883a 	add	r2,r2,r3
  80f754:	10801704 	addi	r2,r2,92
  80f758:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
  80f75c:	e0bffc17 	ldw	r2,-16(fp)
  80f760:	e0fff717 	ldw	r3,-36(fp)
  80f764:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
  80f768:	e0bff417 	ldw	r2,-48(fp)
  80f76c:	103fc21e 	bne	r2,zero,80f678 <__alt_mem_descriptor_memory+0xff78f678>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80f770:	0005303a 	rdctl	r2,status
  80f774:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80f778:	e0fffb17 	ldw	r3,-20(fp)
  80f77c:	00bfff84 	movi	r2,-2
  80f780:	1884703a 	and	r2,r3,r2
  80f784:	1001703a 	wrctl	status,r2
  
  return context;
  80f788:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
  80f78c:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
  80f790:	e0bffc17 	ldw	r2,-16(fp)
  80f794:	10800117 	ldw	r2,4(r2)
  80f798:	10c11014 	ori	r3,r2,1088
  80f79c:	e0bffc17 	ldw	r2,-16(fp)
  80f7a0:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
  80f7a4:	e0bffc17 	ldw	r2,-16(fp)
  80f7a8:	10800017 	ldw	r2,0(r2)
  80f7ac:	10800304 	addi	r2,r2,12
  80f7b0:	e0fffc17 	ldw	r3,-16(fp)
  80f7b4:	18c00117 	ldw	r3,4(r3)
  80f7b8:	10c00035 	stwio	r3,0(r2)
  80f7bc:	e0bff817 	ldw	r2,-32(fp)
  80f7c0:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80f7c4:	e0bffa17 	ldw	r2,-24(fp)
  80f7c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
  80f7cc:	e0fffe17 	ldw	r3,-8(fp)
  80f7d0:	e0bff417 	ldw	r2,-48(fp)
  80f7d4:	1885c83a 	sub	r2,r3,r2
}
  80f7d8:	e037883a 	mov	sp,fp
  80f7dc:	dfc00117 	ldw	ra,4(sp)
  80f7e0:	df000017 	ldw	fp,0(sp)
  80f7e4:	dec00204 	addi	sp,sp,8
  80f7e8:	f800283a 	ret

0080f7ec <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  80f7ec:	defffe04 	addi	sp,sp,-8
  80f7f0:	dfc00115 	stw	ra,4(sp)
  80f7f4:	df000015 	stw	fp,0(sp)
  80f7f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  80f7fc:	d0a01a17 	ldw	r2,-32664(gp)
  80f800:	10000326 	beq	r2,zero,80f810 <alt_get_errno+0x24>
  80f804:	d0a01a17 	ldw	r2,-32664(gp)
  80f808:	103ee83a 	callr	r2
  80f80c:	00000106 	br	80f814 <alt_get_errno+0x28>
  80f810:	d0a03404 	addi	r2,gp,-32560
}
  80f814:	e037883a 	mov	sp,fp
  80f818:	dfc00117 	ldw	ra,4(sp)
  80f81c:	df000017 	ldw	fp,0(sp)
  80f820:	dec00204 	addi	sp,sp,8
  80f824:	f800283a 	ret

0080f828 <alt_msgdma_write_standard_descriptor>:
 */
static int alt_msgdma_write_standard_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_standard_descriptor *descriptor)
{
  80f828:	defffc04 	addi	sp,sp,-16
  80f82c:	df000315 	stw	fp,12(sp)
  80f830:	df000304 	addi	fp,sp,12
  80f834:	e13ffd15 	stw	r4,-12(fp)
  80f838:	e17ffe15 	stw	r5,-8(fp)
  80f83c:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
  80f840:	e0bffd17 	ldw	r2,-12(fp)
  80f844:	10800037 	ldwio	r2,0(r2)
  80f848:	1080010c 	andi	r2,r2,4
  80f84c:	10000226 	beq	r2,zero,80f858 <alt_msgdma_write_standard_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
        is non-blocking*/
        return -ENOSPC;
  80f850:	00bff904 	movi	r2,-28
  80f854:	00001506 	br	80f8ac <alt_msgdma_write_standard_descriptor+0x84>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(descriptor_base, 
  80f858:	e0bfff17 	ldw	r2,-4(fp)
  80f85c:	10800017 	ldw	r2,0(r2)
  80f860:	1007883a 	mov	r3,r2
  80f864:	e0bffe17 	ldw	r2,-8(fp)
  80f868:	10c00035 	stwio	r3,0(r2)
        (alt_u32)descriptor->read_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(descriptor_base, 
  80f86c:	e0bffe17 	ldw	r2,-8(fp)
  80f870:	10800104 	addi	r2,r2,4
  80f874:	e0ffff17 	ldw	r3,-4(fp)
  80f878:	18c00117 	ldw	r3,4(r3)
  80f87c:	10c00035 	stwio	r3,0(r2)
    (    alt_u32)descriptor->write_address);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(descriptor_base, 
  80f880:	e0bffe17 	ldw	r2,-8(fp)
  80f884:	10800204 	addi	r2,r2,8
  80f888:	e0ffff17 	ldw	r3,-4(fp)
  80f88c:	18c00217 	ldw	r3,8(r3)
  80f890:	10c00035 	stwio	r3,0(r2)
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_STANDARD(descriptor_base, 
  80f894:	e0bffe17 	ldw	r2,-8(fp)
  80f898:	10800304 	addi	r2,r2,12
  80f89c:	e0ffff17 	ldw	r3,-4(fp)
  80f8a0:	18c00317 	ldw	r3,12(r3)
  80f8a4:	10c00035 	stwio	r3,0(r2)
        descriptor->control);
        return 0;
  80f8a8:	0005883a 	mov	r2,zero
}
  80f8ac:	e037883a 	mov	sp,fp
  80f8b0:	df000017 	ldw	fp,0(sp)
  80f8b4:	dec00104 	addi	sp,sp,4
  80f8b8:	f800283a 	ret

0080f8bc <alt_msgdma_write_extended_descriptor>:
 */
static int alt_msgdma_write_extended_descriptor (
    alt_u32 *csr_base, 
    alt_u32 *descriptor_base,
    alt_msgdma_extended_descriptor *descriptor)
{
  80f8bc:	defffc04 	addi	sp,sp,-16
  80f8c0:	df000315 	stw	fp,12(sp)
  80f8c4:	df000304 	addi	fp,sp,12
  80f8c8:	e13ffd15 	stw	r4,-12(fp)
  80f8cc:	e17ffe15 	stw	r5,-8(fp)
  80f8d0:	e1bfff15 	stw	r6,-4(fp)
    if (0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(csr_base) & 
  80f8d4:	e0bffd17 	ldw	r2,-12(fp)
  80f8d8:	10800037 	ldwio	r2,0(r2)
  80f8dc:	1080010c 	andi	r2,r2,4
  80f8e0:	10000226 	beq	r2,zero,80f8ec <alt_msgdma_write_extended_descriptor+0x30>
        ALTERA_MSGDMA_CSR_DESCRIPTOR_BUFFER_FULL_MASK))
    {
      /*at least one descriptor buffer is full, returning so that this function 
    is non-blocking*/
        return -ENOSPC;
  80f8e4:	00bff904 	movi	r2,-28
  80f8e8:	00003b06 	br	80f9d8 <alt_msgdma_write_extended_descriptor+0x11c>
    }

    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS(
  80f8ec:	e0bfff17 	ldw	r2,-4(fp)
  80f8f0:	10800017 	ldw	r2,0(r2)
  80f8f4:	1007883a 	mov	r3,r2
  80f8f8:	e0bffe17 	ldw	r2,-8(fp)
  80f8fc:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->read_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS(
  80f900:	e0bffe17 	ldw	r2,-8(fp)
  80f904:	10800104 	addi	r2,r2,4
  80f908:	e0ffff17 	ldw	r3,-4(fp)
  80f90c:	18c00117 	ldw	r3,4(r3)
  80f910:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        (alt_u32)descriptor->write_address_low);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_LENGTH(
  80f914:	e0bffe17 	ldw	r2,-8(fp)
  80f918:	10800204 	addi	r2,r2,8
  80f91c:	e0ffff17 	ldw	r3,-4(fp)
  80f920:	18c00217 	ldw	r3,8(r3)
  80f924:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->transfer_length);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_SEQUENCE_NUMBER(
  80f928:	e0bffe17 	ldw	r2,-8(fp)
  80f92c:	10800304 	addi	r2,r2,12
  80f930:	e0ffff17 	ldw	r3,-4(fp)
  80f934:	18c0030b 	ldhu	r3,12(r3)
  80f938:	18ffffcc 	andi	r3,r3,65535
  80f93c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->sequence_number);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_BURST(
  80f940:	e0bffe17 	ldw	r2,-8(fp)
  80f944:	10800384 	addi	r2,r2,14
  80f948:	e0ffff17 	ldw	r3,-4(fp)
  80f94c:	18c00383 	ldbu	r3,14(r3)
  80f950:	18c03fcc 	andi	r3,r3,255
  80f954:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->read_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_BURST(
  80f958:	e0bffe17 	ldw	r2,-8(fp)
  80f95c:	108003c4 	addi	r2,r2,15
  80f960:	e0ffff17 	ldw	r3,-4(fp)
  80f964:	18c003c3 	ldbu	r3,15(r3)
  80f968:	18c03fcc 	andi	r3,r3,255
  80f96c:	10c00025 	stbio	r3,0(r2)
        descriptor_base, 
        descriptor->write_burst_count);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_STRIDE(
  80f970:	e0bffe17 	ldw	r2,-8(fp)
  80f974:	10800404 	addi	r2,r2,16
  80f978:	e0ffff17 	ldw	r3,-4(fp)
  80f97c:	18c0040b 	ldhu	r3,16(r3)
  80f980:	18ffffcc 	andi	r3,r3,65535
  80f984:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->read_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_STRIDE(
  80f988:	e0bffe17 	ldw	r2,-8(fp)
  80f98c:	10800484 	addi	r2,r2,18
  80f990:	e0ffff17 	ldw	r3,-4(fp)
  80f994:	18c0048b 	ldhu	r3,18(r3)
  80f998:	18ffffcc 	andi	r3,r3,65535
  80f99c:	10c0002d 	sthio	r3,0(r2)
        descriptor_base, 
        descriptor->write_stride);
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_READ_ADDRESS_HIGH(descriptor_base, 0);
  80f9a0:	e0bffe17 	ldw	r2,-8(fp)
  80f9a4:	10800504 	addi	r2,r2,20
  80f9a8:	0007883a 	mov	r3,zero
  80f9ac:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_WRITE_ADDRESS_HIGH(descriptor_base, 0);
  80f9b0:	e0bffe17 	ldw	r2,-8(fp)
  80f9b4:	10800604 	addi	r2,r2,24
  80f9b8:	0007883a 	mov	r3,zero
  80f9bc:	10c00035 	stwio	r3,0(r2)
    IOWR_ALTERA_MSGDMA_DESCRIPTOR_CONTROL_ENHANCED(
  80f9c0:	e0bffe17 	ldw	r2,-8(fp)
  80f9c4:	10800704 	addi	r2,r2,28
  80f9c8:	e0ffff17 	ldw	r3,-4(fp)
  80f9cc:	18c00717 	ldw	r3,28(r3)
  80f9d0:	10c00035 	stwio	r3,0(r2)
        descriptor_base, 
        descriptor->control);
    return 0;
  80f9d4:	0005883a 	mov	r2,zero
}
  80f9d8:	e037883a 	mov	sp,fp
  80f9dc:	df000017 	ldw	fp,0(sp)
  80f9e0:	dec00104 	addi	sp,sp,4
  80f9e4:	f800283a 	ret

0080f9e8 <alt_msgdma_irq>:
 * alt_msgdma_irq()
 *
 * Interrupt handler for the Modular Scatter-Gather DMA controller.
 */
static void alt_msgdma_irq(void *context)
{
  80f9e8:	defff804 	addi	sp,sp,-32
  80f9ec:	dfc00715 	stw	ra,28(sp)
  80f9f0:	df000615 	stw	fp,24(sp)
  80f9f4:	df000604 	addi	fp,sp,24
  80f9f8:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev *dev = (alt_msgdma_dev *) context;
  80f9fc:	e0bfff17 	ldw	r2,-4(fp)
  80fa00:	e0bffa15 	stw	r2,-24(fp)
    alt_irq_context cpu_sr;
    alt_u32 temporary_control;

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
  80fa04:	e0bffa17 	ldw	r2,-24(fp)
  80fa08:	10801783 	ldbu	r2,94(r2)
  80fa0c:	10803fcc 	andi	r2,r2,255
  80fa10:	10001126 	beq	r2,zero,80fa58 <alt_msgdma_irq+0x70>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
  80fa14:	e0bffa17 	ldw	r2,-24(fp)
  80fa18:	10800617 	ldw	r2,24(r2)
  80fa1c:	10800037 	ldwio	r2,0(r2)

    
    /* disable global interrupt*/
    if (dev->prefetcher_enable)
    {
        temporary_control = 
  80fa20:	1007883a 	mov	r3,r2
  80fa24:	00bffdc4 	movi	r2,-9
  80fa28:	1884703a 	and	r2,r3,r2
  80fa2c:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                & ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
  80fa30:	e0bffa17 	ldw	r2,-24(fp)
  80fa34:	10800617 	ldw	r2,24(r2)
  80fa38:	e0fffb17 	ldw	r3,-20(fp)
  80fa3c:	10c00035 	stwio	r3,0(r2)
                temporary_control);
        
        /* clear the IRQ status- W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base,
  80fa40:	e0bffa17 	ldw	r2,-24(fp)
  80fa44:	10800617 	ldw	r2,24(r2)
  80fa48:	10800404 	addi	r2,r2,16
  80fa4c:	00c00044 	movi	r3,1
  80fa50:	10c00035 	stwio	r3,0(r2)
  80fa54:	00001106 	br	80fa9c <alt_msgdma_irq+0xb4>
                ALT_MSGDMA_PREFETCHER_STATUS_IRQ_SET_MASK);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
  80fa58:	e0bffa17 	ldw	r2,-24(fp)
  80fa5c:	10800317 	ldw	r2,12(r2)
  80fa60:	10800104 	addi	r2,r2,4
  80fa64:	10800037 	ldwio	r2,0(r2)
  80fa68:	1007883a 	mov	r3,r2
  80fa6c:	00bffbc4 	movi	r2,-17
  80fa70:	1884703a 	and	r2,r3,r2
  80fa74:	e0bffb15 	stw	r2,-20(fp)
                & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
  80fa78:	e0bffa17 	ldw	r2,-24(fp)
  80fa7c:	10800317 	ldw	r2,12(r2)
  80fa80:	10800104 	addi	r2,r2,4
  80fa84:	e0fffb17 	ldw	r3,-20(fp)
  80fa88:	10c00035 	stwio	r3,0(r2)
        /* clear the IRQ status */
        IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base,
  80fa8c:	e0bffa17 	ldw	r2,-24(fp)
  80fa90:	10800317 	ldw	r2,12(r2)
  80fa94:	00c08004 	movi	r3,512
  80fa98:	10c00035 	stwio	r3,0(r2)
    * Other interrupts are explicitly disabled if callbacks
    * are registered because there is no guarantee that they are 
    * pre-emption-safe. This allows the driver to support 
    * interrupt pre-emption.
    */
    if(dev->callback) 
  80fa9c:	e0bffa17 	ldw	r2,-24(fp)
  80faa0:	10800b17 	ldw	r2,44(r2)
  80faa4:	10001226 	beq	r2,zero,80faf0 <alt_msgdma_irq+0x108>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80faa8:	0005303a 	rdctl	r2,status
  80faac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fab0:	e0fffd17 	ldw	r3,-12(fp)
  80fab4:	00bfff84 	movi	r2,-2
  80fab8:	1884703a 	and	r2,r3,r2
  80fabc:	1001703a 	wrctl	status,r2
  
  return context;
  80fac0:	e0bffd17 	ldw	r2,-12(fp)
    {
        cpu_sr = alt_irq_disable_all();
  80fac4:	e0bffc15 	stw	r2,-16(fp)
        dev->callback (dev->callback_context);
  80fac8:	e0bffa17 	ldw	r2,-24(fp)
  80facc:	10800b17 	ldw	r2,44(r2)
  80fad0:	e0fffa17 	ldw	r3,-24(fp)
  80fad4:	18c00c17 	ldw	r3,48(r3)
  80fad8:	1809883a 	mov	r4,r3
  80fadc:	103ee83a 	callr	r2
  80fae0:	e0bffc17 	ldw	r2,-16(fp)
  80fae4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fae8:	e0bffe17 	ldw	r2,-8(fp)
  80faec:	1001703a 	wrctl	status,r2
        alt_irq_enable_all(cpu_sr);
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
  80faf0:	e0bffa17 	ldw	r2,-24(fp)
  80faf4:	10801783 	ldbu	r2,94(r2)
  80faf8:	10803fcc 	andi	r2,r2,255
  80fafc:	10000a26 	beq	r2,zero,80fb28 <alt_msgdma_irq+0x140>
    {
        temporary_control = 
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
  80fb00:	e0bffa17 	ldw	r2,-24(fp)
  80fb04:	10800617 	ldw	r2,24(r2)
  80fb08:	10800037 	ldwio	r2,0(r2)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
  80fb0c:	10800214 	ori	r2,r2,8
    }

    /* enable global interrupt */
    if (dev->prefetcher_enable)
    {
        temporary_control = 
  80fb10:	e0bffb15 	stw	r2,-20(fp)
                IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base)
                | ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
        
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
  80fb14:	e0bffa17 	ldw	r2,-24(fp)
  80fb18:	10800617 	ldw	r2,24(r2)
  80fb1c:	e0fffb17 	ldw	r3,-20(fp)
  80fb20:	10c00035 	stwio	r3,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
    }

    return;
  80fb24:	00000c06 	br	80fb58 <alt_msgdma_irq+0x170>
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
  80fb28:	e0bffa17 	ldw	r2,-24(fp)
  80fb2c:	10800317 	ldw	r2,12(r2)
  80fb30:	10800104 	addi	r2,r2,4
  80fb34:	10800037 	ldwio	r2,0(r2)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
  80fb38:	10800414 	ori	r2,r2,16
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base,
                temporary_control);
    }
    else
    {
        temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) 
  80fb3c:	e0bffb15 	stw	r2,-20(fp)
                | (ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
  80fb40:	e0bffa17 	ldw	r2,-24(fp)
  80fb44:	10800317 	ldw	r2,12(r2)
  80fb48:	10800104 	addi	r2,r2,4
  80fb4c:	e0fffb17 	ldw	r3,-20(fp)
  80fb50:	10c00035 	stwio	r3,0(r2)
    }

    return;
  80fb54:	0001883a 	nop
}
  80fb58:	e037883a 	mov	sp,fp
  80fb5c:	dfc00117 	ldw	ra,4(sp)
  80fb60:	df000017 	ldw	fp,0(sp)
  80fb64:	dec00204 	addi	sp,sp,8
  80fb68:	f800283a 	ret

0080fb6c <alt_msgdma_construct_standard_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
  80fb6c:	defffb04 	addi	sp,sp,-20
  80fb70:	df000415 	stw	fp,16(sp)
  80fb74:	df000404 	addi	fp,sp,16
  80fb78:	e13ffc15 	stw	r4,-16(fp)
  80fb7c:	e17ffd15 	stw	r5,-12(fp)
  80fb80:	e1bffe15 	stw	r6,-8(fp)
  80fb84:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
  80fb88:	e0bffc17 	ldw	r2,-16(fp)
  80fb8c:	10c01217 	ldw	r3,72(r2)
  80fb90:	e0800117 	ldw	r2,4(fp)
  80fb94:	18800436 	bltu	r3,r2,80fba8 <alt_msgdma_construct_standard_descriptor+0x3c>
       dev->enhanced_features != 0
  80fb98:	e0bffc17 	ldw	r2,-16(fp)
  80fb9c:	10801703 	ldbu	r2,92(r2)
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
  80fba0:	10803fcc 	andi	r2,r2,255
  80fba4:	10000226 	beq	r2,zero,80fbb0 <alt_msgdma_construct_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
  80fba8:	00bffa84 	movi	r2,-22
  80fbac:	00000e06 	br	80fbe8 <alt_msgdma_construct_standard_descriptor+0x7c>
    }
    descriptor->read_address = read_address;
  80fbb0:	e0bffd17 	ldw	r2,-12(fp)
  80fbb4:	e0fffe17 	ldw	r3,-8(fp)
  80fbb8:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
  80fbbc:	e0bffd17 	ldw	r2,-12(fp)
  80fbc0:	e0ffff17 	ldw	r3,-4(fp)
  80fbc4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
  80fbc8:	e0bffd17 	ldw	r2,-12(fp)
  80fbcc:	e0c00117 	ldw	r3,4(fp)
  80fbd0:	10c00215 	stw	r3,8(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
  80fbd4:	e0800217 	ldw	r2,8(fp)
  80fbd8:	10e00034 	orhi	r3,r2,32768
  80fbdc:	e0bffd17 	ldw	r2,-12(fp)
  80fbe0:	10c00315 	stw	r3,12(r2)
    
    return 0;
  80fbe4:	0005883a 	mov	r2,zero
}
  80fbe8:	e037883a 	mov	sp,fp
  80fbec:	df000017 	ldw	fp,0(sp)
  80fbf0:	dec00104 	addi	sp,sp,4
  80fbf4:	f800283a 	ret

0080fbf8 <alt_msgdma_construct_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
  80fbf8:	defff604 	addi	sp,sp,-40
  80fbfc:	df000915 	stw	fp,36(sp)
  80fc00:	df000904 	addi	fp,sp,36
  80fc04:	e13ff715 	stw	r4,-36(fp)
  80fc08:	e17ff815 	stw	r5,-32(fp)
  80fc0c:	e1bff915 	stw	r6,-28(fp)
  80fc10:	e1fffa15 	stw	r7,-24(fp)
  80fc14:	e1800317 	ldw	r6,12(fp)
  80fc18:	e1400417 	ldw	r5,16(fp)
  80fc1c:	e1000517 	ldw	r4,20(fp)
  80fc20:	e0c00617 	ldw	r3,24(fp)
  80fc24:	e0800717 	ldw	r2,28(fp)
  80fc28:	e1bffb0d 	sth	r6,-20(fp)
  80fc2c:	e17ffc05 	stb	r5,-16(fp)
  80fc30:	e13ffd05 	stb	r4,-12(fp)
  80fc34:	e0fffe0d 	sth	r3,-8(fp)
  80fc38:	e0bfff0d 	sth	r2,-4(fp)
    if(dev->max_byte < length ||
  80fc3c:	e0bff717 	ldw	r2,-36(fp)
  80fc40:	10c01217 	ldw	r3,72(r2)
  80fc44:	e0800117 	ldw	r2,4(fp)
  80fc48:	18801936 	bltu	r3,r2,80fcb0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
  80fc4c:	e13ff717 	ldw	r4,-36(fp)
  80fc50:	20801317 	ldw	r2,76(r4)
  80fc54:	20c01417 	ldw	r3,80(r4)
  80fc58:	e13ffe0b 	ldhu	r4,-8(fp)
  80fc5c:	213fffcc 	andi	r4,r4,65535
  80fc60:	2015883a 	mov	r10,r4
  80fc64:	0017883a 	mov	r11,zero
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
  80fc68:	1ac01136 	bltu	r3,r11,80fcb0 <alt_msgdma_construct_extended_descriptor+0xb8>
  80fc6c:	58c0011e 	bne	r11,r3,80fc74 <alt_msgdma_construct_extended_descriptor+0x7c>
  80fc70:	12800f36 	bltu	r2,r10,80fcb0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
  80fc74:	e13ff717 	ldw	r4,-36(fp)
  80fc78:	20801317 	ldw	r2,76(r4)
  80fc7c:	20c01417 	ldw	r3,80(r4)
  80fc80:	e13fff0b 	ldhu	r4,-4(fp)
  80fc84:	213fffcc 	andi	r4,r4,65535
  80fc88:	2011883a 	mov	r8,r4
  80fc8c:	0013883a 	mov	r9,zero
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
  80fc90:	1a400736 	bltu	r3,r9,80fcb0 <alt_msgdma_construct_extended_descriptor+0xb8>
  80fc94:	48c0011e 	bne	r9,r3,80fc9c <alt_msgdma_construct_extended_descriptor+0xa4>
  80fc98:	12000536 	bltu	r2,r8,80fcb0 <alt_msgdma_construct_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
  80fc9c:	e0bff717 	ldw	r2,-36(fp)
  80fca0:	10801703 	ldbu	r2,92(r2)
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
  80fca4:	10803fcc 	andi	r2,r2,255
  80fca8:	10800060 	cmpeqi	r2,r2,1
  80fcac:	1000021e 	bne	r2,zero,80fcb8 <alt_msgdma_construct_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
  80fcb0:	00bffa84 	movi	r2,-22
  80fcb4:	00002106 	br	80fd3c <alt_msgdma_construct_extended_descriptor+0x144>
    }
    
    descriptor->read_address_low = read_address;
  80fcb8:	e0bff817 	ldw	r2,-32(fp)
  80fcbc:	e0fff917 	ldw	r3,-28(fp)
  80fcc0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_low = write_address;
  80fcc4:	e0bff817 	ldw	r2,-32(fp)
  80fcc8:	e0fffa17 	ldw	r3,-24(fp)
  80fccc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
  80fcd0:	e0bff817 	ldw	r2,-32(fp)
  80fcd4:	e0c00117 	ldw	r3,4(fp)
  80fcd8:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
  80fcdc:	e0bff817 	ldw	r2,-32(fp)
  80fce0:	e0fffb0b 	ldhu	r3,-20(fp)
  80fce4:	10c0030d 	sth	r3,12(r2)
    descriptor->read_burst_count = read_burst_count;
  80fce8:	e0bff817 	ldw	r2,-32(fp)
  80fcec:	e0fffc03 	ldbu	r3,-16(fp)
  80fcf0:	10c00385 	stb	r3,14(r2)
    descriptor->write_burst_count = write_burst_count;
  80fcf4:	e0bff817 	ldw	r2,-32(fp)
  80fcf8:	e0fffd03 	ldbu	r3,-12(fp)
  80fcfc:	10c003c5 	stb	r3,15(r2)
    descriptor->read_stride = read_stride;
  80fd00:	e0bff817 	ldw	r2,-32(fp)
  80fd04:	e0fffe0b 	ldhu	r3,-8(fp)
  80fd08:	10c0040d 	sth	r3,16(r2)
    descriptor->write_stride = write_stride;
  80fd0c:	e0bff817 	ldw	r2,-32(fp)
  80fd10:	e0ffff0b 	ldhu	r3,-4(fp)
  80fd14:	10c0048d 	sth	r3,18(r2)
    descriptor->read_address_high = NULL;
  80fd18:	e0bff817 	ldw	r2,-32(fp)
  80fd1c:	10000515 	stw	zero,20(r2)
    descriptor->write_address_high = NULL;
  80fd20:	e0bff817 	ldw	r2,-32(fp)
  80fd24:	10000615 	stw	zero,24(r2)
    descriptor->control = control | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
  80fd28:	e0800217 	ldw	r2,8(fp)
  80fd2c:	10e00034 	orhi	r3,r2,32768
  80fd30:	e0bff817 	ldw	r2,-32(fp)
  80fd34:	10c00715 	stw	r3,28(r2)

  return 0 ;
  80fd38:	0005883a 	mov	r2,zero

}
  80fd3c:	e037883a 	mov	sp,fp
  80fd40:	df000017 	ldw	fp,0(sp)
  80fd44:	dec00104 	addi	sp,sp,4
  80fd48:	f800283a 	ret

0080fd4c <alt_msgdma_descriptor_async_transfer>:
 */
static int alt_msgdma_descriptor_async_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
  80fd4c:	defff004 	addi	sp,sp,-64
  80fd50:	dfc00f15 	stw	ra,60(sp)
  80fd54:	df000e15 	stw	fp,56(sp)
  80fd58:	df000e04 	addi	fp,sp,56
  80fd5c:	e13ffd15 	stw	r4,-12(fp)
  80fd60:	e17ffe15 	stw	r5,-8(fp)
  80fd64:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control = 0;
  80fd68:	e03ff315 	stw	zero,-52(fp)
    alt_irq_context context = 0;
  80fd6c:	e03ff415 	stw	zero,-48(fp)
    alt_u16 counter = 0;
  80fd70:	e03ff20d 	sth	zero,-56(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
  80fd74:	e0bffd17 	ldw	r2,-12(fp)
  80fd78:	10800317 	ldw	r2,12(r2)
  80fd7c:	10800204 	addi	r2,r2,8
  80fd80:	10800037 	ldwio	r2,0(r2)
    alt_msgdma_extended_descriptor *extended_desc)
{
    alt_u32 control = 0;
    alt_irq_context context = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
  80fd84:	10bfffcc 	andi	r2,r2,65535
  80fd88:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
  80fd8c:	e0bffd17 	ldw	r2,-12(fp)
  80fd90:	10800317 	ldw	r2,12(r2)
  80fd94:	10800204 	addi	r2,r2,8
  80fd98:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
  80fd9c:	1004d43a 	srli	r2,r2,16
  80fda0:	e0bff615 	stw	r2,-40(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
  80fda4:	e0bffd17 	ldw	r2,-12(fp)
  80fda8:	10800917 	ldw	r2,36(r2)
  80fdac:	e0fff617 	ldw	r3,-40(fp)
  80fdb0:	1880042e 	bgeu	r3,r2,80fdc4 <alt_msgdma_descriptor_async_transfer+0x78>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
  80fdb4:	e0bffd17 	ldw	r2,-12(fp)
  80fdb8:	10800917 	ldw	r2,36(r2)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;

    /* Return with error immediately if one of read/write buffer is full */
    if((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
  80fdbc:	e0fff517 	ldw	r3,-44(fp)
  80fdc0:	18800236 	bltu	r3,r2,80fdcc <alt_msgdma_descriptor_async_transfer+0x80>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    {
        /*at least one write or read FIFO descriptor buffer is full,
        returning so that this function is non-blocking*/
        return -ENOSPC;
  80fdc4:	00bff904 	movi	r2,-28
  80fdc8:	00008f06 	br	810008 <alt_msgdma_descriptor_async_transfer+0x2bc>
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
  80fdcc:	00800804 	movi	r2,32
  80fdd0:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80fdd4:	0005303a 	rdctl	r2,status
  80fdd8:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80fddc:	e0fff717 	ldw	r3,-36(fp)
  80fde0:	00bfff84 	movi	r2,-2
  80fde4:	1884703a 	and	r2,r3,r2
  80fde8:	1001703a 	wrctl	status,r2
  
  return context;
  80fdec:	e0bff717 	ldw	r2,-36(fp)
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
  80fdf0:	e0bff415 	stw	r2,-48(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
  80fdf4:	e0bffd17 	ldw	r2,-12(fp)
  80fdf8:	10800317 	ldw	r2,12(r2)
  80fdfc:	10800104 	addi	r2,r2,4
  80fe00:	e0fff317 	ldw	r3,-52(fp)
  80fe04:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
  80fe08:	e0bffd17 	ldw	r2,-12(fp)
  80fe0c:	10800317 	ldw	r2,12(r2)
  80fe10:	e0fffd17 	ldw	r3,-12(fp)
  80fe14:	18c00317 	ldw	r3,12(r3)
  80fe18:	18c00037 	ldwio	r3,0(r3)
  80fe1c:	10c00035 	stwio	r3,0(r2)
  80fe20:	e0bff417 	ldw	r2,-48(fp)
  80fe24:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fe28:	e0bffc17 	ldw	r2,-16(fp)
  80fe2c:	1001703a 	wrctl	status,r2
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
  80fe30:	e0bffe17 	ldw	r2,-8(fp)
  80fe34:	10001a26 	beq	r2,zero,80fea0 <alt_msgdma_descriptor_async_transfer+0x154>
  80fe38:	e0bfff17 	ldw	r2,-4(fp)
  80fe3c:	1000181e 	bne	r2,zero,80fea0 <alt_msgdma_descriptor_async_transfer+0x154>
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
  80fe40:	00000d06 	br	80fe78 <alt_msgdma_descriptor_async_transfer+0x12c>
        dev->csr_base, dev->descriptor_base, standard_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
  80fe44:	01000044 	movi	r4,1
  80fe48:	08127f80 	call	8127f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
  80fe4c:	e0bff20b 	ldhu	r2,-56(fp)
  80fe50:	1084e230 	cmpltui	r2,r2,5000
  80fe54:	1000051e 	bne	r2,zero,80fe6c <alt_msgdma_descriptor_async_transfer+0x120>
            {
                alt_printf("time out after 5 msec while waiting" 
  80fe58:	01002074 	movhi	r4,129
  80fe5c:	21107704 	addi	r4,r4,16860
  80fe60:	08132e80 	call	8132e8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
  80fe64:	00bff084 	movi	r2,-62
  80fe68:	00006706 	br	810008 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
  80fe6c:	e0bff20b 	ldhu	r2,-56(fp)
  80fe70:	10800044 	addi	r2,r2,1
  80fe74:	e0bff20d 	sth	r2,-56(fp)

    if (NULL != standard_desc && NULL == extended_desc)
    {
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
  80fe78:	e0bffd17 	ldw	r2,-12(fp)
  80fe7c:	10c00317 	ldw	r3,12(r2)
  80fe80:	e0bffd17 	ldw	r2,-12(fp)
  80fe84:	10800417 	ldw	r2,16(r2)
  80fe88:	e1bffe17 	ldw	r6,-8(fp)
  80fe8c:	100b883a 	mov	r5,r2
  80fe90:	1809883a 	mov	r4,r3
  80fe94:	080f8280 	call	80f828 <alt_msgdma_write_standard_descriptor>
  80fe98:	103fea1e 	bne	r2,zero,80fe44 <__alt_mem_descriptor_memory+0xff78fe44>
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    alt_irq_enable_all(context);

    if (NULL != standard_desc && NULL == extended_desc)
  80fe9c:	00001f06 	br	80ff1c <alt_msgdma_descriptor_async_transfer+0x1d0>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
  80fea0:	e0bffe17 	ldw	r2,-8(fp)
  80fea4:	10001b1e 	bne	r2,zero,80ff14 <alt_msgdma_descriptor_async_transfer+0x1c8>
  80fea8:	e0bfff17 	ldw	r2,-4(fp)
  80feac:	10001926 	beq	r2,zero,80ff14 <alt_msgdma_descriptor_async_transfer+0x1c8>
    {
        counter = 0; /* reset counter */
  80feb0:	e03ff20d 	sth	zero,-56(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
  80feb4:	00000d06 	br	80feec <alt_msgdma_descriptor_async_transfer+0x1a0>
        dev->csr_base, 
        dev->descriptor_base, 
        extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
  80feb8:	01000044 	movi	r4,1
  80febc:	08127f80 	call	8127f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
  80fec0:	e0bff20b 	ldhu	r2,-56(fp)
  80fec4:	1084e230 	cmpltui	r2,r2,5000
  80fec8:	1000051e 	bne	r2,zero,80fee0 <alt_msgdma_descriptor_async_transfer+0x194>
            {
                alt_printf("time out after 5 msec while waiting free FIFO buffer" 
  80fecc:	01002074 	movhi	r4,129
  80fed0:	21108d04 	addi	r4,r4,16948
  80fed4:	08132e80 	call	8132e8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
  80fed8:	00bff084 	movi	r2,-62
  80fedc:	00004a06 	br	810008 <alt_msgdma_descriptor_async_transfer+0x2bc>
            }
            counter++; 
  80fee0:	e0bff20b 	ldhu	r2,-56(fp)
  80fee4:	10800044 	addi	r2,r2,1
  80fee8:	e0bff20d 	sth	r2,-56(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
      write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
  80feec:	e0bffd17 	ldw	r2,-12(fp)
  80fef0:	10c00317 	ldw	r3,12(r2)
  80fef4:	e0bffd17 	ldw	r2,-12(fp)
  80fef8:	10800417 	ldw	r2,16(r2)
  80fefc:	e1bfff17 	ldw	r6,-4(fp)
  80ff00:	100b883a 	mov	r5,r2
  80ff04:	1809883a 	mov	r4,r3
  80ff08:	080f8bc0 	call	80f8bc <alt_msgdma_write_extended_descriptor>
  80ff0c:	103fea1e 	bne	r2,zero,80feb8 <__alt_mem_descriptor_memory+0xff78feb8>
                return -ETIME;
            }
            counter++; 
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
  80ff10:	00000206 	br	80ff1c <alt_msgdma_descriptor_async_transfer+0x1d0>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
  80ff14:	00bfffc4 	movi	r2,-1
  80ff18:	00003b06 	br	810008 <alt_msgdma_descriptor_async_transfer+0x2bc>
    * If a callback routine has been previously registered which will be
    * called from the msgdma ISR. Set up controller to:
    *  - Run
    *  - Stop on an error with any particular descriptor
    */
    if(dev->callback)
  80ff1c:	e0bffd17 	ldw	r2,-12(fp)
  80ff20:	10800b17 	ldw	r2,44(r2)
  80ff24:	10001c26 	beq	r2,zero,80ff98 <alt_msgdma_descriptor_async_transfer+0x24c>
    {

        control |= (dev->control |
  80ff28:	e0bffd17 	ldw	r2,-12(fp)
  80ff2c:	10c00d17 	ldw	r3,52(r2)
  80ff30:	e0bff317 	ldw	r2,-52(fp)
  80ff34:	1884b03a 	or	r2,r3,r2
  80ff38:	10800514 	ori	r2,r2,20
  80ff3c:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK |
                    ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        control &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
  80ff40:	e0fff317 	ldw	r3,-52(fp)
  80ff44:	00bff7c4 	movi	r2,-33
  80ff48:	1884703a 	and	r2,r3,r2
  80ff4c:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ff50:	0005303a 	rdctl	r2,status
  80ff54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ff58:	e0fffa17 	ldw	r3,-24(fp)
  80ff5c:	00bfff84 	movi	r2,-2
  80ff60:	1884703a 	and	r2,r3,r2
  80ff64:	1001703a 	wrctl	status,r2
  
  return context;
  80ff68:	e0bffa17 	ldw	r2,-24(fp)
    /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
  80ff6c:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
  80ff70:	e0bffd17 	ldw	r2,-12(fp)
  80ff74:	10800317 	ldw	r2,12(r2)
  80ff78:	10800104 	addi	r2,r2,4
  80ff7c:	e0fff317 	ldw	r3,-52(fp)
  80ff80:	10c00035 	stwio	r3,0(r2)
  80ff84:	e0bff417 	ldw	r2,-48(fp)
  80ff88:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80ff8c:	e0bff817 	ldw	r2,-32(fp)
  80ff90:	1001703a 	wrctl	status,r2
  80ff94:	00001b06 	br	810004 <alt_msgdma_descriptor_async_transfer+0x2b8>
    *   - Stop on an error with any particular descriptor
    *   - Disable interrupt generation
    */
    else
    {
        control |= (dev->control |
  80ff98:	e0bffd17 	ldw	r2,-12(fp)
  80ff9c:	10c00d17 	ldw	r3,52(r2)
  80ffa0:	e0bff317 	ldw	r2,-52(fp)
  80ffa4:	1884b03a 	or	r2,r3,r2
  80ffa8:	10800114 	ori	r2,r2,4
  80ffac:	e0bff315 	stw	r2,-52(fp)
                    ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK );
        control &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
  80ffb0:	e0fff317 	ldw	r3,-52(fp)
  80ffb4:	00bff3c4 	movi	r2,-49
  80ffb8:	1884703a 	and	r2,r3,r2
  80ffbc:	e0bff315 	stw	r2,-52(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  80ffc0:	0005303a 	rdctl	r2,status
  80ffc4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  80ffc8:	e0fffb17 	ldw	r3,-20(fp)
  80ffcc:	00bfff84 	movi	r2,-2
  80ffd0:	1884703a 	and	r2,r3,r2
  80ffd4:	1001703a 	wrctl	status,r2
  
  return context;
  80ffd8:	e0bffb17 	ldw	r2,-20(fp)
                   (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all();
  80ffdc:	e0bff415 	stw	r2,-48(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
  80ffe0:	e0bffd17 	ldw	r2,-12(fp)
  80ffe4:	10800317 	ldw	r2,12(r2)
  80ffe8:	10800104 	addi	r2,r2,4
  80ffec:	e0fff317 	ldw	r3,-52(fp)
  80fff0:	10c00035 	stwio	r3,0(r2)
  80fff4:	e0bff417 	ldw	r2,-48(fp)
  80fff8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  80fffc:	e0bff917 	ldw	r2,-28(fp)
  810000:	1001703a 	wrctl	status,r2
     * Now that access to the registers is complete, release the registers
     * semaphore so that other threads can access the registers.
     */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
  810004:	0005883a 	mov	r2,zero
}
  810008:	e037883a 	mov	sp,fp
  81000c:	dfc00117 	ldw	ra,4(sp)
  810010:	df000017 	ldw	fp,0(sp)
  810014:	dec00204 	addi	sp,sp,8
  810018:	f800283a 	ret

0081001c <alt_msgdma_descriptor_sync_transfer>:
 */
static int alt_msgdma_descriptor_sync_transfer (
    alt_msgdma_dev *dev, 
    alt_msgdma_standard_descriptor *standard_desc, 
    alt_msgdma_extended_descriptor *extended_desc)
{
  81001c:	defff004 	addi	sp,sp,-64
  810020:	dfc00f15 	stw	ra,60(sp)
  810024:	df000e15 	stw	fp,56(sp)
  810028:	df000e04 	addi	fp,sp,56
  81002c:	e13ffd15 	stw	r4,-12(fp)
  810030:	e17ffe15 	stw	r5,-8(fp)
  810034:	e1bfff15 	stw	r6,-4(fp)
    alt_u32 control=0;
  810038:	e03ff615 	stw	zero,-40(fp)
    alt_irq_context context=0;
  81003c:	e03ff715 	stw	zero,-36(fp)
    alt_u32 csr_status = 0;
  810040:	e03ff215 	stw	zero,-56(fp)
    alt_u16 counter = 0;
  810044:	e03ff30d 	sth	zero,-52(fp)
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
  810048:	e0bffd17 	ldw	r2,-12(fp)
  81004c:	10800317 	ldw	r2,12(r2)
  810050:	10800204 	addi	r2,r2,8
  810054:	10800037 	ldwio	r2,0(r2)
{
    alt_u32 control=0;
    alt_irq_context context=0;
    alt_u32 csr_status = 0;
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
  810058:	10bfffcc 	andi	r2,r2,65535
  81005c:	e0bff415 	stw	r2,-48(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
  810060:	e0bffd17 	ldw	r2,-12(fp)
  810064:	10800317 	ldw	r2,12(r2)
  810068:	10800204 	addi	r2,r2,8
  81006c:	10800037 	ldwio	r2,0(r2)
    alt_u16 counter = 0;
    alt_u32 fifo_read_fill_level = (
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
    alt_u32 fifo_write_fill_level = (
  810070:	1004d43a 	srli	r2,r2,16
  810074:	e0bff515 	stw	r2,-44(fp)
        IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_MASK) >> 
        ALTERA_MSGDMA_CSR_WRITE_FILL_LEVEL_OFFSET;
    alt_u32 error = ALTERA_MSGDMA_CSR_STOPPED_ON_ERROR_MASK | 
  810078:	00807804 	movi	r2,480
  81007c:	e0bff815 	stw	r2,-32(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
  810080:	00001906 	br	8100e8 <alt_msgdma_descriptor_sync_transfer+0xcc>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
    { 
        alt_busy_sleep(1); /* delay 1us */
  810084:	01000044 	movi	r4,1
  810088:	08127f80 	call	8127f8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
  81008c:	e0bff30b 	ldhu	r2,-52(fp)
  810090:	1084e230 	cmpltui	r2,r2,5000
  810094:	1000051e 	bne	r2,zero,8100ac <alt_msgdma_descriptor_sync_transfer+0x90>
        {
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
  810098:	01002074 	movhi	r4,129
  81009c:	2110a304 	addi	r4,r4,17036
  8100a0:	08132e80 	call	8132e8 <alt_printf>
                " for storing descriptor\n");
            return -ETIME;
  8100a4:	00bff084 	movi	r2,-62
  8100a8:	0000b506 	br	810380 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;  
  8100ac:	e0bff30b 	ldhu	r2,-52(fp)
  8100b0:	10800044 	addi	r2,r2,1
  8100b4:	e0bff30d 	sth	r2,-52(fp)
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
  8100b8:	e0bffd17 	ldw	r2,-12(fp)
  8100bc:	10800317 	ldw	r2,12(r2)
  8100c0:	10800204 	addi	r2,r2,8
  8100c4:	10800037 	ldwio	r2,0(r2)
            alt_printf("time out after 5 msec while waiting free FIFO buffer"
                " for storing descriptor\n");
            return -ETIME;
        }
        counter++;  
        fifo_read_fill_level = (
  8100c8:	10bfffcc 	andi	r2,r2,65535
  8100cc:	e0bff415 	stw	r2,-48(fp)
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
  8100d0:	e0bffd17 	ldw	r2,-12(fp)
  8100d4:	10800317 	ldw	r2,12(r2)
  8100d8:	10800204 	addi	r2,r2,8
  8100dc:	10800037 	ldwio	r2,0(r2)
        counter++;  
        fifo_read_fill_level = (
            IORD_ALTERA_MSGDMA_CSR_DESCRIPTOR_FILL_LEVEL(dev->csr_base) & 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_MASK) >> 
            ALTERA_MSGDMA_CSR_READ_FILL_LEVEL_OFFSET;
        fifo_write_fill_level = (
  8100e0:	1004d43a 	srli	r2,r2,16
  8100e4:	e0bff515 	stw	r2,-44(fp)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
  8100e8:	e0bffd17 	ldw	r2,-12(fp)
  8100ec:	10800917 	ldw	r2,36(r2)
  8100f0:	e0fff517 	ldw	r3,-44(fp)
  8100f4:	18bfe32e 	bgeu	r3,r2,810084 <__alt_mem_descriptor_memory+0xff790084>
        (dev->descriptor_fifo_depth <= fifo_read_fill_level))
  8100f8:	e0bffd17 	ldw	r2,-12(fp)
  8100fc:	10800917 	ldw	r2,36(r2)
                    ALTERA_MSGDMA_CSR_STOPPED_ON_EARLY_TERMINATION_MASK |
                    ALTERA_MSGDMA_CSR_STOP_STATE_MASK |
                    ALTERA_MSGDMA_CSR_RESET_STATE_MASK;
    
    /* Wait for available FIFO buffer to store new descriptor*/
    while ((dev->descriptor_fifo_depth <= fifo_write_fill_level) || 
  810100:	e0fff417 	ldw	r3,-48(fp)
  810104:	18bfdf2e 	bgeu	r3,r2,810084 <__alt_mem_descriptor_memory+0xff790084>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810108:	0005303a 	rdctl	r2,status
  81010c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810110:	e0fffc17 	ldw	r3,-16(fp)
  810114:	00bfff84 	movi	r2,-2
  810118:	1884703a 	and	r2,r3,r2
  81011c:	1001703a 	wrctl	status,r2
  
  return context;
  810120:	e0bffc17 	ldw	r2,-16(fp)
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
  810124:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
  810128:	e0bffd17 	ldw	r2,-12(fp)
  81012c:	10800317 	ldw	r2,12(r2)
  810130:	10800104 	addi	r2,r2,4
  810134:	00c00804 	movi	r3,32
  810138:	10c00035 	stwio	r3,0(r2)
        ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
  81013c:	e0bffd17 	ldw	r2,-12(fp)
  810140:	10800317 	ldw	r2,12(r2)
  810144:	e0fffd17 	ldw	r3,-12(fp)
  810148:	18c00317 	ldw	r3,12(r3)
  81014c:	18c00037 	ldwio	r3,0(r3)
  810150:	10c00035 	stwio	r3,0(r2)
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
  810154:	e0bffe17 	ldw	r2,-8(fp)
  810158:	10001b26 	beq	r2,zero,8101c8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
  81015c:	e0bfff17 	ldw	r2,-4(fp)
  810160:	1000191e 	bne	r2,zero,8101c8 <alt_msgdma_descriptor_sync_transfer+0x1ac>
    {
        counter = 0; /* reset counter */
  810164:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
  810168:	00000d06 	br	8101a0 <alt_msgdma_descriptor_sync_transfer+0x184>
            dev->csr_base, dev->descriptor_base, standard_desc))
        {     
            alt_busy_sleep(1); /* delay 1us */
  81016c:	01000044 	movi	r4,1
  810170:	08127f80 	call	8127f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
  810174:	e0bff30b 	ldhu	r2,-52(fp)
  810178:	1084e230 	cmpltui	r2,r2,5000
  81017c:	1000051e 	bne	r2,zero,810194 <alt_msgdma_descriptor_sync_transfer+0x178>
            {
                alt_printf("time out after 5 msec while writing standard" 
  810180:	01002074 	movhi	r4,129
  810184:	2110b704 	addi	r4,r4,17116
  810188:	08132e80 	call	8132e8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
  81018c:	00bff084 	movi	r2,-62
  810190:	00007b06 	br	810380 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;    
  810194:	e0bff30b 	ldhu	r2,-52(fp)
  810198:	10800044 	addi	r2,r2,1
  81019c:	e0bff30d 	sth	r2,-52(fp)
    if (NULL != standard_desc && NULL == extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_standard_descriptor (
  8101a0:	e0bffd17 	ldw	r2,-12(fp)
  8101a4:	10c00317 	ldw	r3,12(r2)
  8101a8:	e0bffd17 	ldw	r2,-12(fp)
  8101ac:	10800417 	ldw	r2,16(r2)
  8101b0:	e1bffe17 	ldw	r6,-8(fp)
  8101b4:	100b883a 	mov	r5,r2
  8101b8:	1809883a 	mov	r4,r3
  8101bc:	080f8280 	call	80f828 <alt_msgdma_write_standard_descriptor>
  8101c0:	103fea1e 	bne	r2,zero,81016c <__alt_mem_descriptor_memory+0xff79016c>
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
        dev->csr_base, 
        IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));

    if (NULL != standard_desc && NULL == extended_desc)
  8101c4:	00001f06 	br	810244 <alt_msgdma_descriptor_sync_transfer+0x228>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
  8101c8:	e0bffe17 	ldw	r2,-8(fp)
  8101cc:	10001b1e 	bne	r2,zero,81023c <alt_msgdma_descriptor_sync_transfer+0x220>
  8101d0:	e0bfff17 	ldw	r2,-4(fp)
  8101d4:	10001926 	beq	r2,zero,81023c <alt_msgdma_descriptor_sync_transfer+0x220>
    {
        counter = 0; /* reset counter */
  8101d8:	e03ff30d 	sth	zero,-52(fp)
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
  8101dc:	00000d06 	br	810214 <alt_msgdma_descriptor_sync_transfer+0x1f8>
            dev->csr_base, dev->descriptor_base, extended_desc))
        {
            alt_busy_sleep(1); /* delay 1us */
  8101e0:	01000044 	movi	r4,1
  8101e4:	08127f80 	call	8127f8 <alt_busy_sleep>
            if(5000 <= counter) /* time_out if waiting longer than 5 msec */
  8101e8:	e0bff30b 	ldhu	r2,-52(fp)
  8101ec:	1084e230 	cmpltui	r2,r2,5000
  8101f0:	1000051e 	bne	r2,zero,810208 <alt_msgdma_descriptor_sync_transfer+0x1ec>
            {
                alt_printf("time out after 5 msec while writing extended" 
  8101f4:	01002074 	movhi	r4,129
  8101f8:	2110c804 	addi	r4,r4,17184
  8101fc:	08132e80 	call	8132e8 <alt_printf>
                * registers semaphore so that other threads can access the 
                * registers.
                */
                ALT_SEM_POST (dev->regs_lock);
                
                return -ETIME;
  810200:	00bff084 	movi	r2,-62
  810204:	00005e06 	br	810380 <alt_msgdma_descriptor_sync_transfer+0x364>
            }
            counter++;
  810208:	e0bff30b 	ldhu	r2,-52(fp)
  81020c:	10800044 	addi	r2,r2,1
  810210:	e0bff30d 	sth	r2,-52(fp)
    else if (NULL == standard_desc && NULL != extended_desc)
    {
        counter = 0; /* reset counter */
        /*writing descriptor structure to the dispatcher, wait until descriptor 
          write is succeed*/
        while(0 != alt_msgdma_write_extended_descriptor (
  810214:	e0bffd17 	ldw	r2,-12(fp)
  810218:	10c00317 	ldw	r3,12(r2)
  81021c:	e0bffd17 	ldw	r2,-12(fp)
  810220:	10800417 	ldw	r2,16(r2)
  810224:	e1bfff17 	ldw	r6,-4(fp)
  810228:	100b883a 	mov	r5,r2
  81022c:	1809883a 	mov	r4,r3
  810230:	080f8bc0 	call	80f8bc <alt_msgdma_write_extended_descriptor>
  810234:	103fea1e 	bne	r2,zero,8101e0 <__alt_mem_descriptor_memory+0xff7901e0>
                return -ETIME;
            }
            counter++;    
        }
    }
    else if (NULL == standard_desc && NULL != extended_desc)
  810238:	00000206 	br	810244 <alt_msgdma_descriptor_sync_transfer+0x228>
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        /* operation not permitted due to descriptor type conflict */
        return -EPERM; 
  81023c:	00bfffc4 	movi	r2,-1
  810240:	00004f06 	br	810380 <alt_msgdma_descriptor_sync_transfer+0x364>
    * Set up msgdma controller to:
    * - Disable interrupt generation
    * - Run once a valid descriptor is written to controller
    * - Stop on an error with any particular descriptor
    */
     IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base,
  810244:	e0bffd17 	ldw	r2,-12(fp)
  810248:	10800317 	ldw	r2,12(r2)
  81024c:	10800104 	addi	r2,r2,4
  810250:	e0fffd17 	ldw	r3,-12(fp)
  810254:	19000d17 	ldw	r4,52(r3)
  810258:	00fff2c4 	movi	r3,-53
  81025c:	20c6703a 	and	r3,r4,r3
  810260:	18c00114 	ori	r3,r3,4
  810264:	10c00035 	stwio	r3,0(r2)
  810268:	e0bff717 	ldw	r2,-36(fp)
  81026c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810270:	e0bff917 	ldw	r2,-28(fp)
  810274:	1001703a 	wrctl	status,r2
        (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) &
        (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK)) ;
     
    alt_irq_enable_all(context);
     
    counter = 0; /* reset counter */ 
  810278:	e03ff30d 	sth	zero,-52(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
  81027c:	e0bffd17 	ldw	r2,-12(fp)
  810280:	10800317 	ldw	r2,12(r2)
  810284:	10800037 	ldwio	r2,0(r2)
  810288:	e0bff215 	stw	r2,-56(fp)
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
  81028c:	00001106 	br	8102d4 <alt_msgdma_descriptor_sync_transfer+0x2b8>
    {
        alt_busy_sleep(1); /* delay 1us */
  810290:	01000044 	movi	r4,1
  810294:	08127f80 	call	8127f8 <alt_busy_sleep>
        if(5000 <= counter) /* time_out if waiting longer than 5 msec */
  810298:	e0bff30b 	ldhu	r2,-52(fp)
  81029c:	1084e230 	cmpltui	r2,r2,5000
  8102a0:	1000051e 	bne	r2,zero,8102b8 <alt_msgdma_descriptor_sync_transfer+0x29c>
        {
            alt_printf("time out after 5 msec while waiting for any pending" 
  8102a4:	01002074 	movhi	r4,129
  8102a8:	2110d904 	addi	r4,r4,17252
  8102ac:	08132e80 	call	8132e8 <alt_printf>
            * Now that access to the registers is complete, release the registers
            * semaphore so that other threads can access the registers.
            */
            ALT_SEM_POST (dev->regs_lock);
            
            return -ETIME;
  8102b0:	00bff084 	movi	r2,-62
  8102b4:	00003206 	br	810380 <alt_msgdma_descriptor_sync_transfer+0x364>
        }
        counter++;
  8102b8:	e0bff30b 	ldhu	r2,-52(fp)
  8102bc:	10800044 	addi	r2,r2,1
  8102c0:	e0bff30d 	sth	r2,-52(fp)
        csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
  8102c4:	e0bffd17 	ldw	r2,-12(fp)
  8102c8:	10800317 	ldw	r2,12(r2)
  8102cc:	10800037 	ldwio	r2,0(r2)
  8102d0:	e0bff215 	stw	r2,-56(fp)
    
    csr_status = IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base);
    
    /* Wait for any pending transfers to complete or checking any errors or 
    conditions causing descriptor to stop dispatching */
    while (!(csr_status & error) && (csr_status & ALTERA_MSGDMA_CSR_BUSY_MASK))
  8102d4:	e0fff217 	ldw	r3,-56(fp)
  8102d8:	e0bff817 	ldw	r2,-32(fp)
  8102dc:	1884703a 	and	r2,r3,r2
  8102e0:	1000031e 	bne	r2,zero,8102f0 <alt_msgdma_descriptor_sync_transfer+0x2d4>
  8102e4:	e0bff217 	ldw	r2,-56(fp)
  8102e8:	1080004c 	andi	r2,r2,1
  8102ec:	103fe81e 	bne	r2,zero,810290 <__alt_mem_descriptor_memory+0xff790290>
    }
    

    /*Errors or conditions causing the dispatcher stopping issuing read/write 
      commands to masters*/
    if(0 != (csr_status & error))
  8102f0:	e0fff217 	ldw	r3,-56(fp)
  8102f4:	e0bff817 	ldw	r2,-32(fp)
  8102f8:	1884703a 	and	r2,r3,r2
  8102fc:	10000226 	beq	r2,zero,810308 <alt_msgdma_descriptor_sync_transfer+0x2ec>
        * Now that access to the registers is complete, release the registers
        * semaphore so that other threads can access the registers.
        */
        ALT_SEM_POST (dev->regs_lock);
        
        return error;
  810300:	e0bff817 	ldw	r2,-32(fp)
  810304:	00001e06 	br	810380 <alt_msgdma_descriptor_sync_transfer+0x364>
    }

    /* Stop the msgdma dispatcher from issuing more descriptors to the
    read or write masters  */
    /* stop issuing more descriptors */
    control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base) | 
  810308:	e0bffd17 	ldw	r2,-12(fp)
  81030c:	10800317 	ldw	r2,12(r2)
  810310:	10800104 	addi	r2,r2,4
  810314:	10800037 	ldwio	r2,0(r2)
  810318:	10800814 	ori	r2,r2,32
  81031c:	e0bff615 	stw	r2,-40(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  810320:	0005303a 	rdctl	r2,status
  810324:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  810328:	e0fffa17 	ldw	r3,-24(fp)
  81032c:	00bfff84 	movi	r2,-2
  810330:	1884703a 	and	r2,r3,r2
  810334:	1001703a 	wrctl	status,r2
  
  return context;
  810338:	e0bffa17 	ldw	r2,-24(fp)
    ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();  
  81033c:	e0bff715 	stw	r2,-36(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, control);
  810340:	e0bffd17 	ldw	r2,-12(fp)
  810344:	10800317 	ldw	r2,12(r2)
  810348:	10800104 	addi	r2,r2,4
  81034c:	e0fff617 	ldw	r3,-40(fp)
  810350:	10c00035 	stwio	r3,0(r2)
    /*
    * Clear any (previous) status register information
    * that might occlude our error checking later.
    */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(
  810354:	e0bffd17 	ldw	r2,-12(fp)
  810358:	10800317 	ldw	r2,12(r2)
  81035c:	e0fffd17 	ldw	r3,-12(fp)
  810360:	18c00317 	ldw	r3,12(r3)
  810364:	18c00037 	ldwio	r3,0(r3)
  810368:	10c00035 	stwio	r3,0(r2)
  81036c:	e0bff717 	ldw	r2,-36(fp)
  810370:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  810374:	e0bffb17 	ldw	r2,-20(fp)
  810378:	1001703a 	wrctl	status,r2
    * Now that access to the registers is complete, release the registers
    * semaphore so that other threads can access the registers.
    */
    ALT_SEM_POST (dev->regs_lock);
    
    return 0;
  81037c:	0005883a 	mov	r2,zero

}
  810380:	e037883a 	mov	sp,fp
  810384:	dfc00117 	ldw	ra,4(sp)
  810388:	df000017 	ldw	fp,0(sp)
  81038c:	dec00204 	addi	sp,sp,8
  810390:	f800283a 	ret

00810394 <alt_msgdma_construct_standard_st_to_mm_descriptor>:
 */
int alt_msgdma_construct_standard_st_to_mm_descriptor (
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *write_address, alt_u32 length, alt_u32 control)
{
  810394:	defff804 	addi	sp,sp,-32
  810398:	dfc00715 	stw	ra,28(sp)
  81039c:	df000615 	stw	fp,24(sp)
  8103a0:	df000604 	addi	fp,sp,24
  8103a4:	e13ffc15 	stw	r4,-16(fp)
  8103a8:	e17ffd15 	stw	r5,-12(fp)
  8103ac:	e1bffe15 	stw	r6,-8(fp)
  8103b0:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, NULL, 
  8103b4:	e0800217 	ldw	r2,8(fp)
  8103b8:	d8800115 	stw	r2,4(sp)
  8103bc:	e0bfff17 	ldw	r2,-4(fp)
  8103c0:	d8800015 	stw	r2,0(sp)
  8103c4:	e1fffe17 	ldw	r7,-8(fp)
  8103c8:	000d883a 	mov	r6,zero
  8103cc:	e17ffd17 	ldw	r5,-12(fp)
  8103d0:	e13ffc17 	ldw	r4,-16(fp)
  8103d4:	080fb6c0 	call	80fb6c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
  8103d8:	e037883a 	mov	sp,fp
  8103dc:	dfc00117 	ldw	ra,4(sp)
  8103e0:	df000017 	ldw	fp,0(sp)
  8103e4:	dec00204 	addi	sp,sp,8
  8103e8:	f800283a 	ret

008103ec <alt_msgdma_construct_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address,
    alt_u32 length,
    alt_u32 control)
{
  8103ec:	defff804 	addi	sp,sp,-32
  8103f0:	dfc00715 	stw	ra,28(sp)
  8103f4:	df000615 	stw	fp,24(sp)
  8103f8:	df000604 	addi	fp,sp,24
  8103fc:	e13ffc15 	stw	r4,-16(fp)
  810400:	e17ffd15 	stw	r5,-12(fp)
  810404:	e1bffe15 	stw	r6,-8(fp)
  810408:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
  81040c:	e0800217 	ldw	r2,8(fp)
  810410:	d8800115 	stw	r2,4(sp)
  810414:	e0bfff17 	ldw	r2,-4(fp)
  810418:	d8800015 	stw	r2,0(sp)
  81041c:	000f883a 	mov	r7,zero
  810420:	e1bffe17 	ldw	r6,-8(fp)
  810424:	e17ffd17 	ldw	r5,-12(fp)
  810428:	e13ffc17 	ldw	r4,-16(fp)
  81042c:	080fb6c0 	call	80fb6c <alt_msgdma_construct_standard_descriptor>
            NULL, length, control);

}
  810430:	e037883a 	mov	sp,fp
  810434:	dfc00117 	ldw	ra,4(sp)
  810438:	df000017 	ldw	fp,0(sp)
  81043c:	dec00204 	addi	sp,sp,8
  810440:	f800283a 	ret

00810444 <alt_msgdma_construct_standard_mm_to_mm_descriptor>:
    alt_msgdma_standard_descriptor *descriptor,
    alt_u32 *read_address, 
    alt_u32 *write_address, 
    alt_u32 length, 
    alt_u32 control)
{
  810444:	defff804 	addi	sp,sp,-32
  810448:	dfc00715 	stw	ra,28(sp)
  81044c:	df000615 	stw	fp,24(sp)
  810450:	df000604 	addi	fp,sp,24
  810454:	e13ffc15 	stw	r4,-16(fp)
  810458:	e17ffd15 	stw	r5,-12(fp)
  81045c:	e1bffe15 	stw	r6,-8(fp)
  810460:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_standard_descriptor(dev, descriptor, read_address, 
  810464:	e0800317 	ldw	r2,12(fp)
  810468:	d8800115 	stw	r2,4(sp)
  81046c:	e0800217 	ldw	r2,8(fp)
  810470:	d8800015 	stw	r2,0(sp)
  810474:	e1ffff17 	ldw	r7,-4(fp)
  810478:	e1bffe17 	ldw	r6,-8(fp)
  81047c:	e17ffd17 	ldw	r5,-12(fp)
  810480:	e13ffc17 	ldw	r4,-16(fp)
  810484:	080fb6c0 	call	80fb6c <alt_msgdma_construct_standard_descriptor>
            write_address, length, control);
}
  810488:	e037883a 	mov	sp,fp
  81048c:	dfc00117 	ldw	ra,4(sp)
  810490:	df000017 	ldw	fp,0(sp)
  810494:	dec00204 	addi	sp,sp,8
  810498:	f800283a 	ret

0081049c <alt_msgdma_construct_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 write_burst_count, 
    alt_u16 write_stride)
{
  81049c:	defff004 	addi	sp,sp,-64
  8104a0:	dfc00f15 	stw	ra,60(sp)
  8104a4:	df000e15 	stw	fp,56(sp)
  8104a8:	df000e04 	addi	fp,sp,56
  8104ac:	e13ff915 	stw	r4,-28(fp)
  8104b0:	e17ffa15 	stw	r5,-24(fp)
  8104b4:	e1bffb15 	stw	r6,-20(fp)
  8104b8:	e1fffc15 	stw	r7,-16(fp)
  8104bc:	e1000317 	ldw	r4,12(fp)
  8104c0:	e0c00417 	ldw	r3,16(fp)
  8104c4:	e0800517 	ldw	r2,20(fp)
  8104c8:	e13ffd0d 	sth	r4,-12(fp)
  8104cc:	e0fffe05 	stb	r3,-8(fp)
  8104d0:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
  8104d4:	e0bffd0b 	ldhu	r2,-12(fp)
  8104d8:	e0fffe03 	ldbu	r3,-8(fp)
  8104dc:	e13fff0b 	ldhu	r4,-4(fp)
  8104e0:	d9000615 	stw	r4,24(sp)
  8104e4:	d8000515 	stw	zero,20(sp)
  8104e8:	d8c00415 	stw	r3,16(sp)
  8104ec:	d8000315 	stw	zero,12(sp)
  8104f0:	d8800215 	stw	r2,8(sp)
  8104f4:	e0800217 	ldw	r2,8(fp)
  8104f8:	d8800115 	stw	r2,4(sp)
  8104fc:	e0bffc17 	ldw	r2,-16(fp)
  810500:	d8800015 	stw	r2,0(sp)
  810504:	e1fffb17 	ldw	r7,-20(fp)
  810508:	000d883a 	mov	r6,zero
  81050c:	e17ffa17 	ldw	r5,-24(fp)
  810510:	e13ff917 	ldw	r4,-28(fp)
  810514:	080fbf80 	call	80fbf8 <alt_msgdma_construct_extended_descriptor>
            NULL, write_address, length, control, sequence_number, 0, 
            write_burst_count, 0, write_stride);
}
  810518:	e037883a 	mov	sp,fp
  81051c:	dfc00117 	ldw	ra,4(sp)
  810520:	df000017 	ldw	fp,0(sp)
  810524:	dec00204 	addi	sp,sp,8
  810528:	f800283a 	ret

0081052c <alt_msgdma_construct_extended_mm_to_st_descriptor>:
    alt_u32 length,
    alt_u32 control,
    alt_u16 sequence_number,
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
  81052c:	defff004 	addi	sp,sp,-64
  810530:	dfc00f15 	stw	ra,60(sp)
  810534:	df000e15 	stw	fp,56(sp)
  810538:	df000e04 	addi	fp,sp,56
  81053c:	e13ff915 	stw	r4,-28(fp)
  810540:	e17ffa15 	stw	r5,-24(fp)
  810544:	e1bffb15 	stw	r6,-20(fp)
  810548:	e1fffc15 	stw	r7,-16(fp)
  81054c:	e1000317 	ldw	r4,12(fp)
  810550:	e0c00417 	ldw	r3,16(fp)
  810554:	e0800517 	ldw	r2,20(fp)
  810558:	e13ffd0d 	sth	r4,-12(fp)
  81055c:	e0fffe05 	stb	r3,-8(fp)
  810560:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, read_address, 
  810564:	e0bffd0b 	ldhu	r2,-12(fp)
  810568:	e0fffe03 	ldbu	r3,-8(fp)
  81056c:	e13fff0b 	ldhu	r4,-4(fp)
  810570:	d8000615 	stw	zero,24(sp)
  810574:	d9000515 	stw	r4,20(sp)
  810578:	d8000415 	stw	zero,16(sp)
  81057c:	d8c00315 	stw	r3,12(sp)
  810580:	d8800215 	stw	r2,8(sp)
  810584:	e0800217 	ldw	r2,8(fp)
  810588:	d8800115 	stw	r2,4(sp)
  81058c:	e0bffc17 	ldw	r2,-16(fp)
  810590:	d8800015 	stw	r2,0(sp)
  810594:	000f883a 	mov	r7,zero
  810598:	e1bffb17 	ldw	r6,-20(fp)
  81059c:	e17ffa17 	ldw	r5,-24(fp)
  8105a0:	e13ff917 	ldw	r4,-28(fp)
  8105a4:	080fbf80 	call	80fbf8 <alt_msgdma_construct_extended_descriptor>
            NULL, length, control, sequence_number, read_burst_count, 0, 
            read_stride, 0);

}
  8105a8:	e037883a 	mov	sp,fp
  8105ac:	dfc00117 	ldw	ra,4(sp)
  8105b0:	df000017 	ldw	fp,0(sp)
  8105b4:	dec00204 	addi	sp,sp,8
  8105b8:	f800283a 	ret

008105bc <alt_msgdma_construct_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
  8105bc:	deffee04 	addi	sp,sp,-72
  8105c0:	dfc01115 	stw	ra,68(sp)
  8105c4:	df001015 	stw	fp,64(sp)
  8105c8:	df001004 	addi	fp,sp,64
  8105cc:	e13ff715 	stw	r4,-36(fp)
  8105d0:	e17ff815 	stw	r5,-32(fp)
  8105d4:	e1bff915 	stw	r6,-28(fp)
  8105d8:	e1fffa15 	stw	r7,-24(fp)
  8105dc:	e1800417 	ldw	r6,16(fp)
  8105e0:	e1400517 	ldw	r5,20(fp)
  8105e4:	e1000617 	ldw	r4,24(fp)
  8105e8:	e0c00717 	ldw	r3,28(fp)
  8105ec:	e0800817 	ldw	r2,32(fp)
  8105f0:	e1bffb0d 	sth	r6,-20(fp)
  8105f4:	e17ffc05 	stb	r5,-16(fp)
  8105f8:	e13ffd05 	stb	r4,-12(fp)
  8105fc:	e0fffe0d 	sth	r3,-8(fp)
  810600:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_extended_descriptor(dev, descriptor, 
  810604:	e0bffb0b 	ldhu	r2,-20(fp)
  810608:	e0fffc03 	ldbu	r3,-16(fp)
  81060c:	e13ffd03 	ldbu	r4,-12(fp)
  810610:	e17ffe0b 	ldhu	r5,-8(fp)
  810614:	e1bfff0b 	ldhu	r6,-4(fp)
  810618:	d9800615 	stw	r6,24(sp)
  81061c:	d9400515 	stw	r5,20(sp)
  810620:	d9000415 	stw	r4,16(sp)
  810624:	d8c00315 	stw	r3,12(sp)
  810628:	d8800215 	stw	r2,8(sp)
  81062c:	e0800317 	ldw	r2,12(fp)
  810630:	d8800115 	stw	r2,4(sp)
  810634:	e0800217 	ldw	r2,8(fp)
  810638:	d8800015 	stw	r2,0(sp)
  81063c:	e1fffa17 	ldw	r7,-24(fp)
  810640:	e1bff917 	ldw	r6,-28(fp)
  810644:	e17ff817 	ldw	r5,-32(fp)
  810648:	e13ff717 	ldw	r4,-36(fp)
  81064c:	080fbf80 	call	80fbf8 <alt_msgdma_construct_extended_descriptor>
            read_address, write_address, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
  810650:	e037883a 	mov	sp,fp
  810654:	dfc00117 	ldw	ra,4(sp)
  810658:	df000017 	ldw	fp,0(sp)
  81065c:	dec00204 	addi	sp,sp,8
  810660:	f800283a 	ret

00810664 <alt_msgdma_construct_prefetcher_standard_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
  810664:	defffb04 	addi	sp,sp,-20
  810668:	df000415 	stw	fp,16(sp)
  81066c:	df000404 	addi	fp,sp,16
  810670:	e13ffc15 	stw	r4,-16(fp)
  810674:	e17ffd15 	stw	r5,-12(fp)
  810678:	e1bffe15 	stw	r6,-8(fp)
  81067c:	e1ffff15 	stw	r7,-4(fp)
    if(dev->max_byte < length ||
  810680:	e0bffc17 	ldw	r2,-16(fp)
  810684:	10c01217 	ldw	r3,72(r2)
  810688:	e0800117 	ldw	r2,4(fp)
  81068c:	18800436 	bltu	r3,r2,8106a0 <alt_msgdma_construct_prefetcher_standard_descriptor+0x3c>
       dev->enhanced_features != 0
  810690:	e0bffc17 	ldw	r2,-16(fp)
  810694:	10801703 	ldbu	r2,92(r2)
    alt_u32 read_address, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
    if(dev->max_byte < length ||
  810698:	10803fcc 	andi	r2,r2,255
  81069c:	10000226 	beq	r2,zero,8106a8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x44>
       dev->enhanced_features != 0
      )
    {
        return -EINVAL;
  8106a0:	00bffa84 	movi	r2,-22
  8106a4:	00001406 	br	8106f8 <alt_msgdma_construct_prefetcher_standard_descriptor+0x94>
    }
    descriptor->read_address = read_address;
  8106a8:	e0bffd17 	ldw	r2,-12(fp)
  8106ac:	e0fffe17 	ldw	r3,-8(fp)
  8106b0:	10c00015 	stw	r3,0(r2)
    descriptor->write_address = write_address;
  8106b4:	e0bffd17 	ldw	r2,-12(fp)
  8106b8:	e0ffff17 	ldw	r3,-4(fp)
  8106bc:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
  8106c0:	e0bffd17 	ldw	r2,-12(fp)
  8106c4:	e0c00117 	ldw	r3,4(fp)
  8106c8:	10c00215 	stw	r3,8(r2)
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
  8106cc:	e0fffd17 	ldw	r3,-12(fp)
  8106d0:	e0bffd17 	ldw	r2,-12(fp)
  8106d4:	10c00315 	stw	r3,12(r2)
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
  8106d8:	e0c00217 	ldw	r3,8(fp)
  8106dc:	00900034 	movhi	r2,16384
  8106e0:	10bfffc4 	addi	r2,r2,-1
  8106e4:	1884703a 	and	r2,r3,r2
  8106e8:	10e00034 	orhi	r3,r2,32768
    descriptor->transfer_length = length;
    /* have descriptor point to itself for park_mode */
    descriptor->next_desc_ptr = (alt_u32)descriptor;  
    
    /* clear control own_by_hw bit field (SW owns this descriptor)*/
    descriptor->control = (control 
  8106ec:	e0bffd17 	ldw	r2,-12(fp)
  8106f0:	10c00715 	stw	r3,28(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
    
    return 0;
  8106f4:	0005883a 	mov	r2,zero
}
  8106f8:	e037883a 	mov	sp,fp
  8106fc:	df000017 	ldw	fp,0(sp)
  810700:	dec00104 	addi	sp,sp,4
  810704:	f800283a 	ret

00810708 <alt_msgdma_construct_prefetcher_extended_descriptor>:
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u8 write_burst_count,
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
  810708:	defff404 	addi	sp,sp,-48
  81070c:	df000b15 	stw	fp,44(sp)
  810710:	df000b04 	addi	fp,sp,44
  810714:	e13ff715 	stw	r4,-36(fp)
  810718:	e17ff815 	stw	r5,-32(fp)
  81071c:	e1bff915 	stw	r6,-28(fp)
  810720:	e1fffa15 	stw	r7,-24(fp)
  810724:	e1800517 	ldw	r6,20(fp)
  810728:	e1400617 	ldw	r5,24(fp)
  81072c:	e1000717 	ldw	r4,28(fp)
  810730:	e0c00817 	ldw	r3,32(fp)
  810734:	e0800917 	ldw	r2,36(fp)
  810738:	e1bffb0d 	sth	r6,-20(fp)
  81073c:	e17ffc05 	stb	r5,-16(fp)
  810740:	e13ffd05 	stb	r4,-12(fp)
  810744:	e0fffe0d 	sth	r3,-8(fp)
  810748:	e0bfff0d 	sth	r2,-4(fp)
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
  81074c:	e0bff717 	ldw	r2,-36(fp)
  810750:	10c01217 	ldw	r3,72(r2)
  810754:	e0800317 	ldw	r2,12(fp)
  810758:	18801936 	bltu	r3,r2,8107c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
  81075c:	e13ff717 	ldw	r4,-36(fp)
  810760:	20801317 	ldw	r2,76(r4)
  810764:	20c01417 	ldw	r3,80(r4)
  810768:	e13ffe0b 	ldhu	r4,-8(fp)
  81076c:	213fffcc 	andi	r4,r4,65535
  810770:	2015883a 	mov	r10,r4
  810774:	0017883a 	mov	r11,zero
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
  810778:	1ac01136 	bltu	r3,r11,8107c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
  81077c:	58c0011e 	bne	r11,r3,810784 <alt_msgdma_construct_prefetcher_extended_descriptor+0x7c>
  810780:	12800f36 	bltu	r2,r10,8107c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
  810784:	e13ff717 	ldw	r4,-36(fp)
  810788:	20801317 	ldw	r2,76(r4)
  81078c:	20c01417 	ldw	r3,80(r4)
  810790:	e13fff0b 	ldhu	r4,-4(fp)
  810794:	213fffcc 	andi	r4,r4,65535
  810798:	2011883a 	mov	r8,r4
  81079c:	0013883a 	mov	r9,zero
    alt_u16 write_stride)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
  8107a0:	1a400736 	bltu	r3,r9,8107c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
  8107a4:	48c0011e 	bne	r9,r3,8107ac <alt_msgdma_construct_prefetcher_extended_descriptor+0xa4>
  8107a8:	12000536 	bltu	r2,r8,8107c0 <alt_msgdma_construct_prefetcher_extended_descriptor+0xb8>
       dev->max_stride < write_stride ||
       dev->enhanced_features != 1 
  8107ac:	e0bff717 	ldw	r2,-36(fp)
  8107b0:	10801703 	ldbu	r2,92(r2)
{
    msgdma_addr64 node_addr;
    
    if(dev->max_byte < length ||
       dev->max_stride < read_stride ||
       dev->max_stride < write_stride ||
  8107b4:	10803fcc 	andi	r2,r2,255
  8107b8:	10800060 	cmpeqi	r2,r2,1
  8107bc:	1000021e 	bne	r2,zero,8107c8 <alt_msgdma_construct_prefetcher_extended_descriptor+0xc0>
       dev->enhanced_features != 1 
      )
    {
        return -EINVAL;
  8107c0:	00bffa84 	movi	r2,-22
  8107c4:	00003106 	br	81088c <alt_msgdma_construct_prefetcher_extended_descriptor+0x184>
    }
    
    descriptor->read_address_high = read_address_high;
  8107c8:	e0bff817 	ldw	r2,-32(fp)
  8107cc:	e0fff917 	ldw	r3,-28(fp)
  8107d0:	10c00915 	stw	r3,36(r2)
    descriptor->read_address_low = read_address_low;
  8107d4:	e0bff817 	ldw	r2,-32(fp)
  8107d8:	e0fffa17 	ldw	r3,-24(fp)
  8107dc:	10c00015 	stw	r3,0(r2)
    descriptor->write_address_high = write_address_high;
  8107e0:	e0bff817 	ldw	r2,-32(fp)
  8107e4:	e0c00117 	ldw	r3,4(fp)
  8107e8:	10c00a15 	stw	r3,40(r2)
    descriptor->write_address_low = write_address_low;
  8107ec:	e0bff817 	ldw	r2,-32(fp)
  8107f0:	e0c00217 	ldw	r3,8(fp)
  8107f4:	10c00115 	stw	r3,4(r2)
    descriptor->transfer_length = length;
  8107f8:	e0bff817 	ldw	r2,-32(fp)
  8107fc:	e0c00317 	ldw	r3,12(fp)
  810800:	10c00215 	stw	r3,8(r2)
    descriptor->sequence_number = sequence_number;
  810804:	e0bff817 	ldw	r2,-32(fp)
  810808:	e0fffb0b 	ldhu	r3,-20(fp)
  81080c:	10c0070d 	sth	r3,28(r2)
    descriptor->read_burst_count = read_burst_count;
  810810:	e0bff817 	ldw	r2,-32(fp)
  810814:	e0fffc03 	ldbu	r3,-16(fp)
  810818:	10c00785 	stb	r3,30(r2)
    descriptor->write_burst_count = write_burst_count;
  81081c:	e0bff817 	ldw	r2,-32(fp)
  810820:	e0fffd03 	ldbu	r3,-12(fp)
  810824:	10c007c5 	stb	r3,31(r2)
    descriptor->read_stride = read_stride;
  810828:	e0bff817 	ldw	r2,-32(fp)
  81082c:	e0fffe0b 	ldhu	r3,-8(fp)
  810830:	10c0080d 	sth	r3,32(r2)
    descriptor->write_stride = write_stride;
  810834:	e0bff817 	ldw	r2,-32(fp)
  810838:	e0ffff0b 	ldhu	r3,-4(fp)
  81083c:	10c0088d 	sth	r3,34(r2)
    /* have descriptor point to itself */
    node_addr.u64 = (uintptr_t)descriptor;
  810840:	e0bff817 	ldw	r2,-32(fp)
  810844:	1019883a 	mov	r12,r2
  810848:	001b883a 	mov	r13,zero
  81084c:	e33ff515 	stw	r12,-44(fp)
  810850:	e37ff615 	stw	r13,-40(fp)
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
  810854:	e0fff517 	ldw	r3,-44(fp)
  810858:	e0bff817 	ldw	r2,-32(fp)
  81085c:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = node_addr.u32[1];
  810860:	e0fff617 	ldw	r3,-40(fp)
  810864:	e0bff817 	ldw	r2,-32(fp)
  810868:	10c00b15 	stw	r3,44(r2)
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;
  81086c:	e0c00417 	ldw	r3,16(fp)
  810870:	00900034 	movhi	r2,16384
  810874:	10bfffc4 	addi	r2,r2,-1
  810878:	1884703a 	and	r2,r3,r2
  81087c:	10e00034 	orhi	r3,r2,32768
    node_addr.u64 = (uintptr_t)descriptor;
    descriptor->next_desc_ptr_low = node_addr.u32[0];  
    descriptor->next_desc_ptr_high = node_addr.u32[1];
    
    /* clear control own_by_hw bit field (SW still owns this descriptor). */
    descriptor->control = (control 
  810880:	e0bff817 	ldw	r2,-32(fp)
  810884:	10c00f15 	stw	r3,60(r2)
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK) 
            | ALTERA_MSGDMA_DESCRIPTOR_CONTROL_GO_MASK;

  return 0 ;
  810888:	0005883a 	mov	r2,zero
}
  81088c:	e037883a 	mov	sp,fp
  810890:	df000017 	ldw	fp,0(sp)
  810894:	dec00104 	addi	sp,sp,4
  810898:	f800283a 	ret

0081089c <alt_msgdma_construct_prefetcher_standard_mm_to_mm_descriptor>:
    alt_msgdma_prefetcher_standard_descriptor *descriptor,
    alt_u32 read_address,
    alt_u32 write_address,
    alt_u32 length,
    alt_u32 control)
{
  81089c:	defff804 	addi	sp,sp,-32
  8108a0:	dfc00715 	stw	ra,28(sp)
  8108a4:	df000615 	stw	fp,24(sp)
  8108a8:	df000604 	addi	fp,sp,24
  8108ac:	e13ffc15 	stw	r4,-16(fp)
  8108b0:	e17ffd15 	stw	r5,-12(fp)
  8108b4:	e1bffe15 	stw	r6,-8(fp)
  8108b8:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
  8108bc:	e0800317 	ldw	r2,12(fp)
  8108c0:	d8800115 	stw	r2,4(sp)
  8108c4:	e0800217 	ldw	r2,8(fp)
  8108c8:	d8800015 	stw	r2,0(sp)
  8108cc:	e1ffff17 	ldw	r7,-4(fp)
  8108d0:	e1bffe17 	ldw	r6,-8(fp)
  8108d4:	e17ffd17 	ldw	r5,-12(fp)
  8108d8:	e13ffc17 	ldw	r4,-16(fp)
  8108dc:	08106640 	call	810664 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, write_address, length, control);
}
  8108e0:	e037883a 	mov	sp,fp
  8108e4:	dfc00117 	ldw	ra,4(sp)
  8108e8:	df000017 	ldw	fp,0(sp)
  8108ec:	dec00204 	addi	sp,sp,8
  8108f0:	f800283a 	ret

008108f4 <alt_msgdma_construct_prefetcher_standard_st_to_mm_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 write_address, 
    alt_u32 length, 
    alt_u32 control)
{
  8108f4:	defff804 	addi	sp,sp,-32
  8108f8:	dfc00715 	stw	ra,28(sp)
  8108fc:	df000615 	stw	fp,24(sp)
  810900:	df000604 	addi	fp,sp,24
  810904:	e13ffc15 	stw	r4,-16(fp)
  810908:	e17ffd15 	stw	r5,-12(fp)
  81090c:	e1bffe15 	stw	r6,-8(fp)
  810910:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
  810914:	e0800217 	ldw	r2,8(fp)
  810918:	d8800115 	stw	r2,4(sp)
  81091c:	e0bfff17 	ldw	r2,-4(fp)
  810920:	d8800015 	stw	r2,0(sp)
  810924:	e1fffe17 	ldw	r7,-8(fp)
  810928:	000d883a 	mov	r6,zero
  81092c:	e17ffd17 	ldw	r5,-12(fp)
  810930:	e13ffc17 	ldw	r4,-16(fp)
  810934:	08106640 	call	810664 <alt_msgdma_construct_prefetcher_standard_descriptor>
            0, write_address, length, control);
}
  810938:	e037883a 	mov	sp,fp
  81093c:	dfc00117 	ldw	ra,4(sp)
  810940:	df000017 	ldw	fp,0(sp)
  810944:	dec00204 	addi	sp,sp,8
  810948:	f800283a 	ret

0081094c <alt_msgdma_construct_prefetcher_standard_mm_to_st_descriptor>:
    alt_msgdma_dev *dev,
    alt_msgdma_prefetcher_standard_descriptor *descriptor, 
    alt_u32 read_address, 
    alt_u32 length, 
    alt_u32 control)
{
  81094c:	defff804 	addi	sp,sp,-32
  810950:	dfc00715 	stw	ra,28(sp)
  810954:	df000615 	stw	fp,24(sp)
  810958:	df000604 	addi	fp,sp,24
  81095c:	e13ffc15 	stw	r4,-16(fp)
  810960:	e17ffd15 	stw	r5,-12(fp)
  810964:	e1bffe15 	stw	r6,-8(fp)
  810968:	e1ffff15 	stw	r7,-4(fp)
    return alt_msgdma_construct_prefetcher_standard_descriptor(dev, descriptor,
  81096c:	e0800217 	ldw	r2,8(fp)
  810970:	d8800115 	stw	r2,4(sp)
  810974:	e0bfff17 	ldw	r2,-4(fp)
  810978:	d8800015 	stw	r2,0(sp)
  81097c:	000f883a 	mov	r7,zero
  810980:	e1bffe17 	ldw	r6,-8(fp)
  810984:	e17ffd17 	ldw	r5,-12(fp)
  810988:	e13ffc17 	ldw	r4,-16(fp)
  81098c:	08106640 	call	810664 <alt_msgdma_construct_prefetcher_standard_descriptor>
            read_address, 0, length, control);
}
  810990:	e037883a 	mov	sp,fp
  810994:	dfc00117 	ldw	ra,4(sp)
  810998:	df000017 	ldw	fp,0(sp)
  81099c:	dec00204 	addi	sp,sp,8
  8109a0:	f800283a 	ret

008109a4 <alt_msgdma_construct_prefetcher_extended_st_to_mm_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number,
    alt_u8 write_burst_count,
    alt_u16 write_stride)
{
  8109a4:	deffee04 	addi	sp,sp,-72
  8109a8:	dfc01115 	stw	ra,68(sp)
  8109ac:	df001015 	stw	fp,64(sp)
  8109b0:	df001004 	addi	fp,sp,64
  8109b4:	e13ff915 	stw	r4,-28(fp)
  8109b8:	e17ffa15 	stw	r5,-24(fp)
  8109bc:	e1bffb15 	stw	r6,-20(fp)
  8109c0:	e1fffc15 	stw	r7,-16(fp)
  8109c4:	e1000417 	ldw	r4,16(fp)
  8109c8:	e0c00517 	ldw	r3,20(fp)
  8109cc:	e0800617 	ldw	r2,24(fp)
  8109d0:	e13ffd0d 	sth	r4,-12(fp)
  8109d4:	e0fffe05 	stb	r3,-8(fp)
  8109d8:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor, 
  8109dc:	e0bffd0b 	ldhu	r2,-12(fp)
  8109e0:	e0fffe03 	ldbu	r3,-8(fp)
  8109e4:	e13fff0b 	ldhu	r4,-4(fp)
  8109e8:	d9000815 	stw	r4,32(sp)
  8109ec:	d8000715 	stw	zero,28(sp)
  8109f0:	d8c00615 	stw	r3,24(sp)
  8109f4:	d8000515 	stw	zero,20(sp)
  8109f8:	d8800415 	stw	r2,16(sp)
  8109fc:	e0800317 	ldw	r2,12(fp)
  810a00:	d8800315 	stw	r2,12(sp)
  810a04:	e0800217 	ldw	r2,8(fp)
  810a08:	d8800215 	stw	r2,8(sp)
  810a0c:	e0bffc17 	ldw	r2,-16(fp)
  810a10:	d8800115 	stw	r2,4(sp)
  810a14:	e0bffb17 	ldw	r2,-20(fp)
  810a18:	d8800015 	stw	r2,0(sp)
  810a1c:	000f883a 	mov	r7,zero
  810a20:	000d883a 	mov	r6,zero
  810a24:	e17ffa17 	ldw	r5,-24(fp)
  810a28:	e13ff917 	ldw	r4,-28(fp)
  810a2c:	08107080 	call	810708 <alt_msgdma_construct_prefetcher_extended_descriptor>
            0, 0, write_address_high, write_address_low, length, control, 
            sequence_number, 0, write_burst_count, 0, write_stride);
}
  810a30:	e037883a 	mov	sp,fp
  810a34:	dfc00117 	ldw	ra,4(sp)
  810a38:	df000017 	ldw	fp,0(sp)
  810a3c:	dec00204 	addi	sp,sp,8
  810a40:	f800283a 	ret

00810a44 <alt_msgdma_construct_prefetcher_extended_mm_to_st_descriptor>:
    alt_u32 length, 
    alt_u32 control, 
    alt_u16 sequence_number, 
    alt_u8 read_burst_count, 
    alt_u16 read_stride)
{
  810a44:	deffee04 	addi	sp,sp,-72
  810a48:	dfc01115 	stw	ra,68(sp)
  810a4c:	df001015 	stw	fp,64(sp)
  810a50:	df001004 	addi	fp,sp,64
  810a54:	e13ff915 	stw	r4,-28(fp)
  810a58:	e17ffa15 	stw	r5,-24(fp)
  810a5c:	e1bffb15 	stw	r6,-20(fp)
  810a60:	e1fffc15 	stw	r7,-16(fp)
  810a64:	e1000417 	ldw	r4,16(fp)
  810a68:	e0c00517 	ldw	r3,20(fp)
  810a6c:	e0800617 	ldw	r2,24(fp)
  810a70:	e13ffd0d 	sth	r4,-12(fp)
  810a74:	e0fffe05 	stb	r3,-8(fp)
  810a78:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
  810a7c:	e0bffd0b 	ldhu	r2,-12(fp)
  810a80:	e0fffe03 	ldbu	r3,-8(fp)
  810a84:	e13fff0b 	ldhu	r4,-4(fp)
  810a88:	d8000815 	stw	zero,32(sp)
  810a8c:	d9000715 	stw	r4,28(sp)
  810a90:	d8000615 	stw	zero,24(sp)
  810a94:	d8c00515 	stw	r3,20(sp)
  810a98:	d8800415 	stw	r2,16(sp)
  810a9c:	e0800317 	ldw	r2,12(fp)
  810aa0:	d8800315 	stw	r2,12(sp)
  810aa4:	e0800217 	ldw	r2,8(fp)
  810aa8:	d8800215 	stw	r2,8(sp)
  810aac:	d8000115 	stw	zero,4(sp)
  810ab0:	d8000015 	stw	zero,0(sp)
  810ab4:	e1fffc17 	ldw	r7,-16(fp)
  810ab8:	e1bffb17 	ldw	r6,-20(fp)
  810abc:	e17ffa17 	ldw	r5,-24(fp)
  810ac0:	e13ff917 	ldw	r4,-28(fp)
  810ac4:	08107080 	call	810708 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, 0, 0, length, control, 
            sequence_number, read_burst_count, 0, read_stride, 0);
}
  810ac8:	e037883a 	mov	sp,fp
  810acc:	dfc00117 	ldw	ra,4(sp)
  810ad0:	df000017 	ldw	fp,0(sp)
  810ad4:	dec00204 	addi	sp,sp,8
  810ad8:	f800283a 	ret

00810adc <alt_msgdma_construct_prefetcher_extended_mm_to_mm_descriptor>:
    alt_u16 sequence_number,
    alt_u8 read_burst_count,
    alt_u8 write_burst_count, 
    alt_u16 read_stride, 
    alt_u16 write_stride)
{
  810adc:	deffec04 	addi	sp,sp,-80
  810ae0:	dfc01315 	stw	ra,76(sp)
  810ae4:	df001215 	stw	fp,72(sp)
  810ae8:	df001204 	addi	fp,sp,72
  810aec:	e13ff715 	stw	r4,-36(fp)
  810af0:	e17ff815 	stw	r5,-32(fp)
  810af4:	e1bff915 	stw	r6,-28(fp)
  810af8:	e1fffa15 	stw	r7,-24(fp)
  810afc:	e1800617 	ldw	r6,24(fp)
  810b00:	e1400717 	ldw	r5,28(fp)
  810b04:	e1000817 	ldw	r4,32(fp)
  810b08:	e0c00917 	ldw	r3,36(fp)
  810b0c:	e0800a17 	ldw	r2,40(fp)
  810b10:	e1bffb0d 	sth	r6,-20(fp)
  810b14:	e17ffc05 	stb	r5,-16(fp)
  810b18:	e13ffd05 	stb	r4,-12(fp)
  810b1c:	e0fffe0d 	sth	r3,-8(fp)
  810b20:	e0bfff0d 	sth	r2,-4(fp)
    return alt_msgdma_construct_prefetcher_extended_descriptor(dev, descriptor,
  810b24:	e0bffb0b 	ldhu	r2,-20(fp)
  810b28:	e0fffc03 	ldbu	r3,-16(fp)
  810b2c:	e13ffd03 	ldbu	r4,-12(fp)
  810b30:	e17ffe0b 	ldhu	r5,-8(fp)
  810b34:	e1bfff0b 	ldhu	r6,-4(fp)
  810b38:	d9800815 	stw	r6,32(sp)
  810b3c:	d9400715 	stw	r5,28(sp)
  810b40:	d9000615 	stw	r4,24(sp)
  810b44:	d8c00515 	stw	r3,20(sp)
  810b48:	d8800415 	stw	r2,16(sp)
  810b4c:	e0800517 	ldw	r2,20(fp)
  810b50:	d8800315 	stw	r2,12(sp)
  810b54:	e0800417 	ldw	r2,16(fp)
  810b58:	d8800215 	stw	r2,8(sp)
  810b5c:	e0800317 	ldw	r2,12(fp)
  810b60:	d8800115 	stw	r2,4(sp)
  810b64:	e0800217 	ldw	r2,8(fp)
  810b68:	d8800015 	stw	r2,0(sp)
  810b6c:	e1fffa17 	ldw	r7,-24(fp)
  810b70:	e1bff917 	ldw	r6,-28(fp)
  810b74:	e17ff817 	ldw	r5,-32(fp)
  810b78:	e13ff717 	ldw	r4,-36(fp)
  810b7c:	08107080 	call	810708 <alt_msgdma_construct_prefetcher_extended_descriptor>
            read_address_high, read_address_low, write_address_high, 
            write_address_low, length, control, sequence_number, 
            read_burst_count, write_burst_count, read_stride, write_stride);

}
  810b80:	e037883a 	mov	sp,fp
  810b84:	dfc00117 	ldw	ra,4(sp)
  810b88:	df000017 	ldw	fp,0(sp)
  810b8c:	dec00204 	addi	sp,sp,8
  810b90:	f800283a 	ret

00810b94 <alt_msgdma_prefetcher_add_standard_desc_to_list>:
 *           descriptor.next_ptr not pointing back to itslef)
 */
int alt_msgdma_prefetcher_add_standard_desc_to_list (
    alt_msgdma_prefetcher_standard_descriptor** list,
    alt_msgdma_prefetcher_standard_descriptor* descriptor)
{
  810b94:	defffc04 	addi	sp,sp,-16
  810b98:	df000315 	stw	fp,12(sp)
  810b9c:	df000304 	addi	fp,sp,12
  810ba0:	e13ffe15 	stw	r4,-8(fp)
  810ba4:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    
    if (descriptor == NULL)
  810ba8:	e0bfff17 	ldw	r2,-4(fp)
  810bac:	1000021e 	bne	r2,zero,810bb8 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
  810bb0:	00bffa84 	movi	r2,-22
  810bb4:	00002f06 	br	810c74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (descriptor->next_desc_ptr != (alt_u32)descriptor)
  810bb8:	e0bfff17 	ldw	r2,-4(fp)
  810bbc:	10c00317 	ldw	r3,12(r2)
  810bc0:	e0bfff17 	ldw	r2,-4(fp)
  810bc4:	18800226 	beq	r3,r2,810bd0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x3c>
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
  810bc8:	00bffa84 	movi	r2,-22
  810bcc:	00002906 	br	810c74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == NULL)
  810bd0:	e0bffe17 	ldw	r2,-8(fp)
  810bd4:	10800017 	ldw	r2,0(r2)
  810bd8:	1000051e 	bne	r2,zero,810bf0 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x5c>
    {
        *list = descriptor;  /* make this root-node if list is empty */
  810bdc:	e0bffe17 	ldw	r2,-8(fp)
  810be0:	e0ffff17 	ldw	r3,-4(fp)
  810be4:	10c00015 	stw	r3,0(r2)
        return 0;  /* successfully added */
  810be8:	0005883a 	mov	r2,zero
  810bec:	00002106 	br	810c74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    if (*list == descriptor)
  810bf0:	e0bffe17 	ldw	r2,-8(fp)
  810bf4:	10c00017 	ldw	r3,0(r2)
  810bf8:	e0bfff17 	ldw	r2,-4(fp)
  810bfc:	1880021e 	bne	r3,r2,810c08 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x74>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
  810c00:	00bffa84 	movi	r2,-22
  810c04:	00001b06 	br	810c74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
  810c08:	e0bffe17 	ldw	r2,-8(fp)
  810c0c:	10800017 	ldw	r2,0(r2)
  810c10:	e0bffd15 	stw	r2,-12(fp)
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
  810c14:	00000906 	br	810c3c <alt_msgdma_prefetcher_add_standard_desc_to_list+0xa8>
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
  810c18:	e0bffd17 	ldw	r2,-12(fp)
  810c1c:	10c00317 	ldw	r3,12(r2)
  810c20:	e0bfff17 	ldw	r2,-4(fp)
  810c24:	1880021e 	bne	r3,r2,810c30 <alt_msgdma_prefetcher_add_standard_desc_to_list+0x9c>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
  810c28:	00bffa84 	movi	r2,-22
  810c2c:	00001106 	br	810c74 <alt_msgdma_prefetcher_add_standard_desc_to_list+0xe0>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
  810c30:	e0bffd17 	ldw	r2,-12(fp)
  810c34:	10800317 	ldw	r2,12(r2)
    {
        if (last_descr_ptr->next_desc_ptr == (alt_u32)descriptor)
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        last_descr_ptr = 
  810c38:	e0bffd15 	stw	r2,-12(fp)
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
    /* traverse list until you get the last node */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)*list)  
  810c3c:	e0bffd17 	ldw	r2,-12(fp)
  810c40:	10800317 	ldw	r2,12(r2)
  810c44:	e0fffe17 	ldw	r3,-8(fp)
  810c48:	18c00017 	ldw	r3,0(r3)
  810c4c:	10fff21e 	bne	r2,r3,810c18 <__alt_mem_descriptor_memory+0xff790c18>
        }
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
    }
    /* add this descriptor to end of list */
    last_descr_ptr->next_desc_ptr = (alt_u32)((uintptr_t)descriptor);
  810c50:	e0ffff17 	ldw	r3,-4(fp)
  810c54:	e0bffd17 	ldw	r2,-12(fp)
  810c58:	10c00315 	stw	r3,12(r2)
    /* ensure new last pointer points the start of the list */
    descriptor->next_desc_ptr = (alt_u32)((uintptr_t)*list);  
  810c5c:	e0bffe17 	ldw	r2,-8(fp)
  810c60:	10800017 	ldw	r2,0(r2)
  810c64:	1007883a 	mov	r3,r2
  810c68:	e0bfff17 	ldw	r2,-4(fp)
  810c6c:	10c00315 	stw	r3,12(r2)
    return 0; /* successfully added */
  810c70:	0005883a 	mov	r2,zero
}
  810c74:	e037883a 	mov	sp,fp
  810c78:	df000017 	ldw	fp,0(sp)
  810c7c:	dec00104 	addi	sp,sp,4
  810c80:	f800283a 	ret

00810c84 <alt_msgdma_prefetcher_add_extended_desc_to_list>:

int alt_msgdma_prefetcher_add_extended_desc_to_list (
    alt_msgdma_prefetcher_extended_descriptor** list,
    alt_msgdma_prefetcher_extended_descriptor* descriptor)
{
  810c84:	defff804 	addi	sp,sp,-32
  810c88:	df000715 	stw	fp,28(sp)
  810c8c:	df000704 	addi	fp,sp,28
  810c90:	e13ffe15 	stw	r4,-8(fp)
  810c94:	e17fff15 	stw	r5,-4(fp)
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    msgdma_addr64 root_node_addr, next_node_addr;
    
    if (descriptor == NULL)
  810c98:	e13fff17 	ldw	r4,-4(fp)
  810c9c:	2000021e 	bne	r4,zero,810ca8 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x24>
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
  810ca0:	00bffa84 	movi	r2,-22
  810ca4:	00005906 	br	810e0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
  810ca8:	e13fff17 	ldw	r4,-4(fp)
  810cac:	2015883a 	mov	r10,r4
  810cb0:	0017883a 	mov	r11,zero
  810cb4:	e2bffc15 	stw	r10,-16(fp)
  810cb8:	e2fffd15 	stw	r11,-12(fp)
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
  810cbc:	e13fff17 	ldw	r4,-4(fp)
  810cc0:	21400317 	ldw	r5,12(r4)
  810cc4:	e13ffc17 	ldw	r4,-16(fp)
  810cc8:	2900041e 	bne	r5,r4,810cdc <alt_msgdma_prefetcher_add_extended_desc_to_list+0x58>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
  810ccc:	e13fff17 	ldw	r4,-4(fp)
  810cd0:	21400b17 	ldw	r5,44(r4)
  810cd4:	e13ffd17 	ldw	r4,-12(fp)
    {
        return -EINVAL;  /* this descriptor cannot be NULL */
    }
    
    next_node_addr.u64 = (uintptr_t)descriptor;
    if( (descriptor->next_desc_ptr_low != next_node_addr.u32[0]) ||
  810cd8:	29000226 	beq	r5,r4,810ce4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x60>
        (descriptor->next_desc_ptr_high != next_node_addr.u32[1]))
    {
        return -EINVAL;  /* descriptor.next_ptr must point to itself */
  810cdc:	00bffa84 	movi	r2,-22
  810ce0:	00004a06 	br	810e0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    if (*list == NULL)
  810ce4:	e13ffe17 	ldw	r4,-8(fp)
  810ce8:	21000017 	ldw	r4,0(r4)
  810cec:	2000051e 	bne	r4,zero,810d04 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x80>
    {
        *list = descriptor;  /* make this the root-node if list is empty */
  810cf0:	e0bffe17 	ldw	r2,-8(fp)
  810cf4:	e0ffff17 	ldw	r3,-4(fp)
  810cf8:	10c00015 	stw	r3,0(r2)
        return 0;
  810cfc:	0005883a 	mov	r2,zero
  810d00:	00004206 	br	810e0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    if (*list == descriptor)
  810d04:	e13ffe17 	ldw	r4,-8(fp)
  810d08:	21400017 	ldw	r5,0(r4)
  810d0c:	e13fff17 	ldw	r4,-4(fp)
  810d10:	2900021e 	bne	r5,r4,810d1c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x98>
    {
        return -EINVAL;  /* this descriptor cannot already be root-node */
  810d14:	00bffa84 	movi	r2,-22
  810d18:	00003c06 	br	810e0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
    }
    
    /* get to last node in the list */
    last_descr_ptr = *list; /* start at list root-node */
  810d1c:	e13ffe17 	ldw	r4,-8(fp)
  810d20:	21000017 	ldw	r4,0(r4)
  810d24:	e13ff915 	stw	r4,-28(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
  810d28:	e13ffe17 	ldw	r4,-8(fp)
  810d2c:	21000017 	ldw	r4,0(r4)
  810d30:	2011883a 	mov	r8,r4
  810d34:	0013883a 	mov	r9,zero
  810d38:	e23ffa15 	stw	r8,-24(fp)
  810d3c:	e27ffb15 	stw	r9,-20(fp)
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
  810d40:	00001806 	br	810da4 <alt_msgdma_prefetcher_add_extended_desc_to_list+0x120>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* first check if descriptor already in the list */
        next_node_addr.u64 = (uintptr_t)descriptor;
  810d44:	e13fff17 	ldw	r4,-4(fp)
  810d48:	200d883a 	mov	r6,r4
  810d4c:	000f883a 	mov	r7,zero
  810d50:	e1bffc15 	stw	r6,-16(fp)
  810d54:	e1fffd15 	stw	r7,-12(fp)
        if ((last_descr_ptr->next_desc_ptr_low == next_node_addr.u32[0])
  810d58:	e13ff917 	ldw	r4,-28(fp)
  810d5c:	21400317 	ldw	r5,12(r4)
  810d60:	e13ffc17 	ldw	r4,-16(fp)
  810d64:	2900061e 	bne	r5,r4,810d80 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
            && (last_descr_ptr->next_desc_ptr_high == next_node_addr.u32[1]))
  810d68:	e13ff917 	ldw	r4,-28(fp)
  810d6c:	21400b17 	ldw	r5,44(r4)
  810d70:	e13ffd17 	ldw	r4,-12(fp)
  810d74:	2900021e 	bne	r5,r4,810d80 <alt_msgdma_prefetcher_add_extended_desc_to_list+0xfc>
        {
            return -EINVAL;  /* descriptor cannot already be in the list */
  810d78:	00bffa84 	movi	r2,-22
  810d7c:	00002306 	br	810e0c <alt_msgdma_prefetcher_add_extended_desc_to_list+0x188>
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
  810d80:	e13ff917 	ldw	r4,-28(fp)
  810d84:	21000317 	ldw	r4,12(r4)
  810d88:	e13ffc15 	stw	r4,-16(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
  810d8c:	e13ff917 	ldw	r4,-28(fp)
  810d90:	21000b17 	ldw	r4,44(r4)
  810d94:	e13ffd15 	stw	r4,-12(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
  810d98:	e13ffc17 	ldw	r4,-16(fp)
  810d9c:	e17ffd17 	ldw	r5,-12(fp)
            return -EINVAL;  /* descriptor cannot already be in the list */
        }
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
  810da0:	e13ff915 	stw	r4,-28(fp)
    last_descr_ptr = *list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)*list;
    
    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
  810da4:	e13ff917 	ldw	r4,-28(fp)
  810da8:	21400317 	ldw	r5,12(r4)
  810dac:	e13ffa17 	ldw	r4,-24(fp)
  810db0:	293fe41e 	bne	r5,r4,810d44 <__alt_mem_descriptor_memory+0xff790d44>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
  810db4:	e13ff917 	ldw	r4,-28(fp)
  810db8:	21400b17 	ldw	r5,44(r4)
  810dbc:	e13ffb17 	ldw	r4,-20(fp)
  810dc0:	293fe01e 	bne	r5,r4,810d44 <__alt_mem_descriptor_memory+0xff790d44>
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
    }
    /* add this descriptor to end of list */
    next_node_addr.u64 = (uintptr_t)descriptor;
  810dc4:	e13fff17 	ldw	r4,-4(fp)
  810dc8:	2005883a 	mov	r2,r4
  810dcc:	0007883a 	mov	r3,zero
  810dd0:	e0bffc15 	stw	r2,-16(fp)
  810dd4:	e0fffd15 	stw	r3,-12(fp)
    last_descr_ptr->next_desc_ptr_low = next_node_addr.u32[0];
  810dd8:	e0fffc17 	ldw	r3,-16(fp)
  810ddc:	e0bff917 	ldw	r2,-28(fp)
  810de0:	10c00315 	stw	r3,12(r2)
    last_descr_ptr->next_desc_ptr_high = next_node_addr.u32[1];
  810de4:	e0fffd17 	ldw	r3,-12(fp)
  810de8:	e0bff917 	ldw	r2,-28(fp)
  810dec:	10c00b15 	stw	r3,44(r2)
    /* ensure new last pointer points the beginning of the list */
    descriptor->next_desc_ptr_low = root_node_addr.u32[0];
  810df0:	e0fffa17 	ldw	r3,-24(fp)
  810df4:	e0bfff17 	ldw	r2,-4(fp)
  810df8:	10c00315 	stw	r3,12(r2)
    descriptor->next_desc_ptr_high = root_node_addr.u32[1];
  810dfc:	e0fffb17 	ldw	r3,-20(fp)
  810e00:	e0bfff17 	ldw	r2,-4(fp)
  810e04:	10c00b15 	stw	r3,44(r2)
    return 0;
  810e08:	0005883a 	mov	r2,zero
}
  810e0c:	e037883a 	mov	sp,fp
  810e10:	df000017 	ldw	fp,0(sp)
  810e14:	dec00104 	addi	sp,sp,4
  810e18:	f800283a 	ret

00810e1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>:
 */ 
int alt_msgdma_prefetcher_set_std_list_own_by_hw_bits (
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)    
{
  810e1c:	defff804 	addi	sp,sp,-32
  810e20:	dfc00715 	stw	ra,28(sp)
  810e24:	df000615 	stw	fp,24(sp)
  810e28:	df000604 	addi	fp,sp,24
  810e2c:	e13ffd15 	stw	r4,-12(fp)
  810e30:	2807883a 	mov	r3,r5
  810e34:	3005883a 	mov	r2,r6
  810e38:	e0fffe05 	stb	r3,-8(fp)
  810e3c:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 descriptor_control_field = 0;
  810e40:	e03ffc15 	stw	zero,-16(fp)
    alt_msgdma_prefetcher_standard_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
  810e44:	e03ffb15 	stw	zero,-20(fp)
    
    if (list == NULL)
  810e48:	e0bffd17 	ldw	r2,-12(fp)
  810e4c:	1000021e 	bne	r2,zero,810e58 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x3c>
    {
        return -EINVAL;  /* this list cannot be empty */
  810e50:	00bffa84 	movi	r2,-22
  810e54:	00002f06 	br	810f14 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf8>
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
  810e58:	e0bffd17 	ldw	r2,-12(fp)
  810e5c:	e0bffa15 	stw	r2,-24(fp)
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
  810e60:	00000d06 	br	810e98 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0x7c>
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
  810e64:	e0bffa17 	ldw	r2,-24(fp)
  810e68:	10800717 	ldw	r2,28(r2)
  810e6c:	e0bffc15 	stw	r2,-16(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
  810e70:	e0bffc17 	ldw	r2,-16(fp)
  810e74:	10d00034 	orhi	r3,r2,16384
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
    {
        /* get current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
  810e78:	e0bffa17 	ldw	r2,-24(fp)
  810e7c:	10c00715 	stw	r3,28(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
  810e80:	e0bffa17 	ldw	r2,-24(fp)
  810e84:	10800317 	ldw	r2,12(r2)
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list */
        last_descr_ptr = 
  810e88:	e0bffa15 	stw	r2,-24(fp)
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
  810e8c:	e0bffb17 	ldw	r2,-20(fp)
  810e90:	10800044 	addi	r2,r2,1
  810e94:	e0bffb15 	stw	r2,-20(fp)
    }

    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
    /* traverse list to update all of the nodes */
    while (last_descr_ptr->next_desc_ptr != (alt_u32)list)  
  810e98:	e0bffa17 	ldw	r2,-24(fp)
  810e9c:	10c00317 	ldw	r3,12(r2)
  810ea0:	e0bffd17 	ldw	r2,-12(fp)
  810ea4:	18bfef1e 	bne	r3,r2,810e64 <__alt_mem_descriptor_memory+0xff790e64>
            (alt_msgdma_prefetcher_standard_descriptor*)(last_descr_ptr->next_desc_ptr);
            
        descriptor_count++;
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
  810ea8:	e0bffa17 	ldw	r2,-24(fp)
  810eac:	10800717 	ldw	r2,28(r2)
  810eb0:	e0bffc15 	stw	r2,-16(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
  810eb4:	e0bffe03 	ldbu	r2,-8(fp)
  810eb8:	10000726 	beq	r2,zero,810ed8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xbc>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
  810ebc:	e0fffc17 	ldw	r3,-16(fp)
  810ec0:	00b00034 	movhi	r2,49152
  810ec4:	10bfffc4 	addi	r2,r2,-1
  810ec8:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* get current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
  810ecc:	e0bffa17 	ldw	r2,-24(fp)
  810ed0:	10c00715 	stw	r3,28(r2)
  810ed4:	00000406 	br	810ee8 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xcc>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
  810ed8:	e0bffc17 	ldw	r2,-16(fp)
  810edc:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
  810ee0:	e0bffa17 	ldw	r2,-24(fp)
  810ee4:	10c00715 	stw	r3,28(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
  810ee8:	e0bffb17 	ldw	r2,-20(fp)
  810eec:	10800044 	addi	r2,r2,1
  810ef0:	e0bffb15 	stw	r2,-20(fp)
    
    if (dcache_flush_desc_list)
  810ef4:	e0bfff03 	ldbu	r2,-4(fp)
  810ef8:	10000526 	beq	r2,zero,810f10 <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits+0xf4>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_standard_descriptor) * descriptor_count);
  810efc:	e0bffb17 	ldw	r2,-20(fp)
  810f00:	1004917a 	slli	r2,r2,5
  810f04:	100b883a 	mov	r5,r2
  810f08:	e13ffd17 	ldw	r4,-12(fp)
  810f0c:	08129500 	call	812950 <alt_dcache_flush>
    }
    
    return 0;
  810f10:	0005883a 	mov	r2,zero
}
  810f14:	e037883a 	mov	sp,fp
  810f18:	dfc00117 	ldw	ra,4(sp)
  810f1c:	df000017 	ldw	fp,0(sp)
  810f20:	dec00204 	addi	sp,sp,8
  810f24:	f800283a 	ret

00810f28 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>:
 */    
int alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits (
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list) 
{    
  810f28:	defff404 	addi	sp,sp,-48
  810f2c:	dfc00b15 	stw	ra,44(sp)
  810f30:	df000a15 	stw	fp,40(sp)
  810f34:	df000a04 	addi	fp,sp,40
  810f38:	e13ffd15 	stw	r4,-12(fp)
  810f3c:	3009883a 	mov	r4,r6
  810f40:	e17ffe05 	stb	r5,-8(fp)
  810f44:	e13fff05 	stb	r4,-4(fp)
    alt_u32 descriptor_control_field = 0;
  810f48:	e03ff815 	stw	zero,-32(fp)
    msgdma_addr64 root_node_addr, next_node_addr;
    alt_msgdma_prefetcher_extended_descriptor *last_descr_ptr;
    alt_u32 descriptor_count = 0;
  810f4c:	e03ff715 	stw	zero,-36(fp)
    
    if (list == NULL)
  810f50:	e13ffd17 	ldw	r4,-12(fp)
  810f54:	2000021e 	bne	r4,zero,810f60 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x38>
    {
        return -EINVAL;  /* this list cannot be empty */
  810f58:	00bffa84 	movi	r2,-22
  810f5c:	00003e06 	br	811058 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x130>
    }
    
    /* update all nodes in the list */
    last_descr_ptr = list; /* start at list root-node */
  810f60:	e13ffd17 	ldw	r4,-12(fp)
  810f64:	e13ff615 	stw	r4,-40(fp)
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;
  810f68:	e13ffd17 	ldw	r4,-12(fp)
  810f6c:	2005883a 	mov	r2,r4
  810f70:	0007883a 	mov	r3,zero
  810f74:	e0bff915 	stw	r2,-28(fp)
  810f78:	e0fffa15 	stw	r3,-24(fp)

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
  810f7c:	00001306 	br	810fcc <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xa4>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
  810f80:	e0bff617 	ldw	r2,-40(fp)
  810f84:	10800f17 	ldw	r2,60(r2)
  810f88:	e0bff815 	stw	r2,-32(fp)
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
  810f8c:	e0bff817 	ldw	r2,-32(fp)
  810f90:	10d00034 	orhi	r3,r2,16384
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
    {
        /* start with current value */
        descriptor_control_field = last_descr_ptr->control;
        /* update own_by_hw bit only */
        last_descr_ptr->control = descriptor_control_field 
  810f94:	e0bff617 	ldw	r2,-40(fp)
  810f98:	10c00f15 	stw	r3,60(r2)
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
  810f9c:	e0bff617 	ldw	r2,-40(fp)
  810fa0:	10800317 	ldw	r2,12(r2)
  810fa4:	e0bffb15 	stw	r2,-20(fp)
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
  810fa8:	e0bff617 	ldw	r2,-40(fp)
  810fac:	10800b17 	ldw	r2,44(r2)
  810fb0:	e0bffc15 	stw	r2,-16(fp)
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
  810fb4:	e0bffb17 	ldw	r2,-20(fp)
  810fb8:	e0fffc17 	ldw	r3,-16(fp)
        last_descr_ptr->control = descriptor_control_field 
                | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;
        /* go to next node in list, using 64 bit address */
        next_node_addr.u32[0] = last_descr_ptr->next_desc_ptr_low;
        next_node_addr.u32[1] = last_descr_ptr->next_desc_ptr_high;
        last_descr_ptr = 
  810fbc:	e0bff615 	stw	r2,-40(fp)
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
  810fc0:	e0bff717 	ldw	r2,-36(fp)
  810fc4:	10800044 	addi	r2,r2,1
  810fc8:	e0bff715 	stw	r2,-36(fp)
    last_descr_ptr = list; /* start at list root-node */
    /* the last nodes next ptr should point to the root node*/
    root_node_addr.u64 = (uintptr_t)list;

    /* traverse list until you get the last node */
    while ((last_descr_ptr->next_desc_ptr_low != root_node_addr.u32[0]) 
  810fcc:	e0bff617 	ldw	r2,-40(fp)
  810fd0:	10c00317 	ldw	r3,12(r2)
  810fd4:	e0bff917 	ldw	r2,-28(fp)
  810fd8:	18bfe91e 	bne	r3,r2,810f80 <__alt_mem_descriptor_memory+0xff790f80>
        || (last_descr_ptr->next_desc_ptr_high != root_node_addr.u32[1]))
  810fdc:	e0bff617 	ldw	r2,-40(fp)
  810fe0:	10c00b17 	ldw	r3,44(r2)
  810fe4:	e0bffa17 	ldw	r2,-24(fp)
  810fe8:	18bfe51e 	bne	r3,r2,810f80 <__alt_mem_descriptor_memory+0xff790f80>
        last_descr_ptr = 
            (alt_msgdma_prefetcher_extended_descriptor*)((uintptr_t)next_node_addr.u64);
        descriptor_count++;            
    }
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
  810fec:	e0bff617 	ldw	r2,-40(fp)
  810ff0:	10800f17 	ldw	r2,60(r2)
  810ff4:	e0bff815 	stw	r2,-32(fp)
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
  810ff8:	e0bffe03 	ldbu	r2,-8(fp)
  810ffc:	10000726 	beq	r2,zero,81101c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0xf4>
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
  811000:	e0fff817 	ldw	r3,-32(fp)
  811004:	00b00034 	movhi	r2,49152
  811008:	10bfffc4 	addi	r2,r2,-1
  81100c:	1886703a 	and	r3,r3,r2
    /* update the last node in the list, currently last_descr_ptr after while loop */
    descriptor_control_field = last_descr_ptr->control;    /* start with current value */
    /* update own_by_hw bit only */
    if (last_desc_owned_by_sw)
    {
        last_descr_ptr->control = descriptor_control_field 
  811010:	e0bff617 	ldw	r2,-40(fp)
  811014:	10c00f15 	stw	r3,60(r2)
  811018:	00000406 	br	81102c <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x104>
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
  81101c:	e0bff817 	ldw	r2,-32(fp)
  811020:	10d00034 	orhi	r3,r2,16384
    {
        last_descr_ptr->control = descriptor_control_field 
            & ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_CLR_MASK;
    }
    else {
        last_descr_ptr->control = descriptor_control_field 
  811024:	e0bff617 	ldw	r2,-40(fp)
  811028:	10c00f15 	stw	r3,60(r2)
            | ALT_MSGDMA_PREFETCHER_DESCRIPTOR_CTRL_OWN_BY_HW_SET_MASK;        
    }
    
    descriptor_count++;
  81102c:	e0bff717 	ldw	r2,-36(fp)
  811030:	10800044 	addi	r2,r2,1
  811034:	e0bff715 	stw	r2,-36(fp)
    
    if (dcache_flush_desc_list)
  811038:	e0bfff03 	ldbu	r2,-4(fp)
  81103c:	10000526 	beq	r2,zero,811054 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits+0x12c>
    {        
        alt_dcache_flush(list,sizeof(alt_msgdma_prefetcher_extended_descriptor) * descriptor_count);        
  811040:	e0bff717 	ldw	r2,-36(fp)
  811044:	100491ba 	slli	r2,r2,6
  811048:	100b883a 	mov	r5,r2
  81104c:	e13ffd17 	ldw	r4,-12(fp)
  811050:	08129500 	call	812950 <alt_dcache_flush>
    }
    
    return 0;
  811054:	0005883a 	mov	r2,zero
}
  811058:	e037883a 	mov	sp,fp
  81105c:	dfc00117 	ldw	ra,4(sp)
  811060:	df000017 	ldw	fp,0(sp)
  811064:	dec00204 	addi	sp,sp,8
  811068:	f800283a 	ret

0081106c <alt_msgdma_start_prefetcher_with_list_addr>:
int alt_msgdma_start_prefetcher_with_list_addr (
    alt_msgdma_dev *dev,
    alt_u64  list_addr,
    alt_u8 park_mode_en,
    alt_u8 poll_en)
{
  81106c:	deffef04 	addi	sp,sp,-68
  811070:	df001015 	stw	fp,64(sp)
  811074:	df001004 	addi	fp,sp,64
  811078:	e13ffb15 	stw	r4,-20(fp)
  81107c:	e17ffc15 	stw	r5,-16(fp)
  811080:	e1bffd15 	stw	r6,-12(fp)
  811084:	3807883a 	mov	r3,r7
  811088:	e0800117 	ldw	r2,4(fp)
  81108c:	e0fffe05 	stb	r3,-8(fp)
  811090:	e0bfff05 	stb	r2,-4(fp)
    alt_u32 prefetcher_ctl = 0;
  811094:	e03ff015 	stw	zero,-64(fp)
    alt_u32 dispatcher_ctl = 0;
  811098:	e03ff115 	stw	zero,-60(fp)
    alt_irq_context context = 0;
  81109c:	e03ff215 	stw	zero,-56(fp)
    
    /* use helper struct to get easy access to hi/low address */
    msgdma_addr64 root_node_addr;
    root_node_addr.u64 = list_addr;  
  8110a0:	e0bffc17 	ldw	r2,-16(fp)
  8110a4:	e0bff915 	stw	r2,-28(fp)
  8110a8:	e0bffd17 	ldw	r2,-12(fp)
  8110ac:	e0bffa15 	stw	r2,-24(fp)
     * semaphore. This ensures that accessing registers is thread-safe.
     */
    ALT_SEM_PEND (dev->regs_lock, 0);
    
    /* case where prefetcher already started, return busy error */ 
    prefetcher_ctl = IORD_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base);
  8110b0:	e0bffb17 	ldw	r2,-20(fp)
  8110b4:	10800617 	ldw	r2,24(r2)
  8110b8:	10800037 	ldwio	r2,0(r2)
  8110bc:	e0bff015 	stw	r2,-64(fp)
    if(ALT_MSGDMA_PREFETCHER_CTRL_RUN_GET(prefetcher_ctl)){
  8110c0:	e0bff017 	ldw	r2,-64(fp)
  8110c4:	1080004c 	andi	r2,r2,1
  8110c8:	10000226 	beq	r2,zero,8110d4 <alt_msgdma_start_prefetcher_with_list_addr+0x68>
        /* release the registers semaphore */
        ALT_SEM_POST (dev->regs_lock);
        return -EBUSY;
  8110cc:	00bffc04 	movi	r2,-16
  8110d0:	00009206 	br	81131c <alt_msgdma_start_prefetcher_with_list_addr+0x2b0>
    }
        
    /* Stop the msgdma dispatcher from issuing more descriptors to the
       read or write masters  */
    /* stop issuing more descriptors */
    dispatcher_ctl = ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
  8110d4:	00800804 	movi	r2,32
  8110d8:	e0bff115 	stw	r2,-60(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  8110dc:	0005303a 	rdctl	r2,status
  8110e0:	e0bff515 	stw	r2,-44(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  8110e4:	e0fff517 	ldw	r3,-44(fp)
  8110e8:	00bfff84 	movi	r2,-2
  8110ec:	1884703a 	and	r2,r3,r2
  8110f0:	1001703a 	wrctl	status,r2
  
  return context;
  8110f4:	e0bff517 	ldw	r2,-44(fp)
    
    /* making sure the read-modify-write below can't be pre-empted */
    context = alt_irq_disable_all();
  8110f8:	e0bff215 	stw	r2,-56(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
  8110fc:	e0bffb17 	ldw	r2,-20(fp)
  811100:	10800317 	ldw	r2,12(r2)
  811104:	10800104 	addi	r2,r2,4
  811108:	e0fff117 	ldw	r3,-60(fp)
  81110c:	10c00035 	stwio	r3,0(r2)
    /*
     * Clear any (previous) status register information
     * that might occlude our error checking later.
     */
    IOWR_ALTERA_MSGDMA_CSR_STATUS( dev->csr_base, 
  811110:	e0bffb17 	ldw	r2,-20(fp)
  811114:	10800317 	ldw	r2,12(r2)
  811118:	e0fffb17 	ldw	r3,-20(fp)
  81111c:	18c00317 	ldw	r3,12(r3)
  811120:	18c00037 	ldwio	r3,0(r3)
  811124:	10c00035 	stwio	r3,0(r2)
  811128:	e0bff217 	ldw	r2,-56(fp)
  81112c:	e0bff315 	stw	r2,-52(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811130:	e0bff317 	ldw	r2,-52(fp)
  811134:	1001703a 	wrctl	status,r2
     * If a callback routine has been previously registered which will be
     * called from the msgdma ISR. Set up dispatcher to:
     *  - Run
     *  - Stop on an error with any particular descriptor
     */
    if(dev->callback)
  811138:	e0bffb17 	ldw	r2,-20(fp)
  81113c:	10800b17 	ldw	r2,44(r2)
  811140:	10002326 	beq	r2,zero,8111d0 <alt_msgdma_start_prefetcher_with_list_addr+0x164>
    {
        dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK 
  811144:	e0bffb17 	ldw	r2,-20(fp)
  811148:	10c00d17 	ldw	r3,52(r2)
  81114c:	e0bff117 	ldw	r2,-60(fp)
  811150:	1884b03a 	or	r2,r3,r2
  811154:	10800514 	ori	r2,r2,20
  811158:	e0bff115 	stw	r2,-60(fp)
                | ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK );
        dispatcher_ctl &=  (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK);
  81115c:	e0fff117 	ldw	r3,-60(fp)
  811160:	00bff7c4 	movi	r2,-33
  811164:	1884703a 	and	r2,r3,r2
  811168:	e0bff115 	stw	r2,-60(fp)
        
        prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_SET_MASK;
  81116c:	e0bff017 	ldw	r2,-64(fp)
  811170:	10800214 	ori	r2,r2,8
  811174:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811178:	0005303a 	rdctl	r2,status
  81117c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811180:	e0fff717 	ldw	r3,-36(fp)
  811184:	00bfff84 	movi	r2,-2
  811188:	1884703a 	and	r2,r3,r2
  81118c:	1001703a 	wrctl	status,r2
  
  return context;
  811190:	e0bff717 	ldw	r2,-36(fp)
        /* making sure the read-modify-write below can't be pre-empted */
        context = alt_irq_disable_all(); 
  811194:	e0bff215 	stw	r2,-56(fp)
        IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
  811198:	e0bffb17 	ldw	r2,-20(fp)
  81119c:	10800317 	ldw	r2,12(r2)
  8111a0:	10800104 	addi	r2,r2,4
  8111a4:	e0fff117 	ldw	r3,-60(fp)
  8111a8:	10c00035 	stwio	r3,0(r2)
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
  8111ac:	e0bffb17 	ldw	r2,-20(fp)
  8111b0:	10800617 	ldw	r2,24(r2)
  8111b4:	e0fff017 	ldw	r3,-64(fp)
  8111b8:	10c00035 	stwio	r3,0(r2)
  8111bc:	e0bff217 	ldw	r2,-56(fp)
  8111c0:	e0bff415 	stw	r2,-48(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8111c4:	e0bff417 	ldw	r2,-48(fp)
  8111c8:	1001703a 	wrctl	status,r2
  8111cc:	00002306 	br	81125c <alt_msgdma_start_prefetcher_with_list_addr+0x1f0>
      *   - Stop on an error with any particular descriptor
      *   - Disable interrupt generation
      */
     else
     {
         dispatcher_ctl |= (dev->control | ALTERA_MSGDMA_CSR_STOP_ON_ERROR_MASK);
  8111d0:	e0bffb17 	ldw	r2,-20(fp)
  8111d4:	10c00d17 	ldw	r3,52(r2)
  8111d8:	e0bff117 	ldw	r2,-60(fp)
  8111dc:	1884b03a 	or	r2,r3,r2
  8111e0:	10800114 	ori	r2,r2,4
  8111e4:	e0bff115 	stw	r2,-60(fp)
         dispatcher_ctl &= (~ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK) 
  8111e8:	e0fff117 	ldw	r3,-60(fp)
  8111ec:	00bff3c4 	movi	r2,-49
  8111f0:	1884703a 	and	r2,r3,r2
  8111f4:	e0bff115 	stw	r2,-60(fp)
                 & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_GLOBAL_INTR_EN_CLR_MASK;
  8111f8:	e0fff017 	ldw	r3,-64(fp)
  8111fc:	00bffdc4 	movi	r2,-9
  811200:	1884703a 	and	r2,r3,r2
  811204:	e0bff015 	stw	r2,-64(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  811208:	0005303a 	rdctl	r2,status
  81120c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  811210:	e0fff817 	ldw	r3,-32(fp)
  811214:	00bfff84 	movi	r2,-2
  811218:	1884703a 	and	r2,r3,r2
  81121c:	1001703a 	wrctl	status,r2
  
  return context;
  811220:	e0bff817 	ldw	r2,-32(fp)
         /* making sure the read-modify-write below can't be pre-empted */
         context = alt_irq_disable_all();
  811224:	e0bff215 	stw	r2,-56(fp)
         IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, dispatcher_ctl);
  811228:	e0bffb17 	ldw	r2,-20(fp)
  81122c:	10800317 	ldw	r2,12(r2)
  811230:	10800104 	addi	r2,r2,4
  811234:	e0fff117 	ldw	r3,-60(fp)
  811238:	10c00035 	stwio	r3,0(r2)
         IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
  81123c:	e0bffb17 	ldw	r2,-20(fp)
  811240:	10800617 	ldw	r2,24(r2)
  811244:	e0fff017 	ldw	r3,-64(fp)
  811248:	10c00035 	stwio	r3,0(r2)
  81124c:	e0bff217 	ldw	r2,-56(fp)
  811250:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  811254:	e0bff617 	ldw	r2,-40(fp)
  811258:	1001703a 	wrctl	status,r2
         alt_irq_enable_all(context);
     }   
    
     /* set next descriptor registers to point to the list root-node */
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_LOW(dev->prefetcher_base,
  81125c:	e0bffb17 	ldw	r2,-20(fp)
  811260:	10800617 	ldw	r2,24(r2)
  811264:	10800104 	addi	r2,r2,4
  811268:	e0fff917 	ldw	r3,-28(fp)
  81126c:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[0]);
     IOWR_ALT_MSGDMA_PREFETCHER_NEXT_DESCRIPTOR_PTR_HIGH(dev->prefetcher_base,
  811270:	e0bffb17 	ldw	r2,-20(fp)
  811274:	10800617 	ldw	r2,24(r2)
  811278:	10800204 	addi	r2,r2,8
  81127c:	e0fffa17 	ldw	r3,-24(fp)
  811280:	10c00035 	stwio	r3,0(r2)
             root_node_addr.u32[1]);
        
     /* set park-mode */
     if (park_mode_en){
  811284:	e0bffe03 	ldbu	r2,-8(fp)
  811288:	10000426 	beq	r2,zero,81129c <alt_msgdma_start_prefetcher_with_list_addr+0x230>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_SET_MASK;
  81128c:	e0bff017 	ldw	r2,-64(fp)
  811290:	10800414 	ori	r2,r2,16
  811294:	e0bff015 	stw	r2,-64(fp)
  811298:	00000406 	br	8112ac <alt_msgdma_start_prefetcher_with_list_addr+0x240>
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_PARK_MODE_CLR_MASK;
  81129c:	e0fff017 	ldw	r3,-64(fp)
  8112a0:	00bffbc4 	movi	r2,-17
  8112a4:	1884703a 	and	r2,r3,r2
  8112a8:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set poll-en */
     if (poll_en){
  8112ac:	e0bfff03 	ldbu	r2,-4(fp)
  8112b0:	10000e26 	beq	r2,zero,8112ec <alt_msgdma_start_prefetcher_with_list_addr+0x280>
         prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_MASK; 
  8112b4:	e0bff017 	ldw	r2,-64(fp)
  8112b8:	10800094 	ori	r2,r2,2
  8112bc:	e0bff015 	stw	r2,-64(fp)
         if(IORD_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
  8112c0:	e0bffb17 	ldw	r2,-20(fp)
  8112c4:	10800617 	ldw	r2,24(r2)
  8112c8:	10800304 	addi	r2,r2,12
  8112cc:	10800037 	ldwio	r2,0(r2)
  8112d0:	10000a1e 	bne	r2,zero,8112fc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                 dev->prefetcher_base) == 0){
             /* set poll frequency to some non-zero default value */
             IOWR_ALT_MSGDMA_PREFETCHER_DESCRIPTOR_POLLING_FREQ(
  8112d4:	e0bffb17 	ldw	r2,-20(fp)
  8112d8:	10800617 	ldw	r2,24(r2)
  8112dc:	10800304 	addi	r2,r2,12
  8112e0:	00c03fc4 	movi	r3,255
  8112e4:	10c00035 	stwio	r3,0(r2)
  8112e8:	00000406 	br	8112fc <alt_msgdma_start_prefetcher_with_list_addr+0x290>
                     dev->prefetcher_base, 0xFF);
         }
     }
     else {
         prefetcher_ctl &= ALT_MSGDMA_PREFETCHER_CTRL_DESC_POLL_EN_CLR_MASK; 
  8112ec:	e0fff017 	ldw	r3,-64(fp)
  8112f0:	00bfff44 	movi	r2,-3
  8112f4:	1884703a 	and	r2,r3,r2
  8112f8:	e0bff015 	stw	r2,-64(fp)
     }
     
     /* set the prefetcher run bit */
     prefetcher_ctl |= ALT_MSGDMA_PREFETCHER_CTRL_RUN_SET_MASK;
  8112fc:	e0bff017 	ldw	r2,-64(fp)
  811300:	10800054 	ori	r2,r2,1
  811304:	e0bff015 	stw	r2,-64(fp)
     /* start the dma since run bit is set */
     IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, prefetcher_ctl);
  811308:	e0bffb17 	ldw	r2,-20(fp)
  81130c:	10800617 	ldw	r2,24(r2)
  811310:	e0fff017 	ldw	r3,-64(fp)
  811314:	10c00035 	stwio	r3,0(r2)
      * Now that access to the registers is complete, release the registers
      * semaphore so that other threads can access the registers.
      */
     ALT_SEM_POST (dev->regs_lock);
     
     return 0;
  811318:	0005883a 	mov	r2,zero
}
  81131c:	e037883a 	mov	sp,fp
  811320:	df000017 	ldw	fp,0(sp)
  811324:	dec00104 	addi	sp,sp,4
  811328:	f800283a 	ret

0081132c <alt_msgdma_start_prefetcher_with_std_desc_list>:
    alt_msgdma_prefetcher_standard_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{    
  81132c:	defff504 	addi	sp,sp,-44
  811330:	dfc00a15 	stw	ra,40(sp)
  811334:	df000915 	stw	fp,36(sp)
  811338:	dc400815 	stw	r17,32(sp)
  81133c:	dc000715 	stw	r16,28(sp)
  811340:	df000904 	addi	fp,sp,36
  811344:	e13ff815 	stw	r4,-32(fp)
  811348:	e17ff915 	stw	r5,-28(fp)
  81134c:	300b883a 	mov	r5,r6
  811350:	3809883a 	mov	r4,r7
  811354:	e0c00217 	ldw	r3,8(fp)
  811358:	e0800317 	ldw	r2,12(fp)
  81135c:	e17ffa05 	stb	r5,-24(fp)
  811360:	e13ffb05 	stb	r4,-20(fp)
  811364:	e0fffc05 	stb	r3,-16(fp)
  811368:	e0bffd05 	stb	r2,-12(fp)
    if (alt_msgdma_prefetcher_set_std_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
  81136c:	e0bffc03 	ldbu	r2,-16(fp)
  811370:	e0fffd03 	ldbu	r3,-12(fp)
  811374:	180d883a 	mov	r6,r3
  811378:	100b883a 	mov	r5,r2
  81137c:	e13ff917 	ldw	r4,-28(fp)
  811380:	0810e1c0 	call	810e1c <alt_msgdma_prefetcher_set_std_list_own_by_hw_bits>
  811384:	10000226 	beq	r2,zero,811390 <alt_msgdma_start_prefetcher_with_std_desc_list+0x64>
    {
        return -EINVAL;
  811388:	00bffa84 	movi	r2,-22
  81138c:	00000b06 	br	8113bc <alt_msgdma_start_prefetcher_with_std_desc_list+0x90>
    }

    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list,
  811390:	e0bff917 	ldw	r2,-28(fp)
  811394:	1021883a 	mov	r16,r2
  811398:	0023883a 	mov	r17,zero
  81139c:	e0fffa03 	ldbu	r3,-24(fp)
  8113a0:	e0bffb03 	ldbu	r2,-20(fp)
  8113a4:	d8800015 	stw	r2,0(sp)
  8113a8:	180f883a 	mov	r7,r3
  8113ac:	800b883a 	mov	r5,r16
  8113b0:	880d883a 	mov	r6,r17
  8113b4:	e13ff817 	ldw	r4,-32(fp)
  8113b8:	081106c0 	call	81106c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
  8113bc:	e6fffe04 	addi	sp,fp,-8
  8113c0:	dfc00317 	ldw	ra,12(sp)
  8113c4:	df000217 	ldw	fp,8(sp)
  8113c8:	dc400117 	ldw	r17,4(sp)
  8113cc:	dc000017 	ldw	r16,0(sp)
  8113d0:	dec00404 	addi	sp,sp,16
  8113d4:	f800283a 	ret

008113d8 <alt_msgdma_start_prefetcher_with_extd_desc_list>:
    alt_msgdma_prefetcher_extended_descriptor *list,
    alt_u8 park_mode_en,
    alt_u8 poll_en,
    alt_u8 last_desc_owned_by_sw,
    alt_u8 dcache_flush_desc_list)
{
  8113d8:	defff504 	addi	sp,sp,-44
  8113dc:	dfc00a15 	stw	ra,40(sp)
  8113e0:	df000915 	stw	fp,36(sp)
  8113e4:	dc400815 	stw	r17,32(sp)
  8113e8:	dc000715 	stw	r16,28(sp)
  8113ec:	df000904 	addi	fp,sp,36
  8113f0:	e13ff815 	stw	r4,-32(fp)
  8113f4:	e17ff915 	stw	r5,-28(fp)
  8113f8:	300b883a 	mov	r5,r6
  8113fc:	3809883a 	mov	r4,r7
  811400:	e0c00217 	ldw	r3,8(fp)
  811404:	e0800317 	ldw	r2,12(fp)
  811408:	e17ffa05 	stb	r5,-24(fp)
  81140c:	e13ffb05 	stb	r4,-20(fp)
  811410:	e0fffc05 	stb	r3,-16(fp)
  811414:	e0bffd05 	stb	r2,-12(fp)
    
     if (alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits(list,last_desc_owned_by_sw,dcache_flush_desc_list) != 0)
  811418:	e0bffc03 	ldbu	r2,-16(fp)
  81141c:	e0fffd03 	ldbu	r3,-12(fp)
  811420:	180d883a 	mov	r6,r3
  811424:	100b883a 	mov	r5,r2
  811428:	e13ff917 	ldw	r4,-28(fp)
  81142c:	0810f280 	call	810f28 <alt_msgdma_prefetcher_set_extd_list_own_by_hw_bits>
  811430:	10000226 	beq	r2,zero,81143c <alt_msgdma_start_prefetcher_with_extd_desc_list+0x64>
    {
        return -EINVAL;
  811434:	00bffa84 	movi	r2,-22
  811438:	00000b06 	br	811468 <alt_msgdma_start_prefetcher_with_extd_desc_list+0x90>
    }
        
    return alt_msgdma_start_prefetcher_with_list_addr (dev, (uintptr_t)list, 
  81143c:	e0bff917 	ldw	r2,-28(fp)
  811440:	1021883a 	mov	r16,r2
  811444:	0023883a 	mov	r17,zero
  811448:	e0fffa03 	ldbu	r3,-24(fp)
  81144c:	e0bffb03 	ldbu	r2,-20(fp)
  811450:	d8800015 	stw	r2,0(sp)
  811454:	180f883a 	mov	r7,r3
  811458:	800b883a 	mov	r5,r16
  81145c:	880d883a 	mov	r6,r17
  811460:	e13ff817 	ldw	r4,-32(fp)
  811464:	081106c0 	call	81106c <alt_msgdma_start_prefetcher_with_list_addr>
            park_mode_en, poll_en);
}
  811468:	e6fffe04 	addi	sp,fp,-8
  81146c:	dfc00317 	ldw	ra,12(sp)
  811470:	df000217 	ldw	fp,8(sp)
  811474:	dc400117 	ldw	r17,4(sp)
  811478:	dc000017 	ldw	r16,0(sp)
  81147c:	dec00404 	addi	sp,sp,16
  811480:	f800283a 	ret

00811484 <alt_msgdma_open>:
 * Returns:
 * - Pointer to msgdma device instance structure, or null if the device
 *   could not be opened.
 */
alt_msgdma_dev* alt_msgdma_open (const char* name)
{
  811484:	defffc04 	addi	sp,sp,-16
  811488:	dfc00315 	stw	ra,12(sp)
  81148c:	df000215 	stw	fp,8(sp)
  811490:	df000204 	addi	fp,sp,8
  811494:	e13fff15 	stw	r4,-4(fp)
    alt_msgdma_dev* dev = NULL;
  811498:	e03ffe15 	stw	zero,-8(fp)

    dev = (alt_msgdma_dev*) alt_find_dev (name, &alt_msgdma_list);
  81149c:	d1601c04 	addi	r5,gp,-32656
  8114a0:	e13fff17 	ldw	r4,-4(fp)
  8114a4:	0812b680 	call	812b68 <alt_find_dev>
  8114a8:	e0bffe15 	stw	r2,-8(fp)

    if (NULL == dev)
  8114ac:	e0bffe17 	ldw	r2,-8(fp)
  8114b0:	1000041e 	bne	r2,zero,8114c4 <alt_msgdma_open+0x40>
    {
        ALT_ERRNO = ENODEV;
  8114b4:	080f7ec0 	call	80f7ec <alt_get_errno>
  8114b8:	1007883a 	mov	r3,r2
  8114bc:	008004c4 	movi	r2,19
  8114c0:	18800015 	stw	r2,0(r3)
    }

    return dev;
  8114c4:	e0bffe17 	ldw	r2,-8(fp)
}
  8114c8:	e037883a 	mov	sp,fp
  8114cc:	dfc00117 	ldw	ra,4(sp)
  8114d0:	df000017 	ldw	fp,0(sp)
  8114d4:	dec00204 	addi	sp,sp,8
  8114d8:	f800283a 	ret

008114dc <alt_msgdma_init>:
 * This routine disables interrupts, descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_msgdma_init (alt_msgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
  8114dc:	defff804 	addi	sp,sp,-32
  8114e0:	dfc00715 	stw	ra,28(sp)
  8114e4:	df000615 	stw	fp,24(sp)
  8114e8:	df000604 	addi	fp,sp,24
  8114ec:	e13ffd15 	stw	r4,-12(fp)
  8114f0:	e17ffe15 	stw	r5,-8(fp)
  8114f4:	e1bfff15 	stw	r6,-4(fp)
    extern alt_llist alt_msgdma_list;
    alt_u32 temporary_control;
    int error;

    if (dev->prefetcher_enable)
  8114f8:	e0bffd17 	ldw	r2,-12(fp)
  8114fc:	10801783 	ldbu	r2,94(r2)
  811500:	10803fcc 	andi	r2,r2,255
  811504:	10000b26 	beq	r2,zero,811534 <alt_msgdma_init+0x58>
    {
        /* start prefetcher reset sequence */
        IOWR_ALT_MSGDMA_PREFETCHER_CONTROL(dev->prefetcher_base, 
  811508:	e0bffd17 	ldw	r2,-12(fp)
  81150c:	10800617 	ldw	r2,24(r2)
  811510:	00c00104 	movi	r3,4
  811514:	10c00035 	stwio	r3,0(r2)
                ALT_MSGDMA_PREFETCHER_CTRL_RESET_SET_MASK);
        /* wait until hw clears the bit */
        while(ALT_MSGDMA_PREFETCHER_CTRL_RESET_GET(
  811518:	0001883a 	nop
  81151c:	e0bffd17 	ldw	r2,-12(fp)
  811520:	10800617 	ldw	r2,24(r2)
  811524:	10800037 	ldwio	r2,0(r2)
  811528:	1080010c 	andi	r2,r2,4
  81152c:	1005d0ba 	srai	r2,r2,2
  811530:	103ffa1e 	bne	r2,zero,81151c <__alt_mem_descriptor_memory+0xff79151c>
    }    
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
  811534:	e0bffd17 	ldw	r2,-12(fp)
  811538:	10800317 	ldw	r2,12(r2)
  81153c:	10800104 	addi	r2,r2,4
  811540:	00c00084 	movi	r3,2
  811544:	10c00035 	stwio	r3,0(r2)
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
  811548:	0001883a 	nop
  81154c:	e0bffd17 	ldw	r2,-12(fp)
  811550:	10800317 	ldw	r2,12(r2)
  811554:	10800037 	ldwio	r2,0(r2)
            & ALTERA_MSGDMA_CSR_RESET_STATE_MASK));
  811558:	1080100c 	andi	r2,r2,64
    
    /* Reset the registers and FIFOs of the dispatcher and master modules */
    /* set the reset bit, no need to read the control register first since 
    this write is going to clear it out */
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, ALTERA_MSGDMA_CSR_RESET_MASK);
    while(0 != (IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base)
  81155c:	103ffb1e 	bne	r2,zero,81154c <__alt_mem_descriptor_memory+0xff79154c>
    * Disable interrupts, halt descriptor processing,
    * and clear status register content
    */

    /* disable global interrupt */
    temporary_control = IORD_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base)
  811560:	e0bffd17 	ldw	r2,-12(fp)
  811564:	10800317 	ldw	r2,12(r2)
  811568:	10800104 	addi	r2,r2,4
  81156c:	10800037 	ldwio	r2,0(r2)
  811570:	1007883a 	mov	r3,r2
  811574:	00bffbc4 	movi	r2,-17
  811578:	1884703a 	and	r2,r3,r2
  81157c:	e0bffb15 	stw	r2,-20(fp)
            & (~ALTERA_MSGDMA_CSR_GLOBAL_INTERRUPT_MASK);
    /* stopping descriptor */
    temporary_control |= ALTERA_MSGDMA_CSR_STOP_DESCRIPTORS_MASK;
  811580:	e0bffb17 	ldw	r2,-20(fp)
  811584:	10800814 	ori	r2,r2,32
  811588:	e0bffb15 	stw	r2,-20(fp)
    IOWR_ALTERA_MSGDMA_CSR_CONTROL(dev->csr_base, temporary_control);
  81158c:	e0bffd17 	ldw	r2,-12(fp)
  811590:	10800317 	ldw	r2,12(r2)
  811594:	10800104 	addi	r2,r2,4
  811598:	e0fffb17 	ldw	r3,-20(fp)
  81159c:	10c00035 	stwio	r3,0(r2)

    /* clear the CSR status register */
    IOWR_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base, 
  8115a0:	e0bffd17 	ldw	r2,-12(fp)
  8115a4:	10800317 	ldw	r2,12(r2)
  8115a8:	e0fffd17 	ldw	r3,-12(fp)
  8115ac:	18c00317 	ldw	r3,12(r3)
  8115b0:	18c00037 	ldwio	r3,0(r3)
  8115b4:	10c00035 	stwio	r3,0(r2)
            IORD_ALTERA_MSGDMA_CSR_STATUS(dev->csr_base));
    
    if (dev->prefetcher_enable)
  8115b8:	e0bffd17 	ldw	r2,-12(fp)
  8115bc:	10801783 	ldbu	r2,94(r2)
  8115c0:	10803fcc 	andi	r2,r2,255
  8115c4:	10000826 	beq	r2,zero,8115e8 <alt_msgdma_init+0x10c>
    {
        /* clear all status bits that are set, since theyre W1C */
        IOWR_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base, 
  8115c8:	e0bffd17 	ldw	r2,-12(fp)
  8115cc:	10800617 	ldw	r2,24(r2)
  8115d0:	10800404 	addi	r2,r2,16
  8115d4:	e0fffd17 	ldw	r3,-12(fp)
  8115d8:	18c00617 	ldw	r3,24(r3)
  8115dc:	18c00404 	addi	r3,r3,16
  8115e0:	18c00037 	ldwio	r3,0(r3)
  8115e4:	10c00035 	stwio	r3,0(r2)
                IORD_ALT_MSGDMA_PREFETCHER_STATUS(dev->prefetcher_base));
    }

    /* Register this instance of the msgdma controller with HAL */
    alt_dev_llist_insert((alt_dev_llist*) dev, &alt_msgdma_list);
  8115e8:	d1601c04 	addi	r5,gp,-32656
  8115ec:	e13ffd17 	ldw	r4,-12(fp)
  8115f0:	0812a040 	call	812a04 <alt_dev_llist_insert>
  8115f4:	0005883a 	mov	r2,zero

    /*
     * Creating semaphores used to protect access to the registers 
     * when running in a multi-threaded environment.
     */
    error = ALT_SEM_CREATE (&dev->regs_lock, 1);
  8115f8:	e0bffc15 	stw	r2,-16(fp)
            
    if (!error)
  8115fc:	e0bffc17 	ldw	r2,-16(fp)
  811600:	1000081e 	bne	r2,zero,811624 <alt_msgdma_init+0x148>
    {        
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
  811604:	d8000015 	stw	zero,0(sp)
  811608:	e1fffd17 	ldw	r7,-12(fp)
  81160c:	01802074 	movhi	r6,129
  811610:	31be7a04 	addi	r6,r6,-1560
  811614:	e17fff17 	ldw	r5,-4(fp)
  811618:	e13ffe17 	ldw	r4,-8(fp)
  81161c:	0812cb40 	call	812cb4 <alt_ic_isr_register>
    else
    {
        alt_printf("failed to create semaphores\n");
    }
    
    return;
  811620:	00000406 	br	811634 <alt_msgdma_init+0x158>
        /* Install IRQ handler */
        alt_ic_isr_register(ic_id, irq, alt_msgdma_irq, dev, 0x0);
    }
    else
    {
        alt_printf("failed to create semaphores\n");
  811624:	01002074 	movhi	r4,129
  811628:	2110eb04 	addi	r4,r4,17324
  81162c:	08132e80 	call	8132e8 <alt_printf>
    }
    
    return;
  811630:	0001883a 	nop

}
  811634:	e037883a 	mov	sp,fp
  811638:	dfc00117 	ldw	ra,4(sp)
  81163c:	df000017 	ldw	fp,0(sp)
  811640:	dec00204 	addi	sp,sp,8
  811644:	f800283a 	ret

00811648 <alt_msgdma_register_callback>:
void alt_msgdma_register_callback(
    alt_msgdma_dev *dev,
    alt_msgdma_callback callback,
    alt_u32 control,
    void *context)
{
  811648:	defffb04 	addi	sp,sp,-20
  81164c:	df000415 	stw	fp,16(sp)
  811650:	df000404 	addi	fp,sp,16
  811654:	e13ffc15 	stw	r4,-16(fp)
  811658:	e17ffd15 	stw	r5,-12(fp)
  81165c:	e1bffe15 	stw	r6,-8(fp)
  811660:	e1ffff15 	stw	r7,-4(fp)
    dev->callback         = callback;
  811664:	e0bffc17 	ldw	r2,-16(fp)
  811668:	e0fffd17 	ldw	r3,-12(fp)
  81166c:	10c00b15 	stw	r3,44(r2)
    dev->callback_context = context;
  811670:	e0bffc17 	ldw	r2,-16(fp)
  811674:	e0ffff17 	ldw	r3,-4(fp)
  811678:	10c00c15 	stw	r3,48(r2)
    dev->control          = control;
  81167c:	e0bffc17 	ldw	r2,-16(fp)
  811680:	e0fffe17 	ldw	r3,-8(fp)
  811684:	10c00d15 	stw	r3,52(r2)

    return ;
  811688:	0001883a 	nop
}
  81168c:	e037883a 	mov	sp,fp
  811690:	df000017 	ldw	fp,0(sp)
  811694:	dec00104 	addi	sp,sp,4
  811698:	f800283a 	ret

0081169c <alt_msgdma_standard_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_standard_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
  81169c:	defffc04 	addi	sp,sp,-16
  8116a0:	dfc00315 	stw	ra,12(sp)
  8116a4:	df000215 	stw	fp,8(sp)
  8116a8:	df000204 	addi	fp,sp,8
  8116ac:	e13ffe15 	stw	r4,-8(fp)
  8116b0:	e17fff15 	stw	r5,-4(fp)
   /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
    return alt_msgdma_descriptor_async_transfer(dev, desc, NULL);
  8116b4:	000d883a 	mov	r6,zero
  8116b8:	e17fff17 	ldw	r5,-4(fp)
  8116bc:	e13ffe17 	ldw	r4,-8(fp)
  8116c0:	080fd4c0 	call	80fd4c <alt_msgdma_descriptor_async_transfer>

}
  8116c4:	e037883a 	mov	sp,fp
  8116c8:	dfc00117 	ldw	ra,4(sp)
  8116cc:	df000017 	ldw	fp,0(sp)
  8116d0:	dec00204 	addi	sp,sp,8
  8116d4:	f800283a 	ret

008116d8 <alt_msgdma_extended_descriptor_async_transfer>:
 * -ETIME -> Time out and skipping the looping after 5 msec.
 */
int alt_msgdma_extended_descriptor_async_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
  8116d8:	defffc04 	addi	sp,sp,-16
  8116dc:	dfc00315 	stw	ra,12(sp)
  8116e0:	df000215 	stw	fp,8(sp)
  8116e4:	df000204 	addi	fp,sp,8
  8116e8:	e13ffe15 	stw	r4,-8(fp)
  8116ec:	e17fff15 	stw	r5,-4(fp)
    /*
    * Error detection/handling should be performed at the application
    * or callback level as appropriate.
    */
    return alt_msgdma_descriptor_async_transfer(dev, NULL, desc);
  8116f0:	e1bfff17 	ldw	r6,-4(fp)
  8116f4:	000b883a 	mov	r5,zero
  8116f8:	e13ffe17 	ldw	r4,-8(fp)
  8116fc:	080fd4c0 	call	80fd4c <alt_msgdma_descriptor_async_transfer>
}
  811700:	e037883a 	mov	sp,fp
  811704:	dfc00117 	ldw	ra,4(sp)
  811708:	df000017 	ldw	fp,0(sp)
  81170c:	dec00204 	addi	sp,sp,8
  811710:	f800283a 	ret

00811714 <alt_msgdma_standard_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_standard_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_standard_descriptor *desc)
{
  811714:	defffc04 	addi	sp,sp,-16
  811718:	dfc00315 	stw	ra,12(sp)
  81171c:	df000215 	stw	fp,8(sp)
  811720:	df000204 	addi	fp,sp,8
  811724:	e13ffe15 	stw	r4,-8(fp)
  811728:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, desc, NULL);
  81172c:	000d883a 	mov	r6,zero
  811730:	e17fff17 	ldw	r5,-4(fp)
  811734:	e13ffe17 	ldw	r4,-8(fp)
  811738:	081001c0 	call	81001c <alt_msgdma_descriptor_sync_transfer>
}
  81173c:	e037883a 	mov	sp,fp
  811740:	dfc00117 	ldw	ra,4(sp)
  811744:	df000017 	ldw	fp,0(sp)
  811748:	dec00204 	addi	sp,sp,8
  81174c:	f800283a 	ret

00811750 <alt_msgdma_extended_descriptor_sync_transfer>:
 *           return -ETIME (Time out and skipping the looping after 5 msec)
 */
int alt_msgdma_extended_descriptor_sync_transfer(
    alt_msgdma_dev *dev,
    alt_msgdma_extended_descriptor *desc)
{
  811750:	defffc04 	addi	sp,sp,-16
  811754:	dfc00315 	stw	ra,12(sp)
  811758:	df000215 	stw	fp,8(sp)
  81175c:	df000204 	addi	fp,sp,8
  811760:	e13ffe15 	stw	r4,-8(fp)
  811764:	e17fff15 	stw	r5,-4(fp)
    return alt_msgdma_descriptor_sync_transfer(dev, NULL, desc);
  811768:	e1bfff17 	ldw	r6,-4(fp)
  81176c:	000b883a 	mov	r5,zero
  811770:	e13ffe17 	ldw	r4,-8(fp)
  811774:	081001c0 	call	81001c <alt_msgdma_descriptor_sync_transfer>
}
  811778:	e037883a 	mov	sp,fp
  81177c:	dfc00117 	ldw	ra,4(sp)
  811780:	df000017 	ldw	fp,0(sp)
  811784:	dec00204 	addi	sp,sp,8
  811788:	f800283a 	ret

0081178c <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
  81178c:	defffd04 	addi	sp,sp,-12
  811790:	dfc00215 	stw	ra,8(sp)
  811794:	df000115 	stw	fp,4(sp)
  811798:	df000104 	addi	fp,sp,4
  81179c:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
  8117a0:	d1602004 	addi	r5,gp,-32640
  8117a4:	e13fff17 	ldw	r4,-4(fp)
  8117a8:	0812a040 	call	812a04 <alt_dev_llist_insert>
}
  8117ac:	e037883a 	mov	sp,fp
  8117b0:	dfc00117 	ldw	ra,4(sp)
  8117b4:	df000017 	ldw	fp,0(sp)
  8117b8:	dec00204 	addi	sp,sp,8
  8117bc:	f800283a 	ret

008117c0 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
  8117c0:	defff704 	addi	sp,sp,-36
  8117c4:	dfc00815 	stw	ra,32(sp)
  8117c8:	df000715 	stw	fp,28(sp)
  8117cc:	df000704 	addi	fp,sp,28
  8117d0:	e13ffc15 	stw	r4,-16(fp)
  8117d4:	e17ffd15 	stw	r5,-12(fp)
  8117d8:	e1bffe15 	stw	r6,-8(fp)
  8117dc:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  8117e0:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  8117e4:	e0bffc17 	ldw	r2,-16(fp)
  8117e8:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
  8117ec:	e0bffa17 	ldw	r2,-24(fp)
  8117f0:	10800b17 	ldw	r2,44(r2)
  8117f4:	e0fffd17 	ldw	r3,-12(fp)
  8117f8:	1880060e 	bge	r3,r2,811814 <alt_onchip_flash_read+0x54>
  8117fc:	e0fffd17 	ldw	r3,-12(fp)
  811800:	e0bfff17 	ldw	r2,-4(fp)
  811804:	1885883a 	add	r2,r3,r2
  811808:	e0fffa17 	ldw	r3,-24(fp)
  81180c:	18c00b17 	ldw	r3,44(r3)
  811810:	1880020e 	bge	r3,r2,81181c <alt_onchip_flash_read+0x5c>
        return -EFAULT;
  811814:	00bffc84 	movi	r2,-14
  811818:	00001706 	br	811878 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
  81181c:	e0bffa17 	ldw	r2,-24(fp)
  811820:	10c00a17 	ldw	r3,40(r2)
  811824:	e0bffd17 	ldw	r2,-12(fp)
  811828:	1885883a 	add	r2,r3,r2
  81182c:	e0ffff17 	ldw	r3,-4(fp)
  811830:	180d883a 	mov	r6,r3
  811834:	100b883a 	mov	r5,r2
  811838:	e13ffe17 	ldw	r4,-8(fp)
  81183c:	08067bc0 	call	8067bc <memcpy>

    if (NULL != flash->csr_base) {
  811840:	e0bffa17 	ldw	r2,-24(fp)
  811844:	10802f17 	ldw	r2,188(r2)
  811848:	10000a26 	beq	r2,zero,811874 <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
  81184c:	e0bffa17 	ldw	r2,-24(fp)
  811850:	10802f17 	ldw	r2,188(r2)
  811854:	10800037 	ldwio	r2,0(r2)
  811858:	1080010c 	andi	r2,r2,4
  81185c:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
  811860:	e0bffb17 	ldw	r2,-20(fp)
  811864:	10800120 	cmpeqi	r2,r2,4
  811868:	1000021e 	bne	r2,zero,811874 <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
  81186c:	00bffec4 	movi	r2,-5
  811870:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
  811874:	e0bff917 	ldw	r2,-28(fp)
}
  811878:	e037883a 	mov	sp,fp
  81187c:	dfc00117 	ldw	ra,4(sp)
  811880:	df000017 	ldw	fp,0(sp)
  811884:	dec00204 	addi	sp,sp,8
  811888:	f800283a 	ret

0081188c <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
  81188c:	defffa04 	addi	sp,sp,-24
  811890:	df000515 	stw	fp,20(sp)
  811894:	df000504 	addi	fp,sp,20
  811898:	e13ffd15 	stw	r4,-12(fp)
  81189c:	e17ffe15 	stw	r5,-8(fp)
  8118a0:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
  8118a4:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
  8118a8:	e0bffd17 	ldw	r2,-12(fp)
  8118ac:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
  8118b0:	e0bfff17 	ldw	r2,-4(fp)
  8118b4:	10000426 	beq	r2,zero,8118c8 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
  8118b8:	e0bffc17 	ldw	r2,-16(fp)
  8118bc:	10c00c17 	ldw	r3,48(r2)
  8118c0:	e0bfff17 	ldw	r2,-4(fp)
  8118c4:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
  8118c8:	e0bffc17 	ldw	r2,-16(fp)
  8118cc:	10800c17 	ldw	r2,48(r2)
  8118d0:	1000031e 	bne	r2,zero,8118e0 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
  8118d4:	00bffd04 	movi	r2,-12
  8118d8:	e0bffb15 	stw	r2,-20(fp)
  8118dc:	00000d06 	br	811914 <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
  8118e0:	e0bffc17 	ldw	r2,-16(fp)
  8118e4:	10800c17 	ldw	r2,48(r2)
  8118e8:	10800250 	cmplti	r2,r2,9
  8118ec:	1000031e 	bne	r2,zero,8118fc <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
  8118f0:	00bffc84 	movi	r2,-14
  8118f4:	e0bffb15 	stw	r2,-20(fp)
  8118f8:	00000606 	br	811914 <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
  8118fc:	e0bffe17 	ldw	r2,-8(fp)
  811900:	10000426 	beq	r2,zero,811914 <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
  811904:	e0bffc17 	ldw	r2,-16(fp)
  811908:	10c00d04 	addi	r3,r2,52
  81190c:	e0bffe17 	ldw	r2,-8(fp)
  811910:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
  811914:	e0bffb17 	ldw	r2,-20(fp)
}
  811918:	e037883a 	mov	sp,fp
  81191c:	df000017 	ldw	fp,0(sp)
  811920:	dec00104 	addi	sp,sp,4
  811924:	f800283a 	ret

00811928 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
  811928:	defff904 	addi	sp,sp,-28
  81192c:	dfc00615 	stw	ra,24(sp)
  811930:	df000515 	stw	fp,20(sp)
  811934:	df000504 	addi	fp,sp,20
  811938:	e13ffe15 	stw	r4,-8(fp)
  81193c:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
  811940:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  811944:	e0bffe17 	ldw	r2,-8(fp)
  811948:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
  81194c:	e0bffc17 	ldw	r2,-16(fp)
  811950:	10800b17 	ldw	r2,44(r2)
  811954:	e0ffff17 	ldw	r3,-4(fp)
  811958:	18800216 	blt	r3,r2,811964 <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
  81195c:	00bffc84 	movi	r2,-14
  811960:	00004606 	br	811a7c <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
  811964:	e0bffc17 	ldw	r2,-16(fp)
  811968:	10802f17 	ldw	r2,188(r2)
  81196c:	10000326 	beq	r2,zero,81197c <alt_onchip_flash_erase_block+0x54>
  811970:	e0bffc17 	ldw	r2,-16(fp)
  811974:	10802e17 	ldw	r2,184(r2)
  811978:	10000226 	beq	r2,zero,811984 <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
  81197c:	00bffb44 	movi	r2,-19
  811980:	00003e06 	br	811a7c <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
  811984:	e0bffc17 	ldw	r2,-16(fp)
  811988:	10803f17 	ldw	r2,252(r2)
  81198c:	10ffffc4 	addi	r3,r2,-1
  811990:	e0bfff17 	ldw	r2,-4(fp)
  811994:	1884703a 	and	r2,r3,r2
  811998:	10000226 	beq	r2,zero,8119a4 <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
  81199c:	00bffa84 	movi	r2,-22
  8119a0:	00003606 	br	811a7c <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  8119a4:	e13ffc17 	ldw	r4,-16(fp)
  8119a8:	081251c0 	call	81251c <alt_onchip_flash_poll_for_status_to_go_idle>
  8119ac:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
  8119b0:	e0bffb17 	ldw	r2,-20(fp)
  8119b4:	10000226 	beq	r2,zero,8119c0 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
  8119b8:	e0bffb17 	ldw	r2,-20(fp)
  8119bc:	00002f06 	br	811a7c <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  8119c0:	e0bffc17 	ldw	r2,-16(fp)
  8119c4:	10802f17 	ldw	r2,188(r2)
  8119c8:	10c00104 	addi	r3,r2,4
  8119cc:	e0bffc17 	ldw	r2,-16(fp)
  8119d0:	10802f17 	ldw	r2,188(r2)
  8119d4:	10800104 	addi	r2,r2,4
  8119d8:	10800037 	ldwio	r2,0(r2)
  8119dc:	113c002c 	andhi	r4,r2,61440
  8119e0:	00802034 	movhi	r2,128
  8119e4:	10bfffc4 	addi	r2,r2,-1
  8119e8:	2084b03a 	or	r2,r4,r2
  8119ec:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
  8119f0:	e0bfff17 	ldw	r2,-4(fp)
  8119f4:	1000010e 	bge	r2,zero,8119fc <alt_onchip_flash_erase_block+0xd4>
  8119f8:	108000c4 	addi	r2,r2,3
  8119fc:	1005d0ba 	srai	r2,r2,2
  811a00:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
  811a04:	e0bffc17 	ldw	r2,-16(fp)
  811a08:	10802f17 	ldw	r2,188(r2)
  811a0c:	10800104 	addi	r2,r2,4
  811a10:	e0fffc17 	ldw	r3,-16(fp)
  811a14:	18c02f17 	ldw	r3,188(r3)
  811a18:	18c00104 	addi	r3,r3,4
  811a1c:	18c00037 	ldwio	r3,0(r3)
  811a20:	193c002c 	andhi	r4,r3,61440
  811a24:	e0fffd17 	ldw	r3,-12(fp)
  811a28:	18c01c34 	orhi	r3,r3,112
  811a2c:	20c6b03a 	or	r3,r4,r3
  811a30:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  811a34:	e13ffc17 	ldw	r4,-16(fp)
  811a38:	081251c0 	call	81251c <alt_onchip_flash_poll_for_status_to_go_idle>
  811a3c:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
  811a40:	e13ffc17 	ldw	r4,-16(fp)
  811a44:	08125ac0 	call	8125ac <alt_onchip_flash_poll_for_status_erase_passed>
  811a48:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  811a4c:	e0bffc17 	ldw	r2,-16(fp)
  811a50:	10802f17 	ldw	r2,188(r2)
  811a54:	10c00104 	addi	r3,r2,4
  811a58:	e0bffc17 	ldw	r2,-16(fp)
  811a5c:	10802f17 	ldw	r2,188(r2)
  811a60:	10800104 	addi	r2,r2,4
  811a64:	11000037 	ldwio	r4,0(r2)
  811a68:	00840034 	movhi	r2,4096
  811a6c:	10bfffc4 	addi	r2,r2,-1
  811a70:	2084b03a 	or	r2,r4,r2
  811a74:	18800035 	stwio	r2,0(r3)

    return ret_code;
  811a78:	e0bffb17 	ldw	r2,-20(fp)
}
  811a7c:	e037883a 	mov	sp,fp
  811a80:	dfc00117 	ldw	ra,4(sp)
  811a84:	df000017 	ldw	fp,0(sp)
  811a88:	dec00204 	addi	sp,sp,8
  811a8c:	f800283a 	ret

00811a90 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
  811a90:	defff204 	addi	sp,sp,-56
  811a94:	dfc00d15 	stw	ra,52(sp)
  811a98:	df000c15 	stw	fp,48(sp)
  811a9c:	df000c04 	addi	fp,sp,48
  811aa0:	e13ffc15 	stw	r4,-16(fp)
  811aa4:	e17ffd15 	stw	r5,-12(fp)
  811aa8:	e1bffe15 	stw	r6,-8(fp)
  811aac:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
  811ab0:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
  811ab4:	e0bffc17 	ldw	r2,-16(fp)
  811ab8:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
  811abc:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
  811ac0:	e0bffe17 	ldw	r2,-8(fp)
  811ac4:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  811ac8:	e0bff817 	ldw	r2,-32(fp)
  811acc:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
  811ad0:	e0fffd17 	ldw	r3,-12(fp)
  811ad4:	18800a0e 	bge	r3,r2,811b00 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  811ad8:	e0bff817 	ldw	r2,-32(fp)
  811adc:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
  811ae0:	e0fffe17 	ldw	r3,-8(fp)
  811ae4:	1880060e 	bge	r3,r2,811b00 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
  811ae8:	e0bff817 	ldw	r2,-32(fp)
  811aec:	10c00b17 	ldw	r3,44(r2)
  811af0:	e0bffe17 	ldw	r2,-8(fp)
  811af4:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
  811af8:	e0800217 	ldw	r2,8(fp)
  811afc:	1880020e 	bge	r3,r2,811b08 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
  811b00:	00bffc84 	movi	r2,-14
  811b04:	00009306 	br	811d54 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
  811b08:	e0bff817 	ldw	r2,-32(fp)
  811b0c:	10802f17 	ldw	r2,188(r2)
  811b10:	10000326 	beq	r2,zero,811b20 <alt_onchip_flash_write_block+0x90>
  811b14:	e0bff817 	ldw	r2,-32(fp)
  811b18:	10802e17 	ldw	r2,184(r2)
  811b1c:	10000226 	beq	r2,zero,811b28 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
  811b20:	00bffb44 	movi	r2,-19
  811b24:	00008b06 	br	811d54 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  811b28:	e13ff817 	ldw	r4,-32(fp)
  811b2c:	081251c0 	call	81251c <alt_onchip_flash_poll_for_status_to_go_idle>
  811b30:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
  811b34:	e0bff417 	ldw	r2,-48(fp)
  811b38:	10000226 	beq	r2,zero,811b44 <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
  811b3c:	e0bff417 	ldw	r2,-48(fp)
  811b40:	00008406 	br	811d54 <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  811b44:	e0bff817 	ldw	r2,-32(fp)
  811b48:	10802f17 	ldw	r2,188(r2)
  811b4c:	10c00104 	addi	r3,r2,4
  811b50:	e0bff817 	ldw	r2,-32(fp)
  811b54:	10802f17 	ldw	r2,188(r2)
  811b58:	10800104 	addi	r2,r2,4
  811b5c:	10800037 	ldwio	r2,0(r2)
  811b60:	113c002c 	andhi	r4,r2,61440
  811b64:	00802034 	movhi	r2,128
  811b68:	10bfffc4 	addi	r2,r2,-1
  811b6c:	2084b03a 	or	r2,r4,r2
  811b70:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
  811b74:	00006506 	br	811d0c <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
  811b78:	00bfffc4 	movi	r2,-1
  811b7c:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
  811b80:	e0bff617 	ldw	r2,-40(fp)
  811b84:	108000cc 	andi	r2,r2,3
  811b88:	10001e1e 	bne	r2,zero,811c04 <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  811b8c:	e0bff617 	ldw	r2,-40(fp)
  811b90:	10c00104 	addi	r3,r2,4
  811b94:	00bfff04 	movi	r2,-4
  811b98:	1884703a 	and	r2,r3,r2
  811b9c:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
  811ba0:	e0fff717 	ldw	r3,-36(fp)
  811ba4:	e0bff617 	ldw	r2,-40(fp)
  811ba8:	1885c83a 	sub	r2,r3,r2
  811bac:	e0c00217 	ldw	r3,8(fp)
  811bb0:	1880010e 	bge	r3,r2,811bb8 <alt_onchip_flash_write_block+0x128>
  811bb4:	1805883a 	mov	r2,r3
  811bb8:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
  811bbc:	e0bff517 	ldw	r2,-44(fp)
  811bc0:	e0ffff17 	ldw	r3,-4(fp)
  811bc4:	1887883a 	add	r3,r3,r2
  811bc8:	e13ff917 	ldw	r4,-28(fp)
  811bcc:	e0bffb04 	addi	r2,fp,-20
  811bd0:	200d883a 	mov	r6,r4
  811bd4:	180b883a 	mov	r5,r3
  811bd8:	1009883a 	mov	r4,r2
  811bdc:	08067bc0 	call	8067bc <memcpy>
            buffer_offset += length_of_current_write;
  811be0:	e0fff517 	ldw	r3,-44(fp)
  811be4:	e0bff917 	ldw	r2,-28(fp)
  811be8:	1885883a 	add	r2,r3,r2
  811bec:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
  811bf0:	e0c00217 	ldw	r3,8(fp)
  811bf4:	e0bff917 	ldw	r2,-28(fp)
  811bf8:	1885c83a 	sub	r2,r3,r2
  811bfc:	e0800215 	stw	r2,8(fp)
  811c00:	00003006 	br	811cc4 <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  811c04:	e0bff617 	ldw	r2,-40(fp)
  811c08:	108000cc 	andi	r2,r2,3
  811c0c:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
  811c10:	e0fff617 	ldw	r3,-40(fp)
  811c14:	e0bffa17 	ldw	r2,-24(fp)
  811c18:	1885c83a 	sub	r2,r3,r2
  811c1c:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
  811c20:	e0bff617 	ldw	r2,-40(fp)
  811c24:	10c00104 	addi	r3,r2,4
  811c28:	00bfff04 	movi	r2,-4
  811c2c:	1884703a 	and	r2,r3,r2
  811c30:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
  811c34:	e0fff717 	ldw	r3,-36(fp)
  811c38:	e0bff617 	ldw	r2,-40(fp)
  811c3c:	1889c83a 	sub	r4,r3,r2
  811c40:	e0c00217 	ldw	r3,8(fp)
  811c44:	e0bffa17 	ldw	r2,-24(fp)
  811c48:	1887883a 	add	r3,r3,r2
  811c4c:	2005883a 	mov	r2,r4
  811c50:	1880010e 	bge	r3,r2,811c58 <alt_onchip_flash_write_block+0x1c8>
  811c54:	1805883a 	mov	r2,r3
  811c58:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
  811c5c:	e0fffb04 	addi	r3,fp,-20
  811c60:	e0bffa17 	ldw	r2,-24(fp)
  811c64:	1885883a 	add	r2,r3,r2
  811c68:	100f883a 	mov	r7,r2
  811c6c:	e0bff517 	ldw	r2,-44(fp)
  811c70:	e0ffff17 	ldw	r3,-4(fp)
  811c74:	1889883a 	add	r4,r3,r2
  811c78:	e0fff917 	ldw	r3,-28(fp)
  811c7c:	e0bffa17 	ldw	r2,-24(fp)
  811c80:	1885c83a 	sub	r2,r3,r2
  811c84:	100d883a 	mov	r6,r2
  811c88:	200b883a 	mov	r5,r4
  811c8c:	3809883a 	mov	r4,r7
  811c90:	08067bc0 	call	8067bc <memcpy>
            buffer_offset += length_of_current_write - padding;
  811c94:	e0fff917 	ldw	r3,-28(fp)
  811c98:	e0bffa17 	ldw	r2,-24(fp)
  811c9c:	1885c83a 	sub	r2,r3,r2
  811ca0:	e0fff517 	ldw	r3,-44(fp)
  811ca4:	1885883a 	add	r2,r3,r2
  811ca8:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
  811cac:	e0fff917 	ldw	r3,-28(fp)
  811cb0:	e0bffa17 	ldw	r2,-24(fp)
  811cb4:	1885c83a 	sub	r2,r3,r2
  811cb8:	e0c00217 	ldw	r3,8(fp)
  811cbc:	1885c83a 	sub	r2,r3,r2
  811cc0:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
  811cc4:	e0bff817 	ldw	r2,-32(fp)
  811cc8:	10c00a17 	ldw	r3,40(r2)
  811ccc:	e0bff617 	ldw	r2,-40(fp)
  811cd0:	1885883a 	add	r2,r3,r2
  811cd4:	e0fffb17 	ldw	r3,-20(fp)
  811cd8:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
  811cdc:	e13ff817 	ldw	r4,-32(fp)
  811ce0:	081251c0 	call	81251c <alt_onchip_flash_poll_for_status_to_go_idle>
  811ce4:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  811ce8:	e0bff417 	ldw	r2,-48(fp)
  811cec:	10000a1e 	bne	r2,zero,811d18 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
  811cf0:	e13ff817 	ldw	r4,-32(fp)
  811cf4:	081263c0 	call	81263c <alt_onchip_flash_poll_for_status_write_passed>
  811cf8:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
  811cfc:	e0bff417 	ldw	r2,-48(fp)
  811d00:	1000071e 	bne	r2,zero,811d20 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
  811d04:	e0bff717 	ldw	r2,-36(fp)
  811d08:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
  811d0c:	e0800217 	ldw	r2,8(fp)
  811d10:	103f991e 	bne	r2,zero,811b78 <__alt_mem_descriptor_memory+0xff791b78>
  811d14:	00000306 	br	811d24 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
  811d18:	0001883a 	nop
  811d1c:	00000106 	br	811d24 <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
  811d20:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
  811d24:	e0bff817 	ldw	r2,-32(fp)
  811d28:	10802f17 	ldw	r2,188(r2)
  811d2c:	10c00104 	addi	r3,r2,4
  811d30:	e0bff817 	ldw	r2,-32(fp)
  811d34:	10802f17 	ldw	r2,188(r2)
  811d38:	10800104 	addi	r2,r2,4
  811d3c:	11000037 	ldwio	r4,0(r2)
  811d40:	00840034 	movhi	r2,4096
  811d44:	10bfffc4 	addi	r2,r2,-1
  811d48:	2084b03a 	or	r2,r4,r2
  811d4c:	18800035 	stwio	r2,0(r3)

    return ret_code;
  811d50:	e0bff417 	ldw	r2,-48(fp)
}
  811d54:	e037883a 	mov	sp,fp
  811d58:	dfc00117 	ldw	ra,4(sp)
  811d5c:	df000017 	ldw	fp,0(sp)
  811d60:	dec00204 	addi	sp,sp,8
  811d64:	f800283a 	ret

00811d68 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
  811d68:	defff104 	addi	sp,sp,-60
  811d6c:	dfc00e15 	stw	ra,56(sp)
  811d70:	df000d15 	stw	fp,52(sp)
  811d74:	df000d04 	addi	fp,sp,52
  811d78:	e13ffc15 	stw	r4,-16(fp)
  811d7c:	e17ffd15 	stw	r5,-12(fp)
  811d80:	e1bffe15 	stw	r6,-8(fp)
  811d84:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
  811d88:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
  811d8c:	e0bfff17 	ldw	r2,-4(fp)
  811d90:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
  811d94:	e0bffd17 	ldw	r2,-12(fp)
  811d98:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
  811d9c:	e0bffc17 	ldw	r2,-16(fp)
  811da0:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
  811da4:	e0bffa17 	ldw	r2,-24(fp)
  811da8:	10800b17 	ldw	r2,44(r2)
  811dac:	e0fffd17 	ldw	r3,-12(fp)
  811db0:	1880060e 	bge	r3,r2,811dcc <alt_onchip_flash_write+0x64>
  811db4:	e0bffa17 	ldw	r2,-24(fp)
  811db8:	10c00b17 	ldw	r3,44(r2)
  811dbc:	e0bffd17 	ldw	r2,-12(fp)
  811dc0:	1887c83a 	sub	r3,r3,r2
  811dc4:	e0bfff17 	ldw	r2,-4(fp)
  811dc8:	1880020e 	bge	r3,r2,811dd4 <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
  811dcc:	00bffc84 	movi	r2,-14
  811dd0:	00009606 	br	81202c <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  811dd4:	e03ff515 	stw	zero,-44(fp)
  811dd8:	00008706 	br	811ff8 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  811ddc:	e0fffa17 	ldw	r3,-24(fp)
  811de0:	e0bff517 	ldw	r2,-44(fp)
  811de4:	1004913a 	slli	r2,r2,4
  811de8:	1885883a 	add	r2,r3,r2
  811dec:	10800d04 	addi	r2,r2,52
  811df0:	10800017 	ldw	r2,0(r2)
  811df4:	e0fffd17 	ldw	r3,-12(fp)
  811df8:	18807c16 	blt	r3,r2,811fec <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
  811dfc:	e0fffa17 	ldw	r3,-24(fp)
  811e00:	e0bff517 	ldw	r2,-44(fp)
  811e04:	1004913a 	slli	r2,r2,4
  811e08:	1885883a 	add	r2,r3,r2
  811e0c:	10800d04 	addi	r2,r2,52
  811e10:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
  811e14:	e13ffa17 	ldw	r4,-24(fp)
  811e18:	e0bff517 	ldw	r2,-44(fp)
  811e1c:	1004913a 	slli	r2,r2,4
  811e20:	2085883a 	add	r2,r4,r2
  811e24:	10800e04 	addi	r2,r2,56
  811e28:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
  811e2c:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
  811e30:	e0fffd17 	ldw	r3,-12(fp)
  811e34:	18806d0e 	bge	r3,r2,811fec <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
  811e38:	e0fffa17 	ldw	r3,-24(fp)
  811e3c:	e0bff517 	ldw	r2,-44(fp)
  811e40:	1004913a 	slli	r2,r2,4
  811e44:	1885883a 	add	r2,r3,r2
  811e48:	10800d04 	addi	r2,r2,52
  811e4c:	10800017 	ldw	r2,0(r2)
  811e50:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  811e54:	e03ff615 	stw	zero,-40(fp)
  811e58:	00005c06 	br	811fcc <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
  811e5c:	e0fffd17 	ldw	r3,-12(fp)
  811e60:	e0bff717 	ldw	r2,-36(fp)
  811e64:	18804d16 	blt	r3,r2,811f9c <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
  811e68:	e0fffa17 	ldw	r3,-24(fp)
  811e6c:	e0bff517 	ldw	r2,-44(fp)
  811e70:	10800104 	addi	r2,r2,4
  811e74:	1004913a 	slli	r2,r2,4
  811e78:	1885883a 	add	r2,r3,r2
  811e7c:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
  811e80:	e0bff717 	ldw	r2,-36(fp)
  811e84:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
  811e88:	e0fffd17 	ldw	r3,-12(fp)
  811e8c:	1880430e 	bge	r3,r2,811f9c <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
  811e90:	e0fffa17 	ldw	r3,-24(fp)
  811e94:	e0bff517 	ldw	r2,-44(fp)
  811e98:	10800104 	addi	r2,r2,4
  811e9c:	1004913a 	slli	r2,r2,4
  811ea0:	1885883a 	add	r2,r3,r2
  811ea4:	10c00017 	ldw	r3,0(r2)
  811ea8:	e0bff717 	ldw	r2,-36(fp)
  811eac:	1887883a 	add	r3,r3,r2
  811eb0:	e0bffd17 	ldw	r2,-12(fp)
  811eb4:	1885c83a 	sub	r2,r3,r2
  811eb8:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
  811ebc:	e0fffb17 	ldw	r3,-20(fp)
  811ec0:	e0bfff17 	ldw	r2,-4(fp)
  811ec4:	1880010e 	bge	r3,r2,811ecc <alt_onchip_flash_write+0x164>
  811ec8:	1805883a 	mov	r2,r3
  811ecc:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
  811ed0:	e0bffa17 	ldw	r2,-24(fp)
  811ed4:	10c00a17 	ldw	r3,40(r2)
  811ed8:	e0bffd17 	ldw	r2,-12(fp)
  811edc:	1885883a 	add	r2,r3,r2
  811ee0:	e0fffb17 	ldw	r3,-20(fp)
  811ee4:	180d883a 	mov	r6,r3
  811ee8:	100b883a 	mov	r5,r2
  811eec:	e13ffe17 	ldw	r4,-8(fp)
  811ef0:	08139ac0 	call	8139ac <memcmp>
  811ef4:	10001326 	beq	r2,zero,811f44 <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
  811ef8:	e0bffa17 	ldw	r2,-24(fp)
  811efc:	10800817 	ldw	r2,32(r2)
  811f00:	e0fffa17 	ldw	r3,-24(fp)
  811f04:	e17ff717 	ldw	r5,-36(fp)
  811f08:	1809883a 	mov	r4,r3
  811f0c:	103ee83a 	callr	r2
  811f10:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
  811f14:	e0bff417 	ldw	r2,-48(fp)
  811f18:	10000a1e 	bne	r2,zero,811f44 <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
  811f1c:	e0bffa17 	ldw	r2,-24(fp)
  811f20:	10800917 	ldw	r2,36(r2)
  811f24:	e13ffa17 	ldw	r4,-24(fp)
  811f28:	e0fffb17 	ldw	r3,-20(fp)
  811f2c:	d8c00015 	stw	r3,0(sp)
  811f30:	e1fffe17 	ldw	r7,-8(fp)
  811f34:	e1bffd17 	ldw	r6,-12(fp)
  811f38:	e17ff717 	ldw	r5,-36(fp)
  811f3c:	103ee83a 	callr	r2
  811f40:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
  811f44:	e0ffff17 	ldw	r3,-4(fp)
  811f48:	e0bffb17 	ldw	r2,-20(fp)
  811f4c:	18802e26 	beq	r3,r2,812008 <alt_onchip_flash_write+0x2a0>
  811f50:	e0bff417 	ldw	r2,-48(fp)
  811f54:	10002c1e 	bne	r2,zero,812008 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
  811f58:	e0ffff17 	ldw	r3,-4(fp)
  811f5c:	e0bffb17 	ldw	r2,-20(fp)
  811f60:	1885c83a 	sub	r2,r3,r2
  811f64:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
  811f68:	e0fffa17 	ldw	r3,-24(fp)
  811f6c:	e0bff517 	ldw	r2,-44(fp)
  811f70:	10800104 	addi	r2,r2,4
  811f74:	1004913a 	slli	r2,r2,4
  811f78:	1885883a 	add	r2,r3,r2
  811f7c:	10c00017 	ldw	r3,0(r2)
  811f80:	e0bff717 	ldw	r2,-36(fp)
  811f84:	1885883a 	add	r2,r3,r2
  811f88:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
  811f8c:	e0bffb17 	ldw	r2,-20(fp)
  811f90:	e0fffe17 	ldw	r3,-8(fp)
  811f94:	1885883a 	add	r2,r3,r2
  811f98:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
  811f9c:	e0fffa17 	ldw	r3,-24(fp)
  811fa0:	e0bff517 	ldw	r2,-44(fp)
  811fa4:	10800104 	addi	r2,r2,4
  811fa8:	1004913a 	slli	r2,r2,4
  811fac:	1885883a 	add	r2,r3,r2
  811fb0:	10800017 	ldw	r2,0(r2)
  811fb4:	e0fff717 	ldw	r3,-36(fp)
  811fb8:	1885883a 	add	r2,r3,r2
  811fbc:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
  811fc0:	e0bff617 	ldw	r2,-40(fp)
  811fc4:	10800044 	addi	r2,r2,1
  811fc8:	e0bff615 	stw	r2,-40(fp)
  811fcc:	e0fffa17 	ldw	r3,-24(fp)
  811fd0:	e0bff517 	ldw	r2,-44(fp)
  811fd4:	1004913a 	slli	r2,r2,4
  811fd8:	1885883a 	add	r2,r3,r2
  811fdc:	10800f04 	addi	r2,r2,60
  811fe0:	10800017 	ldw	r2,0(r2)
  811fe4:	e0fff617 	ldw	r3,-40(fp)
  811fe8:	18bf9c16 	blt	r3,r2,811e5c <__alt_mem_descriptor_memory+0xff791e5c>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
  811fec:	e0bff517 	ldw	r2,-44(fp)
  811ff0:	10800044 	addi	r2,r2,1
  811ff4:	e0bff515 	stw	r2,-44(fp)
  811ff8:	e0bffa17 	ldw	r2,-24(fp)
  811ffc:	10800c17 	ldw	r2,48(r2)
  812000:	e0fff517 	ldw	r3,-44(fp)
  812004:	18bf7516 	blt	r3,r2,811ddc <__alt_mem_descriptor_memory+0xff791ddc>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
  812008:	e0bffa17 	ldw	r2,-24(fp)
  81200c:	10c00a17 	ldw	r3,40(r2)
  812010:	e0bff917 	ldw	r2,-28(fp)
  812014:	1885883a 	add	r2,r3,r2
  812018:	e0fff817 	ldw	r3,-32(fp)
  81201c:	180b883a 	mov	r5,r3
  812020:	1009883a 	mov	r4,r2
  812024:	08129500 	call	812950 <alt_dcache_flush>
    return ret_code;
  812028:	e0bff417 	ldw	r2,-48(fp)
}
  81202c:	e037883a 	mov	sp,fp
  812030:	dfc00117 	ldw	ra,4(sp)
  812034:	df000017 	ldw	fp,0(sp)
  812038:	dec00204 	addi	sp,sp,8
  81203c:	f800283a 	ret

00812040 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
  812040:	defff504 	addi	sp,sp,-44
  812044:	dfc00a15 	stw	ra,40(sp)
  812048:	df000915 	stw	fp,36(sp)
  81204c:	dc000815 	stw	r16,32(sp)
  812050:	df000904 	addi	fp,sp,36
  812054:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
  812058:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
  81205c:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
  812060:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
  812064:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
  812068:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
  81206c:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
  812070:	e0bffe17 	ldw	r2,-8(fp)
  812074:	10800d04 	addi	r2,r2,52
  812078:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
  81207c:	e0bffe17 	ldw	r2,-8(fp)
  812080:	10802f17 	ldw	r2,188(r2)
  812084:	10001926 	beq	r2,zero,8120ec <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
  812088:	e0bffe17 	ldw	r2,-8(fp)
  81208c:	10802f17 	ldw	r2,188(r2)
  812090:	10800037 	ldwio	r2,0(r2)
  812094:	1080080c 	andi	r2,r2,32
  812098:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
  81209c:	e0bffe17 	ldw	r2,-8(fp)
  8120a0:	10802f17 	ldw	r2,188(r2)
  8120a4:	10800037 	ldwio	r2,0(r2)
  8120a8:	1080100c 	andi	r2,r2,64
  8120ac:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
  8120b0:	e0bffe17 	ldw	r2,-8(fp)
  8120b4:	10802f17 	ldw	r2,188(r2)
  8120b8:	10800037 	ldwio	r2,0(r2)
  8120bc:	1080200c 	andi	r2,r2,128
  8120c0:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
  8120c4:	e0bffe17 	ldw	r2,-8(fp)
  8120c8:	10802f17 	ldw	r2,188(r2)
  8120cc:	10800037 	ldwio	r2,0(r2)
  8120d0:	1080400c 	andi	r2,r2,256
  8120d4:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
  8120d8:	e0bffe17 	ldw	r2,-8(fp)
  8120dc:	10802f17 	ldw	r2,188(r2)
  8120e0:	10800037 	ldwio	r2,0(r2)
  8120e4:	1080800c 	andi	r2,r2,512
  8120e8:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
  8120ec:	e0bffe17 	ldw	r2,-8(fp)
  8120f0:	10803017 	ldw	r2,192(r2)
  8120f4:	10800058 	cmpnei	r2,r2,1
  8120f8:	10002f1e 	bne	r2,zero,8121b8 <altera_onchip_flash_init+0x178>
  8120fc:	e0bff817 	ldw	r2,-32(fp)
  812100:	10800820 	cmpeqi	r2,r2,32
  812104:	10002c1e 	bne	r2,zero,8121b8 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
  812108:	e0bff717 	ldw	r2,-36(fp)
  81210c:	1004913a 	slli	r2,r2,4
  812110:	e0fffd17 	ldw	r3,-12(fp)
  812114:	1885883a 	add	r2,r3,r2
  812118:	e0fffe17 	ldw	r3,-8(fp)
  81211c:	18c03117 	ldw	r3,196(r3)
  812120:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
  812124:	e0bff717 	ldw	r2,-36(fp)
  812128:	1004913a 	slli	r2,r2,4
  81212c:	e0fffd17 	ldw	r3,-12(fp)
  812130:	1885883a 	add	r2,r3,r2
  812134:	e0fffe17 	ldw	r3,-8(fp)
  812138:	19003217 	ldw	r4,200(r3)
  81213c:	e0fffe17 	ldw	r3,-8(fp)
  812140:	18c03117 	ldw	r3,196(r3)
  812144:	20c7c83a 	sub	r3,r4,r3
  812148:	18c00044 	addi	r3,r3,1
  81214c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  812150:	e0bff717 	ldw	r2,-36(fp)
  812154:	1004913a 	slli	r2,r2,4
  812158:	e0fffd17 	ldw	r3,-12(fp)
  81215c:	18a1883a 	add	r16,r3,r2
  812160:	e0fffe17 	ldw	r3,-8(fp)
  812164:	e0bff717 	ldw	r2,-36(fp)
  812168:	1004913a 	slli	r2,r2,4
  81216c:	1885883a 	add	r2,r3,r2
  812170:	10800e04 	addi	r2,r2,56
  812174:	10c00017 	ldw	r3,0(r2)
  812178:	e0bffe17 	ldw	r2,-8(fp)
  81217c:	10803f17 	ldw	r2,252(r2)
  812180:	100b883a 	mov	r5,r2
  812184:	1809883a 	mov	r4,r3
  812188:	080b2200 	call	80b220 <__divsi3>
  81218c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  812190:	e0bff717 	ldw	r2,-36(fp)
  812194:	1004913a 	slli	r2,r2,4
  812198:	e0fffd17 	ldw	r3,-12(fp)
  81219c:	1885883a 	add	r2,r3,r2
  8121a0:	e0fffe17 	ldw	r3,-8(fp)
  8121a4:	18c03f17 	ldw	r3,252(r3)
  8121a8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  8121ac:	e0bff717 	ldw	r2,-36(fp)
  8121b0:	10800044 	addi	r2,r2,1
  8121b4:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
  8121b8:	e0bffe17 	ldw	r2,-8(fp)
  8121bc:	10803317 	ldw	r2,204(r2)
  8121c0:	10800058 	cmpnei	r2,r2,1
  8121c4:	10002f1e 	bne	r2,zero,812284 <altera_onchip_flash_init+0x244>
  8121c8:	e0bff917 	ldw	r2,-28(fp)
  8121cc:	10801020 	cmpeqi	r2,r2,64
  8121d0:	10002c1e 	bne	r2,zero,812284 <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
  8121d4:	e0bff717 	ldw	r2,-36(fp)
  8121d8:	1004913a 	slli	r2,r2,4
  8121dc:	e0fffd17 	ldw	r3,-12(fp)
  8121e0:	1885883a 	add	r2,r3,r2
  8121e4:	e0fffe17 	ldw	r3,-8(fp)
  8121e8:	18c03417 	ldw	r3,208(r3)
  8121ec:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
  8121f0:	e0bff717 	ldw	r2,-36(fp)
  8121f4:	1004913a 	slli	r2,r2,4
  8121f8:	e0fffd17 	ldw	r3,-12(fp)
  8121fc:	1885883a 	add	r2,r3,r2
  812200:	e0fffe17 	ldw	r3,-8(fp)
  812204:	19003517 	ldw	r4,212(r3)
  812208:	e0fffe17 	ldw	r3,-8(fp)
  81220c:	18c03417 	ldw	r3,208(r3)
  812210:	20c7c83a 	sub	r3,r4,r3
  812214:	18c00044 	addi	r3,r3,1
  812218:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  81221c:	e0bff717 	ldw	r2,-36(fp)
  812220:	1004913a 	slli	r2,r2,4
  812224:	e0fffd17 	ldw	r3,-12(fp)
  812228:	18a1883a 	add	r16,r3,r2
  81222c:	e0fffe17 	ldw	r3,-8(fp)
  812230:	e0bff717 	ldw	r2,-36(fp)
  812234:	1004913a 	slli	r2,r2,4
  812238:	1885883a 	add	r2,r3,r2
  81223c:	10800e04 	addi	r2,r2,56
  812240:	10c00017 	ldw	r3,0(r2)
  812244:	e0bffe17 	ldw	r2,-8(fp)
  812248:	10803f17 	ldw	r2,252(r2)
  81224c:	100b883a 	mov	r5,r2
  812250:	1809883a 	mov	r4,r3
  812254:	080b2200 	call	80b220 <__divsi3>
  812258:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  81225c:	e0bff717 	ldw	r2,-36(fp)
  812260:	1004913a 	slli	r2,r2,4
  812264:	e0fffd17 	ldw	r3,-12(fp)
  812268:	1885883a 	add	r2,r3,r2
  81226c:	e0fffe17 	ldw	r3,-8(fp)
  812270:	18c03f17 	ldw	r3,252(r3)
  812274:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  812278:	e0bff717 	ldw	r2,-36(fp)
  81227c:	10800044 	addi	r2,r2,1
  812280:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
  812284:	e0bffe17 	ldw	r2,-8(fp)
  812288:	10803617 	ldw	r2,216(r2)
  81228c:	10800058 	cmpnei	r2,r2,1
  812290:	10002f1e 	bne	r2,zero,812350 <altera_onchip_flash_init+0x310>
  812294:	e0bffa17 	ldw	r2,-24(fp)
  812298:	10802020 	cmpeqi	r2,r2,128
  81229c:	10002c1e 	bne	r2,zero,812350 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
  8122a0:	e0bff717 	ldw	r2,-36(fp)
  8122a4:	1004913a 	slli	r2,r2,4
  8122a8:	e0fffd17 	ldw	r3,-12(fp)
  8122ac:	1885883a 	add	r2,r3,r2
  8122b0:	e0fffe17 	ldw	r3,-8(fp)
  8122b4:	18c03717 	ldw	r3,220(r3)
  8122b8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
  8122bc:	e0bff717 	ldw	r2,-36(fp)
  8122c0:	1004913a 	slli	r2,r2,4
  8122c4:	e0fffd17 	ldw	r3,-12(fp)
  8122c8:	1885883a 	add	r2,r3,r2
  8122cc:	e0fffe17 	ldw	r3,-8(fp)
  8122d0:	19003817 	ldw	r4,224(r3)
  8122d4:	e0fffe17 	ldw	r3,-8(fp)
  8122d8:	18c03717 	ldw	r3,220(r3)
  8122dc:	20c7c83a 	sub	r3,r4,r3
  8122e0:	18c00044 	addi	r3,r3,1
  8122e4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8122e8:	e0bff717 	ldw	r2,-36(fp)
  8122ec:	1004913a 	slli	r2,r2,4
  8122f0:	e0fffd17 	ldw	r3,-12(fp)
  8122f4:	18a1883a 	add	r16,r3,r2
  8122f8:	e0fffe17 	ldw	r3,-8(fp)
  8122fc:	e0bff717 	ldw	r2,-36(fp)
  812300:	1004913a 	slli	r2,r2,4
  812304:	1885883a 	add	r2,r3,r2
  812308:	10800e04 	addi	r2,r2,56
  81230c:	10c00017 	ldw	r3,0(r2)
  812310:	e0bffe17 	ldw	r2,-8(fp)
  812314:	10803f17 	ldw	r2,252(r2)
  812318:	100b883a 	mov	r5,r2
  81231c:	1809883a 	mov	r4,r3
  812320:	080b2200 	call	80b220 <__divsi3>
  812324:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  812328:	e0bff717 	ldw	r2,-36(fp)
  81232c:	1004913a 	slli	r2,r2,4
  812330:	e0fffd17 	ldw	r3,-12(fp)
  812334:	1885883a 	add	r2,r3,r2
  812338:	e0fffe17 	ldw	r3,-8(fp)
  81233c:	18c03f17 	ldw	r3,252(r3)
  812340:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  812344:	e0bff717 	ldw	r2,-36(fp)
  812348:	10800044 	addi	r2,r2,1
  81234c:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
  812350:	e0bffe17 	ldw	r2,-8(fp)
  812354:	10803917 	ldw	r2,228(r2)
  812358:	10800058 	cmpnei	r2,r2,1
  81235c:	10002f1e 	bne	r2,zero,81241c <altera_onchip_flash_init+0x3dc>
  812360:	e0bffb17 	ldw	r2,-20(fp)
  812364:	10804020 	cmpeqi	r2,r2,256
  812368:	10002c1e 	bne	r2,zero,81241c <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
  81236c:	e0bff717 	ldw	r2,-36(fp)
  812370:	1004913a 	slli	r2,r2,4
  812374:	e0fffd17 	ldw	r3,-12(fp)
  812378:	1885883a 	add	r2,r3,r2
  81237c:	e0fffe17 	ldw	r3,-8(fp)
  812380:	18c03a17 	ldw	r3,232(r3)
  812384:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
  812388:	e0bff717 	ldw	r2,-36(fp)
  81238c:	1004913a 	slli	r2,r2,4
  812390:	e0fffd17 	ldw	r3,-12(fp)
  812394:	1885883a 	add	r2,r3,r2
  812398:	e0fffe17 	ldw	r3,-8(fp)
  81239c:	19003b17 	ldw	r4,236(r3)
  8123a0:	e0fffe17 	ldw	r3,-8(fp)
  8123a4:	18c03a17 	ldw	r3,232(r3)
  8123a8:	20c7c83a 	sub	r3,r4,r3
  8123ac:	18c00044 	addi	r3,r3,1
  8123b0:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  8123b4:	e0bff717 	ldw	r2,-36(fp)
  8123b8:	1004913a 	slli	r2,r2,4
  8123bc:	e0fffd17 	ldw	r3,-12(fp)
  8123c0:	18a1883a 	add	r16,r3,r2
  8123c4:	e0fffe17 	ldw	r3,-8(fp)
  8123c8:	e0bff717 	ldw	r2,-36(fp)
  8123cc:	1004913a 	slli	r2,r2,4
  8123d0:	1885883a 	add	r2,r3,r2
  8123d4:	10800e04 	addi	r2,r2,56
  8123d8:	10c00017 	ldw	r3,0(r2)
  8123dc:	e0bffe17 	ldw	r2,-8(fp)
  8123e0:	10803f17 	ldw	r2,252(r2)
  8123e4:	100b883a 	mov	r5,r2
  8123e8:	1809883a 	mov	r4,r3
  8123ec:	080b2200 	call	80b220 <__divsi3>
  8123f0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  8123f4:	e0bff717 	ldw	r2,-36(fp)
  8123f8:	1004913a 	slli	r2,r2,4
  8123fc:	e0fffd17 	ldw	r3,-12(fp)
  812400:	1885883a 	add	r2,r3,r2
  812404:	e0fffe17 	ldw	r3,-8(fp)
  812408:	18c03f17 	ldw	r3,252(r3)
  81240c:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  812410:	e0bff717 	ldw	r2,-36(fp)
  812414:	10800044 	addi	r2,r2,1
  812418:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
  81241c:	e0bffe17 	ldw	r2,-8(fp)
  812420:	10803c17 	ldw	r2,240(r2)
  812424:	10800058 	cmpnei	r2,r2,1
  812428:	10002f1e 	bne	r2,zero,8124e8 <altera_onchip_flash_init+0x4a8>
  81242c:	e0bffc17 	ldw	r2,-16(fp)
  812430:	10808020 	cmpeqi	r2,r2,512
  812434:	10002c1e 	bne	r2,zero,8124e8 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
  812438:	e0bff717 	ldw	r2,-36(fp)
  81243c:	1004913a 	slli	r2,r2,4
  812440:	e0fffd17 	ldw	r3,-12(fp)
  812444:	1885883a 	add	r2,r3,r2
  812448:	e0fffe17 	ldw	r3,-8(fp)
  81244c:	18c03d17 	ldw	r3,244(r3)
  812450:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
  812454:	e0bff717 	ldw	r2,-36(fp)
  812458:	1004913a 	slli	r2,r2,4
  81245c:	e0fffd17 	ldw	r3,-12(fp)
  812460:	1885883a 	add	r2,r3,r2
  812464:	e0fffe17 	ldw	r3,-8(fp)
  812468:	19003e17 	ldw	r4,248(r3)
  81246c:	e0fffe17 	ldw	r3,-8(fp)
  812470:	18c03d17 	ldw	r3,244(r3)
  812474:	20c7c83a 	sub	r3,r4,r3
  812478:	18c00044 	addi	r3,r3,1
  81247c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
  812480:	e0bff717 	ldw	r2,-36(fp)
  812484:	1004913a 	slli	r2,r2,4
  812488:	e0fffd17 	ldw	r3,-12(fp)
  81248c:	18a1883a 	add	r16,r3,r2
  812490:	e0fffe17 	ldw	r3,-8(fp)
  812494:	e0bff717 	ldw	r2,-36(fp)
  812498:	1004913a 	slli	r2,r2,4
  81249c:	1885883a 	add	r2,r3,r2
  8124a0:	10800e04 	addi	r2,r2,56
  8124a4:	10c00017 	ldw	r3,0(r2)
  8124a8:	e0bffe17 	ldw	r2,-8(fp)
  8124ac:	10803f17 	ldw	r2,252(r2)
  8124b0:	100b883a 	mov	r5,r2
  8124b4:	1809883a 	mov	r4,r3
  8124b8:	080b2200 	call	80b220 <__divsi3>
  8124bc:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
  8124c0:	e0bff717 	ldw	r2,-36(fp)
  8124c4:	1004913a 	slli	r2,r2,4
  8124c8:	e0fffd17 	ldw	r3,-12(fp)
  8124cc:	1885883a 	add	r2,r3,r2
  8124d0:	e0fffe17 	ldw	r3,-8(fp)
  8124d4:	18c03f17 	ldw	r3,252(r3)
  8124d8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
  8124dc:	e0bff717 	ldw	r2,-36(fp)
  8124e0:	10800044 	addi	r2,r2,1
  8124e4:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
  8124e8:	e0bffe17 	ldw	r2,-8(fp)
  8124ec:	e0fff717 	ldw	r3,-36(fp)
  8124f0:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
  8124f4:	e0bffe17 	ldw	r2,-8(fp)
  8124f8:	1009883a 	mov	r4,r2
  8124fc:	081178c0 	call	81178c <alt_flash_device_register>
}
  812500:	0001883a 	nop
  812504:	e6ffff04 	addi	sp,fp,-4
  812508:	dfc00217 	ldw	ra,8(sp)
  81250c:	df000117 	ldw	fp,4(sp)
  812510:	dc000017 	ldw	r16,0(sp)
  812514:	dec00304 	addi	sp,sp,12
  812518:	f800283a 	ret

0081251c <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
  81251c:	defffa04 	addi	sp,sp,-24
  812520:	dfc00515 	stw	ra,20(sp)
  812524:	df000415 	stw	fp,16(sp)
  812528:	df000404 	addi	fp,sp,16
  81252c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  812530:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  812534:	008002f4 	movhi	r2,11
  812538:	10ab9804 	addi	r2,r2,-20896
  81253c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  812540:	008002f4 	movhi	r2,11
  812544:	10ab9804 	addi	r2,r2,-20896
  812548:	e0bffd15 	stw	r2,-12(fp)

    while (
  81254c:	00000c06 	br	812580 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
  812550:	01000044 	movi	r4,1
  812554:	08127f80 	call	8127f8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  812558:	e0bffe17 	ldw	r2,-8(fp)
  81255c:	10000826 	beq	r2,zero,812580 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
  812560:	e0bffd17 	ldw	r2,-12(fp)
  812564:	10bfffc4 	addi	r2,r2,-1
  812568:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  81256c:	e0bffd17 	ldw	r2,-12(fp)
  812570:	1000031e 	bne	r2,zero,812580 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  812574:	00bfe304 	movi	r2,-116
  812578:	e0bffc15 	stw	r2,-16(fp)
                break;
  81257c:	00000506 	br	812594 <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  812580:	e0bfff17 	ldw	r2,-4(fp)
  812584:	10802f17 	ldw	r2,188(r2)
  812588:	10800037 	ldwio	r2,0(r2)
  81258c:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  812590:	103fef1e 	bne	r2,zero,812550 <__alt_mem_descriptor_memory+0xff792550>
                break;
            }
        }
    }

    return ret_code;
  812594:	e0bffc17 	ldw	r2,-16(fp)
}
  812598:	e037883a 	mov	sp,fp
  81259c:	dfc00117 	ldw	ra,4(sp)
  8125a0:	df000017 	ldw	fp,0(sp)
  8125a4:	dec00204 	addi	sp,sp,8
  8125a8:	f800283a 	ret

008125ac <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
  8125ac:	defffa04 	addi	sp,sp,-24
  8125b0:	dfc00515 	stw	ra,20(sp)
  8125b4:	df000415 	stw	fp,16(sp)
  8125b8:	df000404 	addi	fp,sp,16
  8125bc:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  8125c0:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  8125c4:	008002f4 	movhi	r2,11
  8125c8:	10ab9804 	addi	r2,r2,-20896
  8125cc:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  8125d0:	008002f4 	movhi	r2,11
  8125d4:	10ab9804 	addi	r2,r2,-20896
  8125d8:	e0bffd15 	stw	r2,-12(fp)

    while (
  8125dc:	00000c06 	br	812610 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  8125e0:	01000044 	movi	r4,1
  8125e4:	08127f80 	call	8127f8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  8125e8:	e0bffe17 	ldw	r2,-8(fp)
  8125ec:	10000826 	beq	r2,zero,812610 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
  8125f0:	e0bffd17 	ldw	r2,-12(fp)
  8125f4:	10bfffc4 	addi	r2,r2,-1
  8125f8:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  8125fc:	e0bffd17 	ldw	r2,-12(fp)
  812600:	1000031e 	bne	r2,zero,812610 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  812604:	00bfe304 	movi	r2,-116
  812608:	e0bffc15 	stw	r2,-16(fp)
                break;
  81260c:	00000506 	br	812624 <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  812610:	e0bfff17 	ldw	r2,-4(fp)
  812614:	10802f17 	ldw	r2,188(r2)
  812618:	10800037 	ldwio	r2,0(r2)
  81261c:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  812620:	103fef26 	beq	r2,zero,8125e0 <__alt_mem_descriptor_memory+0xff7925e0>
                break;
            }
        }
    }

    return ret_code;
  812624:	e0bffc17 	ldw	r2,-16(fp)
}
  812628:	e037883a 	mov	sp,fp
  81262c:	dfc00117 	ldw	ra,4(sp)
  812630:	df000017 	ldw	fp,0(sp)
  812634:	dec00204 	addi	sp,sp,8
  812638:	f800283a 	ret

0081263c <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
  81263c:	defffa04 	addi	sp,sp,-24
  812640:	dfc00515 	stw	ra,20(sp)
  812644:	df000415 	stw	fp,16(sp)
  812648:	df000404 	addi	fp,sp,16
  81264c:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
  812650:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  812654:	008002f4 	movhi	r2,11
  812658:	10ab9804 	addi	r2,r2,-20896
  81265c:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
  812660:	008002f4 	movhi	r2,11
  812664:	10ab9804 	addi	r2,r2,-20896
  812668:	e0bffd15 	stw	r2,-12(fp)

    while (
  81266c:	00000c06 	br	8126a0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
  812670:	01000044 	movi	r4,1
  812674:	08127f80 	call	8127f8 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
  812678:	e0bffe17 	ldw	r2,-8(fp)
  81267c:	10000826 	beq	r2,zero,8126a0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
  812680:	e0bffd17 	ldw	r2,-12(fp)
  812684:	10bfffc4 	addi	r2,r2,-1
  812688:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
  81268c:	e0bffd17 	ldw	r2,-12(fp)
  812690:	1000031e 	bne	r2,zero,8126a0 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
  812694:	00bfe304 	movi	r2,-116
  812698:	e0bffc15 	stw	r2,-16(fp)
                break;
  81269c:	00000506 	br	8126b4 <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
  8126a0:	e0bfff17 	ldw	r2,-4(fp)
  8126a4:	10802f17 	ldw	r2,188(r2)
  8126a8:	10800037 	ldwio	r2,0(r2)
  8126ac:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
  8126b0:	103fef26 	beq	r2,zero,812670 <__alt_mem_descriptor_memory+0xff792670>
                break;
            }
        }
    }

    return ret_code;
  8126b4:	e0bffc17 	ldw	r2,-16(fp)
}
  8126b8:	e037883a 	mov	sp,fp
  8126bc:	dfc00117 	ldw	ra,4(sp)
  8126c0:	df000017 	ldw	fp,0(sp)
  8126c4:	dec00204 	addi	sp,sp,8
  8126c8:	f800283a 	ret

008126cc <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
  8126cc:	defff504 	addi	sp,sp,-44
  8126d0:	df000a15 	stw	fp,40(sp)
  8126d4:	df000a04 	addi	fp,sp,40
  8126d8:	e13ffc15 	stw	r4,-16(fp)
  8126dc:	e17ffd15 	stw	r5,-12(fp)
  8126e0:	e1bffe15 	stw	r6,-8(fp)
  8126e4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
  8126e8:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
  8126ec:	d0a03917 	ldw	r2,-32540(gp)
  
  if (alt_ticks_per_second ())
  8126f0:	10003c26 	beq	r2,zero,8127e4 <alt_alarm_start+0x118>
  {
    if (alarm)
  8126f4:	e0bffc17 	ldw	r2,-16(fp)
  8126f8:	10003826 	beq	r2,zero,8127dc <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
  8126fc:	e0bffc17 	ldw	r2,-16(fp)
  812700:	e0fffe17 	ldw	r3,-8(fp)
  812704:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
  812708:	e0bffc17 	ldw	r2,-16(fp)
  81270c:	e0ffff17 	ldw	r3,-4(fp)
  812710:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812714:	0005303a 	rdctl	r2,status
  812718:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  81271c:	e0fff917 	ldw	r3,-28(fp)
  812720:	00bfff84 	movi	r2,-2
  812724:	1884703a 	and	r2,r3,r2
  812728:	1001703a 	wrctl	status,r2
  
  return context;
  81272c:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
  812730:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
  812734:	d0a03a17 	ldw	r2,-32536(gp)
      
      current_nticks = alt_nticks();
  812738:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
  81273c:	e0fffd17 	ldw	r3,-12(fp)
  812740:	e0bff617 	ldw	r2,-40(fp)
  812744:	1885883a 	add	r2,r3,r2
  812748:	10c00044 	addi	r3,r2,1
  81274c:	e0bffc17 	ldw	r2,-16(fp)
  812750:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
  812754:	e0bffc17 	ldw	r2,-16(fp)
  812758:	10c00217 	ldw	r3,8(r2)
  81275c:	e0bff617 	ldw	r2,-40(fp)
  812760:	1880042e 	bgeu	r3,r2,812774 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
  812764:	e0bffc17 	ldw	r2,-16(fp)
  812768:	00c00044 	movi	r3,1
  81276c:	10c00405 	stb	r3,16(r2)
  812770:	00000206 	br	81277c <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
  812774:	e0bffc17 	ldw	r2,-16(fp)
  812778:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
  81277c:	e0bffc17 	ldw	r2,-16(fp)
  812780:	d0e02304 	addi	r3,gp,-32628
  812784:	e0fffa15 	stw	r3,-24(fp)
  812788:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  81278c:	e0bffb17 	ldw	r2,-20(fp)
  812790:	e0fffa17 	ldw	r3,-24(fp)
  812794:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812798:	e0bffa17 	ldw	r2,-24(fp)
  81279c:	10c00017 	ldw	r3,0(r2)
  8127a0:	e0bffb17 	ldw	r2,-20(fp)
  8127a4:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  8127a8:	e0bffa17 	ldw	r2,-24(fp)
  8127ac:	10800017 	ldw	r2,0(r2)
  8127b0:	e0fffb17 	ldw	r3,-20(fp)
  8127b4:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  8127b8:	e0bffa17 	ldw	r2,-24(fp)
  8127bc:	e0fffb17 	ldw	r3,-20(fp)
  8127c0:	10c00015 	stw	r3,0(r2)
  8127c4:	e0bff817 	ldw	r2,-32(fp)
  8127c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8127cc:	e0bff717 	ldw	r2,-36(fp)
  8127d0:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
  8127d4:	0005883a 	mov	r2,zero
  8127d8:	00000306 	br	8127e8 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
  8127dc:	00bffa84 	movi	r2,-22
  8127e0:	00000106 	br	8127e8 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
  8127e4:	00bfde84 	movi	r2,-134
  }
}
  8127e8:	e037883a 	mov	sp,fp
  8127ec:	df000017 	ldw	fp,0(sp)
  8127f0:	dec00104 	addi	sp,sp,4
  8127f4:	f800283a 	ret

008127f8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
  8127f8:	defffa04 	addi	sp,sp,-24
  8127fc:	dfc00515 	stw	ra,20(sp)
  812800:	df000415 	stw	fp,16(sp)
  812804:	df000404 	addi	fp,sp,16
  812808:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
  81280c:	008000c4 	movi	r2,3
  812810:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
  812814:	e0fffd17 	ldw	r3,-12(fp)
  812818:	008003f4 	movhi	r2,15
  81281c:	10909004 	addi	r2,r2,16960
  812820:	1885383a 	mul	r2,r3,r2
  812824:	100b883a 	mov	r5,r2
  812828:	01017db4 	movhi	r4,1526
  81282c:	21384004 	addi	r4,r4,-7936
  812830:	080b3180 	call	80b318 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  812834:	100b883a 	mov	r5,r2
  812838:	01200034 	movhi	r4,32768
  81283c:	213fffc4 	addi	r4,r4,-1
  812840:	080b3180 	call	80b318 <__udivsi3>
  812844:	100b883a 	mov	r5,r2
  812848:	e13fff17 	ldw	r4,-4(fp)
  81284c:	080b3180 	call	80b318 <__udivsi3>
  812850:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  812854:	e0bffe17 	ldw	r2,-8(fp)
  812858:	10002a26 	beq	r2,zero,812904 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
  81285c:	e03ffc15 	stw	zero,-16(fp)
  812860:	00001706 	br	8128c0 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
  812864:	00a00034 	movhi	r2,32768
  812868:	10bfffc4 	addi	r2,r2,-1
  81286c:	10bfffc4 	addi	r2,r2,-1
  812870:	103ffe1e 	bne	r2,zero,81286c <__alt_mem_descriptor_memory+0xff79286c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
  812874:	e0fffd17 	ldw	r3,-12(fp)
  812878:	008003f4 	movhi	r2,15
  81287c:	10909004 	addi	r2,r2,16960
  812880:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
  812884:	100b883a 	mov	r5,r2
  812888:	01017db4 	movhi	r4,1526
  81288c:	21384004 	addi	r4,r4,-7936
  812890:	080b3180 	call	80b318 <__udivsi3>
  812894:	100b883a 	mov	r5,r2
  812898:	01200034 	movhi	r4,32768
  81289c:	213fffc4 	addi	r4,r4,-1
  8128a0:	080b3180 	call	80b318 <__udivsi3>
  8128a4:	1007883a 	mov	r3,r2
  8128a8:	e0bfff17 	ldw	r2,-4(fp)
  8128ac:	10c5c83a 	sub	r2,r2,r3
  8128b0:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
  8128b4:	e0bffc17 	ldw	r2,-16(fp)
  8128b8:	10800044 	addi	r2,r2,1
  8128bc:	e0bffc15 	stw	r2,-16(fp)
  8128c0:	e0fffc17 	ldw	r3,-16(fp)
  8128c4:	e0bffe17 	ldw	r2,-8(fp)
  8128c8:	18bfe616 	blt	r3,r2,812864 <__alt_mem_descriptor_memory+0xff792864>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  8128cc:	e0fffd17 	ldw	r3,-12(fp)
  8128d0:	008003f4 	movhi	r2,15
  8128d4:	10909004 	addi	r2,r2,16960
  8128d8:	1885383a 	mul	r2,r3,r2
  8128dc:	100b883a 	mov	r5,r2
  8128e0:	01017db4 	movhi	r4,1526
  8128e4:	21384004 	addi	r4,r4,-7936
  8128e8:	080b3180 	call	80b318 <__udivsi3>
  8128ec:	1007883a 	mov	r3,r2
  8128f0:	e0bfff17 	ldw	r2,-4(fp)
  8128f4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  8128f8:	10bfffc4 	addi	r2,r2,-1
  8128fc:	103ffe1e 	bne	r2,zero,8128f8 <__alt_mem_descriptor_memory+0xff7928f8>
  812900:	00000d06 	br	812938 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  812904:	e0fffd17 	ldw	r3,-12(fp)
  812908:	008003f4 	movhi	r2,15
  81290c:	10909004 	addi	r2,r2,16960
  812910:	1885383a 	mul	r2,r3,r2
  812914:	100b883a 	mov	r5,r2
  812918:	01017db4 	movhi	r4,1526
  81291c:	21384004 	addi	r4,r4,-7936
  812920:	080b3180 	call	80b318 <__udivsi3>
  812924:	1007883a 	mov	r3,r2
  812928:	e0bfff17 	ldw	r2,-4(fp)
  81292c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
  812930:	10bfffc4 	addi	r2,r2,-1
  812934:	00bffe16 	blt	zero,r2,812930 <__alt_mem_descriptor_memory+0xff792930>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
  812938:	0005883a 	mov	r2,zero
}
  81293c:	e037883a 	mov	sp,fp
  812940:	dfc00117 	ldw	ra,4(sp)
  812944:	df000017 	ldw	fp,0(sp)
  812948:	dec00204 	addi	sp,sp,8
  81294c:	f800283a 	ret

00812950 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
  812950:	defffb04 	addi	sp,sp,-20
  812954:	df000415 	stw	fp,16(sp)
  812958:	df000404 	addi	fp,sp,16
  81295c:	e13ffe15 	stw	r4,-8(fp)
  812960:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
  812964:	e0fffe17 	ldw	r3,-8(fp)
  812968:	e0bfff17 	ldw	r2,-4(fp)
  81296c:	1885883a 	add	r2,r3,r2
  812970:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
  812974:	e0bffe17 	ldw	r2,-8(fp)
  812978:	e0bffc15 	stw	r2,-16(fp)
  81297c:	00000506 	br	812994 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
  812980:	e0bffc17 	ldw	r2,-16(fp)
  812984:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
  812988:	e0bffc17 	ldw	r2,-16(fp)
  81298c:	10800804 	addi	r2,r2,32
  812990:	e0bffc15 	stw	r2,-16(fp)
  812994:	e0fffc17 	ldw	r3,-16(fp)
  812998:	e0bffd17 	ldw	r2,-12(fp)
  81299c:	18bff836 	bltu	r3,r2,812980 <__alt_mem_descriptor_memory+0xff792980>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
  8129a0:	e0bffe17 	ldw	r2,-8(fp)
  8129a4:	108007cc 	andi	r2,r2,31
  8129a8:	10000226 	beq	r2,zero,8129b4 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
  8129ac:	e0bffc17 	ldw	r2,-16(fp)
  8129b0:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
  8129b4:	0001883a 	nop
  8129b8:	e037883a 	mov	sp,fp
  8129bc:	df000017 	ldw	fp,0(sp)
  8129c0:	dec00104 	addi	sp,sp,4
  8129c4:	f800283a 	ret

008129c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  8129c8:	defffe04 	addi	sp,sp,-8
  8129cc:	dfc00115 	stw	ra,4(sp)
  8129d0:	df000015 	stw	fp,0(sp)
  8129d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8129d8:	d0a01a17 	ldw	r2,-32664(gp)
  8129dc:	10000326 	beq	r2,zero,8129ec <alt_get_errno+0x24>
  8129e0:	d0a01a17 	ldw	r2,-32664(gp)
  8129e4:	103ee83a 	callr	r2
  8129e8:	00000106 	br	8129f0 <alt_get_errno+0x28>
  8129ec:	d0a03404 	addi	r2,gp,-32560
}
  8129f0:	e037883a 	mov	sp,fp
  8129f4:	dfc00117 	ldw	ra,4(sp)
  8129f8:	df000017 	ldw	fp,0(sp)
  8129fc:	dec00204 	addi	sp,sp,8
  812a00:	f800283a 	ret

00812a04 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
  812a04:	defffa04 	addi	sp,sp,-24
  812a08:	dfc00515 	stw	ra,20(sp)
  812a0c:	df000415 	stw	fp,16(sp)
  812a10:	df000404 	addi	fp,sp,16
  812a14:	e13ffe15 	stw	r4,-8(fp)
  812a18:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
  812a1c:	e0bffe17 	ldw	r2,-8(fp)
  812a20:	10000326 	beq	r2,zero,812a30 <alt_dev_llist_insert+0x2c>
  812a24:	e0bffe17 	ldw	r2,-8(fp)
  812a28:	10800217 	ldw	r2,8(r2)
  812a2c:	1000061e 	bne	r2,zero,812a48 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
  812a30:	08129c80 	call	8129c8 <alt_get_errno>
  812a34:	1007883a 	mov	r3,r2
  812a38:	00800584 	movi	r2,22
  812a3c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
  812a40:	00bffa84 	movi	r2,-22
  812a44:	00001306 	br	812a94 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
  812a48:	e0bffe17 	ldw	r2,-8(fp)
  812a4c:	e0ffff17 	ldw	r3,-4(fp)
  812a50:	e0fffc15 	stw	r3,-16(fp)
  812a54:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
  812a58:	e0bffd17 	ldw	r2,-12(fp)
  812a5c:	e0fffc17 	ldw	r3,-16(fp)
  812a60:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
  812a64:	e0bffc17 	ldw	r2,-16(fp)
  812a68:	10c00017 	ldw	r3,0(r2)
  812a6c:	e0bffd17 	ldw	r2,-12(fp)
  812a70:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
  812a74:	e0bffc17 	ldw	r2,-16(fp)
  812a78:	10800017 	ldw	r2,0(r2)
  812a7c:	e0fffd17 	ldw	r3,-12(fp)
  812a80:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
  812a84:	e0bffc17 	ldw	r2,-16(fp)
  812a88:	e0fffd17 	ldw	r3,-12(fp)
  812a8c:	10c00015 	stw	r3,0(r2)

  return 0;  
  812a90:	0005883a 	mov	r2,zero
}
  812a94:	e037883a 	mov	sp,fp
  812a98:	dfc00117 	ldw	ra,4(sp)
  812a9c:	df000017 	ldw	fp,0(sp)
  812aa0:	dec00204 	addi	sp,sp,8
  812aa4:	f800283a 	ret

00812aa8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
  812aa8:	defffd04 	addi	sp,sp,-12
  812aac:	dfc00215 	stw	ra,8(sp)
  812ab0:	df000115 	stw	fp,4(sp)
  812ab4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812ab8:	00802074 	movhi	r2,129
  812abc:	108f9604 	addi	r2,r2,15960
  812ac0:	e0bfff15 	stw	r2,-4(fp)
  812ac4:	00000606 	br	812ae0 <_do_ctors+0x38>
        (*ctor) (); 
  812ac8:	e0bfff17 	ldw	r2,-4(fp)
  812acc:	10800017 	ldw	r2,0(r2)
  812ad0:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
  812ad4:	e0bfff17 	ldw	r2,-4(fp)
  812ad8:	10bfff04 	addi	r2,r2,-4
  812adc:	e0bfff15 	stw	r2,-4(fp)
  812ae0:	e0ffff17 	ldw	r3,-4(fp)
  812ae4:	00802074 	movhi	r2,129
  812ae8:	108f9704 	addi	r2,r2,15964
  812aec:	18bff62e 	bgeu	r3,r2,812ac8 <__alt_mem_descriptor_memory+0xff792ac8>
        (*ctor) (); 
}
  812af0:	0001883a 	nop
  812af4:	e037883a 	mov	sp,fp
  812af8:	dfc00117 	ldw	ra,4(sp)
  812afc:	df000017 	ldw	fp,0(sp)
  812b00:	dec00204 	addi	sp,sp,8
  812b04:	f800283a 	ret

00812b08 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
  812b08:	defffd04 	addi	sp,sp,-12
  812b0c:	dfc00215 	stw	ra,8(sp)
  812b10:	df000115 	stw	fp,4(sp)
  812b14:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812b18:	00802074 	movhi	r2,129
  812b1c:	108f9604 	addi	r2,r2,15960
  812b20:	e0bfff15 	stw	r2,-4(fp)
  812b24:	00000606 	br	812b40 <_do_dtors+0x38>
        (*dtor) (); 
  812b28:	e0bfff17 	ldw	r2,-4(fp)
  812b2c:	10800017 	ldw	r2,0(r2)
  812b30:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
  812b34:	e0bfff17 	ldw	r2,-4(fp)
  812b38:	10bfff04 	addi	r2,r2,-4
  812b3c:	e0bfff15 	stw	r2,-4(fp)
  812b40:	e0ffff17 	ldw	r3,-4(fp)
  812b44:	00802074 	movhi	r2,129
  812b48:	108f9704 	addi	r2,r2,15964
  812b4c:	18bff62e 	bgeu	r3,r2,812b28 <__alt_mem_descriptor_memory+0xff792b28>
        (*dtor) (); 
}
  812b50:	0001883a 	nop
  812b54:	e037883a 	mov	sp,fp
  812b58:	dfc00117 	ldw	ra,4(sp)
  812b5c:	df000017 	ldw	fp,0(sp)
  812b60:	dec00204 	addi	sp,sp,8
  812b64:	f800283a 	ret

00812b68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
  812b68:	defffa04 	addi	sp,sp,-24
  812b6c:	dfc00515 	stw	ra,20(sp)
  812b70:	df000415 	stw	fp,16(sp)
  812b74:	df000404 	addi	fp,sp,16
  812b78:	e13ffe15 	stw	r4,-8(fp)
  812b7c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
  812b80:	e0bfff17 	ldw	r2,-4(fp)
  812b84:	10800017 	ldw	r2,0(r2)
  812b88:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
  812b8c:	e13ffe17 	ldw	r4,-8(fp)
  812b90:	0807be00 	call	807be0 <strlen>
  812b94:	10800044 	addi	r2,r2,1
  812b98:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812b9c:	00000d06 	br	812bd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
  812ba0:	e0bffc17 	ldw	r2,-16(fp)
  812ba4:	10800217 	ldw	r2,8(r2)
  812ba8:	e0fffd17 	ldw	r3,-12(fp)
  812bac:	180d883a 	mov	r6,r3
  812bb0:	e17ffe17 	ldw	r5,-8(fp)
  812bb4:	1009883a 	mov	r4,r2
  812bb8:	08139ac0 	call	8139ac <memcmp>
  812bbc:	1000021e 	bne	r2,zero,812bc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
  812bc0:	e0bffc17 	ldw	r2,-16(fp)
  812bc4:	00000706 	br	812be4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
  812bc8:	e0bffc17 	ldw	r2,-16(fp)
  812bcc:	10800017 	ldw	r2,0(r2)
  812bd0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
  812bd4:	e0fffc17 	ldw	r3,-16(fp)
  812bd8:	e0bfff17 	ldw	r2,-4(fp)
  812bdc:	18bff01e 	bne	r3,r2,812ba0 <__alt_mem_descriptor_memory+0xff792ba0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
  812be0:	0005883a 	mov	r2,zero
}
  812be4:	e037883a 	mov	sp,fp
  812be8:	dfc00117 	ldw	ra,4(sp)
  812bec:	df000017 	ldw	fp,0(sp)
  812bf0:	dec00204 	addi	sp,sp,8
  812bf4:	f800283a 	ret

00812bf8 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
  812bf8:	defffc04 	addi	sp,sp,-16
  812bfc:	dfc00315 	stw	ra,12(sp)
  812c00:	df000215 	stw	fp,8(sp)
  812c04:	df000204 	addi	fp,sp,8
  812c08:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
  812c0c:	d1602004 	addi	r5,gp,-32640
  812c10:	e13fff17 	ldw	r4,-4(fp)
  812c14:	0812b680 	call	812b68 <alt_find_dev>
  812c18:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
  812c1c:	e0bffe17 	ldw	r2,-8(fp)
  812c20:	10000926 	beq	r2,zero,812c48 <alt_flash_open_dev+0x50>
  812c24:	e0bffe17 	ldw	r2,-8(fp)
  812c28:	10800317 	ldw	r2,12(r2)
  812c2c:	10000626 	beq	r2,zero,812c48 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
  812c30:	e0bffe17 	ldw	r2,-8(fp)
  812c34:	10800317 	ldw	r2,12(r2)
  812c38:	e17fff17 	ldw	r5,-4(fp)
  812c3c:	e13ffe17 	ldw	r4,-8(fp)
  812c40:	103ee83a 	callr	r2
  812c44:	00000106 	br	812c4c <alt_flash_open_dev+0x54>
  }

  return dev;
  812c48:	e0bffe17 	ldw	r2,-8(fp)
}
  812c4c:	e037883a 	mov	sp,fp
  812c50:	dfc00117 	ldw	ra,4(sp)
  812c54:	df000017 	ldw	fp,0(sp)
  812c58:	dec00204 	addi	sp,sp,8
  812c5c:	f800283a 	ret

00812c60 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
  812c60:	defffd04 	addi	sp,sp,-12
  812c64:	dfc00215 	stw	ra,8(sp)
  812c68:	df000115 	stw	fp,4(sp)
  812c6c:	df000104 	addi	fp,sp,4
  812c70:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
  812c74:	e0bfff17 	ldw	r2,-4(fp)
  812c78:	10000826 	beq	r2,zero,812c9c <alt_flash_close_dev+0x3c>
  812c7c:	e0bfff17 	ldw	r2,-4(fp)
  812c80:	10800417 	ldw	r2,16(r2)
  812c84:	10000526 	beq	r2,zero,812c9c <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
  812c88:	e0bfff17 	ldw	r2,-4(fp)
  812c8c:	10800417 	ldw	r2,16(r2)
  812c90:	e13fff17 	ldw	r4,-4(fp)
  812c94:	103ee83a 	callr	r2
  }
  return;
  812c98:	0001883a 	nop
  812c9c:	0001883a 	nop
}
  812ca0:	e037883a 	mov	sp,fp
  812ca4:	dfc00117 	ldw	ra,4(sp)
  812ca8:	df000017 	ldw	fp,0(sp)
  812cac:	dec00204 	addi	sp,sp,8
  812cb0:	f800283a 	ret

00812cb4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812cb4:	defff904 	addi	sp,sp,-28
  812cb8:	dfc00615 	stw	ra,24(sp)
  812cbc:	df000515 	stw	fp,20(sp)
  812cc0:	df000504 	addi	fp,sp,20
  812cc4:	e13ffc15 	stw	r4,-16(fp)
  812cc8:	e17ffd15 	stw	r5,-12(fp)
  812ccc:	e1bffe15 	stw	r6,-8(fp)
  812cd0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
  812cd4:	e0800217 	ldw	r2,8(fp)
  812cd8:	d8800015 	stw	r2,0(sp)
  812cdc:	e1ffff17 	ldw	r7,-4(fp)
  812ce0:	e1bffe17 	ldw	r6,-8(fp)
  812ce4:	e17ffd17 	ldw	r5,-12(fp)
  812ce8:	e13ffc17 	ldw	r4,-16(fp)
  812cec:	0812e640 	call	812e64 <alt_iic_isr_register>
}  
  812cf0:	e037883a 	mov	sp,fp
  812cf4:	dfc00117 	ldw	ra,4(sp)
  812cf8:	df000017 	ldw	fp,0(sp)
  812cfc:	dec00204 	addi	sp,sp,8
  812d00:	f800283a 	ret

00812d04 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
  812d04:	defff904 	addi	sp,sp,-28
  812d08:	df000615 	stw	fp,24(sp)
  812d0c:	df000604 	addi	fp,sp,24
  812d10:	e13ffe15 	stw	r4,-8(fp)
  812d14:	e17fff15 	stw	r5,-4(fp)
  812d18:	e0bfff17 	ldw	r2,-4(fp)
  812d1c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812d20:	0005303a 	rdctl	r2,status
  812d24:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812d28:	e0fffb17 	ldw	r3,-20(fp)
  812d2c:	00bfff84 	movi	r2,-2
  812d30:	1884703a 	and	r2,r3,r2
  812d34:	1001703a 	wrctl	status,r2
  
  return context;
  812d38:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812d3c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
  812d40:	00c00044 	movi	r3,1
  812d44:	e0bffa17 	ldw	r2,-24(fp)
  812d48:	1884983a 	sll	r2,r3,r2
  812d4c:	1007883a 	mov	r3,r2
  812d50:	d0a03817 	ldw	r2,-32544(gp)
  812d54:	1884b03a 	or	r2,r3,r2
  812d58:	d0a03815 	stw	r2,-32544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812d5c:	d0a03817 	ldw	r2,-32544(gp)
  812d60:	100170fa 	wrctl	ienable,r2
  812d64:	e0bffc17 	ldw	r2,-16(fp)
  812d68:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812d6c:	e0bffd17 	ldw	r2,-12(fp)
  812d70:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812d74:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
  812d78:	0001883a 	nop
}
  812d7c:	e037883a 	mov	sp,fp
  812d80:	df000017 	ldw	fp,0(sp)
  812d84:	dec00104 	addi	sp,sp,4
  812d88:	f800283a 	ret

00812d8c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
  812d8c:	defff904 	addi	sp,sp,-28
  812d90:	df000615 	stw	fp,24(sp)
  812d94:	df000604 	addi	fp,sp,24
  812d98:	e13ffe15 	stw	r4,-8(fp)
  812d9c:	e17fff15 	stw	r5,-4(fp)
  812da0:	e0bfff17 	ldw	r2,-4(fp)
  812da4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812da8:	0005303a 	rdctl	r2,status
  812dac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812db0:	e0fffb17 	ldw	r3,-20(fp)
  812db4:	00bfff84 	movi	r2,-2
  812db8:	1884703a 	and	r2,r3,r2
  812dbc:	1001703a 	wrctl	status,r2
  
  return context;
  812dc0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
  812dc4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
  812dc8:	00c00044 	movi	r3,1
  812dcc:	e0bffa17 	ldw	r2,-24(fp)
  812dd0:	1884983a 	sll	r2,r3,r2
  812dd4:	0084303a 	nor	r2,zero,r2
  812dd8:	1007883a 	mov	r3,r2
  812ddc:	d0a03817 	ldw	r2,-32544(gp)
  812de0:	1884703a 	and	r2,r3,r2
  812de4:	d0a03815 	stw	r2,-32544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
  812de8:	d0a03817 	ldw	r2,-32544(gp)
  812dec:	100170fa 	wrctl	ienable,r2
  812df0:	e0bffc17 	ldw	r2,-16(fp)
  812df4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812df8:	e0bffd17 	ldw	r2,-12(fp)
  812dfc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
  812e00:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
  812e04:	0001883a 	nop
}
  812e08:	e037883a 	mov	sp,fp
  812e0c:	df000017 	ldw	fp,0(sp)
  812e10:	dec00104 	addi	sp,sp,4
  812e14:	f800283a 	ret

00812e18 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
  812e18:	defffc04 	addi	sp,sp,-16
  812e1c:	df000315 	stw	fp,12(sp)
  812e20:	df000304 	addi	fp,sp,12
  812e24:	e13ffe15 	stw	r4,-8(fp)
  812e28:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
  812e2c:	000530fa 	rdctl	r2,ienable
  812e30:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
  812e34:	00c00044 	movi	r3,1
  812e38:	e0bfff17 	ldw	r2,-4(fp)
  812e3c:	1884983a 	sll	r2,r3,r2
  812e40:	1007883a 	mov	r3,r2
  812e44:	e0bffd17 	ldw	r2,-12(fp)
  812e48:	1884703a 	and	r2,r3,r2
  812e4c:	1004c03a 	cmpne	r2,r2,zero
  812e50:	10803fcc 	andi	r2,r2,255
}
  812e54:	e037883a 	mov	sp,fp
  812e58:	df000017 	ldw	fp,0(sp)
  812e5c:	dec00104 	addi	sp,sp,4
  812e60:	f800283a 	ret

00812e64 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  812e64:	defff504 	addi	sp,sp,-44
  812e68:	dfc00a15 	stw	ra,40(sp)
  812e6c:	df000915 	stw	fp,36(sp)
  812e70:	df000904 	addi	fp,sp,36
  812e74:	e13ffc15 	stw	r4,-16(fp)
  812e78:	e17ffd15 	stw	r5,-12(fp)
  812e7c:	e1bffe15 	stw	r6,-8(fp)
  812e80:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
  812e84:	00bffa84 	movi	r2,-22
  812e88:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  812e8c:	e0bffd17 	ldw	r2,-12(fp)
  812e90:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
  812e94:	e0bff817 	ldw	r2,-32(fp)
  812e98:	10800808 	cmpgei	r2,r2,32
  812e9c:	1000271e 	bne	r2,zero,812f3c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  812ea0:	0005303a 	rdctl	r2,status
  812ea4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  812ea8:	e0fffb17 	ldw	r3,-20(fp)
  812eac:	00bfff84 	movi	r2,-2
  812eb0:	1884703a 	and	r2,r3,r2
  812eb4:	1001703a 	wrctl	status,r2
  
  return context;
  812eb8:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
  812ebc:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
  812ec0:	00802074 	movhi	r2,129
  812ec4:	109de304 	addi	r2,r2,30604
  812ec8:	e0fff817 	ldw	r3,-32(fp)
  812ecc:	180690fa 	slli	r3,r3,3
  812ed0:	10c5883a 	add	r2,r2,r3
  812ed4:	e0fffe17 	ldw	r3,-8(fp)
  812ed8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
  812edc:	00802074 	movhi	r2,129
  812ee0:	109de304 	addi	r2,r2,30604
  812ee4:	e0fff817 	ldw	r3,-32(fp)
  812ee8:	180690fa 	slli	r3,r3,3
  812eec:	10c5883a 	add	r2,r2,r3
  812ef0:	10800104 	addi	r2,r2,4
  812ef4:	e0ffff17 	ldw	r3,-4(fp)
  812ef8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
  812efc:	e0bffe17 	ldw	r2,-8(fp)
  812f00:	10000526 	beq	r2,zero,812f18 <alt_iic_isr_register+0xb4>
  812f04:	e0bff817 	ldw	r2,-32(fp)
  812f08:	100b883a 	mov	r5,r2
  812f0c:	e13ffc17 	ldw	r4,-16(fp)
  812f10:	0812d040 	call	812d04 <alt_ic_irq_enable>
  812f14:	00000406 	br	812f28 <alt_iic_isr_register+0xc4>
  812f18:	e0bff817 	ldw	r2,-32(fp)
  812f1c:	100b883a 	mov	r5,r2
  812f20:	e13ffc17 	ldw	r4,-16(fp)
  812f24:	0812d8c0 	call	812d8c <alt_ic_irq_disable>
  812f28:	e0bff715 	stw	r2,-36(fp)
  812f2c:	e0bffa17 	ldw	r2,-24(fp)
  812f30:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  812f34:	e0bff917 	ldw	r2,-28(fp)
  812f38:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
  812f3c:	e0bff717 	ldw	r2,-36(fp)
}
  812f40:	e037883a 	mov	sp,fp
  812f44:	dfc00117 	ldw	ra,4(sp)
  812f48:	df000017 	ldw	fp,0(sp)
  812f4c:	dec00204 	addi	sp,sp,8
  812f50:	f800283a 	ret

00812f54 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
  812f54:	defff904 	addi	sp,sp,-28
  812f58:	dfc00615 	stw	ra,24(sp)
  812f5c:	df000515 	stw	fp,20(sp)
  812f60:	df000504 	addi	fp,sp,20
  812f64:	e13ffc15 	stw	r4,-16(fp)
  812f68:	e17ffd15 	stw	r5,-12(fp)
  812f6c:	e1bffe15 	stw	r6,-8(fp)
  812f70:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
  812f74:	e1bfff17 	ldw	r6,-4(fp)
  812f78:	e17ffe17 	ldw	r5,-8(fp)
  812f7c:	e13ffd17 	ldw	r4,-12(fp)
  812f80:	08131940 	call	813194 <open>
  812f84:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
  812f88:	e0bffb17 	ldw	r2,-20(fp)
  812f8c:	10001c16 	blt	r2,zero,813000 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
  812f90:	00802074 	movhi	r2,129
  812f94:	10937e04 	addi	r2,r2,19960
  812f98:	e0fffb17 	ldw	r3,-20(fp)
  812f9c:	18c00324 	muli	r3,r3,12
  812fa0:	10c5883a 	add	r2,r2,r3
  812fa4:	10c00017 	ldw	r3,0(r2)
  812fa8:	e0bffc17 	ldw	r2,-16(fp)
  812fac:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
  812fb0:	00802074 	movhi	r2,129
  812fb4:	10937e04 	addi	r2,r2,19960
  812fb8:	e0fffb17 	ldw	r3,-20(fp)
  812fbc:	18c00324 	muli	r3,r3,12
  812fc0:	10c5883a 	add	r2,r2,r3
  812fc4:	10800104 	addi	r2,r2,4
  812fc8:	10c00017 	ldw	r3,0(r2)
  812fcc:	e0bffc17 	ldw	r2,-16(fp)
  812fd0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
  812fd4:	00802074 	movhi	r2,129
  812fd8:	10937e04 	addi	r2,r2,19960
  812fdc:	e0fffb17 	ldw	r3,-20(fp)
  812fe0:	18c00324 	muli	r3,r3,12
  812fe4:	10c5883a 	add	r2,r2,r3
  812fe8:	10800204 	addi	r2,r2,8
  812fec:	10c00017 	ldw	r3,0(r2)
  812ff0:	e0bffc17 	ldw	r2,-16(fp)
  812ff4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
  812ff8:	e13ffb17 	ldw	r4,-20(fp)
  812ffc:	080dfe80 	call	80dfe8 <alt_release_fd>
  }
} 
  813000:	0001883a 	nop
  813004:	e037883a 	mov	sp,fp
  813008:	dfc00117 	ldw	ra,4(sp)
  81300c:	df000017 	ldw	fp,0(sp)
  813010:	dec00204 	addi	sp,sp,8
  813014:	f800283a 	ret

00813018 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
  813018:	defffb04 	addi	sp,sp,-20
  81301c:	dfc00415 	stw	ra,16(sp)
  813020:	df000315 	stw	fp,12(sp)
  813024:	df000304 	addi	fp,sp,12
  813028:	e13ffd15 	stw	r4,-12(fp)
  81302c:	e17ffe15 	stw	r5,-8(fp)
  813030:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
  813034:	01c07fc4 	movi	r7,511
  813038:	01800044 	movi	r6,1
  81303c:	e17ffd17 	ldw	r5,-12(fp)
  813040:	01002074 	movhi	r4,129
  813044:	21138104 	addi	r4,r4,19972
  813048:	0812f540 	call	812f54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
  81304c:	01c07fc4 	movi	r7,511
  813050:	000d883a 	mov	r6,zero
  813054:	e17ffe17 	ldw	r5,-8(fp)
  813058:	01002074 	movhi	r4,129
  81305c:	21137e04 	addi	r4,r4,19960
  813060:	0812f540 	call	812f54 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
  813064:	01c07fc4 	movi	r7,511
  813068:	01800044 	movi	r6,1
  81306c:	e17fff17 	ldw	r5,-4(fp)
  813070:	01002074 	movhi	r4,129
  813074:	21138404 	addi	r4,r4,19984
  813078:	0812f540 	call	812f54 <alt_open_fd>
}  
  81307c:	0001883a 	nop
  813080:	e037883a 	mov	sp,fp
  813084:	dfc00117 	ldw	ra,4(sp)
  813088:	df000017 	ldw	fp,0(sp)
  81308c:	dec00204 	addi	sp,sp,8
  813090:	f800283a 	ret

00813094 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  813094:	defffe04 	addi	sp,sp,-8
  813098:	dfc00115 	stw	ra,4(sp)
  81309c:	df000015 	stw	fp,0(sp)
  8130a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
  8130a4:	d0a01a17 	ldw	r2,-32664(gp)
  8130a8:	10000326 	beq	r2,zero,8130b8 <alt_get_errno+0x24>
  8130ac:	d0a01a17 	ldw	r2,-32664(gp)
  8130b0:	103ee83a 	callr	r2
  8130b4:	00000106 	br	8130bc <alt_get_errno+0x28>
  8130b8:	d0a03404 	addi	r2,gp,-32560
}
  8130bc:	e037883a 	mov	sp,fp
  8130c0:	dfc00117 	ldw	ra,4(sp)
  8130c4:	df000017 	ldw	fp,0(sp)
  8130c8:	dec00204 	addi	sp,sp,8
  8130cc:	f800283a 	ret

008130d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
  8130d0:	defffd04 	addi	sp,sp,-12
  8130d4:	df000215 	stw	fp,8(sp)
  8130d8:	df000204 	addi	fp,sp,8
  8130dc:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
  8130e0:	e0bfff17 	ldw	r2,-4(fp)
  8130e4:	10800217 	ldw	r2,8(r2)
  8130e8:	10d00034 	orhi	r3,r2,16384
  8130ec:	e0bfff17 	ldw	r2,-4(fp)
  8130f0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  8130f4:	e03ffe15 	stw	zero,-8(fp)
  8130f8:	00001d06 	br	813170 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  8130fc:	00802074 	movhi	r2,129
  813100:	10937e04 	addi	r2,r2,19960
  813104:	e0fffe17 	ldw	r3,-8(fp)
  813108:	18c00324 	muli	r3,r3,12
  81310c:	10c5883a 	add	r2,r2,r3
  813110:	10c00017 	ldw	r3,0(r2)
  813114:	e0bfff17 	ldw	r2,-4(fp)
  813118:	10800017 	ldw	r2,0(r2)
  81311c:	1880111e 	bne	r3,r2,813164 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813120:	00802074 	movhi	r2,129
  813124:	10937e04 	addi	r2,r2,19960
  813128:	e0fffe17 	ldw	r3,-8(fp)
  81312c:	18c00324 	muli	r3,r3,12
  813130:	10c5883a 	add	r2,r2,r3
  813134:	10800204 	addi	r2,r2,8
  813138:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
  81313c:	1000090e 	bge	r2,zero,813164 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
  813140:	e0bffe17 	ldw	r2,-8(fp)
  813144:	10c00324 	muli	r3,r2,12
  813148:	00802074 	movhi	r2,129
  81314c:	10937e04 	addi	r2,r2,19960
  813150:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
  813154:	e0bfff17 	ldw	r2,-4(fp)
  813158:	18800226 	beq	r3,r2,813164 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
  81315c:	00bffcc4 	movi	r2,-13
  813160:	00000806 	br	813184 <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  813164:	e0bffe17 	ldw	r2,-8(fp)
  813168:	10800044 	addi	r2,r2,1
  81316c:	e0bffe15 	stw	r2,-8(fp)
  813170:	d0a01917 	ldw	r2,-32668(gp)
  813174:	1007883a 	mov	r3,r2
  813178:	e0bffe17 	ldw	r2,-8(fp)
  81317c:	18bfdf2e 	bgeu	r3,r2,8130fc <__alt_mem_descriptor_memory+0xff7930fc>
    }
  }
  
  /* The device is not locked */
 
  return 0;
  813180:	0005883a 	mov	r2,zero
}
  813184:	e037883a 	mov	sp,fp
  813188:	df000017 	ldw	fp,0(sp)
  81318c:	dec00104 	addi	sp,sp,4
  813190:	f800283a 	ret

00813194 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
  813194:	defff604 	addi	sp,sp,-40
  813198:	dfc00915 	stw	ra,36(sp)
  81319c:	df000815 	stw	fp,32(sp)
  8131a0:	df000804 	addi	fp,sp,32
  8131a4:	e13ffd15 	stw	r4,-12(fp)
  8131a8:	e17ffe15 	stw	r5,-8(fp)
  8131ac:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
  8131b0:	00bfffc4 	movi	r2,-1
  8131b4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
  8131b8:	00bffb44 	movi	r2,-19
  8131bc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
  8131c0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
  8131c4:	d1601704 	addi	r5,gp,-32676
  8131c8:	e13ffd17 	ldw	r4,-12(fp)
  8131cc:	0812b680 	call	812b68 <alt_find_dev>
  8131d0:	e0bff815 	stw	r2,-32(fp)
  8131d4:	e0bff817 	ldw	r2,-32(fp)
  8131d8:	1000051e 	bne	r2,zero,8131f0 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
  8131dc:	e13ffd17 	ldw	r4,-12(fp)
  8131e0:	08137180 	call	813718 <alt_find_file>
  8131e4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
  8131e8:	00800044 	movi	r2,1
  8131ec:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
  8131f0:	e0bff817 	ldw	r2,-32(fp)
  8131f4:	10002926 	beq	r2,zero,81329c <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
  8131f8:	e13ff817 	ldw	r4,-32(fp)
  8131fc:	08138200 	call	813820 <alt_get_fd>
  813200:	e0bff915 	stw	r2,-28(fp)
  813204:	e0bff917 	ldw	r2,-28(fp)
  813208:	1000030e 	bge	r2,zero,813218 <open+0x84>
    {
      status = index;
  81320c:	e0bff917 	ldw	r2,-28(fp)
  813210:	e0bffa15 	stw	r2,-24(fp)
  813214:	00002306 	br	8132a4 <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
  813218:	e0bff917 	ldw	r2,-28(fp)
  81321c:	10c00324 	muli	r3,r2,12
  813220:	00802074 	movhi	r2,129
  813224:	10937e04 	addi	r2,r2,19960
  813228:	1885883a 	add	r2,r3,r2
  81322c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
  813230:	e0fffe17 	ldw	r3,-8(fp)
  813234:	00900034 	movhi	r2,16384
  813238:	10bfffc4 	addi	r2,r2,-1
  81323c:	1886703a 	and	r3,r3,r2
  813240:	e0bffc17 	ldw	r2,-16(fp)
  813244:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
  813248:	e0bffb17 	ldw	r2,-20(fp)
  81324c:	1000051e 	bne	r2,zero,813264 <open+0xd0>
  813250:	e13ffc17 	ldw	r4,-16(fp)
  813254:	08130d00 	call	8130d0 <alt_file_locked>
  813258:	e0bffa15 	stw	r2,-24(fp)
  81325c:	e0bffa17 	ldw	r2,-24(fp)
  813260:	10001016 	blt	r2,zero,8132a4 <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
  813264:	e0bff817 	ldw	r2,-32(fp)
  813268:	10800317 	ldw	r2,12(r2)
  81326c:	10000826 	beq	r2,zero,813290 <open+0xfc>
  813270:	e0bff817 	ldw	r2,-32(fp)
  813274:	10800317 	ldw	r2,12(r2)
  813278:	e1ffff17 	ldw	r7,-4(fp)
  81327c:	e1bffe17 	ldw	r6,-8(fp)
  813280:	e17ffd17 	ldw	r5,-12(fp)
  813284:	e13ffc17 	ldw	r4,-16(fp)
  813288:	103ee83a 	callr	r2
  81328c:	00000106 	br	813294 <open+0x100>
  813290:	0005883a 	mov	r2,zero
  813294:	e0bffa15 	stw	r2,-24(fp)
  813298:	00000206 	br	8132a4 <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
  81329c:	00bffb44 	movi	r2,-19
  8132a0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
  8132a4:	e0bffa17 	ldw	r2,-24(fp)
  8132a8:	1000090e 	bge	r2,zero,8132d0 <open+0x13c>
  {
    alt_release_fd (index);  
  8132ac:	e13ff917 	ldw	r4,-28(fp)
  8132b0:	080dfe80 	call	80dfe8 <alt_release_fd>
    ALT_ERRNO = -status;
  8132b4:	08130940 	call	813094 <alt_get_errno>
  8132b8:	1007883a 	mov	r3,r2
  8132bc:	e0bffa17 	ldw	r2,-24(fp)
  8132c0:	0085c83a 	sub	r2,zero,r2
  8132c4:	18800015 	stw	r2,0(r3)
    return -1;
  8132c8:	00bfffc4 	movi	r2,-1
  8132cc:	00000106 	br	8132d4 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
  8132d0:	e0bff917 	ldw	r2,-28(fp)
}
  8132d4:	e037883a 	mov	sp,fp
  8132d8:	dfc00117 	ldw	ra,4(sp)
  8132dc:	df000017 	ldw	fp,0(sp)
  8132e0:	dec00204 	addi	sp,sp,8
  8132e4:	f800283a 	ret

008132e8 <alt_printf>:
/* 
 * ALT printf function 
 */
void 
alt_printf(const char* fmt, ... )
{
  8132e8:	defff204 	addi	sp,sp,-56
  8132ec:	dfc00a15 	stw	ra,40(sp)
  8132f0:	df000915 	stw	fp,36(sp)
  8132f4:	df000904 	addi	fp,sp,36
  8132f8:	e13fff15 	stw	r4,-4(fp)
  8132fc:	e1400215 	stw	r5,8(fp)
  813300:	e1800315 	stw	r6,12(fp)
  813304:	e1c00415 	stw	r7,16(fp)
	va_list args;
	va_start(args, fmt);
  813308:	e0800204 	addi	r2,fp,8
  81330c:	e0bffe15 	stw	r2,-8(fp)
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
  813310:	e0bfff17 	ldw	r2,-4(fp)
  813314:	e0bff715 	stw	r2,-36(fp)
    while ((c = *w++) != 0)
  813318:	00006f06 	br	8134d8 <alt_printf+0x1f0>
    {
        /* If not a format escape character, just print  */
        /* character.  Otherwise, process format string. */
        if (c != '%')
  81331c:	e0bff807 	ldb	r2,-32(fp)
  813320:	10800960 	cmpeqi	r2,r2,37
  813324:	1000041e 	bne	r2,zero,813338 <alt_printf+0x50>
        {
            alt_putchar(c);
  813328:	e0bff807 	ldb	r2,-32(fp)
  81332c:	1009883a 	mov	r4,r2
  813330:	08135140 	call	813514 <alt_putchar>
  813334:	00006806 	br	8134d8 <alt_printf+0x1f0>
        }
        else
        {
            /* Get format character.  If none     */
            /* available, processing is complete. */
            if ((c = *w++) != 0)
  813338:	e0bff717 	ldw	r2,-36(fp)
  81333c:	10c00044 	addi	r3,r2,1
  813340:	e0fff715 	stw	r3,-36(fp)
  813344:	10800003 	ldbu	r2,0(r2)
  813348:	e0bff805 	stb	r2,-32(fp)
  81334c:	e0bff807 	ldb	r2,-32(fp)
  813350:	10006926 	beq	r2,zero,8134f8 <alt_printf+0x210>
            {
                if (c == '%')
  813354:	e0bff807 	ldb	r2,-32(fp)
  813358:	10800958 	cmpnei	r2,r2,37
  81335c:	1000041e 	bne	r2,zero,813370 <alt_printf+0x88>
                {
                    /* Process "%" escape sequence. */
                    alt_putchar(c);
  813360:	e0bff807 	ldb	r2,-32(fp)
  813364:	1009883a 	mov	r4,r2
  813368:	08135140 	call	813514 <alt_putchar>
  81336c:	00005a06 	br	8134d8 <alt_printf+0x1f0>
                } 
                else if (c == 'c')
  813370:	e0bff807 	ldb	r2,-32(fp)
  813374:	108018d8 	cmpnei	r2,r2,99
  813378:	1000081e 	bne	r2,zero,81339c <alt_printf+0xb4>
                {
                    int v = va_arg(args, int);
  81337c:	e0bffe17 	ldw	r2,-8(fp)
  813380:	10c00104 	addi	r3,r2,4
  813384:	e0fffe15 	stw	r3,-8(fp)
  813388:	10800017 	ldw	r2,0(r2)
  81338c:	e0bffd15 	stw	r2,-12(fp)
                    alt_putchar(v);
  813390:	e13ffd17 	ldw	r4,-12(fp)
  813394:	08135140 	call	813514 <alt_putchar>
  813398:	00004f06 	br	8134d8 <alt_printf+0x1f0>
                }
                else if (c == 'x')
  81339c:	e0bff807 	ldb	r2,-32(fp)
  8133a0:	10801e18 	cmpnei	r2,r2,120
  8133a4:	1000341e 	bne	r2,zero,813478 <alt_printf+0x190>
                {
                    /* Process hexadecimal number format. */
                    unsigned long v = va_arg(args, unsigned long);
  8133a8:	e0bffe17 	ldw	r2,-8(fp)
  8133ac:	10c00104 	addi	r3,r2,4
  8133b0:	e0fffe15 	stw	r3,-8(fp)
  8133b4:	10800017 	ldw	r2,0(r2)
  8133b8:	e0bffb15 	stw	r2,-20(fp)
                    unsigned long digit;
                    int digit_shift;

                    /* If the number value is zero, just print and continue. */
                    if (v == 0)
  8133bc:	e0bffb17 	ldw	r2,-20(fp)
  8133c0:	1000031e 	bne	r2,zero,8133d0 <alt_printf+0xe8>
                    {
                        alt_putchar('0');
  8133c4:	01000c04 	movi	r4,48
  8133c8:	08135140 	call	813514 <alt_putchar>
                        continue;
  8133cc:	00004206 	br	8134d8 <alt_printf+0x1f0>
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
  8133d0:	00800704 	movi	r2,28
  8133d4:	e0bff915 	stw	r2,-28(fp)
                    while (!(v & (0xF << digit_shift)))
  8133d8:	00000306 	br	8133e8 <alt_printf+0x100>
                        digit_shift -= 4;
  8133dc:	e0bff917 	ldw	r2,-28(fp)
  8133e0:	10bfff04 	addi	r2,r2,-4
  8133e4:	e0bff915 	stw	r2,-28(fp)
                        continue;
                    }

                    /* Find first non-zero digit. */
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
  8133e8:	00c003c4 	movi	r3,15
  8133ec:	e0bff917 	ldw	r2,-28(fp)
  8133f0:	1884983a 	sll	r2,r3,r2
  8133f4:	1007883a 	mov	r3,r2
  8133f8:	e0bffb17 	ldw	r2,-20(fp)
  8133fc:	1884703a 	and	r2,r3,r2
  813400:	103ff626 	beq	r2,zero,8133dc <__alt_mem_descriptor_memory+0xff7933dc>
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  813404:	00001906 	br	81346c <alt_printf+0x184>
                    {
                        digit = (v & (0xF << digit_shift)) >> digit_shift;
  813408:	00c003c4 	movi	r3,15
  81340c:	e0bff917 	ldw	r2,-28(fp)
  813410:	1884983a 	sll	r2,r3,r2
  813414:	1007883a 	mov	r3,r2
  813418:	e0bffb17 	ldw	r2,-20(fp)
  81341c:	1886703a 	and	r3,r3,r2
  813420:	e0bff917 	ldw	r2,-28(fp)
  813424:	1884d83a 	srl	r2,r3,r2
  813428:	e0bffc15 	stw	r2,-16(fp)
                        if (digit <= 9)
  81342c:	e0bffc17 	ldw	r2,-16(fp)
  813430:	108002a8 	cmpgeui	r2,r2,10
  813434:	1000041e 	bne	r2,zero,813448 <alt_printf+0x160>
                            c = '0' + digit;
  813438:	e0bffc17 	ldw	r2,-16(fp)
  81343c:	10800c04 	addi	r2,r2,48
  813440:	e0bff805 	stb	r2,-32(fp)
  813444:	00000306 	br	813454 <alt_printf+0x16c>
                        else
                            c = 'a' + digit - 10;
  813448:	e0bffc17 	ldw	r2,-16(fp)
  81344c:	108015c4 	addi	r2,r2,87
  813450:	e0bff805 	stb	r2,-32(fp)
                        alt_putchar(c);
  813454:	e0bff807 	ldb	r2,-32(fp)
  813458:	1009883a 	mov	r4,r2
  81345c:	08135140 	call	813514 <alt_putchar>
                    digit_shift = 28;
                    while (!(v & (0xF << digit_shift)))
                        digit_shift -= 4;

                    /* Print digits. */
                    for (; digit_shift >= 0; digit_shift -= 4)
  813460:	e0bff917 	ldw	r2,-28(fp)
  813464:	10bfff04 	addi	r2,r2,-4
  813468:	e0bff915 	stw	r2,-28(fp)
  81346c:	e0bff917 	ldw	r2,-28(fp)
  813470:	103fe50e 	bge	r2,zero,813408 <__alt_mem_descriptor_memory+0xff793408>
  813474:	00001806 	br	8134d8 <alt_printf+0x1f0>
                        else
                            c = 'a' + digit - 10;
                        alt_putchar(c);
                    }
                }
                else if (c == 's')
  813478:	e0bff807 	ldb	r2,-32(fp)
  81347c:	10801cd8 	cmpnei	r2,r2,115
  813480:	1000151e 	bne	r2,zero,8134d8 <alt_printf+0x1f0>
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);
  813484:	e0bffe17 	ldw	r2,-8(fp)
  813488:	10c00104 	addi	r3,r2,4
  81348c:	e0fffe15 	stw	r3,-8(fp)
  813490:	10800017 	ldw	r2,0(r2)
  813494:	e0bffa15 	stw	r2,-24(fp)

                    while(*s)
  813498:	00000906 	br	8134c0 <alt_printf+0x1d8>
                      alt_putchar(*s++);
  81349c:	e0bffa17 	ldw	r2,-24(fp)
  8134a0:	10c00044 	addi	r3,r2,1
  8134a4:	e0fffa15 	stw	r3,-24(fp)
  8134a8:	10800003 	ldbu	r2,0(r2)
  8134ac:	10803fcc 	andi	r2,r2,255
  8134b0:	1080201c 	xori	r2,r2,128
  8134b4:	10bfe004 	addi	r2,r2,-128
  8134b8:	1009883a 	mov	r4,r2
  8134bc:	08135140 	call	813514 <alt_putchar>
                else if (c == 's')
                {
                    /* Process string format. */
                    char *s = va_arg(args, char *);

                    while(*s)
  8134c0:	e0bffa17 	ldw	r2,-24(fp)
  8134c4:	10800003 	ldbu	r2,0(r2)
  8134c8:	10803fcc 	andi	r2,r2,255
  8134cc:	1080201c 	xori	r2,r2,128
  8134d0:	10bfe004 	addi	r2,r2,-128
  8134d4:	103ff11e 	bne	r2,zero,81349c <__alt_mem_descriptor_memory+0xff79349c>
    const char *w;
    char c;

    /* Process format string. */
    w = fmt;
    while ((c = *w++) != 0)
  8134d8:	e0bff717 	ldw	r2,-36(fp)
  8134dc:	10c00044 	addi	r3,r2,1
  8134e0:	e0fff715 	stw	r3,-36(fp)
  8134e4:	10800003 	ldbu	r2,0(r2)
  8134e8:	e0bff805 	stb	r2,-32(fp)
  8134ec:	e0bff807 	ldb	r2,-32(fp)
  8134f0:	103f8a1e 	bne	r2,zero,81331c <__alt_mem_descriptor_memory+0xff79331c>
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8134f4:	00000106 	br	8134fc <alt_printf+0x214>
                      alt_putchar(*s++);
                }
            }
            else
            {
                break;
  8134f8:	0001883a 	nop
        }
    }
#ifdef ALT_SEMIHOSTING
    alt_putbufflush();
#endif
}
  8134fc:	0001883a 	nop
  813500:	e037883a 	mov	sp,fp
  813504:	dfc00117 	ldw	ra,4(sp)
  813508:	df000017 	ldw	fp,0(sp)
  81350c:	dec00504 	addi	sp,sp,20
  813510:	f800283a 	ret

00813514 <alt_putchar>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided putchar() routine.
 */
int 
alt_putchar(int c)
{
  813514:	defffd04 	addi	sp,sp,-12
  813518:	dfc00215 	stw	ra,8(sp)
  81351c:	df000115 	stw	fp,4(sp)
  813520:	df000104 	addi	fp,sp,4
  813524:	e13fff15 	stw	r4,-4(fp)
    if (ALT_DRIVER_WRITE(ALT_STDOUT_DEV, &c1, 1, 0) == -1) {
        return -1;
    }
    return c;
#else
    return putchar(c);
  813528:	d0a01017 	ldw	r2,-32704(gp)
  81352c:	10800217 	ldw	r2,8(r2)
  813530:	100b883a 	mov	r5,r2
  813534:	e13fff17 	ldw	r4,-4(fp)
  813538:	0813ac80 	call	813ac8 <putc>
#endif
#endif
}
  81353c:	e037883a 	mov	sp,fp
  813540:	dfc00117 	ldw	ra,4(sp)
  813544:	df000017 	ldw	fp,0(sp)
  813548:	dec00204 	addi	sp,sp,8
  81354c:	f800283a 	ret

00813550 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
  813550:	defffa04 	addi	sp,sp,-24
  813554:	df000515 	stw	fp,20(sp)
  813558:	df000504 	addi	fp,sp,20
  81355c:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
  813560:	0005303a 	rdctl	r2,status
  813564:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
  813568:	e0fffc17 	ldw	r3,-16(fp)
  81356c:	00bfff84 	movi	r2,-2
  813570:	1884703a 	and	r2,r3,r2
  813574:	1001703a 	wrctl	status,r2
  
  return context;
  813578:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
  81357c:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
  813580:	e0bfff17 	ldw	r2,-4(fp)
  813584:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
  813588:	e0bffd17 	ldw	r2,-12(fp)
  81358c:	10800017 	ldw	r2,0(r2)
  813590:	e0fffd17 	ldw	r3,-12(fp)
  813594:	18c00117 	ldw	r3,4(r3)
  813598:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
  81359c:	e0bffd17 	ldw	r2,-12(fp)
  8135a0:	10800117 	ldw	r2,4(r2)
  8135a4:	e0fffd17 	ldw	r3,-12(fp)
  8135a8:	18c00017 	ldw	r3,0(r3)
  8135ac:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
  8135b0:	e0bffd17 	ldw	r2,-12(fp)
  8135b4:	e0fffd17 	ldw	r3,-12(fp)
  8135b8:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
  8135bc:	e0bffd17 	ldw	r2,-12(fp)
  8135c0:	e0fffd17 	ldw	r3,-12(fp)
  8135c4:	10c00015 	stw	r3,0(r2)
  8135c8:	e0bffb17 	ldw	r2,-20(fp)
  8135cc:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
  8135d0:	e0bffe17 	ldw	r2,-8(fp)
  8135d4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
  8135d8:	0001883a 	nop
  8135dc:	e037883a 	mov	sp,fp
  8135e0:	df000017 	ldw	fp,0(sp)
  8135e4:	dec00104 	addi	sp,sp,4
  8135e8:	f800283a 	ret

008135ec <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
  8135ec:	defffb04 	addi	sp,sp,-20
  8135f0:	dfc00415 	stw	ra,16(sp)
  8135f4:	df000315 	stw	fp,12(sp)
  8135f8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
  8135fc:	d0a02317 	ldw	r2,-32628(gp)
  813600:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
  813604:	d0a03a17 	ldw	r2,-32536(gp)
  813608:	10800044 	addi	r2,r2,1
  81360c:	d0a03a15 	stw	r2,-32536(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  813610:	00002e06 	br	8136cc <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
  813614:	e0bffd17 	ldw	r2,-12(fp)
  813618:	10800017 	ldw	r2,0(r2)
  81361c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
  813620:	e0bffd17 	ldw	r2,-12(fp)
  813624:	10800403 	ldbu	r2,16(r2)
  813628:	10803fcc 	andi	r2,r2,255
  81362c:	10000426 	beq	r2,zero,813640 <alt_tick+0x54>
  813630:	d0a03a17 	ldw	r2,-32536(gp)
  813634:	1000021e 	bne	r2,zero,813640 <alt_tick+0x54>
    {
      alarm->rollover = 0;
  813638:	e0bffd17 	ldw	r2,-12(fp)
  81363c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
  813640:	e0bffd17 	ldw	r2,-12(fp)
  813644:	10800217 	ldw	r2,8(r2)
  813648:	d0e03a17 	ldw	r3,-32536(gp)
  81364c:	18801d36 	bltu	r3,r2,8136c4 <alt_tick+0xd8>
  813650:	e0bffd17 	ldw	r2,-12(fp)
  813654:	10800403 	ldbu	r2,16(r2)
  813658:	10803fcc 	andi	r2,r2,255
  81365c:	1000191e 	bne	r2,zero,8136c4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
  813660:	e0bffd17 	ldw	r2,-12(fp)
  813664:	10800317 	ldw	r2,12(r2)
  813668:	e0fffd17 	ldw	r3,-12(fp)
  81366c:	18c00517 	ldw	r3,20(r3)
  813670:	1809883a 	mov	r4,r3
  813674:	103ee83a 	callr	r2
  813678:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
  81367c:	e0bfff17 	ldw	r2,-4(fp)
  813680:	1000031e 	bne	r2,zero,813690 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
  813684:	e13ffd17 	ldw	r4,-12(fp)
  813688:	08135500 	call	813550 <alt_alarm_stop>
  81368c:	00000d06 	br	8136c4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
  813690:	e0bffd17 	ldw	r2,-12(fp)
  813694:	10c00217 	ldw	r3,8(r2)
  813698:	e0bfff17 	ldw	r2,-4(fp)
  81369c:	1887883a 	add	r3,r3,r2
  8136a0:	e0bffd17 	ldw	r2,-12(fp)
  8136a4:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
  8136a8:	e0bffd17 	ldw	r2,-12(fp)
  8136ac:	10c00217 	ldw	r3,8(r2)
  8136b0:	d0a03a17 	ldw	r2,-32536(gp)
  8136b4:	1880032e 	bgeu	r3,r2,8136c4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
  8136b8:	e0bffd17 	ldw	r2,-12(fp)
  8136bc:	00c00044 	movi	r3,1
  8136c0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
  8136c4:	e0bffe17 	ldw	r2,-8(fp)
  8136c8:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
  8136cc:	e0fffd17 	ldw	r3,-12(fp)
  8136d0:	d0a02304 	addi	r2,gp,-32628
  8136d4:	18bfcf1e 	bne	r3,r2,813614 <__alt_mem_descriptor_memory+0xff793614>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
  8136d8:	0001883a 	nop
}
  8136dc:	0001883a 	nop
  8136e0:	e037883a 	mov	sp,fp
  8136e4:	dfc00117 	ldw	ra,4(sp)
  8136e8:	df000017 	ldw	fp,0(sp)
  8136ec:	dec00204 	addi	sp,sp,8
  8136f0:	f800283a 	ret

008136f4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
  8136f4:	deffff04 	addi	sp,sp,-4
  8136f8:	df000015 	stw	fp,0(sp)
  8136fc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
  813700:	000170fa 	wrctl	ienable,zero
}
  813704:	0001883a 	nop
  813708:	e037883a 	mov	sp,fp
  81370c:	df000017 	ldw	fp,0(sp)
  813710:	dec00104 	addi	sp,sp,4
  813714:	f800283a 	ret

00813718 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
  813718:	defffb04 	addi	sp,sp,-20
  81371c:	dfc00415 	stw	ra,16(sp)
  813720:	df000315 	stw	fp,12(sp)
  813724:	df000304 	addi	fp,sp,12
  813728:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
  81372c:	d0a01517 	ldw	r2,-32684(gp)
  813730:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  813734:	00003106 	br	8137fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
  813738:	e0bffd17 	ldw	r2,-12(fp)
  81373c:	10800217 	ldw	r2,8(r2)
  813740:	1009883a 	mov	r4,r2
  813744:	0807be00 	call	807be0 <strlen>
  813748:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
  81374c:	e0bffd17 	ldw	r2,-12(fp)
  813750:	10c00217 	ldw	r3,8(r2)
  813754:	e0bffe17 	ldw	r2,-8(fp)
  813758:	10bfffc4 	addi	r2,r2,-1
  81375c:	1885883a 	add	r2,r3,r2
  813760:	10800003 	ldbu	r2,0(r2)
  813764:	10803fcc 	andi	r2,r2,255
  813768:	1080201c 	xori	r2,r2,128
  81376c:	10bfe004 	addi	r2,r2,-128
  813770:	10800bd8 	cmpnei	r2,r2,47
  813774:	1000031e 	bne	r2,zero,813784 <alt_find_file+0x6c>
    {
      len -= 1;
  813778:	e0bffe17 	ldw	r2,-8(fp)
  81377c:	10bfffc4 	addi	r2,r2,-1
  813780:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  813784:	e0bffe17 	ldw	r2,-8(fp)
  813788:	e0ffff17 	ldw	r3,-4(fp)
  81378c:	1885883a 	add	r2,r3,r2
  813790:	10800003 	ldbu	r2,0(r2)
  813794:	10803fcc 	andi	r2,r2,255
  813798:	1080201c 	xori	r2,r2,128
  81379c:	10bfe004 	addi	r2,r2,-128
  8137a0:	10800be0 	cmpeqi	r2,r2,47
  8137a4:	1000081e 	bne	r2,zero,8137c8 <alt_find_file+0xb0>
  8137a8:	e0bffe17 	ldw	r2,-8(fp)
  8137ac:	e0ffff17 	ldw	r3,-4(fp)
  8137b0:	1885883a 	add	r2,r3,r2
  8137b4:	10800003 	ldbu	r2,0(r2)
  8137b8:	10803fcc 	andi	r2,r2,255
  8137bc:	1080201c 	xori	r2,r2,128
  8137c0:	10bfe004 	addi	r2,r2,-128
  8137c4:	10000a1e 	bne	r2,zero,8137f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
  8137c8:	e0bffd17 	ldw	r2,-12(fp)
  8137cc:	10800217 	ldw	r2,8(r2)
  8137d0:	e0fffe17 	ldw	r3,-8(fp)
  8137d4:	180d883a 	mov	r6,r3
  8137d8:	e17fff17 	ldw	r5,-4(fp)
  8137dc:	1009883a 	mov	r4,r2
  8137e0:	08139ac0 	call	8139ac <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
  8137e4:	1000021e 	bne	r2,zero,8137f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
  8137e8:	e0bffd17 	ldw	r2,-12(fp)
  8137ec:	00000706 	br	81380c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
  8137f0:	e0bffd17 	ldw	r2,-12(fp)
  8137f4:	10800017 	ldw	r2,0(r2)
  8137f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
  8137fc:	e0fffd17 	ldw	r3,-12(fp)
  813800:	d0a01504 	addi	r2,gp,-32684
  813804:	18bfcc1e 	bne	r3,r2,813738 <__alt_mem_descriptor_memory+0xff793738>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
  813808:	0005883a 	mov	r2,zero
}
  81380c:	e037883a 	mov	sp,fp
  813810:	dfc00117 	ldw	ra,4(sp)
  813814:	df000017 	ldw	fp,0(sp)
  813818:	dec00204 	addi	sp,sp,8
  81381c:	f800283a 	ret

00813820 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
  813820:	defffc04 	addi	sp,sp,-16
  813824:	df000315 	stw	fp,12(sp)
  813828:	df000304 	addi	fp,sp,12
  81382c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
  813830:	00bffa04 	movi	r2,-24
  813834:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813838:	e03ffd15 	stw	zero,-12(fp)
  81383c:	00001906 	br	8138a4 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
  813840:	00802074 	movhi	r2,129
  813844:	10937e04 	addi	r2,r2,19960
  813848:	e0fffd17 	ldw	r3,-12(fp)
  81384c:	18c00324 	muli	r3,r3,12
  813850:	10c5883a 	add	r2,r2,r3
  813854:	10800017 	ldw	r2,0(r2)
  813858:	10000f1e 	bne	r2,zero,813898 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
  81385c:	00802074 	movhi	r2,129
  813860:	10937e04 	addi	r2,r2,19960
  813864:	e0fffd17 	ldw	r3,-12(fp)
  813868:	18c00324 	muli	r3,r3,12
  81386c:	10c5883a 	add	r2,r2,r3
  813870:	e0ffff17 	ldw	r3,-4(fp)
  813874:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
  813878:	d0e01917 	ldw	r3,-32668(gp)
  81387c:	e0bffd17 	ldw	r2,-12(fp)
  813880:	1880020e 	bge	r3,r2,81388c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
  813884:	e0bffd17 	ldw	r2,-12(fp)
  813888:	d0a01915 	stw	r2,-32668(gp)
      }
      rc = i;
  81388c:	e0bffd17 	ldw	r2,-12(fp)
  813890:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
  813894:	00000606 	br	8138b0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
  813898:	e0bffd17 	ldw	r2,-12(fp)
  81389c:	10800044 	addi	r2,r2,1
  8138a0:	e0bffd15 	stw	r2,-12(fp)
  8138a4:	e0bffd17 	ldw	r2,-12(fp)
  8138a8:	10800810 	cmplti	r2,r2,32
  8138ac:	103fe41e 	bne	r2,zero,813840 <__alt_mem_descriptor_memory+0xff793840>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
  8138b0:	e0bffe17 	ldw	r2,-8(fp)
}
  8138b4:	e037883a 	mov	sp,fp
  8138b8:	df000017 	ldw	fp,0(sp)
  8138bc:	dec00104 	addi	sp,sp,4
  8138c0:	f800283a 	ret

008138c4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  8138c4:	defffe04 	addi	sp,sp,-8
  8138c8:	df000115 	stw	fp,4(sp)
  8138cc:	df000104 	addi	fp,sp,4
  8138d0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
  8138d4:	e0bfff17 	ldw	r2,-4(fp)
  8138d8:	10bffe84 	addi	r2,r2,-6
  8138dc:	10c00428 	cmpgeui	r3,r2,16
  8138e0:	18001a1e 	bne	r3,zero,81394c <alt_exception_cause_generated_bad_addr+0x88>
  8138e4:	100690ba 	slli	r3,r2,2
  8138e8:	00802074 	movhi	r2,129
  8138ec:	108e3f04 	addi	r2,r2,14588
  8138f0:	1885883a 	add	r2,r3,r2
  8138f4:	10800017 	ldw	r2,0(r2)
  8138f8:	1000683a 	jmp	r2
  8138fc:	0081393c 	xorhi	r2,zero,1252
  813900:	0081393c 	xorhi	r2,zero,1252
  813904:	0081394c 	andi	r2,zero,1253
  813908:	0081394c 	andi	r2,zero,1253
  81390c:	0081394c 	andi	r2,zero,1253
  813910:	0081393c 	xorhi	r2,zero,1252
  813914:	00813944 	movi	r2,1253
  813918:	0081394c 	andi	r2,zero,1253
  81391c:	0081393c 	xorhi	r2,zero,1252
  813920:	0081393c 	xorhi	r2,zero,1252
  813924:	0081394c 	andi	r2,zero,1253
  813928:	0081393c 	xorhi	r2,zero,1252
  81392c:	00813944 	movi	r2,1253
  813930:	0081394c 	andi	r2,zero,1253
  813934:	0081394c 	andi	r2,zero,1253
  813938:	0081393c 	xorhi	r2,zero,1252
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
  81393c:	00800044 	movi	r2,1
  813940:	00000306 	br	813950 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
  813944:	0005883a 	mov	r2,zero
  813948:	00000106 	br	813950 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
  81394c:	0005883a 	mov	r2,zero
  }
}
  813950:	e037883a 	mov	sp,fp
  813954:	df000017 	ldw	fp,0(sp)
  813958:	dec00104 	addi	sp,sp,4
  81395c:	f800283a 	ret

00813960 <atexit>:
  813960:	200b883a 	mov	r5,r4
  813964:	000f883a 	mov	r7,zero
  813968:	000d883a 	mov	r6,zero
  81396c:	0009883a 	mov	r4,zero
  813970:	0813b901 	jmpi	813b90 <__register_exitproc>

00813974 <exit>:
  813974:	defffe04 	addi	sp,sp,-8
  813978:	000b883a 	mov	r5,zero
  81397c:	dc000015 	stw	r16,0(sp)
  813980:	dfc00115 	stw	ra,4(sp)
  813984:	2021883a 	mov	r16,r4
  813988:	0813ca80 	call	813ca8 <__call_exitprocs>
  81398c:	00802074 	movhi	r2,129
  813990:	1098ab04 	addi	r2,r2,25260
  813994:	11000017 	ldw	r4,0(r2)
  813998:	20800f17 	ldw	r2,60(r4)
  81399c:	10000126 	beq	r2,zero,8139a4 <exit+0x30>
  8139a0:	103ee83a 	callr	r2
  8139a4:	8009883a 	mov	r4,r16
  8139a8:	0813e280 	call	813e28 <_exit>

008139ac <memcmp>:
  8139ac:	01c000c4 	movi	r7,3
  8139b0:	3980192e 	bgeu	r7,r6,813a18 <memcmp+0x6c>
  8139b4:	2144b03a 	or	r2,r4,r5
  8139b8:	11c4703a 	and	r2,r2,r7
  8139bc:	10000f26 	beq	r2,zero,8139fc <memcmp+0x50>
  8139c0:	20800003 	ldbu	r2,0(r4)
  8139c4:	28c00003 	ldbu	r3,0(r5)
  8139c8:	10c0151e 	bne	r2,r3,813a20 <memcmp+0x74>
  8139cc:	31bfff84 	addi	r6,r6,-2
  8139d0:	01ffffc4 	movi	r7,-1
  8139d4:	00000406 	br	8139e8 <memcmp+0x3c>
  8139d8:	20800003 	ldbu	r2,0(r4)
  8139dc:	28c00003 	ldbu	r3,0(r5)
  8139e0:	31bfffc4 	addi	r6,r6,-1
  8139e4:	10c00e1e 	bne	r2,r3,813a20 <memcmp+0x74>
  8139e8:	21000044 	addi	r4,r4,1
  8139ec:	29400044 	addi	r5,r5,1
  8139f0:	31fff91e 	bne	r6,r7,8139d8 <__alt_mem_descriptor_memory+0xff7939d8>
  8139f4:	0005883a 	mov	r2,zero
  8139f8:	f800283a 	ret
  8139fc:	20c00017 	ldw	r3,0(r4)
  813a00:	28800017 	ldw	r2,0(r5)
  813a04:	18bfee1e 	bne	r3,r2,8139c0 <__alt_mem_descriptor_memory+0xff7939c0>
  813a08:	31bfff04 	addi	r6,r6,-4
  813a0c:	21000104 	addi	r4,r4,4
  813a10:	29400104 	addi	r5,r5,4
  813a14:	39bff936 	bltu	r7,r6,8139fc <__alt_mem_descriptor_memory+0xff7939fc>
  813a18:	303fe91e 	bne	r6,zero,8139c0 <__alt_mem_descriptor_memory+0xff7939c0>
  813a1c:	003ff506 	br	8139f4 <__alt_mem_descriptor_memory+0xff7939f4>
  813a20:	10c5c83a 	sub	r2,r2,r3
  813a24:	f800283a 	ret

00813a28 <_putc_r>:
  813a28:	defffc04 	addi	sp,sp,-16
  813a2c:	dc000215 	stw	r16,8(sp)
  813a30:	dfc00315 	stw	ra,12(sp)
  813a34:	2021883a 	mov	r16,r4
  813a38:	20000226 	beq	r4,zero,813a44 <_putc_r+0x1c>
  813a3c:	20800e17 	ldw	r2,56(r4)
  813a40:	10001b26 	beq	r2,zero,813ab0 <_putc_r+0x88>
  813a44:	30800217 	ldw	r2,8(r6)
  813a48:	10bfffc4 	addi	r2,r2,-1
  813a4c:	30800215 	stw	r2,8(r6)
  813a50:	10000a16 	blt	r2,zero,813a7c <_putc_r+0x54>
  813a54:	30800017 	ldw	r2,0(r6)
  813a58:	11400005 	stb	r5,0(r2)
  813a5c:	30800017 	ldw	r2,0(r6)
  813a60:	10c00044 	addi	r3,r2,1
  813a64:	30c00015 	stw	r3,0(r6)
  813a68:	10800003 	ldbu	r2,0(r2)
  813a6c:	dfc00317 	ldw	ra,12(sp)
  813a70:	dc000217 	ldw	r16,8(sp)
  813a74:	dec00404 	addi	sp,sp,16
  813a78:	f800283a 	ret
  813a7c:	30c00617 	ldw	r3,24(r6)
  813a80:	10c00616 	blt	r2,r3,813a9c <_putc_r+0x74>
  813a84:	30800017 	ldw	r2,0(r6)
  813a88:	00c00284 	movi	r3,10
  813a8c:	11400005 	stb	r5,0(r2)
  813a90:	30800017 	ldw	r2,0(r6)
  813a94:	11400003 	ldbu	r5,0(r2)
  813a98:	28fff11e 	bne	r5,r3,813a60 <__alt_mem_descriptor_memory+0xff793a60>
  813a9c:	8009883a 	mov	r4,r16
  813aa0:	dfc00317 	ldw	ra,12(sp)
  813aa4:	dc000217 	ldw	r16,8(sp)
  813aa8:	dec00404 	addi	sp,sp,16
  813aac:	080a4301 	jmpi	80a430 <__swbuf_r>
  813ab0:	d9400015 	stw	r5,0(sp)
  813ab4:	d9800115 	stw	r6,4(sp)
  813ab8:	08056280 	call	805628 <__sinit>
  813abc:	d9800117 	ldw	r6,4(sp)
  813ac0:	d9400017 	ldw	r5,0(sp)
  813ac4:	003fdf06 	br	813a44 <__alt_mem_descriptor_memory+0xff793a44>

00813ac8 <putc>:
  813ac8:	00802074 	movhi	r2,129
  813acc:	defffc04 	addi	sp,sp,-16
  813ad0:	1098ac04 	addi	r2,r2,25264
  813ad4:	dc000115 	stw	r16,4(sp)
  813ad8:	14000017 	ldw	r16,0(r2)
  813adc:	dc400215 	stw	r17,8(sp)
  813ae0:	dfc00315 	stw	ra,12(sp)
  813ae4:	2023883a 	mov	r17,r4
  813ae8:	80000226 	beq	r16,zero,813af4 <putc+0x2c>
  813aec:	80800e17 	ldw	r2,56(r16)
  813af0:	10001a26 	beq	r2,zero,813b5c <putc+0x94>
  813af4:	28800217 	ldw	r2,8(r5)
  813af8:	10bfffc4 	addi	r2,r2,-1
  813afc:	28800215 	stw	r2,8(r5)
  813b00:	10000b16 	blt	r2,zero,813b30 <putc+0x68>
  813b04:	28800017 	ldw	r2,0(r5)
  813b08:	14400005 	stb	r17,0(r2)
  813b0c:	28800017 	ldw	r2,0(r5)
  813b10:	10c00044 	addi	r3,r2,1
  813b14:	28c00015 	stw	r3,0(r5)
  813b18:	10800003 	ldbu	r2,0(r2)
  813b1c:	dfc00317 	ldw	ra,12(sp)
  813b20:	dc400217 	ldw	r17,8(sp)
  813b24:	dc000117 	ldw	r16,4(sp)
  813b28:	dec00404 	addi	sp,sp,16
  813b2c:	f800283a 	ret
  813b30:	28c00617 	ldw	r3,24(r5)
  813b34:	10c00e16 	blt	r2,r3,813b70 <putc+0xa8>
  813b38:	28800017 	ldw	r2,0(r5)
  813b3c:	01000284 	movi	r4,10
  813b40:	14400005 	stb	r17,0(r2)
  813b44:	28800017 	ldw	r2,0(r5)
  813b48:	10c00003 	ldbu	r3,0(r2)
  813b4c:	193ff01e 	bne	r3,r4,813b10 <__alt_mem_descriptor_memory+0xff793b10>
  813b50:	280d883a 	mov	r6,r5
  813b54:	180b883a 	mov	r5,r3
  813b58:	00000706 	br	813b78 <putc+0xb0>
  813b5c:	8009883a 	mov	r4,r16
  813b60:	d9400015 	stw	r5,0(sp)
  813b64:	08056280 	call	805628 <__sinit>
  813b68:	d9400017 	ldw	r5,0(sp)
  813b6c:	003fe106 	br	813af4 <__alt_mem_descriptor_memory+0xff793af4>
  813b70:	280d883a 	mov	r6,r5
  813b74:	880b883a 	mov	r5,r17
  813b78:	8009883a 	mov	r4,r16
  813b7c:	dfc00317 	ldw	ra,12(sp)
  813b80:	dc400217 	ldw	r17,8(sp)
  813b84:	dc000117 	ldw	r16,4(sp)
  813b88:	dec00404 	addi	sp,sp,16
  813b8c:	080a4301 	jmpi	80a430 <__swbuf_r>

00813b90 <__register_exitproc>:
  813b90:	defffa04 	addi	sp,sp,-24
  813b94:	dc000315 	stw	r16,12(sp)
  813b98:	04002074 	movhi	r16,129
  813b9c:	8418ab04 	addi	r16,r16,25260
  813ba0:	80c00017 	ldw	r3,0(r16)
  813ba4:	dc400415 	stw	r17,16(sp)
  813ba8:	dfc00515 	stw	ra,20(sp)
  813bac:	18805217 	ldw	r2,328(r3)
  813bb0:	2023883a 	mov	r17,r4
  813bb4:	10003726 	beq	r2,zero,813c94 <__register_exitproc+0x104>
  813bb8:	10c00117 	ldw	r3,4(r2)
  813bbc:	010007c4 	movi	r4,31
  813bc0:	20c00e16 	blt	r4,r3,813bfc <__register_exitproc+0x6c>
  813bc4:	1a000044 	addi	r8,r3,1
  813bc8:	8800221e 	bne	r17,zero,813c54 <__register_exitproc+0xc4>
  813bcc:	18c00084 	addi	r3,r3,2
  813bd0:	18c7883a 	add	r3,r3,r3
  813bd4:	18c7883a 	add	r3,r3,r3
  813bd8:	12000115 	stw	r8,4(r2)
  813bdc:	10c7883a 	add	r3,r2,r3
  813be0:	19400015 	stw	r5,0(r3)
  813be4:	0005883a 	mov	r2,zero
  813be8:	dfc00517 	ldw	ra,20(sp)
  813bec:	dc400417 	ldw	r17,16(sp)
  813bf0:	dc000317 	ldw	r16,12(sp)
  813bf4:	dec00604 	addi	sp,sp,24
  813bf8:	f800283a 	ret
  813bfc:	00800034 	movhi	r2,0
  813c00:	10800004 	addi	r2,r2,0
  813c04:	10002626 	beq	r2,zero,813ca0 <__register_exitproc+0x110>
  813c08:	01006404 	movi	r4,400
  813c0c:	d9400015 	stw	r5,0(sp)
  813c10:	d9800115 	stw	r6,4(sp)
  813c14:	d9c00215 	stw	r7,8(sp)
  813c18:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
  813c1c:	d9400017 	ldw	r5,0(sp)
  813c20:	d9800117 	ldw	r6,4(sp)
  813c24:	d9c00217 	ldw	r7,8(sp)
  813c28:	10001d26 	beq	r2,zero,813ca0 <__register_exitproc+0x110>
  813c2c:	81000017 	ldw	r4,0(r16)
  813c30:	10000115 	stw	zero,4(r2)
  813c34:	02000044 	movi	r8,1
  813c38:	22405217 	ldw	r9,328(r4)
  813c3c:	0007883a 	mov	r3,zero
  813c40:	12400015 	stw	r9,0(r2)
  813c44:	20805215 	stw	r2,328(r4)
  813c48:	10006215 	stw	zero,392(r2)
  813c4c:	10006315 	stw	zero,396(r2)
  813c50:	883fde26 	beq	r17,zero,813bcc <__alt_mem_descriptor_memory+0xff793bcc>
  813c54:	18c9883a 	add	r4,r3,r3
  813c58:	2109883a 	add	r4,r4,r4
  813c5c:	1109883a 	add	r4,r2,r4
  813c60:	21802215 	stw	r6,136(r4)
  813c64:	01800044 	movi	r6,1
  813c68:	12406217 	ldw	r9,392(r2)
  813c6c:	30cc983a 	sll	r6,r6,r3
  813c70:	4992b03a 	or	r9,r9,r6
  813c74:	12406215 	stw	r9,392(r2)
  813c78:	21c04215 	stw	r7,264(r4)
  813c7c:	01000084 	movi	r4,2
  813c80:	893fd21e 	bne	r17,r4,813bcc <__alt_mem_descriptor_memory+0xff793bcc>
  813c84:	11006317 	ldw	r4,396(r2)
  813c88:	218cb03a 	or	r6,r4,r6
  813c8c:	11806315 	stw	r6,396(r2)
  813c90:	003fce06 	br	813bcc <__alt_mem_descriptor_memory+0xff793bcc>
  813c94:	18805304 	addi	r2,r3,332
  813c98:	18805215 	stw	r2,328(r3)
  813c9c:	003fc606 	br	813bb8 <__alt_mem_descriptor_memory+0xff793bb8>
  813ca0:	00bfffc4 	movi	r2,-1
  813ca4:	003fd006 	br	813be8 <__alt_mem_descriptor_memory+0xff793be8>

00813ca8 <__call_exitprocs>:
  813ca8:	defff504 	addi	sp,sp,-44
  813cac:	df000915 	stw	fp,36(sp)
  813cb0:	dd400615 	stw	r21,24(sp)
  813cb4:	dc800315 	stw	r18,12(sp)
  813cb8:	dfc00a15 	stw	ra,40(sp)
  813cbc:	ddc00815 	stw	r23,32(sp)
  813cc0:	dd800715 	stw	r22,28(sp)
  813cc4:	dd000515 	stw	r20,20(sp)
  813cc8:	dcc00415 	stw	r19,16(sp)
  813ccc:	dc400215 	stw	r17,8(sp)
  813cd0:	dc000115 	stw	r16,4(sp)
  813cd4:	d9000015 	stw	r4,0(sp)
  813cd8:	2839883a 	mov	fp,r5
  813cdc:	04800044 	movi	r18,1
  813ce0:	057fffc4 	movi	r21,-1
  813ce4:	00802074 	movhi	r2,129
  813ce8:	1098ab04 	addi	r2,r2,25260
  813cec:	12000017 	ldw	r8,0(r2)
  813cf0:	45005217 	ldw	r20,328(r8)
  813cf4:	44c05204 	addi	r19,r8,328
  813cf8:	a0001c26 	beq	r20,zero,813d6c <__call_exitprocs+0xc4>
  813cfc:	a0800117 	ldw	r2,4(r20)
  813d00:	15ffffc4 	addi	r23,r2,-1
  813d04:	b8000d16 	blt	r23,zero,813d3c <__call_exitprocs+0x94>
  813d08:	14000044 	addi	r16,r2,1
  813d0c:	8421883a 	add	r16,r16,r16
  813d10:	8421883a 	add	r16,r16,r16
  813d14:	84402004 	addi	r17,r16,128
  813d18:	a463883a 	add	r17,r20,r17
  813d1c:	a421883a 	add	r16,r20,r16
  813d20:	e0001e26 	beq	fp,zero,813d9c <__call_exitprocs+0xf4>
  813d24:	80804017 	ldw	r2,256(r16)
  813d28:	e0801c26 	beq	fp,r2,813d9c <__call_exitprocs+0xf4>
  813d2c:	bdffffc4 	addi	r23,r23,-1
  813d30:	843fff04 	addi	r16,r16,-4
  813d34:	8c7fff04 	addi	r17,r17,-4
  813d38:	bd7ff91e 	bne	r23,r21,813d20 <__alt_mem_descriptor_memory+0xff793d20>
  813d3c:	00800034 	movhi	r2,0
  813d40:	10800004 	addi	r2,r2,0
  813d44:	10000926 	beq	r2,zero,813d6c <__call_exitprocs+0xc4>
  813d48:	a0800117 	ldw	r2,4(r20)
  813d4c:	1000301e 	bne	r2,zero,813e10 <__call_exitprocs+0x168>
  813d50:	a0800017 	ldw	r2,0(r20)
  813d54:	10003226 	beq	r2,zero,813e20 <__call_exitprocs+0x178>
  813d58:	a009883a 	mov	r4,r20
  813d5c:	98800015 	stw	r2,0(r19)
  813d60:	00000000 	call	0 <__alt_mem_new_sdram_controller_0-0x800000>
  813d64:	9d000017 	ldw	r20,0(r19)
  813d68:	a03fe41e 	bne	r20,zero,813cfc <__alt_mem_descriptor_memory+0xff793cfc>
  813d6c:	dfc00a17 	ldw	ra,40(sp)
  813d70:	df000917 	ldw	fp,36(sp)
  813d74:	ddc00817 	ldw	r23,32(sp)
  813d78:	dd800717 	ldw	r22,28(sp)
  813d7c:	dd400617 	ldw	r21,24(sp)
  813d80:	dd000517 	ldw	r20,20(sp)
  813d84:	dcc00417 	ldw	r19,16(sp)
  813d88:	dc800317 	ldw	r18,12(sp)
  813d8c:	dc400217 	ldw	r17,8(sp)
  813d90:	dc000117 	ldw	r16,4(sp)
  813d94:	dec00b04 	addi	sp,sp,44
  813d98:	f800283a 	ret
  813d9c:	a0800117 	ldw	r2,4(r20)
  813da0:	80c00017 	ldw	r3,0(r16)
  813da4:	10bfffc4 	addi	r2,r2,-1
  813da8:	15c01426 	beq	r2,r23,813dfc <__call_exitprocs+0x154>
  813dac:	80000015 	stw	zero,0(r16)
  813db0:	183fde26 	beq	r3,zero,813d2c <__alt_mem_descriptor_memory+0xff793d2c>
  813db4:	95c8983a 	sll	r4,r18,r23
  813db8:	a0806217 	ldw	r2,392(r20)
  813dbc:	a5800117 	ldw	r22,4(r20)
  813dc0:	2084703a 	and	r2,r4,r2
  813dc4:	10000b26 	beq	r2,zero,813df4 <__call_exitprocs+0x14c>
  813dc8:	a0806317 	ldw	r2,396(r20)
  813dcc:	2088703a 	and	r4,r4,r2
  813dd0:	20000c1e 	bne	r4,zero,813e04 <__call_exitprocs+0x15c>
  813dd4:	89400017 	ldw	r5,0(r17)
  813dd8:	d9000017 	ldw	r4,0(sp)
  813ddc:	183ee83a 	callr	r3
  813de0:	a0800117 	ldw	r2,4(r20)
  813de4:	15bfbf1e 	bne	r2,r22,813ce4 <__alt_mem_descriptor_memory+0xff793ce4>
  813de8:	98800017 	ldw	r2,0(r19)
  813dec:	153fcf26 	beq	r2,r20,813d2c <__alt_mem_descriptor_memory+0xff793d2c>
  813df0:	003fbc06 	br	813ce4 <__alt_mem_descriptor_memory+0xff793ce4>
  813df4:	183ee83a 	callr	r3
  813df8:	003ff906 	br	813de0 <__alt_mem_descriptor_memory+0xff793de0>
  813dfc:	a5c00115 	stw	r23,4(r20)
  813e00:	003feb06 	br	813db0 <__alt_mem_descriptor_memory+0xff793db0>
  813e04:	89000017 	ldw	r4,0(r17)
  813e08:	183ee83a 	callr	r3
  813e0c:	003ff406 	br	813de0 <__alt_mem_descriptor_memory+0xff793de0>
  813e10:	a0800017 	ldw	r2,0(r20)
  813e14:	a027883a 	mov	r19,r20
  813e18:	1029883a 	mov	r20,r2
  813e1c:	003fb606 	br	813cf8 <__alt_mem_descriptor_memory+0xff793cf8>
  813e20:	0005883a 	mov	r2,zero
  813e24:	003ffb06 	br	813e14 <__alt_mem_descriptor_memory+0xff793e14>

00813e28 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
  813e28:	defffd04 	addi	sp,sp,-12
  813e2c:	df000215 	stw	fp,8(sp)
  813e30:	df000204 	addi	fp,sp,8
  813e34:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
  813e38:	0001883a 	nop
  813e3c:	e0bfff17 	ldw	r2,-4(fp)
  813e40:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
  813e44:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
  813e48:	10000226 	beq	r2,zero,813e54 <_exit+0x2c>
    ALT_SIM_FAIL();
  813e4c:	002af070 	cmpltui	zero,zero,43969
  813e50:	00000106 	br	813e58 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
  813e54:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
  813e58:	003fff06 	br	813e58 <__alt_mem_descriptor_memory+0xff793e58>
