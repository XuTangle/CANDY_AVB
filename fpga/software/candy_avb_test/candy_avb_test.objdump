
candy_avb_test.elf:     file format elf32-littlenios2
candy_avb_test.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x40800244

Program Header:
    LOAD off    0x00001020 vaddr 0x40800020 paddr 0x40800020 align 2**12
         filesz 0x00013ae8 memsz 0x00015070 flags rwx
    LOAD off    0x00015000 vaddr 0x41040000 paddr 0x41040000 align 2**12
         filesz 0x00000000 memsz 0x00000000 flags r-x

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000000  41040000  41040000  00015000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  40800020  40800020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         000116a0  40800244  40800244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000003cc  408118e4  408118e4  000128e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001e58  40811cb0  40811cb0  00012cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00001588  40813b08  40813b08  00014b08  2**2
                  ALLOC, SMALL_DATA
  6 .new_sdram_controller_0 00000000  40815090  40815090  00015000  2**0
                  CONTENTS
  7 .onchip_flash_0_data 00000000  41040020  41040020  00015000  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015000  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f90  00000000  00000000  00015028  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00025df8  00000000  00000000  00015fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00009ad8  00000000  00000000  0003bdb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000c0a4  00000000  00000000  00045888  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002628  00000000  00000000  0005192c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    0000458a  00000000  00000000  00053f54  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00017ad5  00000000  00000000  000584de  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000050  00000000  00000000  0006ffb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 000018e8  00000000  00000000  00070008  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  0007578e  2**0
                  CONTENTS, READONLY
 19 .cpu          00000007  00000000  00000000  00075791  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00075798  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00075799  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  0007579a  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  0007579e  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000757a2  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000a  00000000  00000000  000757a6  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000a  00000000  00000000  000757b0  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000a  00000000  00000000  000757ba  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000013  00000000  00000000  000757c4  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 0000003a  00000000  00000000  000757d7  2**0
                  CONTENTS, READONLY
 30 .jdi          00006763  00000000  00000000  00075811  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0007e7c7  00000000  00000000  0007bf74  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
41040000 l    d  .entry	00000000 .entry
40800020 l    d  .exceptions	00000000 .exceptions
40800244 l    d  .text	00000000 .text
408118e4 l    d  .rodata	00000000 .rodata
40811cb0 l    d  .rwdata	00000000 .rwdata
40813b08 l    d  .bss	00000000 .bss
40815090 l    d  .new_sdram_controller_0	00000000 .new_sdram_controller_0
41040020 l    d  .onchip_flash_0_data	00000000 .onchip_flash_0_data
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../candy_avb_test_bsp//obj/HAL/src/crt0.o
40800288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 SigmaStudioFW.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
40811ad6 l     O .rodata	00000010 zeroes.4404
40803484 l     F .text	000000bc __sbprintf
40811ae6 l     O .rodata	00000010 blanks.4403
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
40803694 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
408051c4 l     F .text	00000008 __fp_unlock
408051d8 l     F .text	0000019c __sinit.part.1
40805374 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
40811e0c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
40812250 l     O .rwdata	00000020 lc_ctype_charset
40812230 l     O .rwdata	00000020 lc_message_charset
40812270 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
40811b18 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
40808648 l     F .text	000000fc __sprint_r.part.0
40811c4c l     O .rodata	00000010 blanks.4348
40811c3c l     O .rodata	00000010 zeroes.4349
40809bd4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 alt_close.c
4080d82c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
4080d938 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
4080d964 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
4080da50 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_lseek.c
4080db30 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
4080dd04 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
40813ae8 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
4080df80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
4080e0b4 l     F .text	00000034 alt_dev_reg
40812858 l     O .rwdata	00001060 jtaguart_0
408138b8 l     O .rwdata	000000c4 uart_0
4081397c l     O .rwdata	00000100 onchip_flash_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
4080e3d4 l     F .text	0000020c altera_avalon_jtag_uart_irq
4080e5e0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
4080ec18 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
4080eec8 l     F .text	0000009c altera_avalon_uart_irq
4080ef64 l     F .text	000000e4 altera_avalon_uart_rxirq
4080f048 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
4080f1e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
4080f3fc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
4080f5e4 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
40810820 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
40810d1c l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
40810e5c l     F .text	0000003c alt_get_errno
40810e98 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
40813b60 g     O .bss	00000004 alt_instruction_exception_handler
40807c8c g     F .text	00000074 _mprec_log10
40807d78 g     F .text	0000008c __any_on
4080a170 g     F .text	00000054 _isatty_r
40811b24 g     O .rodata	00000028 __mprec_tinytens
4080dc40 g     F .text	0000007c alt_main
40801104 g     F .text	000000c0 _puts_r
40814f90 g     O .bss	00000100 alt_irq
40813aa3 g     O .rwdata	00000005 R22_CRC_REGISTERS_IC_1_Default
4080a1c4 g     F .text	00000060 _lseek_r
40813b1c g     O .bss	00000004 itest
4080c3bc g     F .text	00000088 .hidden __eqdf2
40815090 g       *ABS*	00000000 __alt_heap_start
408010c8 g     F .text	0000003c printf
4080a3dc g     F .text	0000009c _wcrtomb_r
40808508 g     F .text	0000005c __sseek
40805514 g     F .text	00000010 __sinit
40800658 g     F .text	00000084 SIGMA_WRITE_REGISTER_BLOCK
4080a284 g     F .text	00000140 __swbuf_r
40805fdc g     F .text	0000007c _setlocale_r
4080537c g     F .text	00000068 __sfmoreglue
40811dcd g     O .rwdata	00000030 Param_Data_IC_1
4080dce0 g     F .text	00000024 __malloc_unlock
40813ab3 g     O .rwdata	00000001 R37_DSP_RUN_REGISTER_IC_1_Default
40813b15 g     O .bss	00000001 R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default
40806cac g     F .text	0000015c memmove
408054fc g     F .text	00000018 _cleanup
40806e08 g     F .text	000000a8 _Balloc
4080c444 g     F .text	000000dc .hidden __gtdf2
40811254 g     F .text	00000024 altera_nios2_gen2_irq_init
40813b64 g     O .bss	00001402 i2c_write_data
41040000 g     F .entry	00000000 __reset
4080a114 g     F .text	0000005c _fstat_r
40813b44 g     O .bss	00000004 errno
40808484 g     F .text	00000008 __seofread
40813b4c g     O .bss	00000004 alt_argv
4081ba7c g       *ABS*	00000000 _gp
4080df50 g     F .text	00000030 usleep
40810494 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
408007e4 g     F .text	000000e4 SIGMA_SAFELOAD_WRITE_DATA
40813b0d g     O .bss	00000001 R7_MICCTRLREGISTER_IC_1_Default
40813a7c g     O .rwdata	00000008 NON_MODULO_RAM_Data_IC_1
408126d8 g     O .rwdata	00000180 alt_fd_list
40813aa8 g     O .rwdata	00000002 R24_NON_MODULO_REGISTERS_IC_1_Default
40813a86 g     O .rwdata	00000006 R3_PLLCRLREGISTER_IC_1_Default
40811278 g     F .text	00000090 alt_find_dev
40806b64 g     F .text	00000148 memcpy
41040000 g       *ABS*	00000000 __alt_mem_onchip_flash_0_data
408051cc g     F .text	0000000c _cleanup_r
4080d6a8 g     F .text	000000dc .hidden __floatsidf
40810de0 g     F .text	0000007c alt_io_redirect
40813b20 g     O .bss	00000004 ftest
4080c520 g     F .text	000000f4 .hidden __ltdf2
408004b0 g     F .text	000001a8 i2c_multiple_write
408118e4 g       *ABS*	00000000 __DTOR_END__
408011c4 g     F .text	00000014 puts
408114b4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
40808368 g     F .text	00000074 __fpclassifyd
40807be8 g     F .text	000000a4 __ratio
40809bb8 g     F .text	0000001c __vfiprintf_internal
4080e7d8 g     F .text	0000021c altera_avalon_jtag_uart_read
40801098 g     F .text	00000030 _printf_r
4080b16c g     F .text	00000064 .hidden __udivsi3
4080da8c g     F .text	000000a4 isatty
40810404 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
40811b74 g     O .rodata	000000c8 __mprec_tens
40806058 g     F .text	0000000c __locale_charset
40813a9b g     O .rwdata	00000003 R12_DAC_CONTROL_REGISTERS_IC_1_Default
40813b40 g     O .bss	00000004 __malloc_top_pad
40813aec g     O .rwdata	00000008 altera_onchip_flash_list
40813ac0 g     O .rwdata	00000004 __mb_cur_max
40806088 g     F .text	0000000c _localeconv_r
40807214 g     F .text	0000003c __i2b
40805998 g     F .text	000004bc __sfvwrite_r
40813a8e g     O .rwdata	00000002 R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default
408083dc g     F .text	00000054 _sbrk_r
4080a224 g     F .text	00000060 _read_r
408107a8 g     F .text	00000078 alt_dcache_flush
4080f780 g     F .text	00000168 alt_onchip_flash_erase_block
40813ae0 g     O .rwdata	00000004 alt_max_fd
40809e08 g     F .text	000000f0 _fclose_r
40805194 g     F .text	00000030 fflush
40813b3c g     O .bss	00000004 __malloc_max_sbrked_mem
40800dfc g     F .text	00000110 .hidden __extendsfdf2
4080b228 g     F .text	000008ac .hidden __adddf3
4080042c g     F .text	00000084 i2c_write_byte_stop
40807990 g     F .text	0000010c __b2d
4080ab3c g     F .text	00000538 .hidden __umoddi3
4080db6c g     F .text	000000d4 lseek
40813ab8 g     O .rwdata	00000004 _global_impure_ptr
40807e04 g     F .text	00000564 _realloc_r
40815090 g       *ABS*	00000000 __bss_end
40811dfd g     O .rwdata	0000000e R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default
40810c2c g     F .text	000000f0 alt_iic_isr_register
4081114c g     F .text	00000108 alt_tick
40813a90 g     O .rwdata	00000008 R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default
4080a5c4 g     F .text	00000578 .hidden __udivdi3
4080a070 g     F .text	00000024 _fputwc_r
40811b4c g     O .rodata	00000028 __mprec_bigtens
40806ff8 g     F .text	00000104 __s2b
4080d784 g     F .text	000000a8 .hidden __floatunsidf
40800758 g     F .text	0000008c SIGMA_SAFELOAD_WRITE_ADDR
408076d0 g     F .text	00000060 __mcmp
4080ee1c g     F .text	000000ac altera_avalon_uart_init
40805534 g     F .text	00000018 __fp_lock_all
40810be0 g     F .text	0000004c alt_ic_irq_enabled
408008c8 g     F .text	00000080 SIGMA_SAFELOAD_WRITE_TRANSFER_BIT
408110b0 g     F .text	0000009c alt_alarm_stop
40813b54 g     O .bss	00000004 alt_irq_active
40813aa1 g     O .rwdata	00000001 R15_JACKREGISTER_IC_1_Default
408000fc g     F .exceptions	000000d4 alt_irq_handler
408126b0 g     O .rwdata	00000028 alt_dev_null
408002f8 g     F .text	00000098 i2c_start
40813b08 g     O .bss	00000001 R1_DSP_RUN_REGISTER_IC_1_Default
408070fc g     F .text	00000068 __hi0bits
40813b16 g     O .bss	00000001 R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default
4080d628 g     F .text	00000080 .hidden __fixdfsi
40813ad8 g     O .rwdata	00000008 alt_dev_list
4080dfbc g     F .text	000000f8 write
408006dc g     F .text	0000007c SIGMA_WRITE_REGISTER_CONTROL
4080d9a0 g     F .text	000000b0 fstat
40811cb0 g     O .rwdata	0000011d Program_Data_IC_1
4080c520 g     F .text	000000f4 .hidden __ledf2
40807448 g     F .text	00000140 __pow5mult
4080875c g     F .text	0000145c ___vfiprintf_internal_r
40813b34 g     O .bss	00000004 __nlocale_changed
4080b1d0 g     F .text	00000058 .hidden __umodsi3
40815090 g       *ABS*	00000000 end
4080f438 g     F .text	000001ac altera_avalon_uart_write
4080e314 g     F .text	000000c0 altera_avalon_jtag_uart_init
408001d0 g     F .exceptions	00000074 alt_instruction_exception_entry
408118e4 g       *ABS*	00000000 __CTOR_LIST__
41000000 g       *ABS*	00000000 __alt_stack_pointer
4080ec90 g     F .text	0000007c alt_avalon_timer_sc_init
4080ed6c g     F .text	00000060 altera_avalon_uart_write_fd
40800f0c g     F .text	00000064 .hidden __clzsi2
4080edcc g     F .text	00000050 altera_avalon_uart_close_fd
4080e9f4 g     F .text	00000224 altera_avalon_jtag_uart_write
40805524 g     F .text	00000004 __sfp_lock_acquire
40806a80 g     F .text	000000e4 memchr
40801270 g     F .text	000021f8 ___vfprintf_internal_r
4080f6e4 g     F .text	0000009c alt_onchip_flash_get_info
40805688 g     F .text	00000310 _free_r
40806064 g     F .text	00000010 __locale_mb_cur_max
40811730 g     F .text	00000180 __call_exitprocs
40813b30 g     O .bss	00000004 __mlocale_changed
40813ac4 g     O .rwdata	00000004 __malloc_sbrk_base
40800244 g     F .text	00000048 _start
40813b58 g     O .bss	00000004 _alt_tick_rate
40807588 g     F .text	00000148 __lshift
40813b5c g     O .bss	00000004 _alt_nticks
4080dd40 g     F .text	000000fc read
4080e120 g     F .text	00000090 alt_sys_init
40813b14 g     O .bss	00000001 R27_ROUTING_MATRIX_INPUTS_IC_1_Default
40811618 g     F .text	00000118 __register_exitproc
40807250 g     F .text	000001f8 __multiply
4080e680 g     F .text	00000068 altera_avalon_jtag_uart_close
40814f68 g     O .bss	00000028 __malloc_current_mallinfo
40807a9c g     F .text	0000014c __d2b
40813b17 g     O .bss	00000001 R30_DSP_SLEW_MODES_IC_1_Default
4080e1b0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
40811410 g     F .text	000000a4 alt_get_fd
40810650 g     F .text	00000158 alt_busy_sleep
40809cf0 g     F .text	00000054 _close_r
4081159c g     F .text	0000007c memcmp
4080e270 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
40815090 g       *ABS*	00000000 __alt_stack_base
40813ab4 g     O .rwdata	00000001 R39_DEJITTER_REGISTER_CONTROL_IC_1_Default
4080e2c0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
40813b19 g     O .bss	00000001 R38_DEJITTER_REGISTER_CONTROL_IC_1_Default
40813b0e g     O .bss	00000002 R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default
40803540 g     F .text	00000154 __swsetup_r
4080bad4 g     F .text	000008e8 .hidden __divdf3
4080f618 g     F .text	000000cc alt_onchip_flash_read
408053e4 g     F .text	00000118 __sfp
40807d00 g     F .text	00000078 __copybits
408122a8 g     O .rwdata	00000408 __malloc_av_
40805530 g     F .text	00000004 __sinit_lock_release
4080c614 g     F .text	00000718 .hidden __muldf3
40808430 g     F .text	00000054 __sread
40811308 g     F .text	00000108 alt_find_file
4081085c g     F .text	000000a4 alt_dev_llist_insert
4080dcbc g     F .text	00000024 __malloc_lock
4080dea0 g     F .text	000000b0 sbrk
40805138 g     F .text	0000005c _fflush_r
40809d44 g     F .text	000000c4 _calloc_r
40813af4 g     O .rwdata	00000008 alt_flash_dev_list
40813b08 g       *ABS*	00000000 __bss_start
40813b09 g     O .bss	00000004 R6_ALC_CONTROL_REGISTERS_IC_1_Default
40800f70 g     F .text	00000128 memset
40800c9c g     F .text	00000160 main
40813a9e g     O .rwdata	00000001 R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default
40813b50 g     O .bss	00000004 alt_envp
40813b38 g     O .bss	00000004 __malloc_max_total_mem
4080e210 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
4080a3c4 g     F .text	00000018 __swbuf
40813a8c g     O .rwdata	00000002 R4_DELAY_IC_1_Default
40808564 g     F .text	00000008 __sclose
41000000 g       *ABS*	00000000 __alt_heap_limit
40809ef8 g     F .text	00000014 fclose
40803894 g     F .text	00001688 _dtoa_r
40806274 g     F .text	0000080c _malloc_r
4080a538 g     F .text	00000030 __ascii_wctomb
40813ae4 g     O .rwdata	00000004 alt_errno
40810374 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
40813a98 g     O .rwdata	00000003 R9_ADC_CONTROL_REGISTERS_IC_1_Default
40805e54 g     F .text	000000c4 _fwalk
4080b074 g     F .text	00000084 .hidden __divsi3
40813ab2 g     O .rwdata	00000001 R36_SAMPLE_RATE_SETTING_IC_1_Default
40805564 g     F .text	00000124 _malloc_trim_r
408118e4 g       *ABS*	00000000 __CTOR_END__
4080fe98 g     F .text	000004dc altera_onchip_flash_init
4080856c g     F .text	000000dc strcmp
408118e4 g       *ABS*	00000000 __DTOR_LIST__
4080c3bc g     F .text	00000088 .hidden __nedf2
4080e0e8 g     F .text	00000038 alt_irq_init
4080de3c g     F .text	00000064 alt_release_fd
40813ab0 g     O .rwdata	00000002 R32_CLOCK_ENABLE_REGISTERS_IC_1_Default
4081198f g     O .rodata	00000100 .hidden __clz_tab
40813b2c g     O .bss	00000004 _PathLocale
40811550 g     F .text	00000014 atexit
40809c90 g     F .text	00000060 _write_r
40806094 g     F .text	00000018 setlocale
40813a9f g     O .rwdata	00000002 R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default
40813abc g     O .rwdata	00000004 _impure_ptr
40813b48 g     O .bss	00000004 alt_argc
40804f1c g     F .text	0000021c __sflush_r
40810960 g     F .text	00000060 _do_dtors
40806080 g     F .text	00000008 __locale_cjk_lang
40800020 g       .exceptions	00000000 alt_irq_entry
40813aaf g     O .rwdata	00000001 R26_SAMPLE_RATE_SETTING_IC_1_Default
4080792c g     F .text	00000064 __ulp
4080554c g     F .text	00000018 __fp_unlock_all
40813ad0 g     O .rwdata	00000008 alt_fs_list
4080f8e8 g     F .text	000002d8 alt_onchip_flash_write_block
408060ac g     F .text	0000000c localeconv
40813aa2 g     O .rwdata	00000001 R21_DSP_ENABLE_REGISTER_IC_1_Default
40800000 g       *ABS*	00000000 __alt_mem_new_sdram_controller_0
40813b10 g     O .bss	00000004 R23_GPIO_REGISTERS_IC_1_Default
40810a7c g     F .text	00000050 alt_ic_isr_register
40813b08 g       *ABS*	00000000 _edata
4080ed0c g     F .text	00000060 altera_avalon_uart_read_fd
4080fbc0 g     F .text	000002d8 alt_onchip_flash_write
40815090 g       *ABS*	00000000 _end
408109c0 g     F .text	00000068 alt_flash_open_dev
40809f0c g     F .text	00000164 __fputwc
4080e6e8 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
40813aaa g     O .rwdata	00000005 R25_WATCHDOG_REGISTERS_IC_1_Default
40810b54 g     F .text	0000008c alt_ic_irq_disable
4080848c g     F .text	0000007c __swrite
40813ac8 g     O .rwdata	00000004 __malloc_trim_threshold
40806074 g     F .text	0000000c __locale_msgcharset
40811564 g     F .text	00000038 exit
40805f18 g     F .text	000000c4 _fwalk_reent
40807730 g     F .text	000001fc __mdiff
40810a28 g     F .text	00000054 alt_flash_close_dev
4080b0f8 g     F .text	00000074 .hidden __modsi3
41000000 g       *ABS*	00000000 __alt_data_end
40800020 g     F .exceptions	00000000 alt_exception
40805528 g     F .text	00000004 __sfp_lock_release
4080f190 g     F .text	00000054 altera_avalon_uart_close
408118b0 g     F .text	00000034 _exit
40810524 g     F .text	0000012c alt_alarm_start
40813a85 g     O .rwdata	00000001 R2_CLKCTRLREGISTER_IC_1_Default
408060b8 g     F .text	000001bc __smakebuf_r
408011d8 g     F .text	00000098 strlen
40810f5c g     F .text	00000154 open
4080c444 g     F .text	000000dc .hidden __gedf2
40813acc g     O .rwdata	00000004 __wctomb
40808744 g     F .text	00000018 __sprint_r
4080028c g     F .text	0000006c i2c_setup
40813afc g     O .rwdata	00000004 alt_priority_mask
40810acc g     F .text	00000088 alt_ic_irq_enable
40803468 g     F .text	0000001c __vfprintf_internal
4080f220 g     F .text	000001dc altera_avalon_uart_read
4080a568 g     F .text	0000005c _wctomb_r
40800948 g     F .text	00000354 default_download_IC_1
4080cd2c g     F .text	000008fc .hidden __subdf3
40813b24 g     O .bss	00000008 dtest
40807164 g     F .text	000000b0 __lo0bits
40813b00 g     O .rwdata	00000008 alt_alarm_list
40810900 g     F .text	00000060 _do_ctors
4080a478 g     F .text	000000c0 wcrtomb
40813a84 g     O .rwdata	00000001 R0_SAMPLE_RATE_SETTING_IC_1_Default
4080d868 g     F .text	000000d0 close
4080a094 g     F .text	00000080 fputwc
40800390 g     F .text	0000009c i2c_write_byte
4080552c g     F .text	00000004 __sinit_lock_acquire
40813b18 g     O .bss	00000001 R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default
40806ed8 g     F .text	00000120 __multadd
40806eb0 g     F .text	00000028 _Bfree



Disassembly of section .exceptions:

40800020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
40800020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
40800024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
40800028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
4080002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
40800030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
40800034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
40800038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
4080003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
40800040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
40800044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
40800048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
4080004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
40800050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
40800054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
40800058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
4080005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
40800060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
40800064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
40800068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
4080006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
40800070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
40800074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
40800078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
4080007c:	10000326 	beq	r2,zero,4080008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
40800080:	20000226 	beq	r4,zero,4080008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
40800084:	08000fc0 	call	408000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
40800088:	00000706 	br	408000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
4080008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
40800090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
40800094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
40800098:	08001d00 	call	408001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
4080009c:	1000021e 	bne	r2,zero,408000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
408000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
408000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
408000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
408000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
408000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
408000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
408000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
408000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
408000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
408000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
408000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
408000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
408000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
408000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
408000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
408000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
408000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
408000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
408000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
408000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
408000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
408000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
408000f8:	ef80083a 	eret

408000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
408000fc:	defff904 	addi	sp,sp,-28
40800100:	dfc00615 	stw	ra,24(sp)
40800104:	df000515 	stw	fp,20(sp)
40800108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
4080010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
40800110:	0005313a 	rdctl	r2,ipending
40800114:	e0bffe15 	stw	r2,-8(fp)

  return active;
40800118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
4080011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
40800120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
40800124:	00800044 	movi	r2,1
40800128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
4080012c:	e0fffb17 	ldw	r3,-20(fp)
40800130:	e0bffc17 	ldw	r2,-16(fp)
40800134:	1884703a 	and	r2,r3,r2
40800138:	10001426 	beq	r2,zero,4080018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
4080013c:	00902074 	movhi	r2,16513
40800140:	1093e404 	addi	r2,r2,20368
40800144:	e0fffd17 	ldw	r3,-12(fp)
40800148:	180690fa 	slli	r3,r3,3
4080014c:	10c5883a 	add	r2,r2,r3
40800150:	10c00017 	ldw	r3,0(r2)
40800154:	00902074 	movhi	r2,16513
40800158:	1093e404 	addi	r2,r2,20368
4080015c:	e13ffd17 	ldw	r4,-12(fp)
40800160:	200890fa 	slli	r4,r4,3
40800164:	1105883a 	add	r2,r2,r4
40800168:	10800104 	addi	r2,r2,4
4080016c:	10800017 	ldw	r2,0(r2)
40800170:	1009883a 	mov	r4,r2
40800174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
40800178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
4080017c:	0005313a 	rdctl	r2,ipending
40800180:	e0bfff15 	stw	r2,-4(fp)

  return active;
40800184:	e0bfff17 	ldw	r2,-4(fp)
40800188:	00000706 	br	408001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
4080018c:	e0bffc17 	ldw	r2,-16(fp)
40800190:	1085883a 	add	r2,r2,r2
40800194:	e0bffc15 	stw	r2,-16(fp)
      i++;
40800198:	e0bffd17 	ldw	r2,-12(fp)
4080019c:	10800044 	addi	r2,r2,1
408001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
408001a4:	003fe106 	br	4080012c <__alt_mem_onchip_flash_0_data+0xff7c012c>

    active = alt_irq_pending ();
408001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
408001ac:	e0bffb17 	ldw	r2,-20(fp)
408001b0:	103fdb1e 	bne	r2,zero,40800120 <__alt_mem_onchip_flash_0_data+0xff7c0120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
408001b4:	0001883a 	nop
}
408001b8:	0001883a 	nop
408001bc:	e037883a 	mov	sp,fp
408001c0:	dfc00117 	ldw	ra,4(sp)
408001c4:	df000017 	ldw	fp,0(sp)
408001c8:	dec00204 	addi	sp,sp,8
408001cc:	f800283a 	ret

408001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
408001d0:	defffb04 	addi	sp,sp,-20
408001d4:	dfc00415 	stw	ra,16(sp)
408001d8:	df000315 	stw	fp,12(sp)
408001dc:	df000304 	addi	fp,sp,12
408001e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
408001e4:	000531fa 	rdctl	r2,exception
408001e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
408001ec:	e0bffd17 	ldw	r2,-12(fp)
408001f0:	10801f0c 	andi	r2,r2,124
408001f4:	1004d0ba 	srli	r2,r2,2
408001f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
408001fc:	0005333a 	rdctl	r2,badaddr
40800200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
40800204:	d0a03917 	ldw	r2,-32540(gp)
40800208:	10000726 	beq	r2,zero,40800228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
4080020c:	d0a03917 	ldw	r2,-32540(gp)
40800210:	e0fffd17 	ldw	r3,-12(fp)
40800214:	e1bffe17 	ldw	r6,-8(fp)
40800218:	e17fff17 	ldw	r5,-4(fp)
4080021c:	1809883a 	mov	r4,r3
40800220:	103ee83a 	callr	r2
40800224:	00000206 	br	40800230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
40800228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
4080022c:	0005883a 	mov	r2,zero
}
40800230:	e037883a 	mov	sp,fp
40800234:	dfc00117 	ldw	ra,4(sp)
40800238:	df000017 	ldw	fp,0(sp)
4080023c:	dec00204 	addi	sp,sp,8
40800240:	f800283a 	ret

Disassembly of section .text:

40800244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
40800244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
40800248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
4080024c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
40800250:	00bffd16 	blt	zero,r2,40800248 <__alt_mem_onchip_flash_0_data+0xff7c0248>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
40800254:	06d04034 	movhi	sp,16640
    ori sp, sp, %lo(__alt_stack_pointer)
40800258:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
4080025c:	06902074 	movhi	gp,16513
    ori gp, gp, %lo(_gp)
40800260:	d6ae9f14 	ori	gp,gp,47740
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
40800264:	00902074 	movhi	r2,16513
    ori r2, r2, %lo(__bss_start)
40800268:	108ec214 	ori	r2,r2,15112

    movhi r3, %hi(__bss_end)
4080026c:	00d02074 	movhi	r3,16513
    ori r3, r3, %lo(__bss_end)
40800270:	18d42414 	ori	r3,r3,20624

    beq r2, r3, 1f
40800274:	10c00326 	beq	r2,r3,40800284 <_start+0x40>

0:
    stw zero, (r2)
40800278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
4080027c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
40800280:	10fffd36 	bltu	r2,r3,40800278 <__alt_mem_onchip_flash_0_data+0xff7c0278>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
40800284:	080dc400 	call	4080dc40 <alt_main>

40800288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
40800288:	003fff06 	br	40800288 <__alt_mem_onchip_flash_0_data+0xff7c0288>

4080028c <i2c_setup>:
#include "SigmaStudioFW.h"

uint8_t i2c_write_data[5120 + 2] = {0x00};

void i2c_setup(uint8_t per_h_reg, uint8_t per_l_reg)
{
4080028c:	defffd04 	addi	sp,sp,-12
40800290:	df000215 	stw	fp,8(sp)
40800294:	df000204 	addi	fp,sp,8
40800298:	2007883a 	mov	r3,r4
4080029c:	2805883a 	mov	r2,r5
408002a0:	e0fffe05 	stb	r3,-8(fp)
408002a4:	e0bfff05 	stb	r2,-4(fp)
	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_CTR, 0x00);
	IOWR(I2C_BASEADDR, I2C_CTR, 0x00);
408002a8:	0007883a 	mov	r3,zero
408002ac:	00801204 	movi	r2,72
408002b0:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR, 0x01);
408002b4:	00c00044 	movi	r3,1
408002b8:	00801404 	movi	r2,80
408002bc:	10c00035 	stwio	r3,0(r2)

	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_PRERL, per_l_reg);
	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_PRERH, per_h_reg);
	//IOWR_ALTERA_AVALON_PIO_DATA(I2C_CTR,   0x80);

	IOWR(I2C_BASEADDR, I2C_PRERL, per_l_reg);
408002c0:	e0ffff03 	ldbu	r3,-4(fp)
408002c4:	00801004 	movi	r2,64
408002c8:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_PRERH, per_h_reg);
408002cc:	e0fffe03 	ldbu	r3,-8(fp)
408002d0:	00801104 	movi	r2,68
408002d4:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CTR,   0x80);
408002d8:	00c02004 	movi	r3,128
408002dc:	00801204 	movi	r2,72
408002e0:	10c00035 	stwio	r3,0(r2)
}
408002e4:	0001883a 	nop
408002e8:	e037883a 	mov	sp,fp
408002ec:	df000017 	ldw	fp,0(sp)
408002f0:	dec00104 	addi	sp,sp,4
408002f4:	f800283a 	ret

408002f8 <i2c_start>:

bool i2c_start(uint8_t devAddress, uint8_t rw)
{
408002f8:	defffc04 	addi	sp,sp,-16
408002fc:	dfc00315 	stw	ra,12(sp)
40800300:	df000215 	stw	fp,8(sp)
40800304:	df000204 	addi	fp,sp,8
40800308:	2007883a 	mov	r3,r4
4080030c:	2805883a 	mov	r2,r5
40800310:	e0fffe05 	stb	r3,-8(fp)
40800314:	e0bfff05 	stb	r2,-4(fp)
	IOWR(I2C_BASEADDR, I2C_TXR, (devAddress << 0) + (rw & 0x01));
40800318:	e0fffe03 	ldbu	r3,-8(fp)
4080031c:	e0bfff03 	ldbu	r2,-4(fp)
40800320:	1080004c 	andi	r2,r2,1
40800324:	1887883a 	add	r3,r3,r2
40800328:	00801304 	movi	r2,76
4080032c:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR, 0x90);
40800330:	00c02404 	movi	r3,144
40800334:	00801404 	movi	r2,80
40800338:	10c00035 	stwio	r3,0(r2)

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
4080033c:	00000206 	br	40800348 <i2c_start+0x50>
	{
		usleep(10);
40800340:	01000284 	movi	r4,10
40800344:	080df500 	call	4080df50 <usleep>
bool i2c_start(uint8_t devAddress, uint8_t rw)
{
	IOWR(I2C_BASEADDR, I2C_TXR, (devAddress << 0) + (rw & 0x01));
	IOWR(I2C_BASEADDR, I2C_CR, 0x90);

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
40800348:	00801404 	movi	r2,80
4080034c:	10800037 	ldwio	r2,0(r2)
40800350:	1080008c 	andi	r2,r2,2
40800354:	103ffa1e 	bne	r2,zero,40800340 <__alt_mem_onchip_flash_0_data+0xff7c0340>
	{
		usleep(10);
	}

	usleep(10);
40800358:	01000284 	movi	r4,10
4080035c:	080df500 	call	4080df50 <usleep>

	if (IORD(I2C_BASEADDR, I2C_SR) & 0x80)
40800360:	00801404 	movi	r2,80
40800364:	10800037 	ldwio	r2,0(r2)
40800368:	1080200c 	andi	r2,r2,128
4080036c:	10000226 	beq	r2,zero,40800378 <i2c_start+0x80>
	{
		return false;
40800370:	0005883a 	mov	r2,zero
40800374:	00000106 	br	4080037c <i2c_start+0x84>
	}
	else
	{
		return true;
40800378:	00800044 	movi	r2,1
	}
}
4080037c:	e037883a 	mov	sp,fp
40800380:	dfc00117 	ldw	ra,4(sp)
40800384:	df000017 	ldw	fp,0(sp)
40800388:	dec00204 	addi	sp,sp,8
4080038c:	f800283a 	ret

40800390 <i2c_write_byte>:

bool i2c_write_byte(uint8_t data)
{
40800390:	defffd04 	addi	sp,sp,-12
40800394:	dfc00215 	stw	ra,8(sp)
40800398:	df000115 	stw	fp,4(sp)
4080039c:	df000104 	addi	fp,sp,4
408003a0:	2005883a 	mov	r2,r4
408003a4:	e0bfff05 	stb	r2,-4(fp)
	IOWR(I2C_BASEADDR, I2C_TXR, data);
408003a8:	e0ffff03 	ldbu	r3,-4(fp)
408003ac:	00801304 	movi	r2,76
408003b0:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR,  0x10); //wr
408003b4:	00c00404 	movi	r3,16
408003b8:	00801404 	movi	r2,80
408003bc:	10c00035 	stwio	r3,0(r2)

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
408003c0:	00000206 	br	408003cc <i2c_write_byte+0x3c>
	{
		usleep(10);
408003c4:	01000284 	movi	r4,10
408003c8:	080df500 	call	4080df50 <usleep>
bool i2c_write_byte(uint8_t data)
{
	IOWR(I2C_BASEADDR, I2C_TXR, data);
	IOWR(I2C_BASEADDR, I2C_CR,  0x10); //wr

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
408003cc:	00801404 	movi	r2,80
408003d0:	10800037 	ldwio	r2,0(r2)
408003d4:	1080008c 	andi	r2,r2,2
408003d8:	103ffa1e 	bne	r2,zero,408003c4 <__alt_mem_onchip_flash_0_data+0xff7c03c4>
	{
		usleep(10);
	}

	usleep(10);
408003dc:	01000284 	movi	r4,10
408003e0:	080df500 	call	4080df50 <usleep>

	if (IORD(I2C_BASEADDR, I2C_SR) & 0x80)
408003e4:	00801404 	movi	r2,80
408003e8:	10800037 	ldwio	r2,0(r2)
408003ec:	1080200c 	andi	r2,r2,128
408003f0:	10000826 	beq	r2,zero,40800414 <i2c_write_byte+0x84>
	{
		printf("I2C_SR %x %x\n", IORD(I2C_BASEADDR, I2C_SR));
408003f4:	00801404 	movi	r2,80
408003f8:	10800037 	ldwio	r2,0(r2)
408003fc:	100b883a 	mov	r5,r2
40800400:	01102074 	movhi	r4,16513
40800404:	21063904 	addi	r4,r4,6372
40800408:	08010c80 	call	408010c8 <printf>
		return false;
4080040c:	0005883a 	mov	r2,zero
40800410:	00000106 	br	40800418 <i2c_write_byte+0x88>
	}
	else
	{
		return true;
40800414:	00800044 	movi	r2,1
	}
}
40800418:	e037883a 	mov	sp,fp
4080041c:	dfc00117 	ldw	ra,4(sp)
40800420:	df000017 	ldw	fp,0(sp)
40800424:	dec00204 	addi	sp,sp,8
40800428:	f800283a 	ret

4080042c <i2c_write_byte_stop>:

bool i2c_write_byte_stop(uint8_t data)
{
4080042c:	defffd04 	addi	sp,sp,-12
40800430:	dfc00215 	stw	ra,8(sp)
40800434:	df000115 	stw	fp,4(sp)
40800438:	df000104 	addi	fp,sp,4
4080043c:	2005883a 	mov	r2,r4
40800440:	e0bfff05 	stb	r2,-4(fp)
	IOWR(I2C_BASEADDR, I2C_TXR, data);
40800444:	e0ffff03 	ldbu	r3,-4(fp)
40800448:	00801304 	movi	r2,76
4080044c:	10c00035 	stwio	r3,0(r2)
	IOWR(I2C_BASEADDR, I2C_CR, 0x50); //stop
40800450:	00c01404 	movi	r3,80
40800454:	00801404 	movi	r2,80
40800458:	10c00035 	stwio	r3,0(r2)

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
4080045c:	00000206 	br	40800468 <i2c_write_byte_stop+0x3c>
	{
		usleep(10);
40800460:	01000284 	movi	r4,10
40800464:	080df500 	call	4080df50 <usleep>
bool i2c_write_byte_stop(uint8_t data)
{
	IOWR(I2C_BASEADDR, I2C_TXR, data);
	IOWR(I2C_BASEADDR, I2C_CR, 0x50); //stop

	while (IORD(I2C_BASEADDR, I2C_SR) & 0x02)
40800468:	00801404 	movi	r2,80
4080046c:	10800037 	ldwio	r2,0(r2)
40800470:	1080008c 	andi	r2,r2,2
40800474:	103ffa1e 	bne	r2,zero,40800460 <__alt_mem_onchip_flash_0_data+0xff7c0460>
	{
		usleep(10);
	}

	usleep(10);
40800478:	01000284 	movi	r4,10
4080047c:	080df500 	call	4080df50 <usleep>

	if (IORD(I2C_BASEADDR, I2C_SR) & 0x80)
40800480:	00801404 	movi	r2,80
40800484:	10800037 	ldwio	r2,0(r2)
40800488:	1080200c 	andi	r2,r2,128
4080048c:	10000226 	beq	r2,zero,40800498 <i2c_write_byte_stop+0x6c>
	{
		return false;
40800490:	0005883a 	mov	r2,zero
40800494:	00000106 	br	4080049c <i2c_write_byte_stop+0x70>
	}
	else
	{
		return true;
40800498:	00800044 	movi	r2,1
	}
}
4080049c:	e037883a 	mov	sp,fp
408004a0:	dfc00117 	ldw	ra,4(sp)
408004a4:	df000017 	ldw	fp,0(sp)
408004a8:	dec00204 	addi	sp,sp,8
408004ac:	f800283a 	ret

408004b0 <i2c_multiple_write>:

bool i2c_multiple_write(uint8_t devAddress, uint16_t controlAddress, uint8_t data[], uint16_t len)
{
408004b0:	defff804 	addi	sp,sp,-32
408004b4:	dfc00715 	stw	ra,28(sp)
408004b8:	df000615 	stw	fp,24(sp)
408004bc:	df000604 	addi	fp,sp,24
408004c0:	2807883a 	mov	r3,r5
408004c4:	e1bffe15 	stw	r6,-8(fp)
408004c8:	3805883a 	mov	r2,r7
408004cc:	e13ffc05 	stb	r4,-16(fp)
408004d0:	e0fffd0d 	sth	r3,-12(fp)
408004d4:	e0bfff0d 	sth	r2,-4(fp)
	bool state = false;
408004d8:	e03ffb05 	stb	zero,-20(fp)

	if (!i2c_start(devAddress, 0x00))
408004dc:	e0bffc03 	ldbu	r2,-16(fp)
408004e0:	000b883a 	mov	r5,zero
408004e4:	1009883a 	mov	r4,r2
408004e8:	08002f80 	call	408002f8 <i2c_start>
408004ec:	1080005c 	xori	r2,r2,1
408004f0:	10803fcc 	andi	r2,r2,255
408004f4:	10000526 	beq	r2,zero,4080050c <i2c_multiple_write+0x5c>
	{
		printf("I2C start failed.\n");
408004f8:	01102074 	movhi	r4,16513
408004fc:	21063d04 	addi	r4,r4,6388
40800500:	08011c40 	call	408011c4 <puts>
		return false;
40800504:	0005883a 	mov	r2,zero
40800508:	00004e06 	br	40800644 <i2c_multiple_write+0x194>
	}

	usleep(100);
4080050c:	01001904 	movi	r4,100
40800510:	080df500 	call	4080df50 <usleep>

	uint8_t test = (controlAddress >> 8) & 0xFF;
40800514:	e0bffd0b 	ldhu	r2,-12(fp)
40800518:	1004d23a 	srli	r2,r2,8
4080051c:	e0bffb45 	stb	r2,-19(fp)
	if (!i2c_write_byte((controlAddress >> 8) & 0xFF))
40800520:	e0bffd0b 	ldhu	r2,-12(fp)
40800524:	1004d23a 	srli	r2,r2,8
40800528:	10803fcc 	andi	r2,r2,255
4080052c:	1009883a 	mov	r4,r2
40800530:	08003900 	call	40800390 <i2c_write_byte>
40800534:	1080005c 	xori	r2,r2,1
40800538:	10803fcc 	andi	r2,r2,255
4080053c:	10000326 	beq	r2,zero,4080054c <i2c_multiple_write+0x9c>
	{
		printf("I2C caddrH write failed.\n");
40800540:	01102074 	movhi	r4,16513
40800544:	21064204 	addi	r4,r4,6408
40800548:	08011c40 	call	408011c4 <puts>
		//return false;
	}

	usleep(100);
4080054c:	01001904 	movi	r4,100
40800550:	080df500 	call	4080df50 <usleep>

	if (!i2c_write_byte(controlAddress & 0xFF))
40800554:	e0bffd0b 	ldhu	r2,-12(fp)
40800558:	10803fcc 	andi	r2,r2,255
4080055c:	1009883a 	mov	r4,r2
40800560:	08003900 	call	40800390 <i2c_write_byte>
40800564:	1080005c 	xori	r2,r2,1
40800568:	10803fcc 	andi	r2,r2,255
4080056c:	10000526 	beq	r2,zero,40800584 <i2c_multiple_write+0xd4>
	{
		printf("I2C caddrL write failed.\n");
40800570:	01102074 	movhi	r4,16513
40800574:	21064904 	addi	r4,r4,6436
40800578:	08011c40 	call	408011c4 <puts>
		return false;
4080057c:	0005883a 	mov	r2,zero
40800580:	00003006 	br	40800644 <i2c_multiple_write+0x194>
	}

	usleep(100);
40800584:	01001904 	movi	r4,100
40800588:	080df500 	call	4080df50 <usleep>

	for (int i = 0; i < len; i++)
4080058c:	e03ffa15 	stw	zero,-24(fp)
40800590:	00002806 	br	40800634 <i2c_multiple_write+0x184>
	{
		if (i == len - 1)
40800594:	e0bfff0b 	ldhu	r2,-4(fp)
40800598:	10ffffc4 	addi	r3,r2,-1
4080059c:	e0bffa17 	ldw	r2,-24(fp)
408005a0:	18800f1e 	bne	r3,r2,408005e0 <i2c_multiple_write+0x130>
		{
			if (!i2c_write_byte_stop(data[i]))
408005a4:	e0bffa17 	ldw	r2,-24(fp)
408005a8:	e0fffe17 	ldw	r3,-8(fp)
408005ac:	1885883a 	add	r2,r3,r2
408005b0:	10800003 	ldbu	r2,0(r2)
408005b4:	10803fcc 	andi	r2,r2,255
408005b8:	1009883a 	mov	r4,r2
408005bc:	080042c0 	call	4080042c <i2c_write_byte_stop>
408005c0:	1080005c 	xori	r2,r2,1
408005c4:	10803fcc 	andi	r2,r2,255
408005c8:	10001526 	beq	r2,zero,40800620 <i2c_multiple_write+0x170>
			{
				printf("I2C stop failed.\n");
408005cc:	01102074 	movhi	r4,16513
408005d0:	21065004 	addi	r4,r4,6464
408005d4:	08011c40 	call	408011c4 <puts>
				return false;
408005d8:	0005883a 	mov	r2,zero
408005dc:	00001906 	br	40800644 <i2c_multiple_write+0x194>
			}
		}
		else
		{
			if (!i2c_write_byte(data[i]))
408005e0:	e0bffa17 	ldw	r2,-24(fp)
408005e4:	e0fffe17 	ldw	r3,-8(fp)
408005e8:	1885883a 	add	r2,r3,r2
408005ec:	10800003 	ldbu	r2,0(r2)
408005f0:	10803fcc 	andi	r2,r2,255
408005f4:	1009883a 	mov	r4,r2
408005f8:	08003900 	call	40800390 <i2c_write_byte>
408005fc:	1080005c 	xori	r2,r2,1
40800600:	10803fcc 	andi	r2,r2,255
40800604:	10000626 	beq	r2,zero,40800620 <i2c_multiple_write+0x170>
			{
				printf("I2C data[%d] write failed.\n", i);
40800608:	e17ffa17 	ldw	r5,-24(fp)
4080060c:	01102074 	movhi	r4,16513
40800610:	21065504 	addi	r4,r4,6484
40800614:	08010c80 	call	408010c8 <printf>
				return false;
40800618:	0005883a 	mov	r2,zero
4080061c:	00000906 	br	40800644 <i2c_multiple_write+0x194>
			}
		}

		usleep(100);
40800620:	01001904 	movi	r4,100
40800624:	080df500 	call	4080df50 <usleep>
		return false;
	}

	usleep(100);

	for (int i = 0; i < len; i++)
40800628:	e0bffa17 	ldw	r2,-24(fp)
4080062c:	10800044 	addi	r2,r2,1
40800630:	e0bffa15 	stw	r2,-24(fp)
40800634:	e0bfff0b 	ldhu	r2,-4(fp)
40800638:	e0fffa17 	ldw	r3,-24(fp)
4080063c:	18bfd516 	blt	r3,r2,40800594 <__alt_mem_onchip_flash_0_data+0xff7c0594>
		}

		usleep(100);
	}

	return true;
40800640:	00800044 	movi	r2,1
}
40800644:	e037883a 	mov	sp,fp
40800648:	dfc00117 	ldw	ra,4(sp)
4080064c:	df000017 	ldw	fp,0(sp)
40800650:	dec00204 	addi	sp,sp,8
40800654:	f800283a 	ret

40800658 <SIGMA_WRITE_REGISTER_BLOCK>:

bool SIGMA_WRITE_REGISTER_BLOCK(uint8_t devAddress, uint16_t address, uint16_t length, ADI_REG_TYPE *pData)
{
40800658:	defff904 	addi	sp,sp,-28
4080065c:	dfc00615 	stw	ra,24(sp)
40800660:	df000515 	stw	fp,20(sp)
40800664:	df000504 	addi	fp,sp,20
40800668:	2807883a 	mov	r3,r5
4080066c:	3005883a 	mov	r2,r6
40800670:	e1ffff15 	stw	r7,-4(fp)
40800674:	e13ffc05 	stb	r4,-16(fp)
40800678:	e0fffd0d 	sth	r3,-12(fp)
4080067c:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, pData, length);
  ret = i2c_multiple_write(devAddress, address, pData, length);
40800680:	e0bffc03 	ldbu	r2,-16(fp)
40800684:	e0fffd0b 	ldhu	r3,-12(fp)
40800688:	e13ffe0b 	ldhu	r4,-8(fp)
4080068c:	200f883a 	mov	r7,r4
40800690:	e1bfff17 	ldw	r6,-4(fp)
40800694:	180b883a 	mov	r5,r3
40800698:	1009883a 	mov	r4,r2
4080069c:	08004b00 	call	408004b0 <i2c_multiple_write>
408006a0:	e0bffb05 	stb	r2,-20(fp)

  usleep(1000);
408006a4:	0100fa04 	movi	r4,1000
408006a8:	080df500 	call	4080df50 <usleep>

  //if (ret != i2cTransferDone)
  if (!ret)
408006ac:	e0bffb03 	ldbu	r2,-20(fp)
408006b0:	1080005c 	xori	r2,r2,1
408006b4:	10803fcc 	andi	r2,r2,255
408006b8:	10000226 	beq	r2,zero,408006c4 <SIGMA_WRITE_REGISTER_BLOCK+0x6c>
  {
    //return((uint32_t) ret);
	  return false;
408006bc:	0005883a 	mov	r2,zero
408006c0:	00000106 	br	408006c8 <SIGMA_WRITE_REGISTER_BLOCK+0x70>
  }

  //return((uint32_t) 0);
  return true;
408006c4:	00800044 	movi	r2,1
}
408006c8:	e037883a 	mov	sp,fp
408006cc:	dfc00117 	ldw	ra,4(sp)
408006d0:	df000017 	ldw	fp,0(sp)
408006d4:	dec00204 	addi	sp,sp,8
408006d8:	f800283a 	ret

408006dc <SIGMA_WRITE_REGISTER_CONTROL>:

bool SIGMA_WRITE_REGISTER_CONTROL(uint8_t devAddress, uint16_t address, uint16_t length, ADI_REG_U8 *pData)
{
408006dc:	defff904 	addi	sp,sp,-28
408006e0:	dfc00615 	stw	ra,24(sp)
408006e4:	df000515 	stw	fp,20(sp)
408006e8:	df000504 	addi	fp,sp,20
408006ec:	2807883a 	mov	r3,r5
408006f0:	3005883a 	mov	r2,r6
408006f4:	e1ffff15 	stw	r7,-4(fp)
408006f8:	e13ffc05 	stb	r4,-16(fp)
408006fc:	e0fffd0d 	sth	r3,-12(fp)
40800700:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, pData, length);
  ret = i2c_multiple_write(devAddress, address, pData, length);
40800704:	e0bffc03 	ldbu	r2,-16(fp)
40800708:	e0fffd0b 	ldhu	r3,-12(fp)
4080070c:	e13ffe0b 	ldhu	r4,-8(fp)
40800710:	200f883a 	mov	r7,r4
40800714:	e1bfff17 	ldw	r6,-4(fp)
40800718:	180b883a 	mov	r5,r3
4080071c:	1009883a 	mov	r4,r2
40800720:	08004b00 	call	408004b0 <i2c_multiple_write>
40800724:	e0bffb05 	stb	r2,-20(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
40800728:	e0bffb03 	ldbu	r2,-20(fp)
4080072c:	1080005c 	xori	r2,r2,1
40800730:	10803fcc 	andi	r2,r2,255
40800734:	10000226 	beq	r2,zero,40800740 <SIGMA_WRITE_REGISTER_CONTROL+0x64>
  {
    //return((uint32_t) ret);
	  return false;
40800738:	0005883a 	mov	r2,zero
4080073c:	00000106 	br	40800744 <SIGMA_WRITE_REGISTER_CONTROL+0x68>
  }

  //free(i2c_write_data);

  //return((uint32_t) 0);
  return true;
40800740:	00800044 	movi	r2,1
}
40800744:	e037883a 	mov	sp,fp
40800748:	dfc00117 	ldw	ra,4(sp)
4080074c:	df000017 	ldw	fp,0(sp)
40800750:	dec00204 	addi	sp,sp,8
40800754:	f800283a 	ret

40800758 <SIGMA_SAFELOAD_WRITE_ADDR>:

bool SIGMA_SAFELOAD_WRITE_ADDR(uint8_t devAddress, uint16_t addrAddress, uint16_t address)
{
40800758:	defffa04 	addi	sp,sp,-24
4080075c:	dfc00515 	stw	ra,20(sp)
40800760:	df000415 	stw	fp,16(sp)
40800764:	df000404 	addi	fp,sp,16
40800768:	2807883a 	mov	r3,r5
4080076c:	3005883a 	mov	r2,r6
40800770:	e13ffd05 	stb	r4,-12(fp)
40800774:	e0fffe0d 	sth	r3,-8(fp)
40800778:	e0bfff0d 	sth	r2,-4(fp)
  seq.buf[1].len  = 0;

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  wdata[0] = (address >> 8) & 0x00FF;
4080077c:	e0bfff0b 	ldhu	r2,-4(fp)
40800780:	1004d23a 	srli	r2,r2,8
40800784:	e0bffc45 	stb	r2,-15(fp)
  wdata[1] = address & 0x00FF;
40800788:	e0bfff0b 	ldhu	r2,-4(fp)
4080078c:	e0bffc85 	stb	r2,-14(fp)
  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, wdata, 2);
  ret = i2c_multiple_write(devAddress, address, wdata, 2);
40800790:	e0bffd03 	ldbu	r2,-12(fp)
40800794:	e0ffff0b 	ldhu	r3,-4(fp)
40800798:	e13ffc44 	addi	r4,fp,-15
4080079c:	01c00084 	movi	r7,2
408007a0:	200d883a 	mov	r6,r4
408007a4:	180b883a 	mov	r5,r3
408007a8:	1009883a 	mov	r4,r2
408007ac:	08004b00 	call	408004b0 <i2c_multiple_write>
408007b0:	e0bffc05 	stb	r2,-16(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
408007b4:	e0bffc03 	ldbu	r2,-16(fp)
408007b8:	1080005c 	xori	r2,r2,1
408007bc:	10803fcc 	andi	r2,r2,255
408007c0:	10000226 	beq	r2,zero,408007cc <SIGMA_SAFELOAD_WRITE_ADDR+0x74>
  {
    //return((uint32_t) ret);
	  return false;
408007c4:	0005883a 	mov	r2,zero
408007c8:	00000106 	br	408007d0 <SIGMA_SAFELOAD_WRITE_ADDR+0x78>
  }

  //return((uint32_t) 0);
  return true;
408007cc:	00800044 	movi	r2,1
}
408007d0:	e037883a 	mov	sp,fp
408007d4:	dfc00117 	ldw	ra,4(sp)
408007d8:	df000017 	ldw	fp,0(sp)
408007dc:	dec00204 	addi	sp,sp,8
408007e0:	f800283a 	ret

408007e4 <SIGMA_SAFELOAD_WRITE_DATA>:

bool SIGMA_SAFELOAD_WRITE_DATA(uint8_t devAddress, uint16_t dataAddress, uint16_t length, ADI_REG_U8 *pData)
{
408007e4:	defff404 	addi	sp,sp,-48
408007e8:	dfc00b15 	stw	ra,44(sp)
408007ec:	df000a15 	stw	fp,40(sp)
408007f0:	df000a04 	addi	fp,sp,40
408007f4:	2807883a 	mov	r3,r5
408007f8:	3005883a 	mov	r2,r6
408007fc:	e1ffff15 	stw	r7,-4(fp)
40800800:	e13ffc05 	stb	r4,-16(fp)
40800804:	e0fffd0d 	sth	r3,-12(fp)
40800808:	e0bffe0d 	sth	r2,-8(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint8_t wdata[16] = {0};
4080080c:	e0bff744 	addi	r2,fp,-35
40800810:	00c00404 	movi	r3,16
40800814:	180d883a 	mov	r6,r3
40800818:	000b883a 	mov	r5,zero
4080081c:	1009883a 	mov	r4,r2
40800820:	0800f700 	call	40800f70 <memset>
  for (int i = 0; i < length; i++)
40800824:	e03ff615 	stw	zero,-40(fp)
40800828:	00000c06 	br	4080085c <SIGMA_SAFELOAD_WRITE_DATA+0x78>
  {
	  wdata[i + 1] = pData[i];
4080082c:	e0bff617 	ldw	r2,-40(fp)
40800830:	10800044 	addi	r2,r2,1
40800834:	e0fff617 	ldw	r3,-40(fp)
40800838:	e13fff17 	ldw	r4,-4(fp)
4080083c:	20c7883a 	add	r3,r4,r3
40800840:	18c00003 	ldbu	r3,0(r3)
40800844:	e13ff744 	addi	r4,fp,-35
40800848:	2085883a 	add	r2,r4,r2
4080084c:	10c00005 	stb	r3,0(r2)
  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint8_t wdata[16] = {0};
  for (int i = 0; i < length; i++)
40800850:	e0bff617 	ldw	r2,-40(fp)
40800854:	10800044 	addi	r2,r2,1
40800858:	e0bff615 	stw	r2,-40(fp)
4080085c:	e0bffe0b 	ldhu	r2,-8(fp)
40800860:	e0fff617 	ldw	r3,-40(fp)
40800864:	18bff116 	blt	r3,r2,4080082c <__alt_mem_onchip_flash_0_data+0xff7c082c>
  {
	  wdata[i + 1] = pData[i];
  }

  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, dataAddress, wdata, length + 1);
  ret = i2c_multiple_write(devAddress, dataAddress, wdata, length + 1);
40800868:	e0fffc03 	ldbu	r3,-16(fp)
4080086c:	e13ffd0b 	ldhu	r4,-12(fp)
40800870:	e0bffe0b 	ldhu	r2,-8(fp)
40800874:	10800044 	addi	r2,r2,1
40800878:	117fffcc 	andi	r5,r2,65535
4080087c:	e0bff744 	addi	r2,fp,-35
40800880:	280f883a 	mov	r7,r5
40800884:	100d883a 	mov	r6,r2
40800888:	200b883a 	mov	r5,r4
4080088c:	1809883a 	mov	r4,r3
40800890:	08004b00 	call	408004b0 <i2c_multiple_write>
40800894:	e0bff705 	stb	r2,-36(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
40800898:	e0bff703 	ldbu	r2,-36(fp)
4080089c:	1080005c 	xori	r2,r2,1
408008a0:	10803fcc 	andi	r2,r2,255
408008a4:	10000226 	beq	r2,zero,408008b0 <SIGMA_SAFELOAD_WRITE_DATA+0xcc>
  {
    //return((uint32_t) ret);
	  return false;
408008a8:	0005883a 	mov	r2,zero
408008ac:	00000106 	br	408008b4 <SIGMA_SAFELOAD_WRITE_DATA+0xd0>
  }

  //return((uint32_t) 0);
  return true;
408008b0:	00800044 	movi	r2,1
}
408008b4:	e037883a 	mov	sp,fp
408008b8:	dfc00117 	ldw	ra,4(sp)
408008bc:	df000017 	ldw	fp,0(sp)
408008c0:	dec00204 	addi	sp,sp,8
408008c4:	f800283a 	ret

408008c8 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT>:

bool SIGMA_SAFELOAD_WRITE_TRANSFER_BIT(uint8_t devAddress)
{
408008c8:	defffb04 	addi	sp,sp,-20
408008cc:	dfc00415 	stw	ra,16(sp)
408008d0:	df000315 	stw	fp,12(sp)
408008d4:	df000304 	addi	fp,sp,12
408008d8:	2005883a 	mov	r2,r4
408008dc:	e0bfff05 	stb	r2,-4(fp)

  ret = I2CSPM_Transfer(I2C0, &seq);
#endif

  bool ret;
  uint16_t address = 0x081C;
408008e0:	00820704 	movi	r2,2076
408008e4:	e0bffd0d 	sth	r2,-12(fp)
  uint8_t wdata[2] = {0x00, 0x3C};
408008e8:	e03ffdc5 	stb	zero,-9(fp)
408008ec:	00800f04 	movi	r2,60
408008f0:	e0bffe05 	stb	r2,-8(fp)
  //ret = i2c_multiple_write(PIO_2_BASE, PIO_3_BASE, devAddress, address, wdata, 2);
  ret = i2c_multiple_write(devAddress, address, wdata, 2);
408008f4:	e0bfff03 	ldbu	r2,-4(fp)
408008f8:	e0fffd0b 	ldhu	r3,-12(fp)
408008fc:	e13ffdc4 	addi	r4,fp,-9
40800900:	01c00084 	movi	r7,2
40800904:	200d883a 	mov	r6,r4
40800908:	180b883a 	mov	r5,r3
4080090c:	1009883a 	mov	r4,r2
40800910:	08004b00 	call	408004b0 <i2c_multiple_write>
40800914:	e0bffd85 	stb	r2,-10(fp)

  //if (ret != i2cTransferDone)
  if (!ret)
40800918:	e0bffd83 	ldbu	r2,-10(fp)
4080091c:	1080005c 	xori	r2,r2,1
40800920:	10803fcc 	andi	r2,r2,255
40800924:	10000226 	beq	r2,zero,40800930 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT+0x68>
  {
    //return((uint32_t) ret);
	  return false;
40800928:	0005883a 	mov	r2,zero
4080092c:	00000106 	br	40800934 <SIGMA_SAFELOAD_WRITE_TRANSFER_BIT+0x6c>
  }

  //return((uint32_t) 0);
  return true;
40800930:	00800044 	movi	r2,1
}
40800934:	e037883a 	mov	sp,fp
40800938:	dfc00117 	ldw	ra,4(sp)
4080093c:	df000017 	ldw	fp,0(sp)
40800940:	dec00204 	addi	sp,sp,8
40800944:	f800283a 	ret

40800948 <default_download_IC_1>:
/*
 * Default Download
 */
#define DEFAULT_DOWNLOAD_SIZE_IC_1 40

void default_download_IC_1() {
40800948:	defffe04 	addi	sp,sp,-8
4080094c:	dfc00115 	stw	ra,4(sp)
40800950:	df000015 	stw	fp,0(sp)
40800954:	d839883a 	mov	fp,sp
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R0_SAMPLE_RATE_SETTING_IC_1_Default );
40800958:	d1e00204 	addi	r7,gp,-32760
4080095c:	01800044 	movi	r6,1
40800960:	01503ac4 	movi	r5,16619
40800964:	01001c04 	movi	r4,112
40800968:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R1_DSP_RUN_REGISTER_IC_1_Default );
4080096c:	d1e02304 	addi	r7,gp,-32628
40800970:	01800044 	movi	r6,1
40800974:	01503d84 	movi	r5,16630
40800978:	01001c04 	movi	r4,112
4080097c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLKCTRLREGISTER_IC_1_ADDR, REG_CLKCTRLREGISTER_IC_1_BYTE, R2_CLKCTRLREGISTER_IC_1_Default );
40800980:	d1e00244 	addi	r7,gp,-32759
40800984:	01800044 	movi	r6,1
40800988:	01500004 	movi	r5,16384
4080098c:	01001c04 	movi	r4,112
40800990:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLLCRLREGISTER_IC_1_ADDR, REG_PLLCRLREGISTER_IC_1_BYTE, R3_PLLCRLREGISTER_IC_1_Default );
40800994:	d1e00284 	addi	r7,gp,-32758
40800998:	01800184 	movi	r6,6
4080099c:	01500084 	movi	r5,16386
408009a0:	01001c04 	movi	r4,112
408009a4:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_DELAY( DEVICE_ADDR_IC_1, R4_DELAY_IC_1_SIZE, R4_DELAY_IC_1_Default );
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_CONTROL_0_IC_1_ADDR , R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_SIZE, R5_SERIAL_PORT_CONTROL_REGISTERS_IC_1_Default );
408009a8:	d1e00484 	addi	r7,gp,-32750
408009ac:	01800084 	movi	r6,2
408009b0:	01500544 	movi	r5,16405
408009b4:	01001c04 	movi	r4,112
408009b8:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ALC_CONTROL_0_IC_1_ADDR , R6_ALC_CONTROL_REGISTERS_IC_1_SIZE, R6_ALC_CONTROL_REGISTERS_IC_1_Default );
408009bc:	d1e02344 	addi	r7,gp,-32627
408009c0:	01800104 	movi	r6,4
408009c4:	01500444 	movi	r5,16401
408009c8:	01001c04 	movi	r4,112
408009cc:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_MICCTRLREGISTER_IC_1_ADDR, REG_MICCTRLREGISTER_IC_1_BYTE, R7_MICCTRLREGISTER_IC_1_Default );
408009d0:	d1e02444 	addi	r7,gp,-32623
408009d4:	01800044 	movi	r6,1
408009d8:	01500204 	movi	r5,16392
408009dc:	01001c04 	movi	r4,112
408009e0:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_RECORD_PWR_MANAGEMENT_IC_1_ADDR , R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R8_RECORD_INPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
408009e4:	d1e00504 	addi	r7,gp,-32748
408009e8:	01800204 	movi	r6,8
408009ec:	01500244 	movi	r5,16393
408009f0:	01001c04 	movi	r4,112
408009f4:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ADC_CONTROL_0_IC_1_ADDR , R9_ADC_CONTROL_REGISTERS_IC_1_SIZE, R9_ADC_CONTROL_REGISTERS_IC_1_Default );
408009f8:	d1e00704 	addi	r7,gp,-32740
408009fc:	018000c4 	movi	r6,3
40800a00:	01500644 	movi	r5,16409
40800a04:	01001c04 	movi	r4,112
40800a08:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_PLAYBACK_MIXER_LEFT_CONTROL_0_IC_1_ADDR , R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_SIZE, R10_PLAYBACK_OUTPUT_SIGNAL_PATH_REGISTERS_IC_1_Default );
40800a0c:	01d02074 	movhi	r7,16513
40800a10:	39c77f44 	addi	r7,r7,7677
40800a14:	01800384 	movi	r6,14
40800a18:	01500704 	movi	r5,16412
40800a1c:	01001c04 	movi	r4,112
40800a20:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CONVERTER_CTRL_0_IC_1_ADDR , R11_CONVERTER_CONTROL_REGISTERS_IC_1_SIZE, R11_CONVERTER_CONTROL_REGISTERS_IC_1_Default );
40800a24:	d1e02484 	addi	r7,gp,-32622
40800a28:	01800084 	movi	r6,2
40800a2c:	015005c4 	movi	r5,16407
40800a30:	01001c04 	movi	r4,112
40800a34:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DAC_CONTROL_0_IC_1_ADDR , R12_DAC_CONTROL_REGISTERS_IC_1_SIZE, R12_DAC_CONTROL_REGISTERS_IC_1_Default );
40800a38:	d1e007c4 	addi	r7,gp,-32737
40800a3c:	018000c4 	movi	r6,3
40800a40:	01500a84 	movi	r5,16426
40800a44:	01001c04 	movi	r4,112
40800a48:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_PAD_CONTROL_0_IC_1_ADDR , R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R13_SERIAL_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
40800a4c:	d1e00884 	addi	r7,gp,-32734
40800a50:	01800044 	movi	r6,1
40800a54:	01500b44 	movi	r5,16429
40800a58:	01001c04 	movi	r4,112
40800a5c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_COMM_PORT_PAD_CTRL_0_IC_1_ADDR , R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_SIZE, R14_COMMUNICATION_PORT_PAD_CONTROL_REGISTERS_IC_1_Default );
40800a60:	d1e008c4 	addi	r7,gp,-32733
40800a64:	01800084 	movi	r6,2
40800a68:	01500bc4 	movi	r5,16431
40800a6c:	01001c04 	movi	r4,112
40800a70:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_JACKREGISTER_IC_1_ADDR, REG_JACKREGISTER_IC_1_BYTE, R15_JACKREGISTER_IC_1_Default );
40800a74:	d1e00944 	addi	r7,gp,-32731
40800a78:	01800044 	movi	r6,1
40800a7c:	01500c44 	movi	r5,16433
40800a80:	01001c04 	movi	r4,112
40800a84:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
40800a88:	01d02074 	movhi	r7,16513
40800a8c:	39c72c04 	addi	r7,r7,7344
40800a90:	01804744 	movi	r6,285
40800a94:	01420004 	movi	r5,2048
40800a98:	01001c04 	movi	r4,112
40800a9c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
40800aa0:	01d02074 	movhi	r7,16513
40800aa4:	39c72c04 	addi	r7,r7,7344
40800aa8:	01804744 	movi	r6,285
40800aac:	01420004 	movi	r5,2048
40800ab0:	01001c04 	movi	r4,112
40800ab4:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
40800ab8:	01d02074 	movhi	r7,16513
40800abc:	39c72c04 	addi	r7,r7,7344
40800ac0:	01804744 	movi	r6,285
40800ac4:	01420004 	movi	r5,2048
40800ac8:	01001c04 	movi	r4,112
40800acc:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
40800ad0:	01d02074 	movhi	r7,16513
40800ad4:	39c72c04 	addi	r7,r7,7344
40800ad8:	01804744 	movi	r6,285
40800adc:	01420004 	movi	r5,2048
40800ae0:	01001c04 	movi	r4,112
40800ae4:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
40800ae8:	01d02074 	movhi	r7,16513
40800aec:	39c72c04 	addi	r7,r7,7344
40800af0:	01804744 	movi	r6,285
40800af4:	01420004 	movi	r5,2048
40800af8:	01001c04 	movi	r4,112
40800afc:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_ENABLE_REGISTER_IC_1_ADDR, REG_DSP_ENABLE_REGISTER_IC_1_BYTE, R21_DSP_ENABLE_REGISTER_IC_1_Default );
40800b00:	d1e00984 	addi	r7,gp,-32730
40800b04:	01800044 	movi	r6,1
40800b08:	01503d44 	movi	r5,16629
40800b0c:	01001c04 	movi	r4,112
40800b10:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CRC_IDEAL_1_IC_1_ADDR , R22_CRC_REGISTERS_IC_1_SIZE, R22_CRC_REGISTERS_IC_1_Default );
40800b14:	d1e009c4 	addi	r7,gp,-32729
40800b18:	01800144 	movi	r6,5
40800b1c:	01503004 	movi	r5,16576
40800b20:	01001c04 	movi	r4,112
40800b24:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_GPIO_0_CONTROL_IC_1_ADDR , R23_GPIO_REGISTERS_IC_1_SIZE, R23_GPIO_REGISTERS_IC_1_Default );
40800b28:	d1e02504 	addi	r7,gp,-32620
40800b2c:	01800104 	movi	r6,4
40800b30:	01503184 	movi	r5,16582
40800b34:	01001c04 	movi	r4,112
40800b38:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_NON_MODULO_RAM_1_IC_1_ADDR , R24_NON_MODULO_REGISTERS_IC_1_SIZE, R24_NON_MODULO_REGISTERS_IC_1_Default );
40800b3c:	d1e00b04 	addi	r7,gp,-32724
40800b40:	01800084 	movi	r6,2
40800b44:	01503a44 	movi	r5,16617
40800b48:	01001c04 	movi	r4,112
40800b4c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_WATCHDOG_ENABLE_IC_1_ADDR , R25_WATCHDOG_REGISTERS_IC_1_SIZE, R25_WATCHDOG_REGISTERS_IC_1_Default );
40800b50:	d1e00b84 	addi	r7,gp,-32722
40800b54:	01800144 	movi	r6,5
40800b58:	01503404 	movi	r5,16592
40800b5c:	01001c04 	movi	r4,112
40800b60:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R26_SAMPLE_RATE_SETTING_IC_1_Default );
40800b64:	d1e00cc4 	addi	r7,gp,-32717
40800b68:	01800044 	movi	r6,1
40800b6c:	01503ac4 	movi	r5,16619
40800b70:	01001c04 	movi	r4,112
40800b74:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_INPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_INPUTS_IC_1_BYTE, R27_ROUTING_MATRIX_INPUTS_IC_1_Default );
40800b78:	d1e02604 	addi	r7,gp,-32616
40800b7c:	01800044 	movi	r6,1
40800b80:	01503c84 	movi	r5,16626
40800b84:	01001c04 	movi	r4,112
40800b88:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_ROUTING_MATRIX_OUTPUTS_IC_1_ADDR, REG_ROUTING_MATRIX_OUTPUTS_IC_1_BYTE, R28_ROUTING_MATRIX_OUTPUTS_IC_1_Default );
40800b8c:	d1e02644 	addi	r7,gp,-32615
40800b90:	01800044 	movi	r6,1
40800b94:	01503cc4 	movi	r5,16627
40800b98:	01001c04 	movi	r4,112
40800b9c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_ADDR, REG_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_BYTE, R29_SERIAL_DATAGPIO_PIN_CONFIG_IC_1_Default );
40800ba0:	d1e02684 	addi	r7,gp,-32614
40800ba4:	01800044 	movi	r6,1
40800ba8:	01503d04 	movi	r5,16628
40800bac:	01001c04 	movi	r4,112
40800bb0:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_SLEW_MODES_IC_1_ADDR, REG_DSP_SLEW_MODES_IC_1_BYTE, R30_DSP_SLEW_MODES_IC_1_Default );
40800bb4:	d1e026c4 	addi	r7,gp,-32613
40800bb8:	01800044 	movi	r6,1
40800bbc:	01503dc4 	movi	r5,16631
40800bc0:	01001c04 	movi	r4,112
40800bc4:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_BYTE, R31_SERIAL_PORT_SAMPLE_RATE_SETTING_IC_1_Default );
40800bc8:	d1e02704 	addi	r7,gp,-32612
40800bcc:	01800044 	movi	r6,1
40800bd0:	01503e04 	movi	r5,16632
40800bd4:	01001c04 	movi	r4,112
40800bd8:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_CLOCK_ENABLE_REG_0_IC_1_ADDR , R32_CLOCK_ENABLE_REGISTERS_IC_1_SIZE, R32_CLOCK_ENABLE_REGISTERS_IC_1_Default );
40800bdc:	d1e00d04 	addi	r7,gp,-32716
40800be0:	01800084 	movi	r6,2
40800be4:	01503e44 	movi	r5,16633
40800be8:	01001c04 	movi	r4,112
40800bec:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PROGRAM_ADDR_IC_1, PROGRAM_SIZE_IC_1, Program_Data_IC_1 );
40800bf0:	01d02074 	movhi	r7,16513
40800bf4:	39c72c04 	addi	r7,r7,7344
40800bf8:	01804744 	movi	r6,285
40800bfc:	01420004 	movi	r5,2048
40800c00:	01001c04 	movi	r4,112
40800c04:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, PARAM_ADDR_IC_1, PARAM_SIZE_IC_1, Param_Data_IC_1 );
40800c08:	01d02074 	movhi	r7,16513
40800c0c:	39c77344 	addi	r7,r7,7629
40800c10:	01800c04 	movi	r6,48
40800c14:	000b883a 	mov	r5,zero
40800c18:	01001c04 	movi	r4,112
40800c1c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, NON_MODULO_RAM_ADDR_IC_1, NON_MODULO_RAM_SIZE_IC_1, NON_MODULO_RAM_Data_IC_1 );
40800c20:	d1e00004 	addi	r7,gp,-32768
40800c24:	01800204 	movi	r6,8
40800c28:	0147ff84 	movi	r5,8190
40800c2c:	01001c04 	movi	r4,112
40800c30:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_SAMPLE_RATE_SETTING_IC_1_ADDR, REG_SAMPLE_RATE_SETTING_IC_1_BYTE, R36_SAMPLE_RATE_SETTING_IC_1_Default );
40800c34:	d1e00d84 	addi	r7,gp,-32714
40800c38:	01800044 	movi	r6,1
40800c3c:	01503ac4 	movi	r5,16619
40800c40:	01001c04 	movi	r4,112
40800c44:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DSP_RUN_REGISTER_IC_1_ADDR, REG_DSP_RUN_REGISTER_IC_1_BYTE, R37_DSP_RUN_REGISTER_IC_1_Default );
40800c48:	d1e00dc4 	addi	r7,gp,-32713
40800c4c:	01800044 	movi	r6,1
40800c50:	01503d84 	movi	r5,16630
40800c54:	01001c04 	movi	r4,112
40800c58:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R38_DEJITTER_REGISTER_CONTROL_IC_1_Default );
40800c5c:	d1e02744 	addi	r7,gp,-32611
40800c60:	01800044 	movi	r6,1
40800c64:	01500d84 	movi	r5,16438
40800c68:	01001c04 	movi	r4,112
40800c6c:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
	SIGMA_WRITE_REGISTER_BLOCK( DEVICE_ADDR_IC_1, REG_DEJITTER_REGISTER_CONTROL_IC_1_ADDR, REG_DEJITTER_REGISTER_CONTROL_IC_1_BYTE, R39_DEJITTER_REGISTER_CONTROL_IC_1_Default );
40800c70:	d1e00e04 	addi	r7,gp,-32712
40800c74:	01800044 	movi	r6,1
40800c78:	01500d84 	movi	r5,16438
40800c7c:	01001c04 	movi	r4,112
40800c80:	08006580 	call	40800658 <SIGMA_WRITE_REGISTER_BLOCK>
}
40800c84:	0001883a 	nop
40800c88:	e037883a 	mov	sp,fp
40800c8c:	dfc00117 	ldw	ra,4(sp)
40800c90:	df000017 	ldw	fp,0(sp)
40800c94:	dec00204 	addi	sp,sp,8
40800c98:	f800283a 	ret

40800c9c <main>:
int itest = 0;
float ftest = 0.0f;
double dtest = 0.0;

int main()
{
40800c9c:	defff804 	addi	sp,sp,-32
40800ca0:	dfc00715 	stw	ra,28(sp)
40800ca4:	df000615 	stw	fp,24(sp)
40800ca8:	dc000515 	stw	r16,20(sp)
40800cac:	df000604 	addi	fp,sp,24
	bool status = false;
40800cb0:	e03ffe05 	stb	zero,-8(fp)

	//I2C SCL
	//IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_2_BASE, 1);

	//CODEC RESET
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_4_BASE, 1);
40800cb4:	00c00044 	movi	r3,1
40800cb8:	00904234 	movhi	r2,16648
40800cbc:	10842104 	addi	r2,r2,4228
40800cc0:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 0);
40800cc4:	0007883a 	mov	r3,zero
40800cc8:	00904234 	movhi	r2,16648
40800ccc:	10842004 	addi	r2,r2,4224
40800cd0:	10c00035 	stwio	r3,0(r2)
	usleep(1000 * 20);
40800cd4:	01138804 	movi	r4,20000
40800cd8:	080df500 	call	4080df50 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PIO_4_BASE, 1);
40800cdc:	00c00044 	movi	r3,1
40800ce0:	00904234 	movhi	r2,16648
40800ce4:	10842004 	addi	r2,r2,4224
40800ce8:	10c00035 	stwio	r3,0(r2)

	//i2c_setup(0x00, 0xC7);
	i2c_setup(0x00, 0xB3);
40800cec:	01402cc4 	movi	r5,179
40800cf0:	0009883a 	mov	r4,zero
40800cf4:	080028c0 	call	4080028c <i2c_setup>
	//i2c_setup(0x00, 0x31);

	//status = i2c_start(0x70, 0x00);
	default_download_IC_1();
40800cf8:	08009480 	call	40800948 <default_download_IC_1>

	usleep(1000);
40800cfc:	0100fa04 	movi	r4,1000
40800d00:	080df500 	call	4080df50 <usleep>
	IOWR_ALTERA_AVALON_PIO_DIRECTION(PIO_4_BASE, 0);
40800d04:	0007883a 	mov	r3,zero
40800d08:	00904234 	movhi	r2,16648
40800d0c:	10842104 	addi	r2,r2,4228
40800d10:	10c00035 	stwio	r3,0(r2)

	itest++;
40800d14:	d0a02817 	ldw	r2,-32608(gp)
40800d18:	10800044 	addi	r2,r2,1
40800d1c:	d0a02815 	stw	r2,-32608(gp)
	ftest = 3.14f;
40800d20:	00901274 	movhi	r2,16457
40800d24:	10bd70c4 	addi	r2,r2,-2621
40800d28:	d0a02915 	stw	r2,-32604(gp)
	dtest = 3.141594;
40800d2c:	00823eb4 	movhi	r2,2298
40800d30:	109ea144 	addi	r2,r2,31365
40800d34:	d0a02a15 	stw	r2,-32600(gp)
40800d38:	00900274 	movhi	r2,16393
40800d3c:	10887f04 	addi	r2,r2,8700
40800d40:	d0a02b15 	stw	r2,-32596(gp)

  printf("Hello from Nios II! %d %f %lf\n", itest, ftest, dtest);
40800d44:	d4202817 	ldw	r16,-32608(gp)
40800d48:	d0a02917 	ldw	r2,-32604(gp)
40800d4c:	1009883a 	mov	r4,r2
40800d50:	0800dfc0 	call	40800dfc <__extendsfdf2>
40800d54:	1009883a 	mov	r4,r2
40800d58:	180b883a 	mov	r5,r3
40800d5c:	d0a02a17 	ldw	r2,-32600(gp)
40800d60:	d0e02b17 	ldw	r3,-32596(gp)
40800d64:	d8800015 	stw	r2,0(sp)
40800d68:	d8c00115 	stw	r3,4(sp)
40800d6c:	200d883a 	mov	r6,r4
40800d70:	280f883a 	mov	r7,r5
40800d74:	800b883a 	mov	r5,r16
40800d78:	01102074 	movhi	r4,16513
40800d7c:	21065c04 	addi	r4,r4,6512
40800d80:	08010c80 	call	408010c8 <printf>

  int test = 0;
40800d84:	e03ffc15 	stw	zero,-16(fp)

  while (true)
  {
	  switch (test)
40800d88:	e0bffc17 	ldw	r2,-16(fp)
40800d8c:	10000326 	beq	r2,zero,40800d9c <main+0x100>
40800d90:	10800060 	cmpeqi	r2,r2,1
40800d94:	1000081e 	bne	r2,zero,40800db8 <main+0x11c>
40800d98:	00000d06 	br	40800dd0 <main+0x134>
	  {
	  case 0:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0x01);
40800d9c:	00c00044 	movi	r3,1
40800da0:	00904234 	movhi	r2,16648
40800da4:	10842804 	addi	r2,r2,4256
40800da8:	10c00035 	stwio	r3,0(r2)
		  test = 1;
40800dac:	00800044 	movi	r2,1
40800db0:	e0bffc15 	stw	r2,-16(fp)
		  break;
40800db4:	00000606 	br	40800dd0 <main+0x134>
	  case 1:
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0x02);
40800db8:	00c00084 	movi	r3,2
40800dbc:	00904234 	movhi	r2,16648
40800dc0:	10842804 	addi	r2,r2,4256
40800dc4:	10c00035 	stwio	r3,0(r2)
		  test = 0;
40800dc8:	e03ffc15 	stw	zero,-16(fp)
		  break;
40800dcc:	0001883a 	nop
	  }

	  for (int i = 0; i < 1000; i++)
40800dd0:	e03ffd15 	stw	zero,-12(fp)
40800dd4:	00000506 	br	40800dec <main+0x150>
	  {
		  usleep(1000);
40800dd8:	0100fa04 	movi	r4,1000
40800ddc:	080df500 	call	4080df50 <usleep>
		  IOWR_ALTERA_AVALON_PIO_DATA(PIO_0_BASE, 0x02);
		  test = 0;
		  break;
	  }

	  for (int i = 0; i < 1000; i++)
40800de0:	e0bffd17 	ldw	r2,-12(fp)
40800de4:	10800044 	addi	r2,r2,1
40800de8:	e0bffd15 	stw	r2,-12(fp)
40800dec:	e0bffd17 	ldw	r2,-12(fp)
40800df0:	1080fa10 	cmplti	r2,r2,1000
40800df4:	103ff81e 	bne	r2,zero,40800dd8 <__alt_mem_onchip_flash_0_data+0xff7c0dd8>
	  {
		  usleep(1000);
	  }
  }
40800df8:	003fe306 	br	40800d88 <__alt_mem_onchip_flash_0_data+0xff7c0d88>

40800dfc <__extendsfdf2>:
40800dfc:	200ad5fa 	srli	r5,r4,23
40800e00:	defffd04 	addi	sp,sp,-12
40800e04:	dc400115 	stw	r17,4(sp)
40800e08:	29403fcc 	andi	r5,r5,255
40800e0c:	29800044 	addi	r6,r5,1
40800e10:	04402034 	movhi	r17,128
40800e14:	dc000015 	stw	r16,0(sp)
40800e18:	8c7fffc4 	addi	r17,r17,-1
40800e1c:	dfc00215 	stw	ra,8(sp)
40800e20:	31803fcc 	andi	r6,r6,255
40800e24:	00800044 	movi	r2,1
40800e28:	8922703a 	and	r17,r17,r4
40800e2c:	2020d7fa 	srli	r16,r4,31
40800e30:	1180110e 	bge	r2,r6,40800e78 <__extendsfdf2+0x7c>
40800e34:	880cd0fa 	srli	r6,r17,3
40800e38:	8822977a 	slli	r17,r17,29
40800e3c:	2940e004 	addi	r5,r5,896
40800e40:	2941ffcc 	andi	r5,r5,2047
40800e44:	2804953a 	slli	r2,r5,20
40800e48:	01400434 	movhi	r5,16
40800e4c:	800697fa 	slli	r3,r16,31
40800e50:	297fffc4 	addi	r5,r5,-1
40800e54:	314a703a 	and	r5,r6,r5
40800e58:	288ab03a 	or	r5,r5,r2
40800e5c:	28c6b03a 	or	r3,r5,r3
40800e60:	8805883a 	mov	r2,r17
40800e64:	dfc00217 	ldw	ra,8(sp)
40800e68:	dc400117 	ldw	r17,4(sp)
40800e6c:	dc000017 	ldw	r16,0(sp)
40800e70:	dec00304 	addi	sp,sp,12
40800e74:	f800283a 	ret
40800e78:	2800111e 	bne	r5,zero,40800ec0 <__extendsfdf2+0xc4>
40800e7c:	88001c26 	beq	r17,zero,40800ef0 <__extendsfdf2+0xf4>
40800e80:	8809883a 	mov	r4,r17
40800e84:	0800f0c0 	call	40800f0c <__clzsi2>
40800e88:	00c00284 	movi	r3,10
40800e8c:	18801b16 	blt	r3,r2,40800efc <__extendsfdf2+0x100>
40800e90:	018002c4 	movi	r6,11
40800e94:	308dc83a 	sub	r6,r6,r2
40800e98:	11000544 	addi	r4,r2,21
40800e9c:	8986d83a 	srl	r3,r17,r6
40800ea0:	8922983a 	sll	r17,r17,r4
40800ea4:	0180e244 	movi	r6,905
40800ea8:	01400434 	movhi	r5,16
40800eac:	3085c83a 	sub	r2,r6,r2
40800eb0:	297fffc4 	addi	r5,r5,-1
40800eb4:	194c703a 	and	r6,r3,r5
40800eb8:	1141ffcc 	andi	r5,r2,2047
40800ebc:	003fe006 	br	40800e40 <__alt_mem_onchip_flash_0_data+0xff7c0e40>
40800ec0:	88000826 	beq	r17,zero,40800ee4 <__extendsfdf2+0xe8>
40800ec4:	880cd0fa 	srli	r6,r17,3
40800ec8:	00800434 	movhi	r2,16
40800ecc:	10bfffc4 	addi	r2,r2,-1
40800ed0:	31800234 	orhi	r6,r6,8
40800ed4:	8822977a 	slli	r17,r17,29
40800ed8:	308c703a 	and	r6,r6,r2
40800edc:	0141ffc4 	movi	r5,2047
40800ee0:	003fd706 	br	40800e40 <__alt_mem_onchip_flash_0_data+0xff7c0e40>
40800ee4:	0141ffc4 	movi	r5,2047
40800ee8:	000d883a 	mov	r6,zero
40800eec:	003fd406 	br	40800e40 <__alt_mem_onchip_flash_0_data+0xff7c0e40>
40800ef0:	000b883a 	mov	r5,zero
40800ef4:	000d883a 	mov	r6,zero
40800ef8:	003fd106 	br	40800e40 <__alt_mem_onchip_flash_0_data+0xff7c0e40>
40800efc:	11bffd44 	addi	r6,r2,-11
40800f00:	8986983a 	sll	r3,r17,r6
40800f04:	0023883a 	mov	r17,zero
40800f08:	003fe606 	br	40800ea4 <__alt_mem_onchip_flash_0_data+0xff7c0ea4>

40800f0c <__clzsi2>:
40800f0c:	00bfffd4 	movui	r2,65535
40800f10:	11000536 	bltu	r2,r4,40800f28 <__clzsi2+0x1c>
40800f14:	00803fc4 	movi	r2,255
40800f18:	11000f36 	bltu	r2,r4,40800f58 <__clzsi2+0x4c>
40800f1c:	00800804 	movi	r2,32
40800f20:	0007883a 	mov	r3,zero
40800f24:	00000506 	br	40800f3c <__clzsi2+0x30>
40800f28:	00804034 	movhi	r2,256
40800f2c:	10bfffc4 	addi	r2,r2,-1
40800f30:	11000c2e 	bgeu	r2,r4,40800f64 <__clzsi2+0x58>
40800f34:	00800204 	movi	r2,8
40800f38:	00c00604 	movi	r3,24
40800f3c:	20c8d83a 	srl	r4,r4,r3
40800f40:	00d02074 	movhi	r3,16513
40800f44:	18c663c4 	addi	r3,r3,6543
40800f48:	1909883a 	add	r4,r3,r4
40800f4c:	20c00003 	ldbu	r3,0(r4)
40800f50:	10c5c83a 	sub	r2,r2,r3
40800f54:	f800283a 	ret
40800f58:	00800604 	movi	r2,24
40800f5c:	00c00204 	movi	r3,8
40800f60:	003ff606 	br	40800f3c <__alt_mem_onchip_flash_0_data+0xff7c0f3c>
40800f64:	00800404 	movi	r2,16
40800f68:	1007883a 	mov	r3,r2
40800f6c:	003ff306 	br	40800f3c <__alt_mem_onchip_flash_0_data+0xff7c0f3c>

40800f70 <memset>:
40800f70:	20c000cc 	andi	r3,r4,3
40800f74:	2005883a 	mov	r2,r4
40800f78:	18004426 	beq	r3,zero,4080108c <memset+0x11c>
40800f7c:	31ffffc4 	addi	r7,r6,-1
40800f80:	30004026 	beq	r6,zero,40801084 <memset+0x114>
40800f84:	2813883a 	mov	r9,r5
40800f88:	200d883a 	mov	r6,r4
40800f8c:	2007883a 	mov	r3,r4
40800f90:	00000406 	br	40800fa4 <memset+0x34>
40800f94:	3a3fffc4 	addi	r8,r7,-1
40800f98:	31800044 	addi	r6,r6,1
40800f9c:	38003926 	beq	r7,zero,40801084 <memset+0x114>
40800fa0:	400f883a 	mov	r7,r8
40800fa4:	18c00044 	addi	r3,r3,1
40800fa8:	32400005 	stb	r9,0(r6)
40800fac:	1a0000cc 	andi	r8,r3,3
40800fb0:	403ff81e 	bne	r8,zero,40800f94 <__alt_mem_onchip_flash_0_data+0xff7c0f94>
40800fb4:	010000c4 	movi	r4,3
40800fb8:	21c02d2e 	bgeu	r4,r7,40801070 <memset+0x100>
40800fbc:	29003fcc 	andi	r4,r5,255
40800fc0:	200c923a 	slli	r6,r4,8
40800fc4:	3108b03a 	or	r4,r6,r4
40800fc8:	200c943a 	slli	r6,r4,16
40800fcc:	218cb03a 	or	r6,r4,r6
40800fd0:	010003c4 	movi	r4,15
40800fd4:	21c0182e 	bgeu	r4,r7,40801038 <memset+0xc8>
40800fd8:	3b3ffc04 	addi	r12,r7,-16
40800fdc:	6018d13a 	srli	r12,r12,4
40800fe0:	1a000104 	addi	r8,r3,4
40800fe4:	1ac00204 	addi	r11,r3,8
40800fe8:	6008913a 	slli	r4,r12,4
40800fec:	1a800304 	addi	r10,r3,12
40800ff0:	1813883a 	mov	r9,r3
40800ff4:	21000504 	addi	r4,r4,20
40800ff8:	1909883a 	add	r4,r3,r4
40800ffc:	49800015 	stw	r6,0(r9)
40801000:	41800015 	stw	r6,0(r8)
40801004:	59800015 	stw	r6,0(r11)
40801008:	51800015 	stw	r6,0(r10)
4080100c:	42000404 	addi	r8,r8,16
40801010:	4a400404 	addi	r9,r9,16
40801014:	5ac00404 	addi	r11,r11,16
40801018:	52800404 	addi	r10,r10,16
4080101c:	413ff71e 	bne	r8,r4,40800ffc <__alt_mem_onchip_flash_0_data+0xff7c0ffc>
40801020:	63000044 	addi	r12,r12,1
40801024:	6018913a 	slli	r12,r12,4
40801028:	39c003cc 	andi	r7,r7,15
4080102c:	010000c4 	movi	r4,3
40801030:	1b07883a 	add	r3,r3,r12
40801034:	21c00e2e 	bgeu	r4,r7,40801070 <memset+0x100>
40801038:	1813883a 	mov	r9,r3
4080103c:	3811883a 	mov	r8,r7
40801040:	010000c4 	movi	r4,3
40801044:	49800015 	stw	r6,0(r9)
40801048:	423fff04 	addi	r8,r8,-4
4080104c:	4a400104 	addi	r9,r9,4
40801050:	223ffc36 	bltu	r4,r8,40801044 <__alt_mem_onchip_flash_0_data+0xff7c1044>
40801054:	393fff04 	addi	r4,r7,-4
40801058:	2008d0ba 	srli	r4,r4,2
4080105c:	39c000cc 	andi	r7,r7,3
40801060:	21000044 	addi	r4,r4,1
40801064:	2109883a 	add	r4,r4,r4
40801068:	2109883a 	add	r4,r4,r4
4080106c:	1907883a 	add	r3,r3,r4
40801070:	38000526 	beq	r7,zero,40801088 <memset+0x118>
40801074:	19cf883a 	add	r7,r3,r7
40801078:	19400005 	stb	r5,0(r3)
4080107c:	18c00044 	addi	r3,r3,1
40801080:	38fffd1e 	bne	r7,r3,40801078 <__alt_mem_onchip_flash_0_data+0xff7c1078>
40801084:	f800283a 	ret
40801088:	f800283a 	ret
4080108c:	2007883a 	mov	r3,r4
40801090:	300f883a 	mov	r7,r6
40801094:	003fc706 	br	40800fb4 <__alt_mem_onchip_flash_0_data+0xff7c0fb4>

40801098 <_printf_r>:
40801098:	defffd04 	addi	sp,sp,-12
4080109c:	2805883a 	mov	r2,r5
408010a0:	dfc00015 	stw	ra,0(sp)
408010a4:	d9800115 	stw	r6,4(sp)
408010a8:	d9c00215 	stw	r7,8(sp)
408010ac:	21400217 	ldw	r5,8(r4)
408010b0:	d9c00104 	addi	r7,sp,4
408010b4:	100d883a 	mov	r6,r2
408010b8:	08012700 	call	40801270 <___vfprintf_internal_r>
408010bc:	dfc00017 	ldw	ra,0(sp)
408010c0:	dec00304 	addi	sp,sp,12
408010c4:	f800283a 	ret

408010c8 <printf>:
408010c8:	defffc04 	addi	sp,sp,-16
408010cc:	dfc00015 	stw	ra,0(sp)
408010d0:	d9400115 	stw	r5,4(sp)
408010d4:	d9800215 	stw	r6,8(sp)
408010d8:	d9c00315 	stw	r7,12(sp)
408010dc:	00902074 	movhi	r2,16513
408010e0:	108eaf04 	addi	r2,r2,15036
408010e4:	10800017 	ldw	r2,0(r2)
408010e8:	200b883a 	mov	r5,r4
408010ec:	d9800104 	addi	r6,sp,4
408010f0:	11000217 	ldw	r4,8(r2)
408010f4:	08034680 	call	40803468 <__vfprintf_internal>
408010f8:	dfc00017 	ldw	ra,0(sp)
408010fc:	dec00404 	addi	sp,sp,16
40801100:	f800283a 	ret

40801104 <_puts_r>:
40801104:	defff604 	addi	sp,sp,-40
40801108:	dc000715 	stw	r16,28(sp)
4080110c:	2021883a 	mov	r16,r4
40801110:	2809883a 	mov	r4,r5
40801114:	dc400815 	stw	r17,32(sp)
40801118:	dfc00915 	stw	ra,36(sp)
4080111c:	2823883a 	mov	r17,r5
40801120:	08011d80 	call	408011d8 <strlen>
40801124:	10c00044 	addi	r3,r2,1
40801128:	d8800115 	stw	r2,4(sp)
4080112c:	00902074 	movhi	r2,16513
40801130:	1086a404 	addi	r2,r2,6800
40801134:	d8800215 	stw	r2,8(sp)
40801138:	00800044 	movi	r2,1
4080113c:	d8800315 	stw	r2,12(sp)
40801140:	00800084 	movi	r2,2
40801144:	dc400015 	stw	r17,0(sp)
40801148:	d8c00615 	stw	r3,24(sp)
4080114c:	dec00415 	stw	sp,16(sp)
40801150:	d8800515 	stw	r2,20(sp)
40801154:	80000226 	beq	r16,zero,40801160 <_puts_r+0x5c>
40801158:	80800e17 	ldw	r2,56(r16)
4080115c:	10001426 	beq	r2,zero,408011b0 <_puts_r+0xac>
40801160:	81400217 	ldw	r5,8(r16)
40801164:	2880030b 	ldhu	r2,12(r5)
40801168:	10c8000c 	andi	r3,r2,8192
4080116c:	1800061e 	bne	r3,zero,40801188 <_puts_r+0x84>
40801170:	29001917 	ldw	r4,100(r5)
40801174:	00f7ffc4 	movi	r3,-8193
40801178:	10880014 	ori	r2,r2,8192
4080117c:	20c6703a 	and	r3,r4,r3
40801180:	2880030d 	sth	r2,12(r5)
40801184:	28c01915 	stw	r3,100(r5)
40801188:	d9800404 	addi	r6,sp,16
4080118c:	8009883a 	mov	r4,r16
40801190:	08059980 	call	40805998 <__sfvwrite_r>
40801194:	1000091e 	bne	r2,zero,408011bc <_puts_r+0xb8>
40801198:	00800284 	movi	r2,10
4080119c:	dfc00917 	ldw	ra,36(sp)
408011a0:	dc400817 	ldw	r17,32(sp)
408011a4:	dc000717 	ldw	r16,28(sp)
408011a8:	dec00a04 	addi	sp,sp,40
408011ac:	f800283a 	ret
408011b0:	8009883a 	mov	r4,r16
408011b4:	08055140 	call	40805514 <__sinit>
408011b8:	003fe906 	br	40801160 <__alt_mem_onchip_flash_0_data+0xff7c1160>
408011bc:	00bfffc4 	movi	r2,-1
408011c0:	003ff606 	br	4080119c <__alt_mem_onchip_flash_0_data+0xff7c119c>

408011c4 <puts>:
408011c4:	00902074 	movhi	r2,16513
408011c8:	108eaf04 	addi	r2,r2,15036
408011cc:	200b883a 	mov	r5,r4
408011d0:	11000017 	ldw	r4,0(r2)
408011d4:	08011041 	jmpi	40801104 <_puts_r>

408011d8 <strlen>:
408011d8:	208000cc 	andi	r2,r4,3
408011dc:	10002026 	beq	r2,zero,40801260 <strlen+0x88>
408011e0:	20800007 	ldb	r2,0(r4)
408011e4:	10002026 	beq	r2,zero,40801268 <strlen+0x90>
408011e8:	2005883a 	mov	r2,r4
408011ec:	00000206 	br	408011f8 <strlen+0x20>
408011f0:	10c00007 	ldb	r3,0(r2)
408011f4:	18001826 	beq	r3,zero,40801258 <strlen+0x80>
408011f8:	10800044 	addi	r2,r2,1
408011fc:	10c000cc 	andi	r3,r2,3
40801200:	183ffb1e 	bne	r3,zero,408011f0 <__alt_mem_onchip_flash_0_data+0xff7c11f0>
40801204:	10c00017 	ldw	r3,0(r2)
40801208:	01ffbff4 	movhi	r7,65279
4080120c:	39ffbfc4 	addi	r7,r7,-257
40801210:	00ca303a 	nor	r5,zero,r3
40801214:	01a02074 	movhi	r6,32897
40801218:	19c7883a 	add	r3,r3,r7
4080121c:	31a02004 	addi	r6,r6,-32640
40801220:	1946703a 	and	r3,r3,r5
40801224:	1986703a 	and	r3,r3,r6
40801228:	1800091e 	bne	r3,zero,40801250 <strlen+0x78>
4080122c:	10800104 	addi	r2,r2,4
40801230:	10c00017 	ldw	r3,0(r2)
40801234:	19cb883a 	add	r5,r3,r7
40801238:	00c6303a 	nor	r3,zero,r3
4080123c:	28c6703a 	and	r3,r5,r3
40801240:	1986703a 	and	r3,r3,r6
40801244:	183ff926 	beq	r3,zero,4080122c <__alt_mem_onchip_flash_0_data+0xff7c122c>
40801248:	00000106 	br	40801250 <strlen+0x78>
4080124c:	10800044 	addi	r2,r2,1
40801250:	10c00007 	ldb	r3,0(r2)
40801254:	183ffd1e 	bne	r3,zero,4080124c <__alt_mem_onchip_flash_0_data+0xff7c124c>
40801258:	1105c83a 	sub	r2,r2,r4
4080125c:	f800283a 	ret
40801260:	2005883a 	mov	r2,r4
40801264:	003fe706 	br	40801204 <__alt_mem_onchip_flash_0_data+0xff7c1204>
40801268:	0005883a 	mov	r2,zero
4080126c:	f800283a 	ret

40801270 <___vfprintf_internal_r>:
40801270:	deffb804 	addi	sp,sp,-288
40801274:	dfc04715 	stw	ra,284(sp)
40801278:	ddc04515 	stw	r23,276(sp)
4080127c:	dd404315 	stw	r21,268(sp)
40801280:	d9002c15 	stw	r4,176(sp)
40801284:	282f883a 	mov	r23,r5
40801288:	302b883a 	mov	r21,r6
4080128c:	d9c02d15 	stw	r7,180(sp)
40801290:	df004615 	stw	fp,280(sp)
40801294:	dd804415 	stw	r22,272(sp)
40801298:	dd004215 	stw	r20,264(sp)
4080129c:	dcc04115 	stw	r19,260(sp)
408012a0:	dc804015 	stw	r18,256(sp)
408012a4:	dc403f15 	stw	r17,252(sp)
408012a8:	dc003e15 	stw	r16,248(sp)
408012ac:	08060880 	call	40806088 <_localeconv_r>
408012b0:	10800017 	ldw	r2,0(r2)
408012b4:	1009883a 	mov	r4,r2
408012b8:	d8803415 	stw	r2,208(sp)
408012bc:	08011d80 	call	408011d8 <strlen>
408012c0:	d8803715 	stw	r2,220(sp)
408012c4:	d8802c17 	ldw	r2,176(sp)
408012c8:	10000226 	beq	r2,zero,408012d4 <___vfprintf_internal_r+0x64>
408012cc:	10800e17 	ldw	r2,56(r2)
408012d0:	1000f926 	beq	r2,zero,408016b8 <___vfprintf_internal_r+0x448>
408012d4:	b880030b 	ldhu	r2,12(r23)
408012d8:	10c8000c 	andi	r3,r2,8192
408012dc:	1800061e 	bne	r3,zero,408012f8 <___vfprintf_internal_r+0x88>
408012e0:	b9001917 	ldw	r4,100(r23)
408012e4:	00f7ffc4 	movi	r3,-8193
408012e8:	10880014 	ori	r2,r2,8192
408012ec:	20c6703a 	and	r3,r4,r3
408012f0:	b880030d 	sth	r2,12(r23)
408012f4:	b8c01915 	stw	r3,100(r23)
408012f8:	10c0020c 	andi	r3,r2,8
408012fc:	1800c126 	beq	r3,zero,40801604 <___vfprintf_internal_r+0x394>
40801300:	b8c00417 	ldw	r3,16(r23)
40801304:	1800bf26 	beq	r3,zero,40801604 <___vfprintf_internal_r+0x394>
40801308:	1080068c 	andi	r2,r2,26
4080130c:	00c00284 	movi	r3,10
40801310:	10c0c426 	beq	r2,r3,40801624 <___vfprintf_internal_r+0x3b4>
40801314:	d8c00404 	addi	r3,sp,16
40801318:	05102074 	movhi	r20,16513
4080131c:	d9001e04 	addi	r4,sp,120
40801320:	a506b584 	addi	r20,r20,6870
40801324:	d8c01e15 	stw	r3,120(sp)
40801328:	d8002015 	stw	zero,128(sp)
4080132c:	d8001f15 	stw	zero,124(sp)
40801330:	d8003315 	stw	zero,204(sp)
40801334:	d8003615 	stw	zero,216(sp)
40801338:	d8003815 	stw	zero,224(sp)
4080133c:	1811883a 	mov	r8,r3
40801340:	d8003915 	stw	zero,228(sp)
40801344:	d8003a15 	stw	zero,232(sp)
40801348:	d8002f15 	stw	zero,188(sp)
4080134c:	d9002815 	stw	r4,160(sp)
40801350:	a8800007 	ldb	r2,0(r21)
40801354:	10027b26 	beq	r2,zero,40801d44 <___vfprintf_internal_r+0xad4>
40801358:	00c00944 	movi	r3,37
4080135c:	a821883a 	mov	r16,r21
40801360:	10c0021e 	bne	r2,r3,4080136c <___vfprintf_internal_r+0xfc>
40801364:	00001406 	br	408013b8 <___vfprintf_internal_r+0x148>
40801368:	10c00326 	beq	r2,r3,40801378 <___vfprintf_internal_r+0x108>
4080136c:	84000044 	addi	r16,r16,1
40801370:	80800007 	ldb	r2,0(r16)
40801374:	103ffc1e 	bne	r2,zero,40801368 <__alt_mem_onchip_flash_0_data+0xff7c1368>
40801378:	8563c83a 	sub	r17,r16,r21
4080137c:	88000e26 	beq	r17,zero,408013b8 <___vfprintf_internal_r+0x148>
40801380:	d8c02017 	ldw	r3,128(sp)
40801384:	d8801f17 	ldw	r2,124(sp)
40801388:	45400015 	stw	r21,0(r8)
4080138c:	1c47883a 	add	r3,r3,r17
40801390:	10800044 	addi	r2,r2,1
40801394:	d8c02015 	stw	r3,128(sp)
40801398:	44400115 	stw	r17,4(r8)
4080139c:	d8801f15 	stw	r2,124(sp)
408013a0:	00c001c4 	movi	r3,7
408013a4:	1880a716 	blt	r3,r2,40801644 <___vfprintf_internal_r+0x3d4>
408013a8:	42000204 	addi	r8,r8,8
408013ac:	d9402f17 	ldw	r5,188(sp)
408013b0:	2c4b883a 	add	r5,r5,r17
408013b4:	d9402f15 	stw	r5,188(sp)
408013b8:	80800007 	ldb	r2,0(r16)
408013bc:	1000a826 	beq	r2,zero,40801660 <___vfprintf_internal_r+0x3f0>
408013c0:	84400047 	ldb	r17,1(r16)
408013c4:	00bfffc4 	movi	r2,-1
408013c8:	85400044 	addi	r21,r16,1
408013cc:	d8002785 	stb	zero,158(sp)
408013d0:	0007883a 	mov	r3,zero
408013d4:	000f883a 	mov	r7,zero
408013d8:	d8802915 	stw	r2,164(sp)
408013dc:	d8003115 	stw	zero,196(sp)
408013e0:	0025883a 	mov	r18,zero
408013e4:	01401604 	movi	r5,88
408013e8:	01800244 	movi	r6,9
408013ec:	02800a84 	movi	r10,42
408013f0:	02401b04 	movi	r9,108
408013f4:	ad400044 	addi	r21,r21,1
408013f8:	88bff804 	addi	r2,r17,-32
408013fc:	28830436 	bltu	r5,r2,40802010 <___vfprintf_internal_r+0xda0>
40801400:	100490ba 	slli	r2,r2,2
40801404:	01102034 	movhi	r4,16512
40801408:	21050604 	addi	r4,r4,5144
4080140c:	1105883a 	add	r2,r2,r4
40801410:	10800017 	ldw	r2,0(r2)
40801414:	1000683a 	jmp	r2
40801418:	40801f30 	cmpltui	r2,r8,124
4080141c:	40802010 	cmplti	r2,r8,128
40801420:	40802010 	cmplti	r2,r8,128
40801424:	40801f50 	cmplti	r2,r8,125
40801428:	40802010 	cmplti	r2,r8,128
4080142c:	40802010 	cmplti	r2,r8,128
40801430:	40802010 	cmplti	r2,r8,128
40801434:	40802010 	cmplti	r2,r8,128
40801438:	40802010 	cmplti	r2,r8,128
4080143c:	40802010 	cmplti	r2,r8,128
40801440:	408016c4 	addi	r2,r8,91
40801444:	40801e6c 	andhi	r2,r8,121
40801448:	40802010 	cmplti	r2,r8,128
4080144c:	4080158c 	andi	r2,r8,86
40801450:	408016ec 	andhi	r2,r8,91
40801454:	40802010 	cmplti	r2,r8,128
40801458:	4080172c 	andhi	r2,r8,92
4080145c:	40801738 	rdprs	r2,r8,92
40801460:	40801738 	rdprs	r2,r8,92
40801464:	40801738 	rdprs	r2,r8,92
40801468:	40801738 	rdprs	r2,r8,92
4080146c:	40801738 	rdprs	r2,r8,92
40801470:	40801738 	rdprs	r2,r8,92
40801474:	40801738 	rdprs	r2,r8,92
40801478:	40801738 	rdprs	r2,r8,92
4080147c:	40801738 	rdprs	r2,r8,92
40801480:	40802010 	cmplti	r2,r8,128
40801484:	40802010 	cmplti	r2,r8,128
40801488:	40802010 	cmplti	r2,r8,128
4080148c:	40802010 	cmplti	r2,r8,128
40801490:	40802010 	cmplti	r2,r8,128
40801494:	40802010 	cmplti	r2,r8,128
40801498:	40802010 	cmplti	r2,r8,128
4080149c:	40802010 	cmplti	r2,r8,128
408014a0:	40802010 	cmplti	r2,r8,128
408014a4:	40802010 	cmplti	r2,r8,128
408014a8:	4080176c 	andhi	r2,r8,93
408014ac:	40801828 	cmpgeui	r2,r8,96
408014b0:	40802010 	cmplti	r2,r8,128
408014b4:	40801828 	cmpgeui	r2,r8,96
408014b8:	40802010 	cmplti	r2,r8,128
408014bc:	40802010 	cmplti	r2,r8,128
408014c0:	40802010 	cmplti	r2,r8,128
408014c4:	40802010 	cmplti	r2,r8,128
408014c8:	408018c8 	cmpgei	r2,r8,99
408014cc:	40802010 	cmplti	r2,r8,128
408014d0:	40802010 	cmplti	r2,r8,128
408014d4:	408018d4 	ori	r2,r8,99
408014d8:	40802010 	cmplti	r2,r8,128
408014dc:	40802010 	cmplti	r2,r8,128
408014e0:	40802010 	cmplti	r2,r8,128
408014e4:	40802010 	cmplti	r2,r8,128
408014e8:	40802010 	cmplti	r2,r8,128
408014ec:	40801d4c 	andi	r2,r8,117
408014f0:	40802010 	cmplti	r2,r8,128
408014f4:	40802010 	cmplti	r2,r8,128
408014f8:	40801dac 	andhi	r2,r8,118
408014fc:	40802010 	cmplti	r2,r8,128
40801500:	40802010 	cmplti	r2,r8,128
40801504:	40802010 	cmplti	r2,r8,128
40801508:	40802010 	cmplti	r2,r8,128
4080150c:	40802010 	cmplti	r2,r8,128
40801510:	40802010 	cmplti	r2,r8,128
40801514:	40802010 	cmplti	r2,r8,128
40801518:	40802010 	cmplti	r2,r8,128
4080151c:	40802010 	cmplti	r2,r8,128
40801520:	40802010 	cmplti	r2,r8,128
40801524:	40801fbc 	xorhi	r2,r8,126
40801528:	40801f5c 	xori	r2,r8,125
4080152c:	40801828 	cmpgeui	r2,r8,96
40801530:	40801828 	cmpgeui	r2,r8,96
40801534:	40801828 	cmpgeui	r2,r8,96
40801538:	40801f6c 	andhi	r2,r8,125
4080153c:	40801f5c 	xori	r2,r8,125
40801540:	40802010 	cmplti	r2,r8,128
40801544:	40802010 	cmplti	r2,r8,128
40801548:	40801f78 	rdprs	r2,r8,125
4080154c:	40802010 	cmplti	r2,r8,128
40801550:	40801f88 	cmpgei	r2,r8,126
40801554:	40801e5c 	xori	r2,r8,121
40801558:	40801598 	cmpnei	r2,r8,86
4080155c:	40801e7c 	xorhi	r2,r8,121
40801560:	40802010 	cmplti	r2,r8,128
40801564:	40801e88 	cmpgei	r2,r8,122
40801568:	40802010 	cmplti	r2,r8,128
4080156c:	40801ee4 	muli	r2,r8,123
40801570:	40802010 	cmplti	r2,r8,128
40801574:	40802010 	cmplti	r2,r8,128
40801578:	40801ef4 	orhi	r2,r8,123
4080157c:	d9003117 	ldw	r4,196(sp)
40801580:	d8802d15 	stw	r2,180(sp)
40801584:	0109c83a 	sub	r4,zero,r4
40801588:	d9003115 	stw	r4,196(sp)
4080158c:	94800114 	ori	r18,r18,4
40801590:	ac400007 	ldb	r17,0(r21)
40801594:	003f9706 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801598:	00800c04 	movi	r2,48
4080159c:	d9002d17 	ldw	r4,180(sp)
408015a0:	d9402917 	ldw	r5,164(sp)
408015a4:	d8802705 	stb	r2,156(sp)
408015a8:	00801e04 	movi	r2,120
408015ac:	d8802745 	stb	r2,157(sp)
408015b0:	d8002785 	stb	zero,158(sp)
408015b4:	20c00104 	addi	r3,r4,4
408015b8:	24c00017 	ldw	r19,0(r4)
408015bc:	002d883a 	mov	r22,zero
408015c0:	90800094 	ori	r2,r18,2
408015c4:	28029a16 	blt	r5,zero,40802030 <___vfprintf_internal_r+0xdc0>
408015c8:	00bfdfc4 	movi	r2,-129
408015cc:	90a4703a 	and	r18,r18,r2
408015d0:	d8c02d15 	stw	r3,180(sp)
408015d4:	94800094 	ori	r18,r18,2
408015d8:	9802871e 	bne	r19,zero,40801ff8 <___vfprintf_internal_r+0xd88>
408015dc:	00902074 	movhi	r2,16513
408015e0:	1086ae04 	addi	r2,r2,6840
408015e4:	d8803915 	stw	r2,228(sp)
408015e8:	04401e04 	movi	r17,120
408015ec:	d8802917 	ldw	r2,164(sp)
408015f0:	0039883a 	mov	fp,zero
408015f4:	1001e926 	beq	r2,zero,40801d9c <___vfprintf_internal_r+0xb2c>
408015f8:	0027883a 	mov	r19,zero
408015fc:	002d883a 	mov	r22,zero
40801600:	00020506 	br	40801e18 <___vfprintf_internal_r+0xba8>
40801604:	d9002c17 	ldw	r4,176(sp)
40801608:	b80b883a 	mov	r5,r23
4080160c:	08035400 	call	40803540 <__swsetup_r>
40801610:	1005ac1e 	bne	r2,zero,40802cc4 <___vfprintf_internal_r+0x1a54>
40801614:	b880030b 	ldhu	r2,12(r23)
40801618:	00c00284 	movi	r3,10
4080161c:	1080068c 	andi	r2,r2,26
40801620:	10ff3c1e 	bne	r2,r3,40801314 <__alt_mem_onchip_flash_0_data+0xff7c1314>
40801624:	b880038f 	ldh	r2,14(r23)
40801628:	103f3a16 	blt	r2,zero,40801314 <__alt_mem_onchip_flash_0_data+0xff7c1314>
4080162c:	d9c02d17 	ldw	r7,180(sp)
40801630:	d9002c17 	ldw	r4,176(sp)
40801634:	a80d883a 	mov	r6,r21
40801638:	b80b883a 	mov	r5,r23
4080163c:	08034840 	call	40803484 <__sbprintf>
40801640:	00001106 	br	40801688 <___vfprintf_internal_r+0x418>
40801644:	d9002c17 	ldw	r4,176(sp)
40801648:	d9801e04 	addi	r6,sp,120
4080164c:	b80b883a 	mov	r5,r23
40801650:	08087440 	call	40808744 <__sprint_r>
40801654:	1000081e 	bne	r2,zero,40801678 <___vfprintf_internal_r+0x408>
40801658:	da000404 	addi	r8,sp,16
4080165c:	003f5306 	br	408013ac <__alt_mem_onchip_flash_0_data+0xff7c13ac>
40801660:	d8802017 	ldw	r2,128(sp)
40801664:	10000426 	beq	r2,zero,40801678 <___vfprintf_internal_r+0x408>
40801668:	d9002c17 	ldw	r4,176(sp)
4080166c:	d9801e04 	addi	r6,sp,120
40801670:	b80b883a 	mov	r5,r23
40801674:	08087440 	call	40808744 <__sprint_r>
40801678:	b880030b 	ldhu	r2,12(r23)
4080167c:	1080100c 	andi	r2,r2,64
40801680:	1005901e 	bne	r2,zero,40802cc4 <___vfprintf_internal_r+0x1a54>
40801684:	d8802f17 	ldw	r2,188(sp)
40801688:	dfc04717 	ldw	ra,284(sp)
4080168c:	df004617 	ldw	fp,280(sp)
40801690:	ddc04517 	ldw	r23,276(sp)
40801694:	dd804417 	ldw	r22,272(sp)
40801698:	dd404317 	ldw	r21,268(sp)
4080169c:	dd004217 	ldw	r20,264(sp)
408016a0:	dcc04117 	ldw	r19,260(sp)
408016a4:	dc804017 	ldw	r18,256(sp)
408016a8:	dc403f17 	ldw	r17,252(sp)
408016ac:	dc003e17 	ldw	r16,248(sp)
408016b0:	dec04804 	addi	sp,sp,288
408016b4:	f800283a 	ret
408016b8:	d9002c17 	ldw	r4,176(sp)
408016bc:	08055140 	call	40805514 <__sinit>
408016c0:	003f0406 	br	408012d4 <__alt_mem_onchip_flash_0_data+0xff7c12d4>
408016c4:	d8802d17 	ldw	r2,180(sp)
408016c8:	d9002d17 	ldw	r4,180(sp)
408016cc:	10800017 	ldw	r2,0(r2)
408016d0:	d8803115 	stw	r2,196(sp)
408016d4:	20800104 	addi	r2,r4,4
408016d8:	d9003117 	ldw	r4,196(sp)
408016dc:	203fa716 	blt	r4,zero,4080157c <__alt_mem_onchip_flash_0_data+0xff7c157c>
408016e0:	d8802d15 	stw	r2,180(sp)
408016e4:	ac400007 	ldb	r17,0(r21)
408016e8:	003f4206 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
408016ec:	ac400007 	ldb	r17,0(r21)
408016f0:	aac00044 	addi	r11,r21,1
408016f4:	8a872826 	beq	r17,r10,40803398 <___vfprintf_internal_r+0x2128>
408016f8:	88bff404 	addi	r2,r17,-48
408016fc:	0009883a 	mov	r4,zero
40801700:	30867d36 	bltu	r6,r2,408030f8 <___vfprintf_internal_r+0x1e88>
40801704:	5c400007 	ldb	r17,0(r11)
40801708:	210002a4 	muli	r4,r4,10
4080170c:	5d400044 	addi	r21,r11,1
40801710:	a817883a 	mov	r11,r21
40801714:	2089883a 	add	r4,r4,r2
40801718:	88bff404 	addi	r2,r17,-48
4080171c:	30bff92e 	bgeu	r6,r2,40801704 <__alt_mem_onchip_flash_0_data+0xff7c1704>
40801720:	2005c916 	blt	r4,zero,40802e48 <___vfprintf_internal_r+0x1bd8>
40801724:	d9002915 	stw	r4,164(sp)
40801728:	003f3306 	br	408013f8 <__alt_mem_onchip_flash_0_data+0xff7c13f8>
4080172c:	94802014 	ori	r18,r18,128
40801730:	ac400007 	ldb	r17,0(r21)
40801734:	003f2f06 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801738:	a809883a 	mov	r4,r21
4080173c:	d8003115 	stw	zero,196(sp)
40801740:	88bff404 	addi	r2,r17,-48
40801744:	0017883a 	mov	r11,zero
40801748:	24400007 	ldb	r17,0(r4)
4080174c:	5ac002a4 	muli	r11,r11,10
40801750:	ad400044 	addi	r21,r21,1
40801754:	a809883a 	mov	r4,r21
40801758:	12d7883a 	add	r11,r2,r11
4080175c:	88bff404 	addi	r2,r17,-48
40801760:	30bff92e 	bgeu	r6,r2,40801748 <__alt_mem_onchip_flash_0_data+0xff7c1748>
40801764:	dac03115 	stw	r11,196(sp)
40801768:	003f2306 	br	408013f8 <__alt_mem_onchip_flash_0_data+0xff7c13f8>
4080176c:	18c03fcc 	andi	r3,r3,255
40801770:	18072b1e 	bne	r3,zero,40803420 <___vfprintf_internal_r+0x21b0>
40801774:	94800414 	ori	r18,r18,16
40801778:	9080080c 	andi	r2,r18,32
4080177c:	10037b26 	beq	r2,zero,4080256c <___vfprintf_internal_r+0x12fc>
40801780:	d9402d17 	ldw	r5,180(sp)
40801784:	28800117 	ldw	r2,4(r5)
40801788:	2cc00017 	ldw	r19,0(r5)
4080178c:	29400204 	addi	r5,r5,8
40801790:	d9402d15 	stw	r5,180(sp)
40801794:	102d883a 	mov	r22,r2
40801798:	10044b16 	blt	r2,zero,408028c8 <___vfprintf_internal_r+0x1658>
4080179c:	d9402917 	ldw	r5,164(sp)
408017a0:	df002783 	ldbu	fp,158(sp)
408017a4:	2803bc16 	blt	r5,zero,40802698 <___vfprintf_internal_r+0x1428>
408017a8:	00ffdfc4 	movi	r3,-129
408017ac:	9d84b03a 	or	r2,r19,r22
408017b0:	90e4703a 	and	r18,r18,r3
408017b4:	10017726 	beq	r2,zero,40801d94 <___vfprintf_internal_r+0xb24>
408017b8:	b0038326 	beq	r22,zero,408025c8 <___vfprintf_internal_r+0x1358>
408017bc:	dc402a15 	stw	r17,168(sp)
408017c0:	dc001e04 	addi	r16,sp,120
408017c4:	b023883a 	mov	r17,r22
408017c8:	402d883a 	mov	r22,r8
408017cc:	9809883a 	mov	r4,r19
408017d0:	880b883a 	mov	r5,r17
408017d4:	01800284 	movi	r6,10
408017d8:	000f883a 	mov	r7,zero
408017dc:	080ab3c0 	call	4080ab3c <__umoddi3>
408017e0:	10800c04 	addi	r2,r2,48
408017e4:	843fffc4 	addi	r16,r16,-1
408017e8:	9809883a 	mov	r4,r19
408017ec:	880b883a 	mov	r5,r17
408017f0:	80800005 	stb	r2,0(r16)
408017f4:	01800284 	movi	r6,10
408017f8:	000f883a 	mov	r7,zero
408017fc:	080a5c40 	call	4080a5c4 <__udivdi3>
40801800:	1027883a 	mov	r19,r2
40801804:	10c4b03a 	or	r2,r2,r3
40801808:	1823883a 	mov	r17,r3
4080180c:	103fef1e 	bne	r2,zero,408017cc <__alt_mem_onchip_flash_0_data+0xff7c17cc>
40801810:	d8c02817 	ldw	r3,160(sp)
40801814:	dc402a17 	ldw	r17,168(sp)
40801818:	b011883a 	mov	r8,r22
4080181c:	1c07c83a 	sub	r3,r3,r16
40801820:	d8c02e15 	stw	r3,184(sp)
40801824:	00005906 	br	4080198c <___vfprintf_internal_r+0x71c>
40801828:	18c03fcc 	andi	r3,r3,255
4080182c:	1806fa1e 	bne	r3,zero,40803418 <___vfprintf_internal_r+0x21a8>
40801830:	9080020c 	andi	r2,r18,8
40801834:	10048a26 	beq	r2,zero,40802a60 <___vfprintf_internal_r+0x17f0>
40801838:	d8c02d17 	ldw	r3,180(sp)
4080183c:	d9002d17 	ldw	r4,180(sp)
40801840:	d9402d17 	ldw	r5,180(sp)
40801844:	18c00017 	ldw	r3,0(r3)
40801848:	21000117 	ldw	r4,4(r4)
4080184c:	29400204 	addi	r5,r5,8
40801850:	d8c03615 	stw	r3,216(sp)
40801854:	d9003815 	stw	r4,224(sp)
40801858:	d9402d15 	stw	r5,180(sp)
4080185c:	d9003617 	ldw	r4,216(sp)
40801860:	d9403817 	ldw	r5,224(sp)
40801864:	da003d15 	stw	r8,244(sp)
40801868:	04000044 	movi	r16,1
4080186c:	08083680 	call	40808368 <__fpclassifyd>
40801870:	da003d17 	ldw	r8,244(sp)
40801874:	14041f1e 	bne	r2,r16,408028f4 <___vfprintf_internal_r+0x1684>
40801878:	d9003617 	ldw	r4,216(sp)
4080187c:	d9403817 	ldw	r5,224(sp)
40801880:	000d883a 	mov	r6,zero
40801884:	000f883a 	mov	r7,zero
40801888:	080c5200 	call	4080c520 <__ledf2>
4080188c:	da003d17 	ldw	r8,244(sp)
40801890:	1005be16 	blt	r2,zero,40802f8c <___vfprintf_internal_r+0x1d1c>
40801894:	df002783 	ldbu	fp,158(sp)
40801898:	008011c4 	movi	r2,71
4080189c:	1445330e 	bge	r2,r17,40802d6c <___vfprintf_internal_r+0x1afc>
408018a0:	04102074 	movhi	r16,16513
408018a4:	8406a604 	addi	r16,r16,6808
408018a8:	00c000c4 	movi	r3,3
408018ac:	00bfdfc4 	movi	r2,-129
408018b0:	d8c02a15 	stw	r3,168(sp)
408018b4:	90a4703a 	and	r18,r18,r2
408018b8:	d8c02e15 	stw	r3,184(sp)
408018bc:	d8002915 	stw	zero,164(sp)
408018c0:	d8003215 	stw	zero,200(sp)
408018c4:	00003706 	br	408019a4 <___vfprintf_internal_r+0x734>
408018c8:	94800214 	ori	r18,r18,8
408018cc:	ac400007 	ldb	r17,0(r21)
408018d0:	003ec806 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
408018d4:	18c03fcc 	andi	r3,r3,255
408018d8:	1806db1e 	bne	r3,zero,40803448 <___vfprintf_internal_r+0x21d8>
408018dc:	94800414 	ori	r18,r18,16
408018e0:	9080080c 	andi	r2,r18,32
408018e4:	1002d826 	beq	r2,zero,40802448 <___vfprintf_internal_r+0x11d8>
408018e8:	d9402d17 	ldw	r5,180(sp)
408018ec:	d8c02917 	ldw	r3,164(sp)
408018f0:	d8002785 	stb	zero,158(sp)
408018f4:	28800204 	addi	r2,r5,8
408018f8:	2cc00017 	ldw	r19,0(r5)
408018fc:	2d800117 	ldw	r22,4(r5)
40801900:	18048f16 	blt	r3,zero,40802b40 <___vfprintf_internal_r+0x18d0>
40801904:	013fdfc4 	movi	r4,-129
40801908:	9d86b03a 	or	r3,r19,r22
4080190c:	d8802d15 	stw	r2,180(sp)
40801910:	9124703a 	and	r18,r18,r4
40801914:	1802d91e 	bne	r3,zero,4080247c <___vfprintf_internal_r+0x120c>
40801918:	d8c02917 	ldw	r3,164(sp)
4080191c:	0039883a 	mov	fp,zero
40801920:	1805c326 	beq	r3,zero,40803030 <___vfprintf_internal_r+0x1dc0>
40801924:	0027883a 	mov	r19,zero
40801928:	002d883a 	mov	r22,zero
4080192c:	dc001e04 	addi	r16,sp,120
40801930:	9806d0fa 	srli	r3,r19,3
40801934:	b008977a 	slli	r4,r22,29
40801938:	b02cd0fa 	srli	r22,r22,3
4080193c:	9cc001cc 	andi	r19,r19,7
40801940:	98800c04 	addi	r2,r19,48
40801944:	843fffc4 	addi	r16,r16,-1
40801948:	20e6b03a 	or	r19,r4,r3
4080194c:	80800005 	stb	r2,0(r16)
40801950:	9d86b03a 	or	r3,r19,r22
40801954:	183ff61e 	bne	r3,zero,40801930 <__alt_mem_onchip_flash_0_data+0xff7c1930>
40801958:	90c0004c 	andi	r3,r18,1
4080195c:	18013b26 	beq	r3,zero,40801e4c <___vfprintf_internal_r+0xbdc>
40801960:	10803fcc 	andi	r2,r2,255
40801964:	1080201c 	xori	r2,r2,128
40801968:	10bfe004 	addi	r2,r2,-128
4080196c:	00c00c04 	movi	r3,48
40801970:	10c13626 	beq	r2,r3,40801e4c <___vfprintf_internal_r+0xbdc>
40801974:	80ffffc5 	stb	r3,-1(r16)
40801978:	d8c02817 	ldw	r3,160(sp)
4080197c:	80bfffc4 	addi	r2,r16,-1
40801980:	1021883a 	mov	r16,r2
40801984:	1887c83a 	sub	r3,r3,r2
40801988:	d8c02e15 	stw	r3,184(sp)
4080198c:	d8802e17 	ldw	r2,184(sp)
40801990:	d9002917 	ldw	r4,164(sp)
40801994:	1100010e 	bge	r2,r4,4080199c <___vfprintf_internal_r+0x72c>
40801998:	2005883a 	mov	r2,r4
4080199c:	d8802a15 	stw	r2,168(sp)
408019a0:	d8003215 	stw	zero,200(sp)
408019a4:	e7003fcc 	andi	fp,fp,255
408019a8:	e700201c 	xori	fp,fp,128
408019ac:	e73fe004 	addi	fp,fp,-128
408019b0:	e0000326 	beq	fp,zero,408019c0 <___vfprintf_internal_r+0x750>
408019b4:	d8c02a17 	ldw	r3,168(sp)
408019b8:	18c00044 	addi	r3,r3,1
408019bc:	d8c02a15 	stw	r3,168(sp)
408019c0:	90c0008c 	andi	r3,r18,2
408019c4:	d8c02b15 	stw	r3,172(sp)
408019c8:	18000326 	beq	r3,zero,408019d8 <___vfprintf_internal_r+0x768>
408019cc:	d8c02a17 	ldw	r3,168(sp)
408019d0:	18c00084 	addi	r3,r3,2
408019d4:	d8c02a15 	stw	r3,168(sp)
408019d8:	90c0210c 	andi	r3,r18,132
408019dc:	d8c03015 	stw	r3,192(sp)
408019e0:	1801a31e 	bne	r3,zero,40802070 <___vfprintf_internal_r+0xe00>
408019e4:	d9003117 	ldw	r4,196(sp)
408019e8:	d8c02a17 	ldw	r3,168(sp)
408019ec:	20e7c83a 	sub	r19,r4,r3
408019f0:	04c19f0e 	bge	zero,r19,40802070 <___vfprintf_internal_r+0xe00>
408019f4:	02400404 	movi	r9,16
408019f8:	d8c02017 	ldw	r3,128(sp)
408019fc:	d8801f17 	ldw	r2,124(sp)
40801a00:	4cc50d0e 	bge	r9,r19,40802e38 <___vfprintf_internal_r+0x1bc8>
40801a04:	01502074 	movhi	r5,16513
40801a08:	2946b984 	addi	r5,r5,6886
40801a0c:	dc403b15 	stw	r17,236(sp)
40801a10:	d9403515 	stw	r5,212(sp)
40801a14:	9823883a 	mov	r17,r19
40801a18:	482d883a 	mov	r22,r9
40801a1c:	9027883a 	mov	r19,r18
40801a20:	070001c4 	movi	fp,7
40801a24:	8025883a 	mov	r18,r16
40801a28:	dc002c17 	ldw	r16,176(sp)
40801a2c:	00000306 	br	40801a3c <___vfprintf_internal_r+0x7cc>
40801a30:	8c7ffc04 	addi	r17,r17,-16
40801a34:	42000204 	addi	r8,r8,8
40801a38:	b440130e 	bge	r22,r17,40801a88 <___vfprintf_internal_r+0x818>
40801a3c:	01102074 	movhi	r4,16513
40801a40:	18c00404 	addi	r3,r3,16
40801a44:	10800044 	addi	r2,r2,1
40801a48:	2106b984 	addi	r4,r4,6886
40801a4c:	41000015 	stw	r4,0(r8)
40801a50:	45800115 	stw	r22,4(r8)
40801a54:	d8c02015 	stw	r3,128(sp)
40801a58:	d8801f15 	stw	r2,124(sp)
40801a5c:	e0bff40e 	bge	fp,r2,40801a30 <__alt_mem_onchip_flash_0_data+0xff7c1a30>
40801a60:	d9801e04 	addi	r6,sp,120
40801a64:	b80b883a 	mov	r5,r23
40801a68:	8009883a 	mov	r4,r16
40801a6c:	08087440 	call	40808744 <__sprint_r>
40801a70:	103f011e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40801a74:	8c7ffc04 	addi	r17,r17,-16
40801a78:	d8c02017 	ldw	r3,128(sp)
40801a7c:	d8801f17 	ldw	r2,124(sp)
40801a80:	da000404 	addi	r8,sp,16
40801a84:	b47fed16 	blt	r22,r17,40801a3c <__alt_mem_onchip_flash_0_data+0xff7c1a3c>
40801a88:	9021883a 	mov	r16,r18
40801a8c:	9825883a 	mov	r18,r19
40801a90:	8827883a 	mov	r19,r17
40801a94:	dc403b17 	ldw	r17,236(sp)
40801a98:	d9403517 	ldw	r5,212(sp)
40801a9c:	98c7883a 	add	r3,r19,r3
40801aa0:	10800044 	addi	r2,r2,1
40801aa4:	41400015 	stw	r5,0(r8)
40801aa8:	44c00115 	stw	r19,4(r8)
40801aac:	d8c02015 	stw	r3,128(sp)
40801ab0:	d8801f15 	stw	r2,124(sp)
40801ab4:	010001c4 	movi	r4,7
40801ab8:	2082a316 	blt	r4,r2,40802548 <___vfprintf_internal_r+0x12d8>
40801abc:	df002787 	ldb	fp,158(sp)
40801ac0:	42000204 	addi	r8,r8,8
40801ac4:	e0000c26 	beq	fp,zero,40801af8 <___vfprintf_internal_r+0x888>
40801ac8:	d8801f17 	ldw	r2,124(sp)
40801acc:	d9002784 	addi	r4,sp,158
40801ad0:	18c00044 	addi	r3,r3,1
40801ad4:	10800044 	addi	r2,r2,1
40801ad8:	41000015 	stw	r4,0(r8)
40801adc:	01000044 	movi	r4,1
40801ae0:	41000115 	stw	r4,4(r8)
40801ae4:	d8c02015 	stw	r3,128(sp)
40801ae8:	d8801f15 	stw	r2,124(sp)
40801aec:	010001c4 	movi	r4,7
40801af0:	20823c16 	blt	r4,r2,408023e4 <___vfprintf_internal_r+0x1174>
40801af4:	42000204 	addi	r8,r8,8
40801af8:	d8802b17 	ldw	r2,172(sp)
40801afc:	10000c26 	beq	r2,zero,40801b30 <___vfprintf_internal_r+0x8c0>
40801b00:	d8801f17 	ldw	r2,124(sp)
40801b04:	d9002704 	addi	r4,sp,156
40801b08:	18c00084 	addi	r3,r3,2
40801b0c:	10800044 	addi	r2,r2,1
40801b10:	41000015 	stw	r4,0(r8)
40801b14:	01000084 	movi	r4,2
40801b18:	41000115 	stw	r4,4(r8)
40801b1c:	d8c02015 	stw	r3,128(sp)
40801b20:	d8801f15 	stw	r2,124(sp)
40801b24:	010001c4 	movi	r4,7
40801b28:	20823616 	blt	r4,r2,40802404 <___vfprintf_internal_r+0x1194>
40801b2c:	42000204 	addi	r8,r8,8
40801b30:	d9003017 	ldw	r4,192(sp)
40801b34:	00802004 	movi	r2,128
40801b38:	20819926 	beq	r4,r2,408021a0 <___vfprintf_internal_r+0xf30>
40801b3c:	d9402917 	ldw	r5,164(sp)
40801b40:	d8802e17 	ldw	r2,184(sp)
40801b44:	28adc83a 	sub	r22,r5,r2
40801b48:	0580310e 	bge	zero,r22,40801c10 <___vfprintf_internal_r+0x9a0>
40801b4c:	07000404 	movi	fp,16
40801b50:	d8801f17 	ldw	r2,124(sp)
40801b54:	e584140e 	bge	fp,r22,40802ba8 <___vfprintf_internal_r+0x1938>
40801b58:	01502074 	movhi	r5,16513
40801b5c:	2946b584 	addi	r5,r5,6870
40801b60:	dc402915 	stw	r17,164(sp)
40801b64:	d9402b15 	stw	r5,172(sp)
40801b68:	b023883a 	mov	r17,r22
40801b6c:	04c001c4 	movi	r19,7
40801b70:	a82d883a 	mov	r22,r21
40801b74:	902b883a 	mov	r21,r18
40801b78:	8025883a 	mov	r18,r16
40801b7c:	dc002c17 	ldw	r16,176(sp)
40801b80:	00000306 	br	40801b90 <___vfprintf_internal_r+0x920>
40801b84:	8c7ffc04 	addi	r17,r17,-16
40801b88:	42000204 	addi	r8,r8,8
40801b8c:	e440110e 	bge	fp,r17,40801bd4 <___vfprintf_internal_r+0x964>
40801b90:	18c00404 	addi	r3,r3,16
40801b94:	10800044 	addi	r2,r2,1
40801b98:	45000015 	stw	r20,0(r8)
40801b9c:	47000115 	stw	fp,4(r8)
40801ba0:	d8c02015 	stw	r3,128(sp)
40801ba4:	d8801f15 	stw	r2,124(sp)
40801ba8:	98bff60e 	bge	r19,r2,40801b84 <__alt_mem_onchip_flash_0_data+0xff7c1b84>
40801bac:	d9801e04 	addi	r6,sp,120
40801bb0:	b80b883a 	mov	r5,r23
40801bb4:	8009883a 	mov	r4,r16
40801bb8:	08087440 	call	40808744 <__sprint_r>
40801bbc:	103eae1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40801bc0:	8c7ffc04 	addi	r17,r17,-16
40801bc4:	d8c02017 	ldw	r3,128(sp)
40801bc8:	d8801f17 	ldw	r2,124(sp)
40801bcc:	da000404 	addi	r8,sp,16
40801bd0:	e47fef16 	blt	fp,r17,40801b90 <__alt_mem_onchip_flash_0_data+0xff7c1b90>
40801bd4:	9021883a 	mov	r16,r18
40801bd8:	a825883a 	mov	r18,r21
40801bdc:	b02b883a 	mov	r21,r22
40801be0:	882d883a 	mov	r22,r17
40801be4:	dc402917 	ldw	r17,164(sp)
40801be8:	d9002b17 	ldw	r4,172(sp)
40801bec:	1d87883a 	add	r3,r3,r22
40801bf0:	10800044 	addi	r2,r2,1
40801bf4:	41000015 	stw	r4,0(r8)
40801bf8:	45800115 	stw	r22,4(r8)
40801bfc:	d8c02015 	stw	r3,128(sp)
40801c00:	d8801f15 	stw	r2,124(sp)
40801c04:	010001c4 	movi	r4,7
40801c08:	2081ee16 	blt	r4,r2,408023c4 <___vfprintf_internal_r+0x1154>
40801c0c:	42000204 	addi	r8,r8,8
40801c10:	9080400c 	andi	r2,r18,256
40801c14:	1001181e 	bne	r2,zero,40802078 <___vfprintf_internal_r+0xe08>
40801c18:	d9402e17 	ldw	r5,184(sp)
40801c1c:	d8801f17 	ldw	r2,124(sp)
40801c20:	44000015 	stw	r16,0(r8)
40801c24:	1947883a 	add	r3,r3,r5
40801c28:	10800044 	addi	r2,r2,1
40801c2c:	41400115 	stw	r5,4(r8)
40801c30:	d8c02015 	stw	r3,128(sp)
40801c34:	d8801f15 	stw	r2,124(sp)
40801c38:	010001c4 	movi	r4,7
40801c3c:	2081d316 	blt	r4,r2,4080238c <___vfprintf_internal_r+0x111c>
40801c40:	42000204 	addi	r8,r8,8
40801c44:	9480010c 	andi	r18,r18,4
40801c48:	90003226 	beq	r18,zero,40801d14 <___vfprintf_internal_r+0xaa4>
40801c4c:	d9403117 	ldw	r5,196(sp)
40801c50:	d8802a17 	ldw	r2,168(sp)
40801c54:	28a1c83a 	sub	r16,r5,r2
40801c58:	04002e0e 	bge	zero,r16,40801d14 <___vfprintf_internal_r+0xaa4>
40801c5c:	04400404 	movi	r17,16
40801c60:	d8801f17 	ldw	r2,124(sp)
40801c64:	8c04a20e 	bge	r17,r16,40802ef0 <___vfprintf_internal_r+0x1c80>
40801c68:	01502074 	movhi	r5,16513
40801c6c:	2946b984 	addi	r5,r5,6886
40801c70:	d9403515 	stw	r5,212(sp)
40801c74:	048001c4 	movi	r18,7
40801c78:	dcc02c17 	ldw	r19,176(sp)
40801c7c:	00000306 	br	40801c8c <___vfprintf_internal_r+0xa1c>
40801c80:	843ffc04 	addi	r16,r16,-16
40801c84:	42000204 	addi	r8,r8,8
40801c88:	8c00130e 	bge	r17,r16,40801cd8 <___vfprintf_internal_r+0xa68>
40801c8c:	01102074 	movhi	r4,16513
40801c90:	18c00404 	addi	r3,r3,16
40801c94:	10800044 	addi	r2,r2,1
40801c98:	2106b984 	addi	r4,r4,6886
40801c9c:	41000015 	stw	r4,0(r8)
40801ca0:	44400115 	stw	r17,4(r8)
40801ca4:	d8c02015 	stw	r3,128(sp)
40801ca8:	d8801f15 	stw	r2,124(sp)
40801cac:	90bff40e 	bge	r18,r2,40801c80 <__alt_mem_onchip_flash_0_data+0xff7c1c80>
40801cb0:	d9801e04 	addi	r6,sp,120
40801cb4:	b80b883a 	mov	r5,r23
40801cb8:	9809883a 	mov	r4,r19
40801cbc:	08087440 	call	40808744 <__sprint_r>
40801cc0:	103e6d1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40801cc4:	843ffc04 	addi	r16,r16,-16
40801cc8:	d8c02017 	ldw	r3,128(sp)
40801ccc:	d8801f17 	ldw	r2,124(sp)
40801cd0:	da000404 	addi	r8,sp,16
40801cd4:	8c3fed16 	blt	r17,r16,40801c8c <__alt_mem_onchip_flash_0_data+0xff7c1c8c>
40801cd8:	d9403517 	ldw	r5,212(sp)
40801cdc:	1c07883a 	add	r3,r3,r16
40801ce0:	10800044 	addi	r2,r2,1
40801ce4:	41400015 	stw	r5,0(r8)
40801ce8:	44000115 	stw	r16,4(r8)
40801cec:	d8c02015 	stw	r3,128(sp)
40801cf0:	d8801f15 	stw	r2,124(sp)
40801cf4:	010001c4 	movi	r4,7
40801cf8:	2080060e 	bge	r4,r2,40801d14 <___vfprintf_internal_r+0xaa4>
40801cfc:	d9002c17 	ldw	r4,176(sp)
40801d00:	d9801e04 	addi	r6,sp,120
40801d04:	b80b883a 	mov	r5,r23
40801d08:	08087440 	call	40808744 <__sprint_r>
40801d0c:	103e5a1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40801d10:	d8c02017 	ldw	r3,128(sp)
40801d14:	d8803117 	ldw	r2,196(sp)
40801d18:	d9002a17 	ldw	r4,168(sp)
40801d1c:	1100010e 	bge	r2,r4,40801d24 <___vfprintf_internal_r+0xab4>
40801d20:	2005883a 	mov	r2,r4
40801d24:	d9402f17 	ldw	r5,188(sp)
40801d28:	288b883a 	add	r5,r5,r2
40801d2c:	d9402f15 	stw	r5,188(sp)
40801d30:	18019e1e 	bne	r3,zero,408023ac <___vfprintf_internal_r+0x113c>
40801d34:	a8800007 	ldb	r2,0(r21)
40801d38:	d8001f15 	stw	zero,124(sp)
40801d3c:	da000404 	addi	r8,sp,16
40801d40:	103d851e 	bne	r2,zero,40801358 <__alt_mem_onchip_flash_0_data+0xff7c1358>
40801d44:	a821883a 	mov	r16,r21
40801d48:	003d9b06 	br	408013b8 <__alt_mem_onchip_flash_0_data+0xff7c13b8>
40801d4c:	18c03fcc 	andi	r3,r3,255
40801d50:	1805c11e 	bne	r3,zero,40803458 <___vfprintf_internal_r+0x21e8>
40801d54:	94800414 	ori	r18,r18,16
40801d58:	9080080c 	andi	r2,r18,32
40801d5c:	10020c26 	beq	r2,zero,40802590 <___vfprintf_internal_r+0x1320>
40801d60:	d8802d17 	ldw	r2,180(sp)
40801d64:	d9002917 	ldw	r4,164(sp)
40801d68:	d8002785 	stb	zero,158(sp)
40801d6c:	10c00204 	addi	r3,r2,8
40801d70:	14c00017 	ldw	r19,0(r2)
40801d74:	15800117 	ldw	r22,4(r2)
40801d78:	20040f16 	blt	r4,zero,40802db8 <___vfprintf_internal_r+0x1b48>
40801d7c:	013fdfc4 	movi	r4,-129
40801d80:	9d84b03a 	or	r2,r19,r22
40801d84:	d8c02d15 	stw	r3,180(sp)
40801d88:	9124703a 	and	r18,r18,r4
40801d8c:	0039883a 	mov	fp,zero
40801d90:	103e891e 	bne	r2,zero,408017b8 <__alt_mem_onchip_flash_0_data+0xff7c17b8>
40801d94:	d9002917 	ldw	r4,164(sp)
40801d98:	2002c11e 	bne	r4,zero,408028a0 <___vfprintf_internal_r+0x1630>
40801d9c:	d8002915 	stw	zero,164(sp)
40801da0:	d8002e15 	stw	zero,184(sp)
40801da4:	dc001e04 	addi	r16,sp,120
40801da8:	003ef806 	br	4080198c <__alt_mem_onchip_flash_0_data+0xff7c198c>
40801dac:	18c03fcc 	andi	r3,r3,255
40801db0:	18059d1e 	bne	r3,zero,40803428 <___vfprintf_internal_r+0x21b8>
40801db4:	01502074 	movhi	r5,16513
40801db8:	2946a904 	addi	r5,r5,6820
40801dbc:	d9403915 	stw	r5,228(sp)
40801dc0:	9080080c 	andi	r2,r18,32
40801dc4:	10005226 	beq	r2,zero,40801f10 <___vfprintf_internal_r+0xca0>
40801dc8:	d8802d17 	ldw	r2,180(sp)
40801dcc:	14c00017 	ldw	r19,0(r2)
40801dd0:	15800117 	ldw	r22,4(r2)
40801dd4:	10800204 	addi	r2,r2,8
40801dd8:	d8802d15 	stw	r2,180(sp)
40801ddc:	9080004c 	andi	r2,r18,1
40801de0:	10019026 	beq	r2,zero,40802424 <___vfprintf_internal_r+0x11b4>
40801de4:	9d84b03a 	or	r2,r19,r22
40801de8:	10036926 	beq	r2,zero,40802b90 <___vfprintf_internal_r+0x1920>
40801dec:	d8c02917 	ldw	r3,164(sp)
40801df0:	00800c04 	movi	r2,48
40801df4:	d8802705 	stb	r2,156(sp)
40801df8:	dc402745 	stb	r17,157(sp)
40801dfc:	d8002785 	stb	zero,158(sp)
40801e00:	90800094 	ori	r2,r18,2
40801e04:	18045d16 	blt	r3,zero,40802f7c <___vfprintf_internal_r+0x1d0c>
40801e08:	00bfdfc4 	movi	r2,-129
40801e0c:	90a4703a 	and	r18,r18,r2
40801e10:	94800094 	ori	r18,r18,2
40801e14:	0039883a 	mov	fp,zero
40801e18:	d9003917 	ldw	r4,228(sp)
40801e1c:	dc001e04 	addi	r16,sp,120
40801e20:	988003cc 	andi	r2,r19,15
40801e24:	b006973a 	slli	r3,r22,28
40801e28:	2085883a 	add	r2,r4,r2
40801e2c:	9826d13a 	srli	r19,r19,4
40801e30:	10800003 	ldbu	r2,0(r2)
40801e34:	b02cd13a 	srli	r22,r22,4
40801e38:	843fffc4 	addi	r16,r16,-1
40801e3c:	1ce6b03a 	or	r19,r3,r19
40801e40:	80800005 	stb	r2,0(r16)
40801e44:	9d84b03a 	or	r2,r19,r22
40801e48:	103ff51e 	bne	r2,zero,40801e20 <__alt_mem_onchip_flash_0_data+0xff7c1e20>
40801e4c:	d8c02817 	ldw	r3,160(sp)
40801e50:	1c07c83a 	sub	r3,r3,r16
40801e54:	d8c02e15 	stw	r3,184(sp)
40801e58:	003ecc06 	br	4080198c <__alt_mem_onchip_flash_0_data+0xff7c198c>
40801e5c:	18c03fcc 	andi	r3,r3,255
40801e60:	183e9f26 	beq	r3,zero,408018e0 <__alt_mem_onchip_flash_0_data+0xff7c18e0>
40801e64:	d9c02785 	stb	r7,158(sp)
40801e68:	003e9d06 	br	408018e0 <__alt_mem_onchip_flash_0_data+0xff7c18e0>
40801e6c:	00c00044 	movi	r3,1
40801e70:	01c00ac4 	movi	r7,43
40801e74:	ac400007 	ldb	r17,0(r21)
40801e78:	003d5e06 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801e7c:	94800814 	ori	r18,r18,32
40801e80:	ac400007 	ldb	r17,0(r21)
40801e84:	003d5b06 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801e88:	d8c02d17 	ldw	r3,180(sp)
40801e8c:	d8002785 	stb	zero,158(sp)
40801e90:	1c000017 	ldw	r16,0(r3)
40801e94:	1cc00104 	addi	r19,r3,4
40801e98:	80041926 	beq	r16,zero,40802f00 <___vfprintf_internal_r+0x1c90>
40801e9c:	d9002917 	ldw	r4,164(sp)
40801ea0:	2003d016 	blt	r4,zero,40802de4 <___vfprintf_internal_r+0x1b74>
40801ea4:	200d883a 	mov	r6,r4
40801ea8:	000b883a 	mov	r5,zero
40801eac:	8009883a 	mov	r4,r16
40801eb0:	da003d15 	stw	r8,244(sp)
40801eb4:	0806a800 	call	40806a80 <memchr>
40801eb8:	da003d17 	ldw	r8,244(sp)
40801ebc:	10045426 	beq	r2,zero,40803010 <___vfprintf_internal_r+0x1da0>
40801ec0:	1405c83a 	sub	r2,r2,r16
40801ec4:	d8802e15 	stw	r2,184(sp)
40801ec8:	1003cc16 	blt	r2,zero,40802dfc <___vfprintf_internal_r+0x1b8c>
40801ecc:	df002783 	ldbu	fp,158(sp)
40801ed0:	d8802a15 	stw	r2,168(sp)
40801ed4:	dcc02d15 	stw	r19,180(sp)
40801ed8:	d8002915 	stw	zero,164(sp)
40801edc:	d8003215 	stw	zero,200(sp)
40801ee0:	003eb006 	br	408019a4 <__alt_mem_onchip_flash_0_data+0xff7c19a4>
40801ee4:	18c03fcc 	andi	r3,r3,255
40801ee8:	183f9b26 	beq	r3,zero,40801d58 <__alt_mem_onchip_flash_0_data+0xff7c1d58>
40801eec:	d9c02785 	stb	r7,158(sp)
40801ef0:	003f9906 	br	40801d58 <__alt_mem_onchip_flash_0_data+0xff7c1d58>
40801ef4:	18c03fcc 	andi	r3,r3,255
40801ef8:	1805551e 	bne	r3,zero,40803450 <___vfprintf_internal_r+0x21e0>
40801efc:	01502074 	movhi	r5,16513
40801f00:	2946ae04 	addi	r5,r5,6840
40801f04:	d9403915 	stw	r5,228(sp)
40801f08:	9080080c 	andi	r2,r18,32
40801f0c:	103fae1e 	bne	r2,zero,40801dc8 <__alt_mem_onchip_flash_0_data+0xff7c1dc8>
40801f10:	9080040c 	andi	r2,r18,16
40801f14:	1002de26 	beq	r2,zero,40802a90 <___vfprintf_internal_r+0x1820>
40801f18:	d8c02d17 	ldw	r3,180(sp)
40801f1c:	002d883a 	mov	r22,zero
40801f20:	1cc00017 	ldw	r19,0(r3)
40801f24:	18c00104 	addi	r3,r3,4
40801f28:	d8c02d15 	stw	r3,180(sp)
40801f2c:	003fab06 	br	40801ddc <__alt_mem_onchip_flash_0_data+0xff7c1ddc>
40801f30:	38803fcc 	andi	r2,r7,255
40801f34:	1080201c 	xori	r2,r2,128
40801f38:	10bfe004 	addi	r2,r2,-128
40801f3c:	1002d21e 	bne	r2,zero,40802a88 <___vfprintf_internal_r+0x1818>
40801f40:	00c00044 	movi	r3,1
40801f44:	01c00804 	movi	r7,32
40801f48:	ac400007 	ldb	r17,0(r21)
40801f4c:	003d2906 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801f50:	94800054 	ori	r18,r18,1
40801f54:	ac400007 	ldb	r17,0(r21)
40801f58:	003d2606 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801f5c:	18c03fcc 	andi	r3,r3,255
40801f60:	183e0526 	beq	r3,zero,40801778 <__alt_mem_onchip_flash_0_data+0xff7c1778>
40801f64:	d9c02785 	stb	r7,158(sp)
40801f68:	003e0306 	br	40801778 <__alt_mem_onchip_flash_0_data+0xff7c1778>
40801f6c:	94801014 	ori	r18,r18,64
40801f70:	ac400007 	ldb	r17,0(r21)
40801f74:	003d1f06 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801f78:	ac400007 	ldb	r17,0(r21)
40801f7c:	8a438726 	beq	r17,r9,40802d9c <___vfprintf_internal_r+0x1b2c>
40801f80:	94800414 	ori	r18,r18,16
40801f84:	003d1b06 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40801f88:	18c03fcc 	andi	r3,r3,255
40801f8c:	1805341e 	bne	r3,zero,40803460 <___vfprintf_internal_r+0x21f0>
40801f90:	9080080c 	andi	r2,r18,32
40801f94:	1002cd26 	beq	r2,zero,40802acc <___vfprintf_internal_r+0x185c>
40801f98:	d9402d17 	ldw	r5,180(sp)
40801f9c:	d9002f17 	ldw	r4,188(sp)
40801fa0:	28800017 	ldw	r2,0(r5)
40801fa4:	2007d7fa 	srai	r3,r4,31
40801fa8:	29400104 	addi	r5,r5,4
40801fac:	d9402d15 	stw	r5,180(sp)
40801fb0:	11000015 	stw	r4,0(r2)
40801fb4:	10c00115 	stw	r3,4(r2)
40801fb8:	003ce506 	br	40801350 <__alt_mem_onchip_flash_0_data+0xff7c1350>
40801fbc:	d8c02d17 	ldw	r3,180(sp)
40801fc0:	d9002d17 	ldw	r4,180(sp)
40801fc4:	d8002785 	stb	zero,158(sp)
40801fc8:	18800017 	ldw	r2,0(r3)
40801fcc:	21000104 	addi	r4,r4,4
40801fd0:	00c00044 	movi	r3,1
40801fd4:	d8c02a15 	stw	r3,168(sp)
40801fd8:	d8801405 	stb	r2,80(sp)
40801fdc:	d9002d15 	stw	r4,180(sp)
40801fe0:	d8c02e15 	stw	r3,184(sp)
40801fe4:	d8002915 	stw	zero,164(sp)
40801fe8:	d8003215 	stw	zero,200(sp)
40801fec:	dc001404 	addi	r16,sp,80
40801ff0:	0039883a 	mov	fp,zero
40801ff4:	003e7206 	br	408019c0 <__alt_mem_onchip_flash_0_data+0xff7c19c0>
40801ff8:	01102074 	movhi	r4,16513
40801ffc:	2106ae04 	addi	r4,r4,6840
40802000:	0039883a 	mov	fp,zero
40802004:	d9003915 	stw	r4,228(sp)
40802008:	04401e04 	movi	r17,120
4080200c:	003f8206 	br	40801e18 <__alt_mem_onchip_flash_0_data+0xff7c1e18>
40802010:	18c03fcc 	andi	r3,r3,255
40802014:	1805061e 	bne	r3,zero,40803430 <___vfprintf_internal_r+0x21c0>
40802018:	883d9126 	beq	r17,zero,40801660 <__alt_mem_onchip_flash_0_data+0xff7c1660>
4080201c:	00c00044 	movi	r3,1
40802020:	d8c02a15 	stw	r3,168(sp)
40802024:	dc401405 	stb	r17,80(sp)
40802028:	d8002785 	stb	zero,158(sp)
4080202c:	003fec06 	br	40801fe0 <__alt_mem_onchip_flash_0_data+0xff7c1fe0>
40802030:	01502074 	movhi	r5,16513
40802034:	2946ae04 	addi	r5,r5,6840
40802038:	d9403915 	stw	r5,228(sp)
4080203c:	d8c02d15 	stw	r3,180(sp)
40802040:	1025883a 	mov	r18,r2
40802044:	04401e04 	movi	r17,120
40802048:	9d84b03a 	or	r2,r19,r22
4080204c:	1000fc1e 	bne	r2,zero,40802440 <___vfprintf_internal_r+0x11d0>
40802050:	0039883a 	mov	fp,zero
40802054:	00800084 	movi	r2,2
40802058:	10803fcc 	andi	r2,r2,255
4080205c:	00c00044 	movi	r3,1
40802060:	10c20f26 	beq	r2,r3,408028a0 <___vfprintf_internal_r+0x1630>
40802064:	00c00084 	movi	r3,2
40802068:	10fd6326 	beq	r2,r3,408015f8 <__alt_mem_onchip_flash_0_data+0xff7c15f8>
4080206c:	003e2d06 	br	40801924 <__alt_mem_onchip_flash_0_data+0xff7c1924>
40802070:	d8c02017 	ldw	r3,128(sp)
40802074:	003e9306 	br	40801ac4 <__alt_mem_onchip_flash_0_data+0xff7c1ac4>
40802078:	00801944 	movi	r2,101
4080207c:	14407e0e 	bge	r2,r17,40802278 <___vfprintf_internal_r+0x1008>
40802080:	d9003617 	ldw	r4,216(sp)
40802084:	d9403817 	ldw	r5,224(sp)
40802088:	000d883a 	mov	r6,zero
4080208c:	000f883a 	mov	r7,zero
40802090:	d8c03c15 	stw	r3,240(sp)
40802094:	da003d15 	stw	r8,244(sp)
40802098:	080c3bc0 	call	4080c3bc <__eqdf2>
4080209c:	d8c03c17 	ldw	r3,240(sp)
408020a0:	da003d17 	ldw	r8,244(sp)
408020a4:	1000f71e 	bne	r2,zero,40802484 <___vfprintf_internal_r+0x1214>
408020a8:	d8801f17 	ldw	r2,124(sp)
408020ac:	01102074 	movhi	r4,16513
408020b0:	2106b504 	addi	r4,r4,6868
408020b4:	18c00044 	addi	r3,r3,1
408020b8:	10800044 	addi	r2,r2,1
408020bc:	41000015 	stw	r4,0(r8)
408020c0:	01000044 	movi	r4,1
408020c4:	41000115 	stw	r4,4(r8)
408020c8:	d8c02015 	stw	r3,128(sp)
408020cc:	d8801f15 	stw	r2,124(sp)
408020d0:	010001c4 	movi	r4,7
408020d4:	2082b816 	blt	r4,r2,40802bb8 <___vfprintf_internal_r+0x1948>
408020d8:	42000204 	addi	r8,r8,8
408020dc:	d8802617 	ldw	r2,152(sp)
408020e0:	d9403317 	ldw	r5,204(sp)
408020e4:	11400216 	blt	r2,r5,408020f0 <___vfprintf_internal_r+0xe80>
408020e8:	9080004c 	andi	r2,r18,1
408020ec:	103ed526 	beq	r2,zero,40801c44 <__alt_mem_onchip_flash_0_data+0xff7c1c44>
408020f0:	d8803717 	ldw	r2,220(sp)
408020f4:	d9003417 	ldw	r4,208(sp)
408020f8:	d9403717 	ldw	r5,220(sp)
408020fc:	1887883a 	add	r3,r3,r2
40802100:	d8801f17 	ldw	r2,124(sp)
40802104:	41000015 	stw	r4,0(r8)
40802108:	41400115 	stw	r5,4(r8)
4080210c:	10800044 	addi	r2,r2,1
40802110:	d8c02015 	stw	r3,128(sp)
40802114:	d8801f15 	stw	r2,124(sp)
40802118:	010001c4 	movi	r4,7
4080211c:	20832916 	blt	r4,r2,40802dc4 <___vfprintf_internal_r+0x1b54>
40802120:	42000204 	addi	r8,r8,8
40802124:	d8803317 	ldw	r2,204(sp)
40802128:	143fffc4 	addi	r16,r2,-1
4080212c:	043ec50e 	bge	zero,r16,40801c44 <__alt_mem_onchip_flash_0_data+0xff7c1c44>
40802130:	04400404 	movi	r17,16
40802134:	d8801f17 	ldw	r2,124(sp)
40802138:	8c00880e 	bge	r17,r16,4080235c <___vfprintf_internal_r+0x10ec>
4080213c:	01502074 	movhi	r5,16513
40802140:	2946b584 	addi	r5,r5,6870
40802144:	d9402b15 	stw	r5,172(sp)
40802148:	058001c4 	movi	r22,7
4080214c:	dcc02c17 	ldw	r19,176(sp)
40802150:	00000306 	br	40802160 <___vfprintf_internal_r+0xef0>
40802154:	42000204 	addi	r8,r8,8
40802158:	843ffc04 	addi	r16,r16,-16
4080215c:	8c00820e 	bge	r17,r16,40802368 <___vfprintf_internal_r+0x10f8>
40802160:	18c00404 	addi	r3,r3,16
40802164:	10800044 	addi	r2,r2,1
40802168:	45000015 	stw	r20,0(r8)
4080216c:	44400115 	stw	r17,4(r8)
40802170:	d8c02015 	stw	r3,128(sp)
40802174:	d8801f15 	stw	r2,124(sp)
40802178:	b0bff60e 	bge	r22,r2,40802154 <__alt_mem_onchip_flash_0_data+0xff7c2154>
4080217c:	d9801e04 	addi	r6,sp,120
40802180:	b80b883a 	mov	r5,r23
40802184:	9809883a 	mov	r4,r19
40802188:	08087440 	call	40808744 <__sprint_r>
4080218c:	103d3a1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802190:	d8c02017 	ldw	r3,128(sp)
40802194:	d8801f17 	ldw	r2,124(sp)
40802198:	da000404 	addi	r8,sp,16
4080219c:	003fee06 	br	40802158 <__alt_mem_onchip_flash_0_data+0xff7c2158>
408021a0:	d9403117 	ldw	r5,196(sp)
408021a4:	d8802a17 	ldw	r2,168(sp)
408021a8:	28adc83a 	sub	r22,r5,r2
408021ac:	05be630e 	bge	zero,r22,40801b3c <__alt_mem_onchip_flash_0_data+0xff7c1b3c>
408021b0:	07000404 	movi	fp,16
408021b4:	d8801f17 	ldw	r2,124(sp)
408021b8:	e5838f0e 	bge	fp,r22,40802ff8 <___vfprintf_internal_r+0x1d88>
408021bc:	01502074 	movhi	r5,16513
408021c0:	2946b584 	addi	r5,r5,6870
408021c4:	dc403015 	stw	r17,192(sp)
408021c8:	d9402b15 	stw	r5,172(sp)
408021cc:	b023883a 	mov	r17,r22
408021d0:	04c001c4 	movi	r19,7
408021d4:	a82d883a 	mov	r22,r21
408021d8:	902b883a 	mov	r21,r18
408021dc:	8025883a 	mov	r18,r16
408021e0:	dc002c17 	ldw	r16,176(sp)
408021e4:	00000306 	br	408021f4 <___vfprintf_internal_r+0xf84>
408021e8:	8c7ffc04 	addi	r17,r17,-16
408021ec:	42000204 	addi	r8,r8,8
408021f0:	e440110e 	bge	fp,r17,40802238 <___vfprintf_internal_r+0xfc8>
408021f4:	18c00404 	addi	r3,r3,16
408021f8:	10800044 	addi	r2,r2,1
408021fc:	45000015 	stw	r20,0(r8)
40802200:	47000115 	stw	fp,4(r8)
40802204:	d8c02015 	stw	r3,128(sp)
40802208:	d8801f15 	stw	r2,124(sp)
4080220c:	98bff60e 	bge	r19,r2,408021e8 <__alt_mem_onchip_flash_0_data+0xff7c21e8>
40802210:	d9801e04 	addi	r6,sp,120
40802214:	b80b883a 	mov	r5,r23
40802218:	8009883a 	mov	r4,r16
4080221c:	08087440 	call	40808744 <__sprint_r>
40802220:	103d151e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802224:	8c7ffc04 	addi	r17,r17,-16
40802228:	d8c02017 	ldw	r3,128(sp)
4080222c:	d8801f17 	ldw	r2,124(sp)
40802230:	da000404 	addi	r8,sp,16
40802234:	e47fef16 	blt	fp,r17,408021f4 <__alt_mem_onchip_flash_0_data+0xff7c21f4>
40802238:	9021883a 	mov	r16,r18
4080223c:	a825883a 	mov	r18,r21
40802240:	b02b883a 	mov	r21,r22
40802244:	882d883a 	mov	r22,r17
40802248:	dc403017 	ldw	r17,192(sp)
4080224c:	d9002b17 	ldw	r4,172(sp)
40802250:	1d87883a 	add	r3,r3,r22
40802254:	10800044 	addi	r2,r2,1
40802258:	41000015 	stw	r4,0(r8)
4080225c:	45800115 	stw	r22,4(r8)
40802260:	d8c02015 	stw	r3,128(sp)
40802264:	d8801f15 	stw	r2,124(sp)
40802268:	010001c4 	movi	r4,7
4080226c:	20818e16 	blt	r4,r2,408028a8 <___vfprintf_internal_r+0x1638>
40802270:	42000204 	addi	r8,r8,8
40802274:	003e3106 	br	40801b3c <__alt_mem_onchip_flash_0_data+0xff7c1b3c>
40802278:	d9403317 	ldw	r5,204(sp)
4080227c:	00800044 	movi	r2,1
40802280:	18c00044 	addi	r3,r3,1
40802284:	1141530e 	bge	r2,r5,408027d4 <___vfprintf_internal_r+0x1564>
40802288:	dc401f17 	ldw	r17,124(sp)
4080228c:	00800044 	movi	r2,1
40802290:	40800115 	stw	r2,4(r8)
40802294:	8c400044 	addi	r17,r17,1
40802298:	44000015 	stw	r16,0(r8)
4080229c:	d8c02015 	stw	r3,128(sp)
408022a0:	dc401f15 	stw	r17,124(sp)
408022a4:	008001c4 	movi	r2,7
408022a8:	14416b16 	blt	r2,r17,40802858 <___vfprintf_internal_r+0x15e8>
408022ac:	42000204 	addi	r8,r8,8
408022b0:	d8803717 	ldw	r2,220(sp)
408022b4:	d9003417 	ldw	r4,208(sp)
408022b8:	8c400044 	addi	r17,r17,1
408022bc:	10c7883a 	add	r3,r2,r3
408022c0:	40800115 	stw	r2,4(r8)
408022c4:	41000015 	stw	r4,0(r8)
408022c8:	d8c02015 	stw	r3,128(sp)
408022cc:	dc401f15 	stw	r17,124(sp)
408022d0:	008001c4 	movi	r2,7
408022d4:	14416916 	blt	r2,r17,4080287c <___vfprintf_internal_r+0x160c>
408022d8:	45800204 	addi	r22,r8,8
408022dc:	d9003617 	ldw	r4,216(sp)
408022e0:	d9403817 	ldw	r5,224(sp)
408022e4:	000d883a 	mov	r6,zero
408022e8:	000f883a 	mov	r7,zero
408022ec:	d8c03c15 	stw	r3,240(sp)
408022f0:	080c3bc0 	call	4080c3bc <__eqdf2>
408022f4:	d8c03c17 	ldw	r3,240(sp)
408022f8:	1000bc26 	beq	r2,zero,408025ec <___vfprintf_internal_r+0x137c>
408022fc:	d9403317 	ldw	r5,204(sp)
40802300:	84000044 	addi	r16,r16,1
40802304:	8c400044 	addi	r17,r17,1
40802308:	28bfffc4 	addi	r2,r5,-1
4080230c:	1887883a 	add	r3,r3,r2
40802310:	b0800115 	stw	r2,4(r22)
40802314:	b4000015 	stw	r16,0(r22)
40802318:	d8c02015 	stw	r3,128(sp)
4080231c:	dc401f15 	stw	r17,124(sp)
40802320:	008001c4 	movi	r2,7
40802324:	14414316 	blt	r2,r17,40802834 <___vfprintf_internal_r+0x15c4>
40802328:	b5800204 	addi	r22,r22,8
4080232c:	d9003a17 	ldw	r4,232(sp)
40802330:	df0022c4 	addi	fp,sp,139
40802334:	8c400044 	addi	r17,r17,1
40802338:	20c7883a 	add	r3,r4,r3
4080233c:	b7000015 	stw	fp,0(r22)
40802340:	b1000115 	stw	r4,4(r22)
40802344:	d8c02015 	stw	r3,128(sp)
40802348:	dc401f15 	stw	r17,124(sp)
4080234c:	008001c4 	movi	r2,7
40802350:	14400e16 	blt	r2,r17,4080238c <___vfprintf_internal_r+0x111c>
40802354:	b2000204 	addi	r8,r22,8
40802358:	003e3a06 	br	40801c44 <__alt_mem_onchip_flash_0_data+0xff7c1c44>
4080235c:	01102074 	movhi	r4,16513
40802360:	2106b584 	addi	r4,r4,6870
40802364:	d9002b15 	stw	r4,172(sp)
40802368:	d9002b17 	ldw	r4,172(sp)
4080236c:	1c07883a 	add	r3,r3,r16
40802370:	44000115 	stw	r16,4(r8)
40802374:	41000015 	stw	r4,0(r8)
40802378:	10800044 	addi	r2,r2,1
4080237c:	d8c02015 	stw	r3,128(sp)
40802380:	d8801f15 	stw	r2,124(sp)
40802384:	010001c4 	movi	r4,7
40802388:	20be2d0e 	bge	r4,r2,40801c40 <__alt_mem_onchip_flash_0_data+0xff7c1c40>
4080238c:	d9002c17 	ldw	r4,176(sp)
40802390:	d9801e04 	addi	r6,sp,120
40802394:	b80b883a 	mov	r5,r23
40802398:	08087440 	call	40808744 <__sprint_r>
4080239c:	103cb61e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408023a0:	d8c02017 	ldw	r3,128(sp)
408023a4:	da000404 	addi	r8,sp,16
408023a8:	003e2606 	br	40801c44 <__alt_mem_onchip_flash_0_data+0xff7c1c44>
408023ac:	d9002c17 	ldw	r4,176(sp)
408023b0:	d9801e04 	addi	r6,sp,120
408023b4:	b80b883a 	mov	r5,r23
408023b8:	08087440 	call	40808744 <__sprint_r>
408023bc:	103e5d26 	beq	r2,zero,40801d34 <__alt_mem_onchip_flash_0_data+0xff7c1d34>
408023c0:	003cad06 	br	40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408023c4:	d9002c17 	ldw	r4,176(sp)
408023c8:	d9801e04 	addi	r6,sp,120
408023cc:	b80b883a 	mov	r5,r23
408023d0:	08087440 	call	40808744 <__sprint_r>
408023d4:	103ca81e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408023d8:	d8c02017 	ldw	r3,128(sp)
408023dc:	da000404 	addi	r8,sp,16
408023e0:	003e0b06 	br	40801c10 <__alt_mem_onchip_flash_0_data+0xff7c1c10>
408023e4:	d9002c17 	ldw	r4,176(sp)
408023e8:	d9801e04 	addi	r6,sp,120
408023ec:	b80b883a 	mov	r5,r23
408023f0:	08087440 	call	40808744 <__sprint_r>
408023f4:	103ca01e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408023f8:	d8c02017 	ldw	r3,128(sp)
408023fc:	da000404 	addi	r8,sp,16
40802400:	003dbd06 	br	40801af8 <__alt_mem_onchip_flash_0_data+0xff7c1af8>
40802404:	d9002c17 	ldw	r4,176(sp)
40802408:	d9801e04 	addi	r6,sp,120
4080240c:	b80b883a 	mov	r5,r23
40802410:	08087440 	call	40808744 <__sprint_r>
40802414:	103c981e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802418:	d8c02017 	ldw	r3,128(sp)
4080241c:	da000404 	addi	r8,sp,16
40802420:	003dc306 	br	40801b30 <__alt_mem_onchip_flash_0_data+0xff7c1b30>
40802424:	d8802917 	ldw	r2,164(sp)
40802428:	d8002785 	stb	zero,158(sp)
4080242c:	103f0616 	blt	r2,zero,40802048 <__alt_mem_onchip_flash_0_data+0xff7c2048>
40802430:	00ffdfc4 	movi	r3,-129
40802434:	9d84b03a 	or	r2,r19,r22
40802438:	90e4703a 	and	r18,r18,r3
4080243c:	103c6b26 	beq	r2,zero,408015ec <__alt_mem_onchip_flash_0_data+0xff7c15ec>
40802440:	0039883a 	mov	fp,zero
40802444:	003e7406 	br	40801e18 <__alt_mem_onchip_flash_0_data+0xff7c1e18>
40802448:	9080040c 	andi	r2,r18,16
4080244c:	1001b326 	beq	r2,zero,40802b1c <___vfprintf_internal_r+0x18ac>
40802450:	d9002d17 	ldw	r4,180(sp)
40802454:	d9402917 	ldw	r5,164(sp)
40802458:	d8002785 	stb	zero,158(sp)
4080245c:	20800104 	addi	r2,r4,4
40802460:	24c00017 	ldw	r19,0(r4)
40802464:	002d883a 	mov	r22,zero
40802468:	2801b516 	blt	r5,zero,40802b40 <___vfprintf_internal_r+0x18d0>
4080246c:	00ffdfc4 	movi	r3,-129
40802470:	d8802d15 	stw	r2,180(sp)
40802474:	90e4703a 	and	r18,r18,r3
40802478:	983d2726 	beq	r19,zero,40801918 <__alt_mem_onchip_flash_0_data+0xff7c1918>
4080247c:	0039883a 	mov	fp,zero
40802480:	003d2a06 	br	4080192c <__alt_mem_onchip_flash_0_data+0xff7c192c>
40802484:	dc402617 	ldw	r17,152(sp)
40802488:	0441d30e 	bge	zero,r17,40802bd8 <___vfprintf_internal_r+0x1968>
4080248c:	dc403217 	ldw	r17,200(sp)
40802490:	d8803317 	ldw	r2,204(sp)
40802494:	1440010e 	bge	r2,r17,4080249c <___vfprintf_internal_r+0x122c>
40802498:	1023883a 	mov	r17,r2
4080249c:	04400a0e 	bge	zero,r17,408024c8 <___vfprintf_internal_r+0x1258>
408024a0:	d8801f17 	ldw	r2,124(sp)
408024a4:	1c47883a 	add	r3,r3,r17
408024a8:	44000015 	stw	r16,0(r8)
408024ac:	10800044 	addi	r2,r2,1
408024b0:	44400115 	stw	r17,4(r8)
408024b4:	d8c02015 	stw	r3,128(sp)
408024b8:	d8801f15 	stw	r2,124(sp)
408024bc:	010001c4 	movi	r4,7
408024c0:	20826516 	blt	r4,r2,40802e58 <___vfprintf_internal_r+0x1be8>
408024c4:	42000204 	addi	r8,r8,8
408024c8:	88026116 	blt	r17,zero,40802e50 <___vfprintf_internal_r+0x1be0>
408024cc:	d9003217 	ldw	r4,200(sp)
408024d0:	2463c83a 	sub	r17,r4,r17
408024d4:	04407b0e 	bge	zero,r17,408026c4 <___vfprintf_internal_r+0x1454>
408024d8:	05800404 	movi	r22,16
408024dc:	d8801f17 	ldw	r2,124(sp)
408024e0:	b4419d0e 	bge	r22,r17,40802b58 <___vfprintf_internal_r+0x18e8>
408024e4:	01102074 	movhi	r4,16513
408024e8:	2106b584 	addi	r4,r4,6870
408024ec:	d9002b15 	stw	r4,172(sp)
408024f0:	070001c4 	movi	fp,7
408024f4:	dcc02c17 	ldw	r19,176(sp)
408024f8:	00000306 	br	40802508 <___vfprintf_internal_r+0x1298>
408024fc:	42000204 	addi	r8,r8,8
40802500:	8c7ffc04 	addi	r17,r17,-16
40802504:	b441970e 	bge	r22,r17,40802b64 <___vfprintf_internal_r+0x18f4>
40802508:	18c00404 	addi	r3,r3,16
4080250c:	10800044 	addi	r2,r2,1
40802510:	45000015 	stw	r20,0(r8)
40802514:	45800115 	stw	r22,4(r8)
40802518:	d8c02015 	stw	r3,128(sp)
4080251c:	d8801f15 	stw	r2,124(sp)
40802520:	e0bff60e 	bge	fp,r2,408024fc <__alt_mem_onchip_flash_0_data+0xff7c24fc>
40802524:	d9801e04 	addi	r6,sp,120
40802528:	b80b883a 	mov	r5,r23
4080252c:	9809883a 	mov	r4,r19
40802530:	08087440 	call	40808744 <__sprint_r>
40802534:	103c501e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802538:	d8c02017 	ldw	r3,128(sp)
4080253c:	d8801f17 	ldw	r2,124(sp)
40802540:	da000404 	addi	r8,sp,16
40802544:	003fee06 	br	40802500 <__alt_mem_onchip_flash_0_data+0xff7c2500>
40802548:	d9002c17 	ldw	r4,176(sp)
4080254c:	d9801e04 	addi	r6,sp,120
40802550:	b80b883a 	mov	r5,r23
40802554:	08087440 	call	40808744 <__sprint_r>
40802558:	103c471e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
4080255c:	d8c02017 	ldw	r3,128(sp)
40802560:	df002787 	ldb	fp,158(sp)
40802564:	da000404 	addi	r8,sp,16
40802568:	003d5606 	br	40801ac4 <__alt_mem_onchip_flash_0_data+0xff7c1ac4>
4080256c:	9080040c 	andi	r2,r18,16
40802570:	10016126 	beq	r2,zero,40802af8 <___vfprintf_internal_r+0x1888>
40802574:	d8802d17 	ldw	r2,180(sp)
40802578:	14c00017 	ldw	r19,0(r2)
4080257c:	10800104 	addi	r2,r2,4
40802580:	d8802d15 	stw	r2,180(sp)
40802584:	982dd7fa 	srai	r22,r19,31
40802588:	b005883a 	mov	r2,r22
4080258c:	003c8206 	br	40801798 <__alt_mem_onchip_flash_0_data+0xff7c1798>
40802590:	9080040c 	andi	r2,r18,16
40802594:	10003526 	beq	r2,zero,4080266c <___vfprintf_internal_r+0x13fc>
40802598:	d9402d17 	ldw	r5,180(sp)
4080259c:	d8c02917 	ldw	r3,164(sp)
408025a0:	d8002785 	stb	zero,158(sp)
408025a4:	28800104 	addi	r2,r5,4
408025a8:	2cc00017 	ldw	r19,0(r5)
408025ac:	002d883a 	mov	r22,zero
408025b0:	18003716 	blt	r3,zero,40802690 <___vfprintf_internal_r+0x1420>
408025b4:	00ffdfc4 	movi	r3,-129
408025b8:	d8802d15 	stw	r2,180(sp)
408025bc:	90e4703a 	and	r18,r18,r3
408025c0:	0039883a 	mov	fp,zero
408025c4:	983df326 	beq	r19,zero,40801d94 <__alt_mem_onchip_flash_0_data+0xff7c1d94>
408025c8:	00800244 	movi	r2,9
408025cc:	14fc7b36 	bltu	r2,r19,408017bc <__alt_mem_onchip_flash_0_data+0xff7c17bc>
408025d0:	d8c02817 	ldw	r3,160(sp)
408025d4:	dc001dc4 	addi	r16,sp,119
408025d8:	9cc00c04 	addi	r19,r19,48
408025dc:	1c07c83a 	sub	r3,r3,r16
408025e0:	dcc01dc5 	stb	r19,119(sp)
408025e4:	d8c02e15 	stw	r3,184(sp)
408025e8:	003ce806 	br	4080198c <__alt_mem_onchip_flash_0_data+0xff7c198c>
408025ec:	d8803317 	ldw	r2,204(sp)
408025f0:	143fffc4 	addi	r16,r2,-1
408025f4:	043f4d0e 	bge	zero,r16,4080232c <__alt_mem_onchip_flash_0_data+0xff7c232c>
408025f8:	07000404 	movi	fp,16
408025fc:	e400810e 	bge	fp,r16,40802804 <___vfprintf_internal_r+0x1594>
40802600:	01502074 	movhi	r5,16513
40802604:	2946b584 	addi	r5,r5,6870
40802608:	d9402b15 	stw	r5,172(sp)
4080260c:	01c001c4 	movi	r7,7
40802610:	dcc02c17 	ldw	r19,176(sp)
40802614:	00000306 	br	40802624 <___vfprintf_internal_r+0x13b4>
40802618:	b5800204 	addi	r22,r22,8
4080261c:	843ffc04 	addi	r16,r16,-16
40802620:	e4007b0e 	bge	fp,r16,40802810 <___vfprintf_internal_r+0x15a0>
40802624:	18c00404 	addi	r3,r3,16
40802628:	8c400044 	addi	r17,r17,1
4080262c:	b5000015 	stw	r20,0(r22)
40802630:	b7000115 	stw	fp,4(r22)
40802634:	d8c02015 	stw	r3,128(sp)
40802638:	dc401f15 	stw	r17,124(sp)
4080263c:	3c7ff60e 	bge	r7,r17,40802618 <__alt_mem_onchip_flash_0_data+0xff7c2618>
40802640:	d9801e04 	addi	r6,sp,120
40802644:	b80b883a 	mov	r5,r23
40802648:	9809883a 	mov	r4,r19
4080264c:	d9c03c15 	stw	r7,240(sp)
40802650:	08087440 	call	40808744 <__sprint_r>
40802654:	d9c03c17 	ldw	r7,240(sp)
40802658:	103c071e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
4080265c:	d8c02017 	ldw	r3,128(sp)
40802660:	dc401f17 	ldw	r17,124(sp)
40802664:	dd800404 	addi	r22,sp,16
40802668:	003fec06 	br	4080261c <__alt_mem_onchip_flash_0_data+0xff7c261c>
4080266c:	9080100c 	andi	r2,r18,64
40802670:	d8002785 	stb	zero,158(sp)
40802674:	10010e26 	beq	r2,zero,40802ab0 <___vfprintf_internal_r+0x1840>
40802678:	d9002d17 	ldw	r4,180(sp)
4080267c:	d9402917 	ldw	r5,164(sp)
40802680:	002d883a 	mov	r22,zero
40802684:	20800104 	addi	r2,r4,4
40802688:	24c0000b 	ldhu	r19,0(r4)
4080268c:	283fc90e 	bge	r5,zero,408025b4 <__alt_mem_onchip_flash_0_data+0xff7c25b4>
40802690:	d8802d15 	stw	r2,180(sp)
40802694:	0039883a 	mov	fp,zero
40802698:	9d84b03a 	or	r2,r19,r22
4080269c:	103c461e 	bne	r2,zero,408017b8 <__alt_mem_onchip_flash_0_data+0xff7c17b8>
408026a0:	00800044 	movi	r2,1
408026a4:	003e6c06 	br	40802058 <__alt_mem_onchip_flash_0_data+0xff7c2058>
408026a8:	d9002c17 	ldw	r4,176(sp)
408026ac:	d9801e04 	addi	r6,sp,120
408026b0:	b80b883a 	mov	r5,r23
408026b4:	08087440 	call	40808744 <__sprint_r>
408026b8:	103bef1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408026bc:	d8c02017 	ldw	r3,128(sp)
408026c0:	da000404 	addi	r8,sp,16
408026c4:	d9003217 	ldw	r4,200(sp)
408026c8:	d8802617 	ldw	r2,152(sp)
408026cc:	d9403317 	ldw	r5,204(sp)
408026d0:	8123883a 	add	r17,r16,r4
408026d4:	11400216 	blt	r2,r5,408026e0 <___vfprintf_internal_r+0x1470>
408026d8:	9100004c 	andi	r4,r18,1
408026dc:	20000d26 	beq	r4,zero,40802714 <___vfprintf_internal_r+0x14a4>
408026e0:	d9003717 	ldw	r4,220(sp)
408026e4:	d9403417 	ldw	r5,208(sp)
408026e8:	1907883a 	add	r3,r3,r4
408026ec:	d9001f17 	ldw	r4,124(sp)
408026f0:	41400015 	stw	r5,0(r8)
408026f4:	d9403717 	ldw	r5,220(sp)
408026f8:	21000044 	addi	r4,r4,1
408026fc:	d8c02015 	stw	r3,128(sp)
40802700:	41400115 	stw	r5,4(r8)
40802704:	d9001f15 	stw	r4,124(sp)
40802708:	014001c4 	movi	r5,7
4080270c:	2901e816 	blt	r5,r4,40802eb0 <___vfprintf_internal_r+0x1c40>
40802710:	42000204 	addi	r8,r8,8
40802714:	d9003317 	ldw	r4,204(sp)
40802718:	8121883a 	add	r16,r16,r4
4080271c:	2085c83a 	sub	r2,r4,r2
40802720:	8461c83a 	sub	r16,r16,r17
40802724:	1400010e 	bge	r2,r16,4080272c <___vfprintf_internal_r+0x14bc>
40802728:	1021883a 	mov	r16,r2
4080272c:	04000a0e 	bge	zero,r16,40802758 <___vfprintf_internal_r+0x14e8>
40802730:	d9001f17 	ldw	r4,124(sp)
40802734:	1c07883a 	add	r3,r3,r16
40802738:	44400015 	stw	r17,0(r8)
4080273c:	21000044 	addi	r4,r4,1
40802740:	44000115 	stw	r16,4(r8)
40802744:	d8c02015 	stw	r3,128(sp)
40802748:	d9001f15 	stw	r4,124(sp)
4080274c:	014001c4 	movi	r5,7
40802750:	2901fb16 	blt	r5,r4,40802f40 <___vfprintf_internal_r+0x1cd0>
40802754:	42000204 	addi	r8,r8,8
40802758:	8001f716 	blt	r16,zero,40802f38 <___vfprintf_internal_r+0x1cc8>
4080275c:	1421c83a 	sub	r16,r2,r16
40802760:	043d380e 	bge	zero,r16,40801c44 <__alt_mem_onchip_flash_0_data+0xff7c1c44>
40802764:	04400404 	movi	r17,16
40802768:	d8801f17 	ldw	r2,124(sp)
4080276c:	8c3efb0e 	bge	r17,r16,4080235c <__alt_mem_onchip_flash_0_data+0xff7c235c>
40802770:	01502074 	movhi	r5,16513
40802774:	2946b584 	addi	r5,r5,6870
40802778:	d9402b15 	stw	r5,172(sp)
4080277c:	058001c4 	movi	r22,7
40802780:	dcc02c17 	ldw	r19,176(sp)
40802784:	00000306 	br	40802794 <___vfprintf_internal_r+0x1524>
40802788:	42000204 	addi	r8,r8,8
4080278c:	843ffc04 	addi	r16,r16,-16
40802790:	8c3ef50e 	bge	r17,r16,40802368 <__alt_mem_onchip_flash_0_data+0xff7c2368>
40802794:	18c00404 	addi	r3,r3,16
40802798:	10800044 	addi	r2,r2,1
4080279c:	45000015 	stw	r20,0(r8)
408027a0:	44400115 	stw	r17,4(r8)
408027a4:	d8c02015 	stw	r3,128(sp)
408027a8:	d8801f15 	stw	r2,124(sp)
408027ac:	b0bff60e 	bge	r22,r2,40802788 <__alt_mem_onchip_flash_0_data+0xff7c2788>
408027b0:	d9801e04 	addi	r6,sp,120
408027b4:	b80b883a 	mov	r5,r23
408027b8:	9809883a 	mov	r4,r19
408027bc:	08087440 	call	40808744 <__sprint_r>
408027c0:	103bad1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408027c4:	d8c02017 	ldw	r3,128(sp)
408027c8:	d8801f17 	ldw	r2,124(sp)
408027cc:	da000404 	addi	r8,sp,16
408027d0:	003fee06 	br	4080278c <__alt_mem_onchip_flash_0_data+0xff7c278c>
408027d4:	9088703a 	and	r4,r18,r2
408027d8:	203eab1e 	bne	r4,zero,40802288 <__alt_mem_onchip_flash_0_data+0xff7c2288>
408027dc:	dc401f17 	ldw	r17,124(sp)
408027e0:	40800115 	stw	r2,4(r8)
408027e4:	44000015 	stw	r16,0(r8)
408027e8:	8c400044 	addi	r17,r17,1
408027ec:	d8c02015 	stw	r3,128(sp)
408027f0:	dc401f15 	stw	r17,124(sp)
408027f4:	008001c4 	movi	r2,7
408027f8:	14400e16 	blt	r2,r17,40802834 <___vfprintf_internal_r+0x15c4>
408027fc:	45800204 	addi	r22,r8,8
40802800:	003eca06 	br	4080232c <__alt_mem_onchip_flash_0_data+0xff7c232c>
40802804:	01102074 	movhi	r4,16513
40802808:	2106b584 	addi	r4,r4,6870
4080280c:	d9002b15 	stw	r4,172(sp)
40802810:	d8802b17 	ldw	r2,172(sp)
40802814:	1c07883a 	add	r3,r3,r16
40802818:	8c400044 	addi	r17,r17,1
4080281c:	b0800015 	stw	r2,0(r22)
40802820:	b4000115 	stw	r16,4(r22)
40802824:	d8c02015 	stw	r3,128(sp)
40802828:	dc401f15 	stw	r17,124(sp)
4080282c:	008001c4 	movi	r2,7
40802830:	147ebd0e 	bge	r2,r17,40802328 <__alt_mem_onchip_flash_0_data+0xff7c2328>
40802834:	d9002c17 	ldw	r4,176(sp)
40802838:	d9801e04 	addi	r6,sp,120
4080283c:	b80b883a 	mov	r5,r23
40802840:	08087440 	call	40808744 <__sprint_r>
40802844:	103b8c1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802848:	d8c02017 	ldw	r3,128(sp)
4080284c:	dc401f17 	ldw	r17,124(sp)
40802850:	dd800404 	addi	r22,sp,16
40802854:	003eb506 	br	4080232c <__alt_mem_onchip_flash_0_data+0xff7c232c>
40802858:	d9002c17 	ldw	r4,176(sp)
4080285c:	d9801e04 	addi	r6,sp,120
40802860:	b80b883a 	mov	r5,r23
40802864:	08087440 	call	40808744 <__sprint_r>
40802868:	103b831e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
4080286c:	d8c02017 	ldw	r3,128(sp)
40802870:	dc401f17 	ldw	r17,124(sp)
40802874:	da000404 	addi	r8,sp,16
40802878:	003e8d06 	br	408022b0 <__alt_mem_onchip_flash_0_data+0xff7c22b0>
4080287c:	d9002c17 	ldw	r4,176(sp)
40802880:	d9801e04 	addi	r6,sp,120
40802884:	b80b883a 	mov	r5,r23
40802888:	08087440 	call	40808744 <__sprint_r>
4080288c:	103b7a1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802890:	d8c02017 	ldw	r3,128(sp)
40802894:	dc401f17 	ldw	r17,124(sp)
40802898:	dd800404 	addi	r22,sp,16
4080289c:	003e8f06 	br	408022dc <__alt_mem_onchip_flash_0_data+0xff7c22dc>
408028a0:	0027883a 	mov	r19,zero
408028a4:	003f4a06 	br	408025d0 <__alt_mem_onchip_flash_0_data+0xff7c25d0>
408028a8:	d9002c17 	ldw	r4,176(sp)
408028ac:	d9801e04 	addi	r6,sp,120
408028b0:	b80b883a 	mov	r5,r23
408028b4:	08087440 	call	40808744 <__sprint_r>
408028b8:	103b6f1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408028bc:	d8c02017 	ldw	r3,128(sp)
408028c0:	da000404 	addi	r8,sp,16
408028c4:	003c9d06 	br	40801b3c <__alt_mem_onchip_flash_0_data+0xff7c1b3c>
408028c8:	04e7c83a 	sub	r19,zero,r19
408028cc:	9804c03a 	cmpne	r2,r19,zero
408028d0:	05adc83a 	sub	r22,zero,r22
408028d4:	b0adc83a 	sub	r22,r22,r2
408028d8:	d8802917 	ldw	r2,164(sp)
408028dc:	07000b44 	movi	fp,45
408028e0:	df002785 	stb	fp,158(sp)
408028e4:	10017b16 	blt	r2,zero,40802ed4 <___vfprintf_internal_r+0x1c64>
408028e8:	00bfdfc4 	movi	r2,-129
408028ec:	90a4703a 	and	r18,r18,r2
408028f0:	003bb106 	br	408017b8 <__alt_mem_onchip_flash_0_data+0xff7c17b8>
408028f4:	d9003617 	ldw	r4,216(sp)
408028f8:	d9403817 	ldw	r5,224(sp)
408028fc:	da003d15 	stw	r8,244(sp)
40802900:	08083680 	call	40808368 <__fpclassifyd>
40802904:	da003d17 	ldw	r8,244(sp)
40802908:	1000f026 	beq	r2,zero,40802ccc <___vfprintf_internal_r+0x1a5c>
4080290c:	d9002917 	ldw	r4,164(sp)
40802910:	05bff7c4 	movi	r22,-33
40802914:	00bfffc4 	movi	r2,-1
40802918:	8dac703a 	and	r22,r17,r22
4080291c:	20820026 	beq	r4,r2,40803120 <___vfprintf_internal_r+0x1eb0>
40802920:	008011c4 	movi	r2,71
40802924:	b081f726 	beq	r22,r2,40803104 <___vfprintf_internal_r+0x1e94>
40802928:	d9003817 	ldw	r4,224(sp)
4080292c:	90c04014 	ori	r3,r18,256
40802930:	d8c02b15 	stw	r3,172(sp)
40802934:	20021516 	blt	r4,zero,4080318c <___vfprintf_internal_r+0x1f1c>
40802938:	dcc03817 	ldw	r19,224(sp)
4080293c:	d8002a05 	stb	zero,168(sp)
40802940:	00801984 	movi	r2,102
40802944:	8881f926 	beq	r17,r2,4080312c <___vfprintf_internal_r+0x1ebc>
40802948:	00801184 	movi	r2,70
4080294c:	88821c26 	beq	r17,r2,408031c0 <___vfprintf_internal_r+0x1f50>
40802950:	00801144 	movi	r2,69
40802954:	b081ef26 	beq	r22,r2,40803114 <___vfprintf_internal_r+0x1ea4>
40802958:	d8c02917 	ldw	r3,164(sp)
4080295c:	d8802104 	addi	r2,sp,132
40802960:	d8800315 	stw	r2,12(sp)
40802964:	d9403617 	ldw	r5,216(sp)
40802968:	d8802504 	addi	r2,sp,148
4080296c:	d9002c17 	ldw	r4,176(sp)
40802970:	d8800215 	stw	r2,8(sp)
40802974:	d8802604 	addi	r2,sp,152
40802978:	d8c00015 	stw	r3,0(sp)
4080297c:	d8800115 	stw	r2,4(sp)
40802980:	01c00084 	movi	r7,2
40802984:	980d883a 	mov	r6,r19
40802988:	d8c03c15 	stw	r3,240(sp)
4080298c:	da003d15 	stw	r8,244(sp)
40802990:	08038940 	call	40803894 <_dtoa_r>
40802994:	1021883a 	mov	r16,r2
40802998:	008019c4 	movi	r2,103
4080299c:	d8c03c17 	ldw	r3,240(sp)
408029a0:	da003d17 	ldw	r8,244(sp)
408029a4:	88817126 	beq	r17,r2,40802f6c <___vfprintf_internal_r+0x1cfc>
408029a8:	008011c4 	movi	r2,71
408029ac:	88829226 	beq	r17,r2,408033f8 <___vfprintf_internal_r+0x2188>
408029b0:	80f9883a 	add	fp,r16,r3
408029b4:	d9003617 	ldw	r4,216(sp)
408029b8:	000d883a 	mov	r6,zero
408029bc:	000f883a 	mov	r7,zero
408029c0:	980b883a 	mov	r5,r19
408029c4:	da003d15 	stw	r8,244(sp)
408029c8:	080c3bc0 	call	4080c3bc <__eqdf2>
408029cc:	da003d17 	ldw	r8,244(sp)
408029d0:	10018d26 	beq	r2,zero,40803008 <___vfprintf_internal_r+0x1d98>
408029d4:	d8802117 	ldw	r2,132(sp)
408029d8:	1700062e 	bgeu	r2,fp,408029f4 <___vfprintf_internal_r+0x1784>
408029dc:	01000c04 	movi	r4,48
408029e0:	10c00044 	addi	r3,r2,1
408029e4:	d8c02115 	stw	r3,132(sp)
408029e8:	11000005 	stb	r4,0(r2)
408029ec:	d8802117 	ldw	r2,132(sp)
408029f0:	173ffb36 	bltu	r2,fp,408029e0 <__alt_mem_onchip_flash_0_data+0xff7c29e0>
408029f4:	1405c83a 	sub	r2,r2,r16
408029f8:	d8803315 	stw	r2,204(sp)
408029fc:	008011c4 	movi	r2,71
40802a00:	b0817626 	beq	r22,r2,40802fdc <___vfprintf_internal_r+0x1d6c>
40802a04:	00801944 	movi	r2,101
40802a08:	1442810e 	bge	r2,r17,40803410 <___vfprintf_internal_r+0x21a0>
40802a0c:	d8c02617 	ldw	r3,152(sp)
40802a10:	00801984 	movi	r2,102
40802a14:	d8c03215 	stw	r3,200(sp)
40802a18:	8881fe26 	beq	r17,r2,40803214 <___vfprintf_internal_r+0x1fa4>
40802a1c:	d8c03217 	ldw	r3,200(sp)
40802a20:	d9003317 	ldw	r4,204(sp)
40802a24:	1901dd16 	blt	r3,r4,4080319c <___vfprintf_internal_r+0x1f2c>
40802a28:	9480004c 	andi	r18,r18,1
40802a2c:	90022b1e 	bne	r18,zero,408032dc <___vfprintf_internal_r+0x206c>
40802a30:	1805883a 	mov	r2,r3
40802a34:	18028016 	blt	r3,zero,40803438 <___vfprintf_internal_r+0x21c8>
40802a38:	d8c03217 	ldw	r3,200(sp)
40802a3c:	044019c4 	movi	r17,103
40802a40:	d8c02e15 	stw	r3,184(sp)
40802a44:	df002a07 	ldb	fp,168(sp)
40802a48:	e001531e 	bne	fp,zero,40802f98 <___vfprintf_internal_r+0x1d28>
40802a4c:	df002783 	ldbu	fp,158(sp)
40802a50:	d8802a15 	stw	r2,168(sp)
40802a54:	dc802b17 	ldw	r18,172(sp)
40802a58:	d8002915 	stw	zero,164(sp)
40802a5c:	003bd106 	br	408019a4 <__alt_mem_onchip_flash_0_data+0xff7c19a4>
40802a60:	d8802d17 	ldw	r2,180(sp)
40802a64:	d8c02d17 	ldw	r3,180(sp)
40802a68:	d9002d17 	ldw	r4,180(sp)
40802a6c:	10800017 	ldw	r2,0(r2)
40802a70:	18c00117 	ldw	r3,4(r3)
40802a74:	21000204 	addi	r4,r4,8
40802a78:	d8803615 	stw	r2,216(sp)
40802a7c:	d8c03815 	stw	r3,224(sp)
40802a80:	d9002d15 	stw	r4,180(sp)
40802a84:	003b7506 	br	4080185c <__alt_mem_onchip_flash_0_data+0xff7c185c>
40802a88:	ac400007 	ldb	r17,0(r21)
40802a8c:	003a5906 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40802a90:	9080100c 	andi	r2,r18,64
40802a94:	1000a826 	beq	r2,zero,40802d38 <___vfprintf_internal_r+0x1ac8>
40802a98:	d9002d17 	ldw	r4,180(sp)
40802a9c:	002d883a 	mov	r22,zero
40802aa0:	24c0000b 	ldhu	r19,0(r4)
40802aa4:	21000104 	addi	r4,r4,4
40802aa8:	d9002d15 	stw	r4,180(sp)
40802aac:	003ccb06 	br	40801ddc <__alt_mem_onchip_flash_0_data+0xff7c1ddc>
40802ab0:	d8c02d17 	ldw	r3,180(sp)
40802ab4:	d9002917 	ldw	r4,164(sp)
40802ab8:	002d883a 	mov	r22,zero
40802abc:	18800104 	addi	r2,r3,4
40802ac0:	1cc00017 	ldw	r19,0(r3)
40802ac4:	203ebb0e 	bge	r4,zero,408025b4 <__alt_mem_onchip_flash_0_data+0xff7c25b4>
40802ac8:	003ef106 	br	40802690 <__alt_mem_onchip_flash_0_data+0xff7c2690>
40802acc:	9080040c 	andi	r2,r18,16
40802ad0:	1000921e 	bne	r2,zero,40802d1c <___vfprintf_internal_r+0x1aac>
40802ad4:	9480100c 	andi	r18,r18,64
40802ad8:	90013926 	beq	r18,zero,40802fc0 <___vfprintf_internal_r+0x1d50>
40802adc:	d9002d17 	ldw	r4,180(sp)
40802ae0:	d9402f17 	ldw	r5,188(sp)
40802ae4:	20800017 	ldw	r2,0(r4)
40802ae8:	21000104 	addi	r4,r4,4
40802aec:	d9002d15 	stw	r4,180(sp)
40802af0:	1140000d 	sth	r5,0(r2)
40802af4:	003a1606 	br	40801350 <__alt_mem_onchip_flash_0_data+0xff7c1350>
40802af8:	9080100c 	andi	r2,r18,64
40802afc:	10008026 	beq	r2,zero,40802d00 <___vfprintf_internal_r+0x1a90>
40802b00:	d8c02d17 	ldw	r3,180(sp)
40802b04:	1cc0000f 	ldh	r19,0(r3)
40802b08:	18c00104 	addi	r3,r3,4
40802b0c:	d8c02d15 	stw	r3,180(sp)
40802b10:	982dd7fa 	srai	r22,r19,31
40802b14:	b005883a 	mov	r2,r22
40802b18:	003b1f06 	br	40801798 <__alt_mem_onchip_flash_0_data+0xff7c1798>
40802b1c:	9080100c 	andi	r2,r18,64
40802b20:	d8002785 	stb	zero,158(sp)
40802b24:	10008a1e 	bne	r2,zero,40802d50 <___vfprintf_internal_r+0x1ae0>
40802b28:	d9402d17 	ldw	r5,180(sp)
40802b2c:	d8c02917 	ldw	r3,164(sp)
40802b30:	002d883a 	mov	r22,zero
40802b34:	28800104 	addi	r2,r5,4
40802b38:	2cc00017 	ldw	r19,0(r5)
40802b3c:	183e4b0e 	bge	r3,zero,4080246c <__alt_mem_onchip_flash_0_data+0xff7c246c>
40802b40:	9d86b03a 	or	r3,r19,r22
40802b44:	d8802d15 	stw	r2,180(sp)
40802b48:	183e4c1e 	bne	r3,zero,4080247c <__alt_mem_onchip_flash_0_data+0xff7c247c>
40802b4c:	0039883a 	mov	fp,zero
40802b50:	0005883a 	mov	r2,zero
40802b54:	003d4006 	br	40802058 <__alt_mem_onchip_flash_0_data+0xff7c2058>
40802b58:	01502074 	movhi	r5,16513
40802b5c:	2946b584 	addi	r5,r5,6870
40802b60:	d9402b15 	stw	r5,172(sp)
40802b64:	d9402b17 	ldw	r5,172(sp)
40802b68:	1c47883a 	add	r3,r3,r17
40802b6c:	10800044 	addi	r2,r2,1
40802b70:	41400015 	stw	r5,0(r8)
40802b74:	44400115 	stw	r17,4(r8)
40802b78:	d8c02015 	stw	r3,128(sp)
40802b7c:	d8801f15 	stw	r2,124(sp)
40802b80:	010001c4 	movi	r4,7
40802b84:	20bec816 	blt	r4,r2,408026a8 <__alt_mem_onchip_flash_0_data+0xff7c26a8>
40802b88:	42000204 	addi	r8,r8,8
40802b8c:	003ecd06 	br	408026c4 <__alt_mem_onchip_flash_0_data+0xff7c26c4>
40802b90:	d9002917 	ldw	r4,164(sp)
40802b94:	d8002785 	stb	zero,158(sp)
40802b98:	203d2d16 	blt	r4,zero,40802050 <__alt_mem_onchip_flash_0_data+0xff7c2050>
40802b9c:	00bfdfc4 	movi	r2,-129
40802ba0:	90a4703a 	and	r18,r18,r2
40802ba4:	003a9106 	br	408015ec <__alt_mem_onchip_flash_0_data+0xff7c15ec>
40802ba8:	01102074 	movhi	r4,16513
40802bac:	2106b584 	addi	r4,r4,6870
40802bb0:	d9002b15 	stw	r4,172(sp)
40802bb4:	003c0c06 	br	40801be8 <__alt_mem_onchip_flash_0_data+0xff7c1be8>
40802bb8:	d9002c17 	ldw	r4,176(sp)
40802bbc:	d9801e04 	addi	r6,sp,120
40802bc0:	b80b883a 	mov	r5,r23
40802bc4:	08087440 	call	40808744 <__sprint_r>
40802bc8:	103aab1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802bcc:	d8c02017 	ldw	r3,128(sp)
40802bd0:	da000404 	addi	r8,sp,16
40802bd4:	003d4106 	br	408020dc <__alt_mem_onchip_flash_0_data+0xff7c20dc>
40802bd8:	d8801f17 	ldw	r2,124(sp)
40802bdc:	01502074 	movhi	r5,16513
40802be0:	01000044 	movi	r4,1
40802be4:	18c00044 	addi	r3,r3,1
40802be8:	10800044 	addi	r2,r2,1
40802bec:	2946b504 	addi	r5,r5,6868
40802bf0:	41000115 	stw	r4,4(r8)
40802bf4:	41400015 	stw	r5,0(r8)
40802bf8:	d8c02015 	stw	r3,128(sp)
40802bfc:	d8801f15 	stw	r2,124(sp)
40802c00:	010001c4 	movi	r4,7
40802c04:	20805c16 	blt	r4,r2,40802d78 <___vfprintf_internal_r+0x1b08>
40802c08:	42000204 	addi	r8,r8,8
40802c0c:	8800041e 	bne	r17,zero,40802c20 <___vfprintf_internal_r+0x19b0>
40802c10:	d8803317 	ldw	r2,204(sp)
40802c14:	1000021e 	bne	r2,zero,40802c20 <___vfprintf_internal_r+0x19b0>
40802c18:	9080004c 	andi	r2,r18,1
40802c1c:	103c0926 	beq	r2,zero,40801c44 <__alt_mem_onchip_flash_0_data+0xff7c1c44>
40802c20:	d9003717 	ldw	r4,220(sp)
40802c24:	d8801f17 	ldw	r2,124(sp)
40802c28:	d9403417 	ldw	r5,208(sp)
40802c2c:	20c7883a 	add	r3,r4,r3
40802c30:	10800044 	addi	r2,r2,1
40802c34:	41000115 	stw	r4,4(r8)
40802c38:	41400015 	stw	r5,0(r8)
40802c3c:	d8c02015 	stw	r3,128(sp)
40802c40:	d8801f15 	stw	r2,124(sp)
40802c44:	010001c4 	movi	r4,7
40802c48:	20812116 	blt	r4,r2,408030d0 <___vfprintf_internal_r+0x1e60>
40802c4c:	42000204 	addi	r8,r8,8
40802c50:	0463c83a 	sub	r17,zero,r17
40802c54:	0440730e 	bge	zero,r17,40802e24 <___vfprintf_internal_r+0x1bb4>
40802c58:	05800404 	movi	r22,16
40802c5c:	b440860e 	bge	r22,r17,40802e78 <___vfprintf_internal_r+0x1c08>
40802c60:	01502074 	movhi	r5,16513
40802c64:	2946b584 	addi	r5,r5,6870
40802c68:	d9402b15 	stw	r5,172(sp)
40802c6c:	070001c4 	movi	fp,7
40802c70:	dcc02c17 	ldw	r19,176(sp)
40802c74:	00000306 	br	40802c84 <___vfprintf_internal_r+0x1a14>
40802c78:	42000204 	addi	r8,r8,8
40802c7c:	8c7ffc04 	addi	r17,r17,-16
40802c80:	b440800e 	bge	r22,r17,40802e84 <___vfprintf_internal_r+0x1c14>
40802c84:	18c00404 	addi	r3,r3,16
40802c88:	10800044 	addi	r2,r2,1
40802c8c:	45000015 	stw	r20,0(r8)
40802c90:	45800115 	stw	r22,4(r8)
40802c94:	d8c02015 	stw	r3,128(sp)
40802c98:	d8801f15 	stw	r2,124(sp)
40802c9c:	e0bff60e 	bge	fp,r2,40802c78 <__alt_mem_onchip_flash_0_data+0xff7c2c78>
40802ca0:	d9801e04 	addi	r6,sp,120
40802ca4:	b80b883a 	mov	r5,r23
40802ca8:	9809883a 	mov	r4,r19
40802cac:	08087440 	call	40808744 <__sprint_r>
40802cb0:	103a711e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802cb4:	d8c02017 	ldw	r3,128(sp)
40802cb8:	d8801f17 	ldw	r2,124(sp)
40802cbc:	da000404 	addi	r8,sp,16
40802cc0:	003fee06 	br	40802c7c <__alt_mem_onchip_flash_0_data+0xff7c2c7c>
40802cc4:	00bfffc4 	movi	r2,-1
40802cc8:	003a6f06 	br	40801688 <__alt_mem_onchip_flash_0_data+0xff7c1688>
40802ccc:	008011c4 	movi	r2,71
40802cd0:	1440b816 	blt	r2,r17,40802fb4 <___vfprintf_internal_r+0x1d44>
40802cd4:	04102074 	movhi	r16,16513
40802cd8:	8406a704 	addi	r16,r16,6812
40802cdc:	00c000c4 	movi	r3,3
40802ce0:	00bfdfc4 	movi	r2,-129
40802ce4:	d8c02a15 	stw	r3,168(sp)
40802ce8:	90a4703a 	and	r18,r18,r2
40802cec:	df002783 	ldbu	fp,158(sp)
40802cf0:	d8c02e15 	stw	r3,184(sp)
40802cf4:	d8002915 	stw	zero,164(sp)
40802cf8:	d8003215 	stw	zero,200(sp)
40802cfc:	003b2906 	br	408019a4 <__alt_mem_onchip_flash_0_data+0xff7c19a4>
40802d00:	d9002d17 	ldw	r4,180(sp)
40802d04:	24c00017 	ldw	r19,0(r4)
40802d08:	21000104 	addi	r4,r4,4
40802d0c:	d9002d15 	stw	r4,180(sp)
40802d10:	982dd7fa 	srai	r22,r19,31
40802d14:	b005883a 	mov	r2,r22
40802d18:	003a9f06 	br	40801798 <__alt_mem_onchip_flash_0_data+0xff7c1798>
40802d1c:	d9402d17 	ldw	r5,180(sp)
40802d20:	d8c02f17 	ldw	r3,188(sp)
40802d24:	28800017 	ldw	r2,0(r5)
40802d28:	29400104 	addi	r5,r5,4
40802d2c:	d9402d15 	stw	r5,180(sp)
40802d30:	10c00015 	stw	r3,0(r2)
40802d34:	00398606 	br	40801350 <__alt_mem_onchip_flash_0_data+0xff7c1350>
40802d38:	d9402d17 	ldw	r5,180(sp)
40802d3c:	002d883a 	mov	r22,zero
40802d40:	2cc00017 	ldw	r19,0(r5)
40802d44:	29400104 	addi	r5,r5,4
40802d48:	d9402d15 	stw	r5,180(sp)
40802d4c:	003c2306 	br	40801ddc <__alt_mem_onchip_flash_0_data+0xff7c1ddc>
40802d50:	d8c02d17 	ldw	r3,180(sp)
40802d54:	d9002917 	ldw	r4,164(sp)
40802d58:	002d883a 	mov	r22,zero
40802d5c:	18800104 	addi	r2,r3,4
40802d60:	1cc0000b 	ldhu	r19,0(r3)
40802d64:	203dc10e 	bge	r4,zero,4080246c <__alt_mem_onchip_flash_0_data+0xff7c246c>
40802d68:	003f7506 	br	40802b40 <__alt_mem_onchip_flash_0_data+0xff7c2b40>
40802d6c:	04102074 	movhi	r16,16513
40802d70:	8406a504 	addi	r16,r16,6804
40802d74:	003acc06 	br	408018a8 <__alt_mem_onchip_flash_0_data+0xff7c18a8>
40802d78:	d9002c17 	ldw	r4,176(sp)
40802d7c:	d9801e04 	addi	r6,sp,120
40802d80:	b80b883a 	mov	r5,r23
40802d84:	08087440 	call	40808744 <__sprint_r>
40802d88:	103a3b1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802d8c:	dc402617 	ldw	r17,152(sp)
40802d90:	d8c02017 	ldw	r3,128(sp)
40802d94:	da000404 	addi	r8,sp,16
40802d98:	003f9c06 	br	40802c0c <__alt_mem_onchip_flash_0_data+0xff7c2c0c>
40802d9c:	ac400043 	ldbu	r17,1(r21)
40802da0:	94800814 	ori	r18,r18,32
40802da4:	ad400044 	addi	r21,r21,1
40802da8:	8c403fcc 	andi	r17,r17,255
40802dac:	8c40201c 	xori	r17,r17,128
40802db0:	8c7fe004 	addi	r17,r17,-128
40802db4:	00398f06 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
40802db8:	d8c02d15 	stw	r3,180(sp)
40802dbc:	0039883a 	mov	fp,zero
40802dc0:	003e3506 	br	40802698 <__alt_mem_onchip_flash_0_data+0xff7c2698>
40802dc4:	d9002c17 	ldw	r4,176(sp)
40802dc8:	d9801e04 	addi	r6,sp,120
40802dcc:	b80b883a 	mov	r5,r23
40802dd0:	08087440 	call	40808744 <__sprint_r>
40802dd4:	103a281e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802dd8:	d8c02017 	ldw	r3,128(sp)
40802ddc:	da000404 	addi	r8,sp,16
40802de0:	003cd006 	br	40802124 <__alt_mem_onchip_flash_0_data+0xff7c2124>
40802de4:	8009883a 	mov	r4,r16
40802de8:	da003d15 	stw	r8,244(sp)
40802dec:	08011d80 	call	408011d8 <strlen>
40802df0:	d8802e15 	stw	r2,184(sp)
40802df4:	da003d17 	ldw	r8,244(sp)
40802df8:	103c340e 	bge	r2,zero,40801ecc <__alt_mem_onchip_flash_0_data+0xff7c1ecc>
40802dfc:	0005883a 	mov	r2,zero
40802e00:	003c3206 	br	40801ecc <__alt_mem_onchip_flash_0_data+0xff7c1ecc>
40802e04:	d9002c17 	ldw	r4,176(sp)
40802e08:	d9801e04 	addi	r6,sp,120
40802e0c:	b80b883a 	mov	r5,r23
40802e10:	08087440 	call	40808744 <__sprint_r>
40802e14:	103a181e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802e18:	d8c02017 	ldw	r3,128(sp)
40802e1c:	d8801f17 	ldw	r2,124(sp)
40802e20:	da000404 	addi	r8,sp,16
40802e24:	d9403317 	ldw	r5,204(sp)
40802e28:	10800044 	addi	r2,r2,1
40802e2c:	44000015 	stw	r16,0(r8)
40802e30:	28c7883a 	add	r3,r5,r3
40802e34:	003b7d06 	br	40801c2c <__alt_mem_onchip_flash_0_data+0xff7c1c2c>
40802e38:	01102074 	movhi	r4,16513
40802e3c:	2106b984 	addi	r4,r4,6886
40802e40:	d9003515 	stw	r4,212(sp)
40802e44:	003b1406 	br	40801a98 <__alt_mem_onchip_flash_0_data+0xff7c1a98>
40802e48:	013fffc4 	movi	r4,-1
40802e4c:	003a3506 	br	40801724 <__alt_mem_onchip_flash_0_data+0xff7c1724>
40802e50:	0023883a 	mov	r17,zero
40802e54:	003d9d06 	br	408024cc <__alt_mem_onchip_flash_0_data+0xff7c24cc>
40802e58:	d9002c17 	ldw	r4,176(sp)
40802e5c:	d9801e04 	addi	r6,sp,120
40802e60:	b80b883a 	mov	r5,r23
40802e64:	08087440 	call	40808744 <__sprint_r>
40802e68:	103a031e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802e6c:	d8c02017 	ldw	r3,128(sp)
40802e70:	da000404 	addi	r8,sp,16
40802e74:	003d9406 	br	408024c8 <__alt_mem_onchip_flash_0_data+0xff7c24c8>
40802e78:	01102074 	movhi	r4,16513
40802e7c:	2106b584 	addi	r4,r4,6870
40802e80:	d9002b15 	stw	r4,172(sp)
40802e84:	d9002b17 	ldw	r4,172(sp)
40802e88:	1c47883a 	add	r3,r3,r17
40802e8c:	10800044 	addi	r2,r2,1
40802e90:	41000015 	stw	r4,0(r8)
40802e94:	44400115 	stw	r17,4(r8)
40802e98:	d8c02015 	stw	r3,128(sp)
40802e9c:	d8801f15 	stw	r2,124(sp)
40802ea0:	010001c4 	movi	r4,7
40802ea4:	20bfd716 	blt	r4,r2,40802e04 <__alt_mem_onchip_flash_0_data+0xff7c2e04>
40802ea8:	42000204 	addi	r8,r8,8
40802eac:	003fdd06 	br	40802e24 <__alt_mem_onchip_flash_0_data+0xff7c2e24>
40802eb0:	d9002c17 	ldw	r4,176(sp)
40802eb4:	d9801e04 	addi	r6,sp,120
40802eb8:	b80b883a 	mov	r5,r23
40802ebc:	08087440 	call	40808744 <__sprint_r>
40802ec0:	1039ed1e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802ec4:	d8802617 	ldw	r2,152(sp)
40802ec8:	d8c02017 	ldw	r3,128(sp)
40802ecc:	da000404 	addi	r8,sp,16
40802ed0:	003e1006 	br	40802714 <__alt_mem_onchip_flash_0_data+0xff7c2714>
40802ed4:	00800044 	movi	r2,1
40802ed8:	10803fcc 	andi	r2,r2,255
40802edc:	00c00044 	movi	r3,1
40802ee0:	10fa3526 	beq	r2,r3,408017b8 <__alt_mem_onchip_flash_0_data+0xff7c17b8>
40802ee4:	00c00084 	movi	r3,2
40802ee8:	10fbcb26 	beq	r2,r3,40801e18 <__alt_mem_onchip_flash_0_data+0xff7c1e18>
40802eec:	003a8f06 	br	4080192c <__alt_mem_onchip_flash_0_data+0xff7c192c>
40802ef0:	01102074 	movhi	r4,16513
40802ef4:	2106b984 	addi	r4,r4,6886
40802ef8:	d9003515 	stw	r4,212(sp)
40802efc:	003b7606 	br	40801cd8 <__alt_mem_onchip_flash_0_data+0xff7c1cd8>
40802f00:	d8802917 	ldw	r2,164(sp)
40802f04:	00c00184 	movi	r3,6
40802f08:	1880012e 	bgeu	r3,r2,40802f10 <___vfprintf_internal_r+0x1ca0>
40802f0c:	1805883a 	mov	r2,r3
40802f10:	d8802e15 	stw	r2,184(sp)
40802f14:	1000ef16 	blt	r2,zero,408032d4 <___vfprintf_internal_r+0x2064>
40802f18:	04102074 	movhi	r16,16513
40802f1c:	d8802a15 	stw	r2,168(sp)
40802f20:	dcc02d15 	stw	r19,180(sp)
40802f24:	d8002915 	stw	zero,164(sp)
40802f28:	d8003215 	stw	zero,200(sp)
40802f2c:	8406b304 	addi	r16,r16,6860
40802f30:	0039883a 	mov	fp,zero
40802f34:	003aa206 	br	408019c0 <__alt_mem_onchip_flash_0_data+0xff7c19c0>
40802f38:	0021883a 	mov	r16,zero
40802f3c:	003e0706 	br	4080275c <__alt_mem_onchip_flash_0_data+0xff7c275c>
40802f40:	d9002c17 	ldw	r4,176(sp)
40802f44:	d9801e04 	addi	r6,sp,120
40802f48:	b80b883a 	mov	r5,r23
40802f4c:	08087440 	call	40808744 <__sprint_r>
40802f50:	1039c91e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
40802f54:	d8802617 	ldw	r2,152(sp)
40802f58:	d9403317 	ldw	r5,204(sp)
40802f5c:	d8c02017 	ldw	r3,128(sp)
40802f60:	da000404 	addi	r8,sp,16
40802f64:	2885c83a 	sub	r2,r5,r2
40802f68:	003dfb06 	br	40802758 <__alt_mem_onchip_flash_0_data+0xff7c2758>
40802f6c:	9080004c 	andi	r2,r18,1
40802f70:	103e8f1e 	bne	r2,zero,408029b0 <__alt_mem_onchip_flash_0_data+0xff7c29b0>
40802f74:	d8802117 	ldw	r2,132(sp)
40802f78:	003e9e06 	br	408029f4 <__alt_mem_onchip_flash_0_data+0xff7c29f4>
40802f7c:	1025883a 	mov	r18,r2
40802f80:	0039883a 	mov	fp,zero
40802f84:	00800084 	movi	r2,2
40802f88:	003fd306 	br	40802ed8 <__alt_mem_onchip_flash_0_data+0xff7c2ed8>
40802f8c:	07000b44 	movi	fp,45
40802f90:	df002785 	stb	fp,158(sp)
40802f94:	003a4006 	br	40801898 <__alt_mem_onchip_flash_0_data+0xff7c1898>
40802f98:	00c00b44 	movi	r3,45
40802f9c:	d8c02785 	stb	r3,158(sp)
40802fa0:	d8802a15 	stw	r2,168(sp)
40802fa4:	dc802b17 	ldw	r18,172(sp)
40802fa8:	d8002915 	stw	zero,164(sp)
40802fac:	07000b44 	movi	fp,45
40802fb0:	003a8006 	br	408019b4 <__alt_mem_onchip_flash_0_data+0xff7c19b4>
40802fb4:	04102074 	movhi	r16,16513
40802fb8:	8406a804 	addi	r16,r16,6816
40802fbc:	003f4706 	br	40802cdc <__alt_mem_onchip_flash_0_data+0xff7c2cdc>
40802fc0:	d8c02d17 	ldw	r3,180(sp)
40802fc4:	d9002f17 	ldw	r4,188(sp)
40802fc8:	18800017 	ldw	r2,0(r3)
40802fcc:	18c00104 	addi	r3,r3,4
40802fd0:	d8c02d15 	stw	r3,180(sp)
40802fd4:	11000015 	stw	r4,0(r2)
40802fd8:	0038dd06 	br	40801350 <__alt_mem_onchip_flash_0_data+0xff7c1350>
40802fdc:	dd802617 	ldw	r22,152(sp)
40802fe0:	00bfff44 	movi	r2,-3
40802fe4:	b0801c16 	blt	r22,r2,40803058 <___vfprintf_internal_r+0x1de8>
40802fe8:	d9402917 	ldw	r5,164(sp)
40802fec:	2d801a16 	blt	r5,r22,40803058 <___vfprintf_internal_r+0x1de8>
40802ff0:	dd803215 	stw	r22,200(sp)
40802ff4:	003e8906 	br	40802a1c <__alt_mem_onchip_flash_0_data+0xff7c2a1c>
40802ff8:	01102074 	movhi	r4,16513
40802ffc:	2106b584 	addi	r4,r4,6870
40803000:	d9002b15 	stw	r4,172(sp)
40803004:	003c9106 	br	4080224c <__alt_mem_onchip_flash_0_data+0xff7c224c>
40803008:	e005883a 	mov	r2,fp
4080300c:	003e7906 	br	408029f4 <__alt_mem_onchip_flash_0_data+0xff7c29f4>
40803010:	d9402917 	ldw	r5,164(sp)
40803014:	df002783 	ldbu	fp,158(sp)
40803018:	dcc02d15 	stw	r19,180(sp)
4080301c:	d9402a15 	stw	r5,168(sp)
40803020:	d9402e15 	stw	r5,184(sp)
40803024:	d8002915 	stw	zero,164(sp)
40803028:	d8003215 	stw	zero,200(sp)
4080302c:	003a5d06 	br	408019a4 <__alt_mem_onchip_flash_0_data+0xff7c19a4>
40803030:	9080004c 	andi	r2,r18,1
40803034:	0039883a 	mov	fp,zero
40803038:	10000426 	beq	r2,zero,4080304c <___vfprintf_internal_r+0x1ddc>
4080303c:	00800c04 	movi	r2,48
40803040:	dc001dc4 	addi	r16,sp,119
40803044:	d8801dc5 	stb	r2,119(sp)
40803048:	003b8006 	br	40801e4c <__alt_mem_onchip_flash_0_data+0xff7c1e4c>
4080304c:	d8002e15 	stw	zero,184(sp)
40803050:	dc001e04 	addi	r16,sp,120
40803054:	003a4d06 	br	4080198c <__alt_mem_onchip_flash_0_data+0xff7c198c>
40803058:	8c7fff84 	addi	r17,r17,-2
4080305c:	b5bfffc4 	addi	r22,r22,-1
40803060:	dd802615 	stw	r22,152(sp)
40803064:	dc4022c5 	stb	r17,139(sp)
40803068:	b000bf16 	blt	r22,zero,40803368 <___vfprintf_internal_r+0x20f8>
4080306c:	00800ac4 	movi	r2,43
40803070:	d8802305 	stb	r2,140(sp)
40803074:	00800244 	movi	r2,9
40803078:	15807016 	blt	r2,r22,4080323c <___vfprintf_internal_r+0x1fcc>
4080307c:	00800c04 	movi	r2,48
40803080:	b5800c04 	addi	r22,r22,48
40803084:	d8802345 	stb	r2,141(sp)
40803088:	dd802385 	stb	r22,142(sp)
4080308c:	d88023c4 	addi	r2,sp,143
40803090:	df0022c4 	addi	fp,sp,139
40803094:	d8c03317 	ldw	r3,204(sp)
40803098:	1739c83a 	sub	fp,r2,fp
4080309c:	d9003317 	ldw	r4,204(sp)
408030a0:	e0c7883a 	add	r3,fp,r3
408030a4:	df003a15 	stw	fp,232(sp)
408030a8:	d8c02e15 	stw	r3,184(sp)
408030ac:	00800044 	movi	r2,1
408030b0:	1100b30e 	bge	r2,r4,40803380 <___vfprintf_internal_r+0x2110>
408030b4:	d8c02e17 	ldw	r3,184(sp)
408030b8:	18c00044 	addi	r3,r3,1
408030bc:	d8c02e15 	stw	r3,184(sp)
408030c0:	1805883a 	mov	r2,r3
408030c4:	1800ac16 	blt	r3,zero,40803378 <___vfprintf_internal_r+0x2108>
408030c8:	d8003215 	stw	zero,200(sp)
408030cc:	003e5d06 	br	40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
408030d0:	d9002c17 	ldw	r4,176(sp)
408030d4:	d9801e04 	addi	r6,sp,120
408030d8:	b80b883a 	mov	r5,r23
408030dc:	08087440 	call	40808744 <__sprint_r>
408030e0:	1039651e 	bne	r2,zero,40801678 <__alt_mem_onchip_flash_0_data+0xff7c1678>
408030e4:	dc402617 	ldw	r17,152(sp)
408030e8:	d8c02017 	ldw	r3,128(sp)
408030ec:	d8801f17 	ldw	r2,124(sp)
408030f0:	da000404 	addi	r8,sp,16
408030f4:	003ed606 	br	40802c50 <__alt_mem_onchip_flash_0_data+0xff7c2c50>
408030f8:	582b883a 	mov	r21,r11
408030fc:	d8002915 	stw	zero,164(sp)
40803100:	0038bd06 	br	408013f8 <__alt_mem_onchip_flash_0_data+0xff7c13f8>
40803104:	d8802917 	ldw	r2,164(sp)
40803108:	103e071e 	bne	r2,zero,40802928 <__alt_mem_onchip_flash_0_data+0xff7c2928>
4080310c:	dc002915 	stw	r16,164(sp)
40803110:	003e0506 	br	40802928 <__alt_mem_onchip_flash_0_data+0xff7c2928>
40803114:	d9002917 	ldw	r4,164(sp)
40803118:	20c00044 	addi	r3,r4,1
4080311c:	003e0f06 	br	4080295c <__alt_mem_onchip_flash_0_data+0xff7c295c>
40803120:	01400184 	movi	r5,6
40803124:	d9402915 	stw	r5,164(sp)
40803128:	003dff06 	br	40802928 <__alt_mem_onchip_flash_0_data+0xff7c2928>
4080312c:	d8802104 	addi	r2,sp,132
40803130:	d8800315 	stw	r2,12(sp)
40803134:	d8802504 	addi	r2,sp,148
40803138:	d8800215 	stw	r2,8(sp)
4080313c:	d8802604 	addi	r2,sp,152
40803140:	d8800115 	stw	r2,4(sp)
40803144:	d8802917 	ldw	r2,164(sp)
40803148:	d9403617 	ldw	r5,216(sp)
4080314c:	d9002c17 	ldw	r4,176(sp)
40803150:	d8800015 	stw	r2,0(sp)
40803154:	01c000c4 	movi	r7,3
40803158:	980d883a 	mov	r6,r19
4080315c:	da003d15 	stw	r8,244(sp)
40803160:	08038940 	call	40803894 <_dtoa_r>
40803164:	d8c02917 	ldw	r3,164(sp)
40803168:	da003d17 	ldw	r8,244(sp)
4080316c:	1021883a 	mov	r16,r2
40803170:	10f9883a 	add	fp,r2,r3
40803174:	81000007 	ldb	r4,0(r16)
40803178:	00800c04 	movi	r2,48
4080317c:	20805e26 	beq	r4,r2,408032f8 <___vfprintf_internal_r+0x2088>
40803180:	d8c02617 	ldw	r3,152(sp)
40803184:	e0f9883a 	add	fp,fp,r3
40803188:	003e0a06 	br	408029b4 <__alt_mem_onchip_flash_0_data+0xff7c29b4>
4080318c:	00c00b44 	movi	r3,45
40803190:	24e0003c 	xorhi	r19,r4,32768
40803194:	d8c02a05 	stb	r3,168(sp)
40803198:	003de906 	br	40802940 <__alt_mem_onchip_flash_0_data+0xff7c2940>
4080319c:	d8c03217 	ldw	r3,200(sp)
408031a0:	00c07a0e 	bge	zero,r3,4080338c <___vfprintf_internal_r+0x211c>
408031a4:	00800044 	movi	r2,1
408031a8:	d9003317 	ldw	r4,204(sp)
408031ac:	1105883a 	add	r2,r2,r4
408031b0:	d8802e15 	stw	r2,184(sp)
408031b4:	10004e16 	blt	r2,zero,408032f0 <___vfprintf_internal_r+0x2080>
408031b8:	044019c4 	movi	r17,103
408031bc:	003e2106 	br	40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
408031c0:	d9002917 	ldw	r4,164(sp)
408031c4:	d8802104 	addi	r2,sp,132
408031c8:	d8800315 	stw	r2,12(sp)
408031cc:	d9000015 	stw	r4,0(sp)
408031d0:	d8802504 	addi	r2,sp,148
408031d4:	d9403617 	ldw	r5,216(sp)
408031d8:	d9002c17 	ldw	r4,176(sp)
408031dc:	d8800215 	stw	r2,8(sp)
408031e0:	d8802604 	addi	r2,sp,152
408031e4:	d8800115 	stw	r2,4(sp)
408031e8:	01c000c4 	movi	r7,3
408031ec:	980d883a 	mov	r6,r19
408031f0:	da003d15 	stw	r8,244(sp)
408031f4:	08038940 	call	40803894 <_dtoa_r>
408031f8:	d8c02917 	ldw	r3,164(sp)
408031fc:	da003d17 	ldw	r8,244(sp)
40803200:	1021883a 	mov	r16,r2
40803204:	00801184 	movi	r2,70
40803208:	80f9883a 	add	fp,r16,r3
4080320c:	88bfd926 	beq	r17,r2,40803174 <__alt_mem_onchip_flash_0_data+0xff7c3174>
40803210:	003de806 	br	408029b4 <__alt_mem_onchip_flash_0_data+0xff7c29b4>
40803214:	d9002917 	ldw	r4,164(sp)
40803218:	00c04d0e 	bge	zero,r3,40803350 <___vfprintf_internal_r+0x20e0>
4080321c:	2000441e 	bne	r4,zero,40803330 <___vfprintf_internal_r+0x20c0>
40803220:	9480004c 	andi	r18,r18,1
40803224:	9000421e 	bne	r18,zero,40803330 <___vfprintf_internal_r+0x20c0>
40803228:	1805883a 	mov	r2,r3
4080322c:	18007016 	blt	r3,zero,408033f0 <___vfprintf_internal_r+0x2180>
40803230:	d8c03217 	ldw	r3,200(sp)
40803234:	d8c02e15 	stw	r3,184(sp)
40803238:	003e0206 	br	40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
4080323c:	df0022c4 	addi	fp,sp,139
40803240:	dc002915 	stw	r16,164(sp)
40803244:	4027883a 	mov	r19,r8
40803248:	e021883a 	mov	r16,fp
4080324c:	b009883a 	mov	r4,r22
40803250:	01400284 	movi	r5,10
40803254:	080b0f80 	call	4080b0f8 <__modsi3>
40803258:	10800c04 	addi	r2,r2,48
4080325c:	843fffc4 	addi	r16,r16,-1
40803260:	b009883a 	mov	r4,r22
40803264:	01400284 	movi	r5,10
40803268:	80800005 	stb	r2,0(r16)
4080326c:	080b0740 	call	4080b074 <__divsi3>
40803270:	102d883a 	mov	r22,r2
40803274:	00800244 	movi	r2,9
40803278:	15bff416 	blt	r2,r22,4080324c <__alt_mem_onchip_flash_0_data+0xff7c324c>
4080327c:	9811883a 	mov	r8,r19
40803280:	b0800c04 	addi	r2,r22,48
40803284:	8027883a 	mov	r19,r16
40803288:	997fffc4 	addi	r5,r19,-1
4080328c:	98bfffc5 	stb	r2,-1(r19)
40803290:	dc002917 	ldw	r16,164(sp)
40803294:	2f006a2e 	bgeu	r5,fp,40803440 <___vfprintf_internal_r+0x21d0>
40803298:	d9c02384 	addi	r7,sp,142
4080329c:	3ccfc83a 	sub	r7,r7,r19
408032a0:	d9002344 	addi	r4,sp,141
408032a4:	e1cf883a 	add	r7,fp,r7
408032a8:	00000106 	br	408032b0 <___vfprintf_internal_r+0x2040>
408032ac:	28800003 	ldbu	r2,0(r5)
408032b0:	20800005 	stb	r2,0(r4)
408032b4:	21000044 	addi	r4,r4,1
408032b8:	29400044 	addi	r5,r5,1
408032bc:	393ffb1e 	bne	r7,r4,408032ac <__alt_mem_onchip_flash_0_data+0xff7c32ac>
408032c0:	d8802304 	addi	r2,sp,140
408032c4:	14c5c83a 	sub	r2,r2,r19
408032c8:	d8c02344 	addi	r3,sp,141
408032cc:	1885883a 	add	r2,r3,r2
408032d0:	003f7006 	br	40803094 <__alt_mem_onchip_flash_0_data+0xff7c3094>
408032d4:	0005883a 	mov	r2,zero
408032d8:	003f0f06 	br	40802f18 <__alt_mem_onchip_flash_0_data+0xff7c2f18>
408032dc:	d8c03217 	ldw	r3,200(sp)
408032e0:	18c00044 	addi	r3,r3,1
408032e4:	d8c02e15 	stw	r3,184(sp)
408032e8:	1805883a 	mov	r2,r3
408032ec:	183fb20e 	bge	r3,zero,408031b8 <__alt_mem_onchip_flash_0_data+0xff7c31b8>
408032f0:	0005883a 	mov	r2,zero
408032f4:	003fb006 	br	408031b8 <__alt_mem_onchip_flash_0_data+0xff7c31b8>
408032f8:	d9003617 	ldw	r4,216(sp)
408032fc:	000d883a 	mov	r6,zero
40803300:	000f883a 	mov	r7,zero
40803304:	980b883a 	mov	r5,r19
40803308:	d8c03c15 	stw	r3,240(sp)
4080330c:	da003d15 	stw	r8,244(sp)
40803310:	080c3bc0 	call	4080c3bc <__eqdf2>
40803314:	d8c03c17 	ldw	r3,240(sp)
40803318:	da003d17 	ldw	r8,244(sp)
4080331c:	103f9826 	beq	r2,zero,40803180 <__alt_mem_onchip_flash_0_data+0xff7c3180>
40803320:	00800044 	movi	r2,1
40803324:	10c7c83a 	sub	r3,r2,r3
40803328:	d8c02615 	stw	r3,152(sp)
4080332c:	003f9506 	br	40803184 <__alt_mem_onchip_flash_0_data+0xff7c3184>
40803330:	d9002917 	ldw	r4,164(sp)
40803334:	d8c03217 	ldw	r3,200(sp)
40803338:	20800044 	addi	r2,r4,1
4080333c:	1885883a 	add	r2,r3,r2
40803340:	d8802e15 	stw	r2,184(sp)
40803344:	103dbf0e 	bge	r2,zero,40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
40803348:	0005883a 	mov	r2,zero
4080334c:	003dbd06 	br	40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
40803350:	2000211e 	bne	r4,zero,408033d8 <___vfprintf_internal_r+0x2168>
40803354:	9480004c 	andi	r18,r18,1
40803358:	90001f1e 	bne	r18,zero,408033d8 <___vfprintf_internal_r+0x2168>
4080335c:	00800044 	movi	r2,1
40803360:	d8802e15 	stw	r2,184(sp)
40803364:	003db706 	br	40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
40803368:	00800b44 	movi	r2,45
4080336c:	05adc83a 	sub	r22,zero,r22
40803370:	d8802305 	stb	r2,140(sp)
40803374:	003f3f06 	br	40803074 <__alt_mem_onchip_flash_0_data+0xff7c3074>
40803378:	0005883a 	mov	r2,zero
4080337c:	003f5206 	br	408030c8 <__alt_mem_onchip_flash_0_data+0xff7c30c8>
40803380:	90a4703a 	and	r18,r18,r2
40803384:	903f4e26 	beq	r18,zero,408030c0 <__alt_mem_onchip_flash_0_data+0xff7c30c0>
40803388:	003f4a06 	br	408030b4 <__alt_mem_onchip_flash_0_data+0xff7c30b4>
4080338c:	00800084 	movi	r2,2
40803390:	10c5c83a 	sub	r2,r2,r3
40803394:	003f8406 	br	408031a8 <__alt_mem_onchip_flash_0_data+0xff7c31a8>
40803398:	d8802d17 	ldw	r2,180(sp)
4080339c:	d9002d17 	ldw	r4,180(sp)
408033a0:	ac400043 	ldbu	r17,1(r21)
408033a4:	10800017 	ldw	r2,0(r2)
408033a8:	582b883a 	mov	r21,r11
408033ac:	d8802915 	stw	r2,164(sp)
408033b0:	20800104 	addi	r2,r4,4
408033b4:	d9002917 	ldw	r4,164(sp)
408033b8:	d8802d15 	stw	r2,180(sp)
408033bc:	203e7a0e 	bge	r4,zero,40802da8 <__alt_mem_onchip_flash_0_data+0xff7c2da8>
408033c0:	8c403fcc 	andi	r17,r17,255
408033c4:	00bfffc4 	movi	r2,-1
408033c8:	8c40201c 	xori	r17,r17,128
408033cc:	d8802915 	stw	r2,164(sp)
408033d0:	8c7fe004 	addi	r17,r17,-128
408033d4:	00380706 	br	408013f4 <__alt_mem_onchip_flash_0_data+0xff7c13f4>
408033d8:	d8c02917 	ldw	r3,164(sp)
408033dc:	18c00084 	addi	r3,r3,2
408033e0:	d8c02e15 	stw	r3,184(sp)
408033e4:	1805883a 	mov	r2,r3
408033e8:	183d960e 	bge	r3,zero,40802a44 <__alt_mem_onchip_flash_0_data+0xff7c2a44>
408033ec:	003fd606 	br	40803348 <__alt_mem_onchip_flash_0_data+0xff7c3348>
408033f0:	0005883a 	mov	r2,zero
408033f4:	003f8e06 	br	40803230 <__alt_mem_onchip_flash_0_data+0xff7c3230>
408033f8:	9080004c 	andi	r2,r18,1
408033fc:	103f811e 	bne	r2,zero,40803204 <__alt_mem_onchip_flash_0_data+0xff7c3204>
40803400:	d8802117 	ldw	r2,132(sp)
40803404:	1405c83a 	sub	r2,r2,r16
40803408:	d8803315 	stw	r2,204(sp)
4080340c:	b47ef326 	beq	r22,r17,40802fdc <__alt_mem_onchip_flash_0_data+0xff7c2fdc>
40803410:	dd802617 	ldw	r22,152(sp)
40803414:	003f1106 	br	4080305c <__alt_mem_onchip_flash_0_data+0xff7c305c>
40803418:	d9c02785 	stb	r7,158(sp)
4080341c:	00390406 	br	40801830 <__alt_mem_onchip_flash_0_data+0xff7c1830>
40803420:	d9c02785 	stb	r7,158(sp)
40803424:	0038d306 	br	40801774 <__alt_mem_onchip_flash_0_data+0xff7c1774>
40803428:	d9c02785 	stb	r7,158(sp)
4080342c:	003a6106 	br	40801db4 <__alt_mem_onchip_flash_0_data+0xff7c1db4>
40803430:	d9c02785 	stb	r7,158(sp)
40803434:	003af806 	br	40802018 <__alt_mem_onchip_flash_0_data+0xff7c2018>
40803438:	0005883a 	mov	r2,zero
4080343c:	003d7e06 	br	40802a38 <__alt_mem_onchip_flash_0_data+0xff7c2a38>
40803440:	d8802344 	addi	r2,sp,141
40803444:	003f1306 	br	40803094 <__alt_mem_onchip_flash_0_data+0xff7c3094>
40803448:	d9c02785 	stb	r7,158(sp)
4080344c:	00392306 	br	408018dc <__alt_mem_onchip_flash_0_data+0xff7c18dc>
40803450:	d9c02785 	stb	r7,158(sp)
40803454:	003aa906 	br	40801efc <__alt_mem_onchip_flash_0_data+0xff7c1efc>
40803458:	d9c02785 	stb	r7,158(sp)
4080345c:	003a3d06 	br	40801d54 <__alt_mem_onchip_flash_0_data+0xff7c1d54>
40803460:	d9c02785 	stb	r7,158(sp)
40803464:	003aca06 	br	40801f90 <__alt_mem_onchip_flash_0_data+0xff7c1f90>

40803468 <__vfprintf_internal>:
40803468:	00902074 	movhi	r2,16513
4080346c:	108eaf04 	addi	r2,r2,15036
40803470:	300f883a 	mov	r7,r6
40803474:	280d883a 	mov	r6,r5
40803478:	200b883a 	mov	r5,r4
4080347c:	11000017 	ldw	r4,0(r2)
40803480:	08012701 	jmpi	40801270 <___vfprintf_internal_r>

40803484 <__sbprintf>:
40803484:	2880030b 	ldhu	r2,12(r5)
40803488:	2ac01917 	ldw	r11,100(r5)
4080348c:	2a80038b 	ldhu	r10,14(r5)
40803490:	2a400717 	ldw	r9,28(r5)
40803494:	2a000917 	ldw	r8,36(r5)
40803498:	defee204 	addi	sp,sp,-1144
4080349c:	00c10004 	movi	r3,1024
408034a0:	dc011a15 	stw	r16,1128(sp)
408034a4:	10bfff4c 	andi	r2,r2,65533
408034a8:	2821883a 	mov	r16,r5
408034ac:	d8cb883a 	add	r5,sp,r3
408034b0:	dc811c15 	stw	r18,1136(sp)
408034b4:	dc411b15 	stw	r17,1132(sp)
408034b8:	dfc11d15 	stw	ra,1140(sp)
408034bc:	2025883a 	mov	r18,r4
408034c0:	d881030d 	sth	r2,1036(sp)
408034c4:	dac11915 	stw	r11,1124(sp)
408034c8:	da81038d 	sth	r10,1038(sp)
408034cc:	da410715 	stw	r9,1052(sp)
408034d0:	da010915 	stw	r8,1060(sp)
408034d4:	dec10015 	stw	sp,1024(sp)
408034d8:	dec10415 	stw	sp,1040(sp)
408034dc:	d8c10215 	stw	r3,1032(sp)
408034e0:	d8c10515 	stw	r3,1044(sp)
408034e4:	d8010615 	stw	zero,1048(sp)
408034e8:	08012700 	call	40801270 <___vfprintf_internal_r>
408034ec:	1023883a 	mov	r17,r2
408034f0:	10000416 	blt	r2,zero,40803504 <__sbprintf+0x80>
408034f4:	d9410004 	addi	r5,sp,1024
408034f8:	9009883a 	mov	r4,r18
408034fc:	08051380 	call	40805138 <_fflush_r>
40803500:	10000d1e 	bne	r2,zero,40803538 <__sbprintf+0xb4>
40803504:	d881030b 	ldhu	r2,1036(sp)
40803508:	1080100c 	andi	r2,r2,64
4080350c:	10000326 	beq	r2,zero,4080351c <__sbprintf+0x98>
40803510:	8080030b 	ldhu	r2,12(r16)
40803514:	10801014 	ori	r2,r2,64
40803518:	8080030d 	sth	r2,12(r16)
4080351c:	8805883a 	mov	r2,r17
40803520:	dfc11d17 	ldw	ra,1140(sp)
40803524:	dc811c17 	ldw	r18,1136(sp)
40803528:	dc411b17 	ldw	r17,1132(sp)
4080352c:	dc011a17 	ldw	r16,1128(sp)
40803530:	dec11e04 	addi	sp,sp,1144
40803534:	f800283a 	ret
40803538:	047fffc4 	movi	r17,-1
4080353c:	003ff106 	br	40803504 <__alt_mem_onchip_flash_0_data+0xff7c3504>

40803540 <__swsetup_r>:
40803540:	00902074 	movhi	r2,16513
40803544:	defffd04 	addi	sp,sp,-12
40803548:	108eaf04 	addi	r2,r2,15036
4080354c:	dc400115 	stw	r17,4(sp)
40803550:	2023883a 	mov	r17,r4
40803554:	11000017 	ldw	r4,0(r2)
40803558:	dc000015 	stw	r16,0(sp)
4080355c:	dfc00215 	stw	ra,8(sp)
40803560:	2821883a 	mov	r16,r5
40803564:	20000226 	beq	r4,zero,40803570 <__swsetup_r+0x30>
40803568:	20800e17 	ldw	r2,56(r4)
4080356c:	10003126 	beq	r2,zero,40803634 <__swsetup_r+0xf4>
40803570:	8080030b 	ldhu	r2,12(r16)
40803574:	10c0020c 	andi	r3,r2,8
40803578:	1009883a 	mov	r4,r2
4080357c:	18000f26 	beq	r3,zero,408035bc <__swsetup_r+0x7c>
40803580:	80c00417 	ldw	r3,16(r16)
40803584:	18001526 	beq	r3,zero,408035dc <__swsetup_r+0x9c>
40803588:	1100004c 	andi	r4,r2,1
4080358c:	20001c1e 	bne	r4,zero,40803600 <__swsetup_r+0xc0>
40803590:	1080008c 	andi	r2,r2,2
40803594:	1000291e 	bne	r2,zero,4080363c <__swsetup_r+0xfc>
40803598:	80800517 	ldw	r2,20(r16)
4080359c:	80800215 	stw	r2,8(r16)
408035a0:	18001c26 	beq	r3,zero,40803614 <__swsetup_r+0xd4>
408035a4:	0005883a 	mov	r2,zero
408035a8:	dfc00217 	ldw	ra,8(sp)
408035ac:	dc400117 	ldw	r17,4(sp)
408035b0:	dc000017 	ldw	r16,0(sp)
408035b4:	dec00304 	addi	sp,sp,12
408035b8:	f800283a 	ret
408035bc:	2080040c 	andi	r2,r4,16
408035c0:	10002e26 	beq	r2,zero,4080367c <__swsetup_r+0x13c>
408035c4:	2080010c 	andi	r2,r4,4
408035c8:	10001e1e 	bne	r2,zero,40803644 <__swsetup_r+0x104>
408035cc:	80c00417 	ldw	r3,16(r16)
408035d0:	20800214 	ori	r2,r4,8
408035d4:	8080030d 	sth	r2,12(r16)
408035d8:	183feb1e 	bne	r3,zero,40803588 <__alt_mem_onchip_flash_0_data+0xff7c3588>
408035dc:	1100a00c 	andi	r4,r2,640
408035e0:	01408004 	movi	r5,512
408035e4:	217fe826 	beq	r4,r5,40803588 <__alt_mem_onchip_flash_0_data+0xff7c3588>
408035e8:	800b883a 	mov	r5,r16
408035ec:	8809883a 	mov	r4,r17
408035f0:	08060b80 	call	408060b8 <__smakebuf_r>
408035f4:	8080030b 	ldhu	r2,12(r16)
408035f8:	80c00417 	ldw	r3,16(r16)
408035fc:	003fe206 	br	40803588 <__alt_mem_onchip_flash_0_data+0xff7c3588>
40803600:	80800517 	ldw	r2,20(r16)
40803604:	80000215 	stw	zero,8(r16)
40803608:	0085c83a 	sub	r2,zero,r2
4080360c:	80800615 	stw	r2,24(r16)
40803610:	183fe41e 	bne	r3,zero,408035a4 <__alt_mem_onchip_flash_0_data+0xff7c35a4>
40803614:	80c0030b 	ldhu	r3,12(r16)
40803618:	0005883a 	mov	r2,zero
4080361c:	1900200c 	andi	r4,r3,128
40803620:	203fe126 	beq	r4,zero,408035a8 <__alt_mem_onchip_flash_0_data+0xff7c35a8>
40803624:	18c01014 	ori	r3,r3,64
40803628:	80c0030d 	sth	r3,12(r16)
4080362c:	00bfffc4 	movi	r2,-1
40803630:	003fdd06 	br	408035a8 <__alt_mem_onchip_flash_0_data+0xff7c35a8>
40803634:	08055140 	call	40805514 <__sinit>
40803638:	003fcd06 	br	40803570 <__alt_mem_onchip_flash_0_data+0xff7c3570>
4080363c:	0005883a 	mov	r2,zero
40803640:	003fd606 	br	4080359c <__alt_mem_onchip_flash_0_data+0xff7c359c>
40803644:	81400c17 	ldw	r5,48(r16)
40803648:	28000626 	beq	r5,zero,40803664 <__swsetup_r+0x124>
4080364c:	80801004 	addi	r2,r16,64
40803650:	28800326 	beq	r5,r2,40803660 <__swsetup_r+0x120>
40803654:	8809883a 	mov	r4,r17
40803658:	08056880 	call	40805688 <_free_r>
4080365c:	8100030b 	ldhu	r4,12(r16)
40803660:	80000c15 	stw	zero,48(r16)
40803664:	80c00417 	ldw	r3,16(r16)
40803668:	00bff6c4 	movi	r2,-37
4080366c:	1108703a 	and	r4,r2,r4
40803670:	80000115 	stw	zero,4(r16)
40803674:	80c00015 	stw	r3,0(r16)
40803678:	003fd506 	br	408035d0 <__alt_mem_onchip_flash_0_data+0xff7c35d0>
4080367c:	00800244 	movi	r2,9
40803680:	88800015 	stw	r2,0(r17)
40803684:	20801014 	ori	r2,r4,64
40803688:	8080030d 	sth	r2,12(r16)
4080368c:	00bfffc4 	movi	r2,-1
40803690:	003fc506 	br	408035a8 <__alt_mem_onchip_flash_0_data+0xff7c35a8>

40803694 <quorem>:
40803694:	defff704 	addi	sp,sp,-36
40803698:	dc800215 	stw	r18,8(sp)
4080369c:	20800417 	ldw	r2,16(r4)
408036a0:	2c800417 	ldw	r18,16(r5)
408036a4:	dfc00815 	stw	ra,32(sp)
408036a8:	ddc00715 	stw	r23,28(sp)
408036ac:	dd800615 	stw	r22,24(sp)
408036b0:	dd400515 	stw	r21,20(sp)
408036b4:	dd000415 	stw	r20,16(sp)
408036b8:	dcc00315 	stw	r19,12(sp)
408036bc:	dc400115 	stw	r17,4(sp)
408036c0:	dc000015 	stw	r16,0(sp)
408036c4:	14807116 	blt	r2,r18,4080388c <quorem+0x1f8>
408036c8:	94bfffc4 	addi	r18,r18,-1
408036cc:	94ad883a 	add	r22,r18,r18
408036d0:	b5ad883a 	add	r22,r22,r22
408036d4:	2c400504 	addi	r17,r5,20
408036d8:	8da9883a 	add	r20,r17,r22
408036dc:	25400504 	addi	r21,r4,20
408036e0:	282f883a 	mov	r23,r5
408036e4:	adad883a 	add	r22,r21,r22
408036e8:	a1400017 	ldw	r5,0(r20)
408036ec:	2021883a 	mov	r16,r4
408036f0:	b1000017 	ldw	r4,0(r22)
408036f4:	29400044 	addi	r5,r5,1
408036f8:	080b16c0 	call	4080b16c <__udivsi3>
408036fc:	1027883a 	mov	r19,r2
40803700:	10002c26 	beq	r2,zero,408037b4 <quorem+0x120>
40803704:	a813883a 	mov	r9,r21
40803708:	880b883a 	mov	r5,r17
4080370c:	0009883a 	mov	r4,zero
40803710:	000d883a 	mov	r6,zero
40803714:	2a000017 	ldw	r8,0(r5)
40803718:	49c00017 	ldw	r7,0(r9)
4080371c:	29400104 	addi	r5,r5,4
40803720:	40bfffcc 	andi	r2,r8,65535
40803724:	14c5383a 	mul	r2,r2,r19
40803728:	4010d43a 	srli	r8,r8,16
4080372c:	38ffffcc 	andi	r3,r7,65535
40803730:	1105883a 	add	r2,r2,r4
40803734:	1008d43a 	srli	r4,r2,16
40803738:	44d1383a 	mul	r8,r8,r19
4080373c:	198d883a 	add	r6,r3,r6
40803740:	10ffffcc 	andi	r3,r2,65535
40803744:	30c7c83a 	sub	r3,r6,r3
40803748:	380ed43a 	srli	r7,r7,16
4080374c:	4105883a 	add	r2,r8,r4
40803750:	180dd43a 	srai	r6,r3,16
40803754:	113fffcc 	andi	r4,r2,65535
40803758:	390fc83a 	sub	r7,r7,r4
4080375c:	398d883a 	add	r6,r7,r6
40803760:	300e943a 	slli	r7,r6,16
40803764:	18ffffcc 	andi	r3,r3,65535
40803768:	1008d43a 	srli	r4,r2,16
4080376c:	38ceb03a 	or	r7,r7,r3
40803770:	49c00015 	stw	r7,0(r9)
40803774:	300dd43a 	srai	r6,r6,16
40803778:	4a400104 	addi	r9,r9,4
4080377c:	a17fe52e 	bgeu	r20,r5,40803714 <__alt_mem_onchip_flash_0_data+0xff7c3714>
40803780:	b0800017 	ldw	r2,0(r22)
40803784:	10000b1e 	bne	r2,zero,408037b4 <quorem+0x120>
40803788:	b0bfff04 	addi	r2,r22,-4
4080378c:	a880082e 	bgeu	r21,r2,408037b0 <quorem+0x11c>
40803790:	b0ffff17 	ldw	r3,-4(r22)
40803794:	18000326 	beq	r3,zero,408037a4 <quorem+0x110>
40803798:	00000506 	br	408037b0 <quorem+0x11c>
4080379c:	10c00017 	ldw	r3,0(r2)
408037a0:	1800031e 	bne	r3,zero,408037b0 <quorem+0x11c>
408037a4:	10bfff04 	addi	r2,r2,-4
408037a8:	94bfffc4 	addi	r18,r18,-1
408037ac:	a8bffb36 	bltu	r21,r2,4080379c <__alt_mem_onchip_flash_0_data+0xff7c379c>
408037b0:	84800415 	stw	r18,16(r16)
408037b4:	b80b883a 	mov	r5,r23
408037b8:	8009883a 	mov	r4,r16
408037bc:	08076d00 	call	408076d0 <__mcmp>
408037c0:	10002616 	blt	r2,zero,4080385c <quorem+0x1c8>
408037c4:	9cc00044 	addi	r19,r19,1
408037c8:	a805883a 	mov	r2,r21
408037cc:	000b883a 	mov	r5,zero
408037d0:	11000017 	ldw	r4,0(r2)
408037d4:	89800017 	ldw	r6,0(r17)
408037d8:	10800104 	addi	r2,r2,4
408037dc:	20ffffcc 	andi	r3,r4,65535
408037e0:	194b883a 	add	r5,r3,r5
408037e4:	30ffffcc 	andi	r3,r6,65535
408037e8:	28c7c83a 	sub	r3,r5,r3
408037ec:	300cd43a 	srli	r6,r6,16
408037f0:	2008d43a 	srli	r4,r4,16
408037f4:	180bd43a 	srai	r5,r3,16
408037f8:	18ffffcc 	andi	r3,r3,65535
408037fc:	2189c83a 	sub	r4,r4,r6
40803800:	2149883a 	add	r4,r4,r5
40803804:	200c943a 	slli	r6,r4,16
40803808:	8c400104 	addi	r17,r17,4
4080380c:	200bd43a 	srai	r5,r4,16
40803810:	30c6b03a 	or	r3,r6,r3
40803814:	10ffff15 	stw	r3,-4(r2)
40803818:	a47fed2e 	bgeu	r20,r17,408037d0 <__alt_mem_onchip_flash_0_data+0xff7c37d0>
4080381c:	9485883a 	add	r2,r18,r18
40803820:	1085883a 	add	r2,r2,r2
40803824:	a887883a 	add	r3,r21,r2
40803828:	18800017 	ldw	r2,0(r3)
4080382c:	10000b1e 	bne	r2,zero,4080385c <quorem+0x1c8>
40803830:	18bfff04 	addi	r2,r3,-4
40803834:	a880082e 	bgeu	r21,r2,40803858 <quorem+0x1c4>
40803838:	18ffff17 	ldw	r3,-4(r3)
4080383c:	18000326 	beq	r3,zero,4080384c <quorem+0x1b8>
40803840:	00000506 	br	40803858 <quorem+0x1c4>
40803844:	10c00017 	ldw	r3,0(r2)
40803848:	1800031e 	bne	r3,zero,40803858 <quorem+0x1c4>
4080384c:	10bfff04 	addi	r2,r2,-4
40803850:	94bfffc4 	addi	r18,r18,-1
40803854:	a8bffb36 	bltu	r21,r2,40803844 <__alt_mem_onchip_flash_0_data+0xff7c3844>
40803858:	84800415 	stw	r18,16(r16)
4080385c:	9805883a 	mov	r2,r19
40803860:	dfc00817 	ldw	ra,32(sp)
40803864:	ddc00717 	ldw	r23,28(sp)
40803868:	dd800617 	ldw	r22,24(sp)
4080386c:	dd400517 	ldw	r21,20(sp)
40803870:	dd000417 	ldw	r20,16(sp)
40803874:	dcc00317 	ldw	r19,12(sp)
40803878:	dc800217 	ldw	r18,8(sp)
4080387c:	dc400117 	ldw	r17,4(sp)
40803880:	dc000017 	ldw	r16,0(sp)
40803884:	dec00904 	addi	sp,sp,36
40803888:	f800283a 	ret
4080388c:	0005883a 	mov	r2,zero
40803890:	003ff306 	br	40803860 <__alt_mem_onchip_flash_0_data+0xff7c3860>

40803894 <_dtoa_r>:
40803894:	20801017 	ldw	r2,64(r4)
40803898:	deffde04 	addi	sp,sp,-136
4080389c:	df002015 	stw	fp,128(sp)
408038a0:	dcc01b15 	stw	r19,108(sp)
408038a4:	dc801a15 	stw	r18,104(sp)
408038a8:	dc401915 	stw	r17,100(sp)
408038ac:	dc001815 	stw	r16,96(sp)
408038b0:	dfc02115 	stw	ra,132(sp)
408038b4:	ddc01f15 	stw	r23,124(sp)
408038b8:	dd801e15 	stw	r22,120(sp)
408038bc:	dd401d15 	stw	r21,116(sp)
408038c0:	dd001c15 	stw	r20,112(sp)
408038c4:	d9c00315 	stw	r7,12(sp)
408038c8:	2039883a 	mov	fp,r4
408038cc:	3023883a 	mov	r17,r6
408038d0:	2825883a 	mov	r18,r5
408038d4:	dc002417 	ldw	r16,144(sp)
408038d8:	3027883a 	mov	r19,r6
408038dc:	10000826 	beq	r2,zero,40803900 <_dtoa_r+0x6c>
408038e0:	21801117 	ldw	r6,68(r4)
408038e4:	00c00044 	movi	r3,1
408038e8:	100b883a 	mov	r5,r2
408038ec:	1986983a 	sll	r3,r3,r6
408038f0:	11800115 	stw	r6,4(r2)
408038f4:	10c00215 	stw	r3,8(r2)
408038f8:	0806eb00 	call	40806eb0 <_Bfree>
408038fc:	e0001015 	stw	zero,64(fp)
40803900:	88002e16 	blt	r17,zero,408039bc <_dtoa_r+0x128>
40803904:	80000015 	stw	zero,0(r16)
40803908:	889ffc2c 	andhi	r2,r17,32752
4080390c:	00dffc34 	movhi	r3,32752
40803910:	10c01c26 	beq	r2,r3,40803984 <_dtoa_r+0xf0>
40803914:	000d883a 	mov	r6,zero
40803918:	000f883a 	mov	r7,zero
4080391c:	9009883a 	mov	r4,r18
40803920:	980b883a 	mov	r5,r19
40803924:	080c3bc0 	call	4080c3bc <__eqdf2>
40803928:	10002b1e 	bne	r2,zero,408039d8 <_dtoa_r+0x144>
4080392c:	d9c02317 	ldw	r7,140(sp)
40803930:	00800044 	movi	r2,1
40803934:	38800015 	stw	r2,0(r7)
40803938:	d8802517 	ldw	r2,148(sp)
4080393c:	10019e26 	beq	r2,zero,40803fb8 <_dtoa_r+0x724>
40803940:	d8c02517 	ldw	r3,148(sp)
40803944:	00902074 	movhi	r2,16513
40803948:	1086b544 	addi	r2,r2,6869
4080394c:	18800015 	stw	r2,0(r3)
40803950:	10bfffc4 	addi	r2,r2,-1
40803954:	dfc02117 	ldw	ra,132(sp)
40803958:	df002017 	ldw	fp,128(sp)
4080395c:	ddc01f17 	ldw	r23,124(sp)
40803960:	dd801e17 	ldw	r22,120(sp)
40803964:	dd401d17 	ldw	r21,116(sp)
40803968:	dd001c17 	ldw	r20,112(sp)
4080396c:	dcc01b17 	ldw	r19,108(sp)
40803970:	dc801a17 	ldw	r18,104(sp)
40803974:	dc401917 	ldw	r17,100(sp)
40803978:	dc001817 	ldw	r16,96(sp)
4080397c:	dec02204 	addi	sp,sp,136
40803980:	f800283a 	ret
40803984:	d8c02317 	ldw	r3,140(sp)
40803988:	0089c3c4 	movi	r2,9999
4080398c:	18800015 	stw	r2,0(r3)
40803990:	90017726 	beq	r18,zero,40803f70 <_dtoa_r+0x6dc>
40803994:	00902074 	movhi	r2,16513
40803998:	1086c104 	addi	r2,r2,6916
4080399c:	d9002517 	ldw	r4,148(sp)
408039a0:	203fec26 	beq	r4,zero,40803954 <__alt_mem_onchip_flash_0_data+0xff7c3954>
408039a4:	10c000c7 	ldb	r3,3(r2)
408039a8:	1801781e 	bne	r3,zero,40803f8c <_dtoa_r+0x6f8>
408039ac:	10c000c4 	addi	r3,r2,3
408039b0:	d9802517 	ldw	r6,148(sp)
408039b4:	30c00015 	stw	r3,0(r6)
408039b8:	003fe606 	br	40803954 <__alt_mem_onchip_flash_0_data+0xff7c3954>
408039bc:	04e00034 	movhi	r19,32768
408039c0:	9cffffc4 	addi	r19,r19,-1
408039c4:	00800044 	movi	r2,1
408039c8:	8ce6703a 	and	r19,r17,r19
408039cc:	80800015 	stw	r2,0(r16)
408039d0:	9823883a 	mov	r17,r19
408039d4:	003fcc06 	br	40803908 <__alt_mem_onchip_flash_0_data+0xff7c3908>
408039d8:	d8800204 	addi	r2,sp,8
408039dc:	d8800015 	stw	r2,0(sp)
408039e0:	d9c00104 	addi	r7,sp,4
408039e4:	900b883a 	mov	r5,r18
408039e8:	980d883a 	mov	r6,r19
408039ec:	e009883a 	mov	r4,fp
408039f0:	8820d53a 	srli	r16,r17,20
408039f4:	0807a9c0 	call	40807a9c <__d2b>
408039f8:	d8800915 	stw	r2,36(sp)
408039fc:	8001651e 	bne	r16,zero,40803f94 <_dtoa_r+0x700>
40803a00:	dd800217 	ldw	r22,8(sp)
40803a04:	dc000117 	ldw	r16,4(sp)
40803a08:	00800804 	movi	r2,32
40803a0c:	b421883a 	add	r16,r22,r16
40803a10:	80c10c84 	addi	r3,r16,1074
40803a14:	10c2d10e 	bge	r2,r3,4080455c <_dtoa_r+0xcc8>
40803a18:	00801004 	movi	r2,64
40803a1c:	81010484 	addi	r4,r16,1042
40803a20:	10c7c83a 	sub	r3,r2,r3
40803a24:	9108d83a 	srl	r4,r18,r4
40803a28:	88e2983a 	sll	r17,r17,r3
40803a2c:	2448b03a 	or	r4,r4,r17
40803a30:	080d7840 	call	4080d784 <__floatunsidf>
40803a34:	017f8434 	movhi	r5,65040
40803a38:	01800044 	movi	r6,1
40803a3c:	1009883a 	mov	r4,r2
40803a40:	194b883a 	add	r5,r3,r5
40803a44:	843fffc4 	addi	r16,r16,-1
40803a48:	d9801115 	stw	r6,68(sp)
40803a4c:	000d883a 	mov	r6,zero
40803a50:	01cffe34 	movhi	r7,16376
40803a54:	080cd2c0 	call	4080cd2c <__subdf3>
40803a58:	0198dbf4 	movhi	r6,25455
40803a5c:	01cff4f4 	movhi	r7,16339
40803a60:	3190d844 	addi	r6,r6,17249
40803a64:	39e1e9c4 	addi	r7,r7,-30809
40803a68:	1009883a 	mov	r4,r2
40803a6c:	180b883a 	mov	r5,r3
40803a70:	080c6140 	call	4080c614 <__muldf3>
40803a74:	01a2d874 	movhi	r6,35681
40803a78:	01cff1f4 	movhi	r7,16327
40803a7c:	31b22cc4 	addi	r6,r6,-14157
40803a80:	39e28a04 	addi	r7,r7,-30168
40803a84:	180b883a 	mov	r5,r3
40803a88:	1009883a 	mov	r4,r2
40803a8c:	080b2280 	call	4080b228 <__adddf3>
40803a90:	8009883a 	mov	r4,r16
40803a94:	1029883a 	mov	r20,r2
40803a98:	1823883a 	mov	r17,r3
40803a9c:	080d6a80 	call	4080d6a8 <__floatsidf>
40803aa0:	019427f4 	movhi	r6,20639
40803aa4:	01cff4f4 	movhi	r7,16339
40803aa8:	319e7ec4 	addi	r6,r6,31227
40803aac:	39d104c4 	addi	r7,r7,17427
40803ab0:	1009883a 	mov	r4,r2
40803ab4:	180b883a 	mov	r5,r3
40803ab8:	080c6140 	call	4080c614 <__muldf3>
40803abc:	100d883a 	mov	r6,r2
40803ac0:	180f883a 	mov	r7,r3
40803ac4:	a009883a 	mov	r4,r20
40803ac8:	880b883a 	mov	r5,r17
40803acc:	080b2280 	call	4080b228 <__adddf3>
40803ad0:	1009883a 	mov	r4,r2
40803ad4:	180b883a 	mov	r5,r3
40803ad8:	1029883a 	mov	r20,r2
40803adc:	1823883a 	mov	r17,r3
40803ae0:	080d6280 	call	4080d628 <__fixdfsi>
40803ae4:	000d883a 	mov	r6,zero
40803ae8:	000f883a 	mov	r7,zero
40803aec:	a009883a 	mov	r4,r20
40803af0:	880b883a 	mov	r5,r17
40803af4:	d8800515 	stw	r2,20(sp)
40803af8:	080c5200 	call	4080c520 <__ledf2>
40803afc:	10028716 	blt	r2,zero,4080451c <_dtoa_r+0xc88>
40803b00:	d8c00517 	ldw	r3,20(sp)
40803b04:	00800584 	movi	r2,22
40803b08:	10c27536 	bltu	r2,r3,408044e0 <_dtoa_r+0xc4c>
40803b0c:	180490fa 	slli	r2,r3,3
40803b10:	00d02074 	movhi	r3,16513
40803b14:	18c6dd04 	addi	r3,r3,7028
40803b18:	1885883a 	add	r2,r3,r2
40803b1c:	11000017 	ldw	r4,0(r2)
40803b20:	11400117 	ldw	r5,4(r2)
40803b24:	900d883a 	mov	r6,r18
40803b28:	980f883a 	mov	r7,r19
40803b2c:	080c4440 	call	4080c444 <__gedf2>
40803b30:	00828d0e 	bge	zero,r2,40804568 <_dtoa_r+0xcd4>
40803b34:	d9000517 	ldw	r4,20(sp)
40803b38:	d8000e15 	stw	zero,56(sp)
40803b3c:	213fffc4 	addi	r4,r4,-1
40803b40:	d9000515 	stw	r4,20(sp)
40803b44:	b42dc83a 	sub	r22,r22,r16
40803b48:	b5bfffc4 	addi	r22,r22,-1
40803b4c:	b0026f16 	blt	r22,zero,4080450c <_dtoa_r+0xc78>
40803b50:	d8000815 	stw	zero,32(sp)
40803b54:	d9c00517 	ldw	r7,20(sp)
40803b58:	38026416 	blt	r7,zero,408044ec <_dtoa_r+0xc58>
40803b5c:	b1ed883a 	add	r22,r22,r7
40803b60:	d9c00d15 	stw	r7,52(sp)
40803b64:	d8000a15 	stw	zero,40(sp)
40803b68:	d9800317 	ldw	r6,12(sp)
40803b6c:	00800244 	movi	r2,9
40803b70:	11811436 	bltu	r2,r6,40803fc4 <_dtoa_r+0x730>
40803b74:	00800144 	movi	r2,5
40803b78:	1184e10e 	bge	r2,r6,40804f00 <_dtoa_r+0x166c>
40803b7c:	31bfff04 	addi	r6,r6,-4
40803b80:	d9800315 	stw	r6,12(sp)
40803b84:	0023883a 	mov	r17,zero
40803b88:	d9800317 	ldw	r6,12(sp)
40803b8c:	008000c4 	movi	r2,3
40803b90:	30836726 	beq	r6,r2,40804930 <_dtoa_r+0x109c>
40803b94:	1183410e 	bge	r2,r6,4080489c <_dtoa_r+0x1008>
40803b98:	d9c00317 	ldw	r7,12(sp)
40803b9c:	00800104 	movi	r2,4
40803ba0:	38827c26 	beq	r7,r2,40804594 <_dtoa_r+0xd00>
40803ba4:	00800144 	movi	r2,5
40803ba8:	3884c41e 	bne	r7,r2,40804ebc <_dtoa_r+0x1628>
40803bac:	00800044 	movi	r2,1
40803bb0:	d8800b15 	stw	r2,44(sp)
40803bb4:	d8c00517 	ldw	r3,20(sp)
40803bb8:	d9002217 	ldw	r4,136(sp)
40803bbc:	1907883a 	add	r3,r3,r4
40803bc0:	19800044 	addi	r6,r3,1
40803bc4:	d8c00c15 	stw	r3,48(sp)
40803bc8:	d9800615 	stw	r6,24(sp)
40803bcc:	0183a40e 	bge	zero,r6,40804a60 <_dtoa_r+0x11cc>
40803bd0:	d9800617 	ldw	r6,24(sp)
40803bd4:	3021883a 	mov	r16,r6
40803bd8:	e0001115 	stw	zero,68(fp)
40803bdc:	008005c4 	movi	r2,23
40803be0:	1184c92e 	bgeu	r2,r6,40804f08 <_dtoa_r+0x1674>
40803be4:	00c00044 	movi	r3,1
40803be8:	00800104 	movi	r2,4
40803bec:	1085883a 	add	r2,r2,r2
40803bf0:	11000504 	addi	r4,r2,20
40803bf4:	180b883a 	mov	r5,r3
40803bf8:	18c00044 	addi	r3,r3,1
40803bfc:	313ffb2e 	bgeu	r6,r4,40803bec <__alt_mem_onchip_flash_0_data+0xff7c3bec>
40803c00:	e1401115 	stw	r5,68(fp)
40803c04:	e009883a 	mov	r4,fp
40803c08:	0806e080 	call	40806e08 <_Balloc>
40803c0c:	d8800715 	stw	r2,28(sp)
40803c10:	e0801015 	stw	r2,64(fp)
40803c14:	00800384 	movi	r2,14
40803c18:	1400f736 	bltu	r2,r16,40803ff8 <_dtoa_r+0x764>
40803c1c:	8800f626 	beq	r17,zero,40803ff8 <_dtoa_r+0x764>
40803c20:	d9c00517 	ldw	r7,20(sp)
40803c24:	01c39a0e 	bge	zero,r7,40804a90 <_dtoa_r+0x11fc>
40803c28:	388003cc 	andi	r2,r7,15
40803c2c:	100490fa 	slli	r2,r2,3
40803c30:	382bd13a 	srai	r21,r7,4
40803c34:	00d02074 	movhi	r3,16513
40803c38:	18c6dd04 	addi	r3,r3,7028
40803c3c:	1885883a 	add	r2,r3,r2
40803c40:	a8c0040c 	andi	r3,r21,16
40803c44:	12400017 	ldw	r9,0(r2)
40803c48:	12000117 	ldw	r8,4(r2)
40803c4c:	18037926 	beq	r3,zero,40804a34 <_dtoa_r+0x11a0>
40803c50:	00902074 	movhi	r2,16513
40803c54:	1086d304 	addi	r2,r2,6988
40803c58:	11800817 	ldw	r6,32(r2)
40803c5c:	11c00917 	ldw	r7,36(r2)
40803c60:	9009883a 	mov	r4,r18
40803c64:	980b883a 	mov	r5,r19
40803c68:	da001715 	stw	r8,92(sp)
40803c6c:	da401615 	stw	r9,88(sp)
40803c70:	080bad40 	call	4080bad4 <__divdf3>
40803c74:	da001717 	ldw	r8,92(sp)
40803c78:	da401617 	ldw	r9,88(sp)
40803c7c:	ad4003cc 	andi	r21,r21,15
40803c80:	040000c4 	movi	r16,3
40803c84:	1023883a 	mov	r17,r2
40803c88:	1829883a 	mov	r20,r3
40803c8c:	a8001126 	beq	r21,zero,40803cd4 <_dtoa_r+0x440>
40803c90:	05d02074 	movhi	r23,16513
40803c94:	bdc6d304 	addi	r23,r23,6988
40803c98:	4805883a 	mov	r2,r9
40803c9c:	4007883a 	mov	r3,r8
40803ca0:	a980004c 	andi	r6,r21,1
40803ca4:	1009883a 	mov	r4,r2
40803ca8:	a82bd07a 	srai	r21,r21,1
40803cac:	180b883a 	mov	r5,r3
40803cb0:	30000426 	beq	r6,zero,40803cc4 <_dtoa_r+0x430>
40803cb4:	b9800017 	ldw	r6,0(r23)
40803cb8:	b9c00117 	ldw	r7,4(r23)
40803cbc:	84000044 	addi	r16,r16,1
40803cc0:	080c6140 	call	4080c614 <__muldf3>
40803cc4:	bdc00204 	addi	r23,r23,8
40803cc8:	a83ff51e 	bne	r21,zero,40803ca0 <__alt_mem_onchip_flash_0_data+0xff7c3ca0>
40803ccc:	1013883a 	mov	r9,r2
40803cd0:	1811883a 	mov	r8,r3
40803cd4:	480d883a 	mov	r6,r9
40803cd8:	400f883a 	mov	r7,r8
40803cdc:	8809883a 	mov	r4,r17
40803ce0:	a00b883a 	mov	r5,r20
40803ce4:	080bad40 	call	4080bad4 <__divdf3>
40803ce8:	d8800f15 	stw	r2,60(sp)
40803cec:	d8c01015 	stw	r3,64(sp)
40803cf0:	d8c00e17 	ldw	r3,56(sp)
40803cf4:	18000626 	beq	r3,zero,40803d10 <_dtoa_r+0x47c>
40803cf8:	d9000f17 	ldw	r4,60(sp)
40803cfc:	d9401017 	ldw	r5,64(sp)
40803d00:	000d883a 	mov	r6,zero
40803d04:	01cffc34 	movhi	r7,16368
40803d08:	080c5200 	call	4080c520 <__ledf2>
40803d0c:	10040b16 	blt	r2,zero,40804d3c <_dtoa_r+0x14a8>
40803d10:	8009883a 	mov	r4,r16
40803d14:	080d6a80 	call	4080d6a8 <__floatsidf>
40803d18:	d9800f17 	ldw	r6,60(sp)
40803d1c:	d9c01017 	ldw	r7,64(sp)
40803d20:	1009883a 	mov	r4,r2
40803d24:	180b883a 	mov	r5,r3
40803d28:	080c6140 	call	4080c614 <__muldf3>
40803d2c:	000d883a 	mov	r6,zero
40803d30:	01d00734 	movhi	r7,16412
40803d34:	1009883a 	mov	r4,r2
40803d38:	180b883a 	mov	r5,r3
40803d3c:	080b2280 	call	4080b228 <__adddf3>
40803d40:	1021883a 	mov	r16,r2
40803d44:	d8800617 	ldw	r2,24(sp)
40803d48:	047f3034 	movhi	r17,64704
40803d4c:	1c63883a 	add	r17,r3,r17
40803d50:	10031826 	beq	r2,zero,408049b4 <_dtoa_r+0x1120>
40803d54:	d8c00517 	ldw	r3,20(sp)
40803d58:	db000617 	ldw	r12,24(sp)
40803d5c:	d8c01315 	stw	r3,76(sp)
40803d60:	d9000b17 	ldw	r4,44(sp)
40803d64:	20038f26 	beq	r4,zero,40804ba4 <_dtoa_r+0x1310>
40803d68:	60bfffc4 	addi	r2,r12,-1
40803d6c:	100490fa 	slli	r2,r2,3
40803d70:	00d02074 	movhi	r3,16513
40803d74:	18c6dd04 	addi	r3,r3,7028
40803d78:	1885883a 	add	r2,r3,r2
40803d7c:	11800017 	ldw	r6,0(r2)
40803d80:	11c00117 	ldw	r7,4(r2)
40803d84:	d8800717 	ldw	r2,28(sp)
40803d88:	0009883a 	mov	r4,zero
40803d8c:	014ff834 	movhi	r5,16352
40803d90:	db001615 	stw	r12,88(sp)
40803d94:	15c00044 	addi	r23,r2,1
40803d98:	080bad40 	call	4080bad4 <__divdf3>
40803d9c:	800d883a 	mov	r6,r16
40803da0:	880f883a 	mov	r7,r17
40803da4:	1009883a 	mov	r4,r2
40803da8:	180b883a 	mov	r5,r3
40803dac:	080cd2c0 	call	4080cd2c <__subdf3>
40803db0:	d9401017 	ldw	r5,64(sp)
40803db4:	d9000f17 	ldw	r4,60(sp)
40803db8:	102b883a 	mov	r21,r2
40803dbc:	d8c01215 	stw	r3,72(sp)
40803dc0:	080d6280 	call	4080d628 <__fixdfsi>
40803dc4:	1009883a 	mov	r4,r2
40803dc8:	1029883a 	mov	r20,r2
40803dcc:	080d6a80 	call	4080d6a8 <__floatsidf>
40803dd0:	d9000f17 	ldw	r4,60(sp)
40803dd4:	d9401017 	ldw	r5,64(sp)
40803dd8:	100d883a 	mov	r6,r2
40803ddc:	180f883a 	mov	r7,r3
40803de0:	080cd2c0 	call	4080cd2c <__subdf3>
40803de4:	1823883a 	mov	r17,r3
40803de8:	d8c00717 	ldw	r3,28(sp)
40803dec:	d9401217 	ldw	r5,72(sp)
40803df0:	a2000c04 	addi	r8,r20,48
40803df4:	1021883a 	mov	r16,r2
40803df8:	1a000005 	stb	r8,0(r3)
40803dfc:	800d883a 	mov	r6,r16
40803e00:	880f883a 	mov	r7,r17
40803e04:	a809883a 	mov	r4,r21
40803e08:	4029883a 	mov	r20,r8
40803e0c:	080c4440 	call	4080c444 <__gedf2>
40803e10:	00841d16 	blt	zero,r2,40804e88 <_dtoa_r+0x15f4>
40803e14:	800d883a 	mov	r6,r16
40803e18:	880f883a 	mov	r7,r17
40803e1c:	0009883a 	mov	r4,zero
40803e20:	014ffc34 	movhi	r5,16368
40803e24:	080cd2c0 	call	4080cd2c <__subdf3>
40803e28:	d9401217 	ldw	r5,72(sp)
40803e2c:	100d883a 	mov	r6,r2
40803e30:	180f883a 	mov	r7,r3
40803e34:	a809883a 	mov	r4,r21
40803e38:	080c4440 	call	4080c444 <__gedf2>
40803e3c:	db001617 	ldw	r12,88(sp)
40803e40:	00840e16 	blt	zero,r2,40804e7c <_dtoa_r+0x15e8>
40803e44:	00800044 	movi	r2,1
40803e48:	13006b0e 	bge	r2,r12,40803ff8 <_dtoa_r+0x764>
40803e4c:	d9000717 	ldw	r4,28(sp)
40803e50:	dd800f15 	stw	r22,60(sp)
40803e54:	dcc01015 	stw	r19,64(sp)
40803e58:	2319883a 	add	r12,r4,r12
40803e5c:	dcc01217 	ldw	r19,72(sp)
40803e60:	602d883a 	mov	r22,r12
40803e64:	dc801215 	stw	r18,72(sp)
40803e68:	b825883a 	mov	r18,r23
40803e6c:	00000906 	br	40803e94 <_dtoa_r+0x600>
40803e70:	080cd2c0 	call	4080cd2c <__subdf3>
40803e74:	a80d883a 	mov	r6,r21
40803e78:	980f883a 	mov	r7,r19
40803e7c:	1009883a 	mov	r4,r2
40803e80:	180b883a 	mov	r5,r3
40803e84:	080c5200 	call	4080c520 <__ledf2>
40803e88:	1003e816 	blt	r2,zero,40804e2c <_dtoa_r+0x1598>
40803e8c:	b825883a 	mov	r18,r23
40803e90:	bd83e926 	beq	r23,r22,40804e38 <_dtoa_r+0x15a4>
40803e94:	a809883a 	mov	r4,r21
40803e98:	980b883a 	mov	r5,r19
40803e9c:	000d883a 	mov	r6,zero
40803ea0:	01d00934 	movhi	r7,16420
40803ea4:	080c6140 	call	4080c614 <__muldf3>
40803ea8:	000d883a 	mov	r6,zero
40803eac:	01d00934 	movhi	r7,16420
40803eb0:	8009883a 	mov	r4,r16
40803eb4:	880b883a 	mov	r5,r17
40803eb8:	102b883a 	mov	r21,r2
40803ebc:	1827883a 	mov	r19,r3
40803ec0:	080c6140 	call	4080c614 <__muldf3>
40803ec4:	180b883a 	mov	r5,r3
40803ec8:	1009883a 	mov	r4,r2
40803ecc:	1821883a 	mov	r16,r3
40803ed0:	1023883a 	mov	r17,r2
40803ed4:	080d6280 	call	4080d628 <__fixdfsi>
40803ed8:	1009883a 	mov	r4,r2
40803edc:	1029883a 	mov	r20,r2
40803ee0:	080d6a80 	call	4080d6a8 <__floatsidf>
40803ee4:	8809883a 	mov	r4,r17
40803ee8:	800b883a 	mov	r5,r16
40803eec:	100d883a 	mov	r6,r2
40803ef0:	180f883a 	mov	r7,r3
40803ef4:	080cd2c0 	call	4080cd2c <__subdf3>
40803ef8:	a5000c04 	addi	r20,r20,48
40803efc:	a80d883a 	mov	r6,r21
40803f00:	980f883a 	mov	r7,r19
40803f04:	1009883a 	mov	r4,r2
40803f08:	180b883a 	mov	r5,r3
40803f0c:	95000005 	stb	r20,0(r18)
40803f10:	1021883a 	mov	r16,r2
40803f14:	1823883a 	mov	r17,r3
40803f18:	080c5200 	call	4080c520 <__ledf2>
40803f1c:	bdc00044 	addi	r23,r23,1
40803f20:	800d883a 	mov	r6,r16
40803f24:	880f883a 	mov	r7,r17
40803f28:	0009883a 	mov	r4,zero
40803f2c:	014ffc34 	movhi	r5,16368
40803f30:	103fcf0e 	bge	r2,zero,40803e70 <__alt_mem_onchip_flash_0_data+0xff7c3e70>
40803f34:	d8c01317 	ldw	r3,76(sp)
40803f38:	d8c00515 	stw	r3,20(sp)
40803f3c:	d9400917 	ldw	r5,36(sp)
40803f40:	e009883a 	mov	r4,fp
40803f44:	0806eb00 	call	40806eb0 <_Bfree>
40803f48:	d9000517 	ldw	r4,20(sp)
40803f4c:	d9802317 	ldw	r6,140(sp)
40803f50:	d9c02517 	ldw	r7,148(sp)
40803f54:	b8000005 	stb	zero,0(r23)
40803f58:	20800044 	addi	r2,r4,1
40803f5c:	30800015 	stw	r2,0(r6)
40803f60:	3802aa26 	beq	r7,zero,40804a0c <_dtoa_r+0x1178>
40803f64:	3dc00015 	stw	r23,0(r7)
40803f68:	d8800717 	ldw	r2,28(sp)
40803f6c:	003e7906 	br	40803954 <__alt_mem_onchip_flash_0_data+0xff7c3954>
40803f70:	00800434 	movhi	r2,16
40803f74:	10bfffc4 	addi	r2,r2,-1
40803f78:	88a2703a 	and	r17,r17,r2
40803f7c:	883e851e 	bne	r17,zero,40803994 <__alt_mem_onchip_flash_0_data+0xff7c3994>
40803f80:	00902074 	movhi	r2,16513
40803f84:	1086be04 	addi	r2,r2,6904
40803f88:	003e8406 	br	4080399c <__alt_mem_onchip_flash_0_data+0xff7c399c>
40803f8c:	10c00204 	addi	r3,r2,8
40803f90:	003e8706 	br	408039b0 <__alt_mem_onchip_flash_0_data+0xff7c39b0>
40803f94:	01400434 	movhi	r5,16
40803f98:	297fffc4 	addi	r5,r5,-1
40803f9c:	994a703a 	and	r5,r19,r5
40803fa0:	9009883a 	mov	r4,r18
40803fa4:	843f0044 	addi	r16,r16,-1023
40803fa8:	294ffc34 	orhi	r5,r5,16368
40803fac:	dd800217 	ldw	r22,8(sp)
40803fb0:	d8001115 	stw	zero,68(sp)
40803fb4:	003ea506 	br	40803a4c <__alt_mem_onchip_flash_0_data+0xff7c3a4c>
40803fb8:	00902074 	movhi	r2,16513
40803fbc:	1086b504 	addi	r2,r2,6868
40803fc0:	003e6406 	br	40803954 <__alt_mem_onchip_flash_0_data+0xff7c3954>
40803fc4:	e0001115 	stw	zero,68(fp)
40803fc8:	000b883a 	mov	r5,zero
40803fcc:	e009883a 	mov	r4,fp
40803fd0:	0806e080 	call	40806e08 <_Balloc>
40803fd4:	01bfffc4 	movi	r6,-1
40803fd8:	01c00044 	movi	r7,1
40803fdc:	d8800715 	stw	r2,28(sp)
40803fe0:	d9800c15 	stw	r6,48(sp)
40803fe4:	e0801015 	stw	r2,64(fp)
40803fe8:	d8000315 	stw	zero,12(sp)
40803fec:	d9c00b15 	stw	r7,44(sp)
40803ff0:	d9800615 	stw	r6,24(sp)
40803ff4:	d8002215 	stw	zero,136(sp)
40803ff8:	d8800117 	ldw	r2,4(sp)
40803ffc:	10008916 	blt	r2,zero,40804224 <_dtoa_r+0x990>
40804000:	d9000517 	ldw	r4,20(sp)
40804004:	00c00384 	movi	r3,14
40804008:	19008616 	blt	r3,r4,40804224 <_dtoa_r+0x990>
4080400c:	200490fa 	slli	r2,r4,3
40804010:	00d02074 	movhi	r3,16513
40804014:	d9802217 	ldw	r6,136(sp)
40804018:	18c6dd04 	addi	r3,r3,7028
4080401c:	1885883a 	add	r2,r3,r2
40804020:	14000017 	ldw	r16,0(r2)
40804024:	14400117 	ldw	r17,4(r2)
40804028:	30016316 	blt	r6,zero,408045b8 <_dtoa_r+0xd24>
4080402c:	800d883a 	mov	r6,r16
40804030:	880f883a 	mov	r7,r17
40804034:	9009883a 	mov	r4,r18
40804038:	980b883a 	mov	r5,r19
4080403c:	080bad40 	call	4080bad4 <__divdf3>
40804040:	180b883a 	mov	r5,r3
40804044:	1009883a 	mov	r4,r2
40804048:	080d6280 	call	4080d628 <__fixdfsi>
4080404c:	1009883a 	mov	r4,r2
40804050:	102b883a 	mov	r21,r2
40804054:	080d6a80 	call	4080d6a8 <__floatsidf>
40804058:	800d883a 	mov	r6,r16
4080405c:	880f883a 	mov	r7,r17
40804060:	1009883a 	mov	r4,r2
40804064:	180b883a 	mov	r5,r3
40804068:	080c6140 	call	4080c614 <__muldf3>
4080406c:	100d883a 	mov	r6,r2
40804070:	180f883a 	mov	r7,r3
40804074:	9009883a 	mov	r4,r18
40804078:	980b883a 	mov	r5,r19
4080407c:	080cd2c0 	call	4080cd2c <__subdf3>
40804080:	d9c00717 	ldw	r7,28(sp)
40804084:	1009883a 	mov	r4,r2
40804088:	a8800c04 	addi	r2,r21,48
4080408c:	38800005 	stb	r2,0(r7)
40804090:	3dc00044 	addi	r23,r7,1
40804094:	d9c00617 	ldw	r7,24(sp)
40804098:	01800044 	movi	r6,1
4080409c:	180b883a 	mov	r5,r3
408040a0:	2005883a 	mov	r2,r4
408040a4:	39803826 	beq	r7,r6,40804188 <_dtoa_r+0x8f4>
408040a8:	000d883a 	mov	r6,zero
408040ac:	01d00934 	movhi	r7,16420
408040b0:	080c6140 	call	4080c614 <__muldf3>
408040b4:	000d883a 	mov	r6,zero
408040b8:	000f883a 	mov	r7,zero
408040bc:	1009883a 	mov	r4,r2
408040c0:	180b883a 	mov	r5,r3
408040c4:	1025883a 	mov	r18,r2
408040c8:	1827883a 	mov	r19,r3
408040cc:	080c3bc0 	call	4080c3bc <__eqdf2>
408040d0:	103f9a26 	beq	r2,zero,40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
408040d4:	d9c00617 	ldw	r7,24(sp)
408040d8:	d8c00717 	ldw	r3,28(sp)
408040dc:	b829883a 	mov	r20,r23
408040e0:	38bfffc4 	addi	r2,r7,-1
408040e4:	18ad883a 	add	r22,r3,r2
408040e8:	00000a06 	br	40804114 <_dtoa_r+0x880>
408040ec:	080c6140 	call	4080c614 <__muldf3>
408040f0:	000d883a 	mov	r6,zero
408040f4:	000f883a 	mov	r7,zero
408040f8:	1009883a 	mov	r4,r2
408040fc:	180b883a 	mov	r5,r3
40804100:	1025883a 	mov	r18,r2
40804104:	1827883a 	mov	r19,r3
40804108:	b829883a 	mov	r20,r23
4080410c:	080c3bc0 	call	4080c3bc <__eqdf2>
40804110:	103f8a26 	beq	r2,zero,40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
40804114:	800d883a 	mov	r6,r16
40804118:	880f883a 	mov	r7,r17
4080411c:	9009883a 	mov	r4,r18
40804120:	980b883a 	mov	r5,r19
40804124:	080bad40 	call	4080bad4 <__divdf3>
40804128:	180b883a 	mov	r5,r3
4080412c:	1009883a 	mov	r4,r2
40804130:	080d6280 	call	4080d628 <__fixdfsi>
40804134:	1009883a 	mov	r4,r2
40804138:	102b883a 	mov	r21,r2
4080413c:	080d6a80 	call	4080d6a8 <__floatsidf>
40804140:	800d883a 	mov	r6,r16
40804144:	880f883a 	mov	r7,r17
40804148:	1009883a 	mov	r4,r2
4080414c:	180b883a 	mov	r5,r3
40804150:	080c6140 	call	4080c614 <__muldf3>
40804154:	100d883a 	mov	r6,r2
40804158:	180f883a 	mov	r7,r3
4080415c:	9009883a 	mov	r4,r18
40804160:	980b883a 	mov	r5,r19
40804164:	080cd2c0 	call	4080cd2c <__subdf3>
40804168:	aa000c04 	addi	r8,r21,48
4080416c:	a2000005 	stb	r8,0(r20)
40804170:	000d883a 	mov	r6,zero
40804174:	01d00934 	movhi	r7,16420
40804178:	1009883a 	mov	r4,r2
4080417c:	180b883a 	mov	r5,r3
40804180:	a5c00044 	addi	r23,r20,1
40804184:	b53fd91e 	bne	r22,r20,408040ec <__alt_mem_onchip_flash_0_data+0xff7c40ec>
40804188:	100d883a 	mov	r6,r2
4080418c:	180f883a 	mov	r7,r3
40804190:	1009883a 	mov	r4,r2
40804194:	180b883a 	mov	r5,r3
40804198:	080b2280 	call	4080b228 <__adddf3>
4080419c:	100d883a 	mov	r6,r2
408041a0:	180f883a 	mov	r7,r3
408041a4:	8009883a 	mov	r4,r16
408041a8:	880b883a 	mov	r5,r17
408041ac:	1027883a 	mov	r19,r2
408041b0:	1825883a 	mov	r18,r3
408041b4:	080c5200 	call	4080c520 <__ledf2>
408041b8:	10000816 	blt	r2,zero,408041dc <_dtoa_r+0x948>
408041bc:	980d883a 	mov	r6,r19
408041c0:	900f883a 	mov	r7,r18
408041c4:	8009883a 	mov	r4,r16
408041c8:	880b883a 	mov	r5,r17
408041cc:	080c3bc0 	call	4080c3bc <__eqdf2>
408041d0:	103f5a1e 	bne	r2,zero,40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
408041d4:	ad40004c 	andi	r21,r21,1
408041d8:	a83f5826 	beq	r21,zero,40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
408041dc:	bd3fffc3 	ldbu	r20,-1(r23)
408041e0:	b8bfffc4 	addi	r2,r23,-1
408041e4:	1007883a 	mov	r3,r2
408041e8:	01400e44 	movi	r5,57
408041ec:	d9800717 	ldw	r6,28(sp)
408041f0:	00000506 	br	40804208 <_dtoa_r+0x974>
408041f4:	18ffffc4 	addi	r3,r3,-1
408041f8:	11824726 	beq	r2,r6,40804b18 <_dtoa_r+0x1284>
408041fc:	1d000003 	ldbu	r20,0(r3)
40804200:	102f883a 	mov	r23,r2
40804204:	10bfffc4 	addi	r2,r2,-1
40804208:	a1003fcc 	andi	r4,r20,255
4080420c:	2100201c 	xori	r4,r4,128
40804210:	213fe004 	addi	r4,r4,-128
40804214:	217ff726 	beq	r4,r5,408041f4 <__alt_mem_onchip_flash_0_data+0xff7c41f4>
40804218:	a2000044 	addi	r8,r20,1
4080421c:	12000005 	stb	r8,0(r2)
40804220:	003f4606 	br	40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
40804224:	d9000b17 	ldw	r4,44(sp)
40804228:	2000c826 	beq	r4,zero,4080454c <_dtoa_r+0xcb8>
4080422c:	d9800317 	ldw	r6,12(sp)
40804230:	00c00044 	movi	r3,1
40804234:	1980f90e 	bge	r3,r6,4080461c <_dtoa_r+0xd88>
40804238:	d8800617 	ldw	r2,24(sp)
4080423c:	d8c00a17 	ldw	r3,40(sp)
40804240:	157fffc4 	addi	r21,r2,-1
40804244:	1d41f316 	blt	r3,r21,40804a14 <_dtoa_r+0x1180>
40804248:	1d6bc83a 	sub	r21,r3,r21
4080424c:	d9c00617 	ldw	r7,24(sp)
40804250:	3802aa16 	blt	r7,zero,40804cfc <_dtoa_r+0x1468>
40804254:	dd000817 	ldw	r20,32(sp)
40804258:	d8800617 	ldw	r2,24(sp)
4080425c:	d8c00817 	ldw	r3,32(sp)
40804260:	01400044 	movi	r5,1
40804264:	e009883a 	mov	r4,fp
40804268:	1887883a 	add	r3,r3,r2
4080426c:	d8c00815 	stw	r3,32(sp)
40804270:	b0ad883a 	add	r22,r22,r2
40804274:	08072140 	call	40807214 <__i2b>
40804278:	1023883a 	mov	r17,r2
4080427c:	a0000826 	beq	r20,zero,408042a0 <_dtoa_r+0xa0c>
40804280:	0580070e 	bge	zero,r22,408042a0 <_dtoa_r+0xa0c>
40804284:	a005883a 	mov	r2,r20
40804288:	b500b916 	blt	r22,r20,40804570 <_dtoa_r+0xcdc>
4080428c:	d9000817 	ldw	r4,32(sp)
40804290:	a0a9c83a 	sub	r20,r20,r2
40804294:	b0adc83a 	sub	r22,r22,r2
40804298:	2089c83a 	sub	r4,r4,r2
4080429c:	d9000815 	stw	r4,32(sp)
408042a0:	d9800a17 	ldw	r6,40(sp)
408042a4:	0181810e 	bge	zero,r6,408048ac <_dtoa_r+0x1018>
408042a8:	d9c00b17 	ldw	r7,44(sp)
408042ac:	3800b326 	beq	r7,zero,4080457c <_dtoa_r+0xce8>
408042b0:	a800b226 	beq	r21,zero,4080457c <_dtoa_r+0xce8>
408042b4:	880b883a 	mov	r5,r17
408042b8:	a80d883a 	mov	r6,r21
408042bc:	e009883a 	mov	r4,fp
408042c0:	08074480 	call	40807448 <__pow5mult>
408042c4:	d9800917 	ldw	r6,36(sp)
408042c8:	100b883a 	mov	r5,r2
408042cc:	e009883a 	mov	r4,fp
408042d0:	1023883a 	mov	r17,r2
408042d4:	08072500 	call	40807250 <__multiply>
408042d8:	1021883a 	mov	r16,r2
408042dc:	d8800a17 	ldw	r2,40(sp)
408042e0:	d9400917 	ldw	r5,36(sp)
408042e4:	e009883a 	mov	r4,fp
408042e8:	1545c83a 	sub	r2,r2,r21
408042ec:	d8800a15 	stw	r2,40(sp)
408042f0:	0806eb00 	call	40806eb0 <_Bfree>
408042f4:	d8c00a17 	ldw	r3,40(sp)
408042f8:	18009f1e 	bne	r3,zero,40804578 <_dtoa_r+0xce4>
408042fc:	05c00044 	movi	r23,1
40804300:	e009883a 	mov	r4,fp
40804304:	b80b883a 	mov	r5,r23
40804308:	08072140 	call	40807214 <__i2b>
4080430c:	d9000d17 	ldw	r4,52(sp)
40804310:	102b883a 	mov	r21,r2
40804314:	2000ce26 	beq	r4,zero,40804650 <_dtoa_r+0xdbc>
40804318:	200d883a 	mov	r6,r4
4080431c:	100b883a 	mov	r5,r2
40804320:	e009883a 	mov	r4,fp
40804324:	08074480 	call	40807448 <__pow5mult>
40804328:	d9800317 	ldw	r6,12(sp)
4080432c:	102b883a 	mov	r21,r2
40804330:	b981810e 	bge	r23,r6,40804938 <_dtoa_r+0x10a4>
40804334:	0027883a 	mov	r19,zero
40804338:	a8800417 	ldw	r2,16(r21)
4080433c:	05c00804 	movi	r23,32
40804340:	10800104 	addi	r2,r2,4
40804344:	1085883a 	add	r2,r2,r2
40804348:	1085883a 	add	r2,r2,r2
4080434c:	a885883a 	add	r2,r21,r2
40804350:	11000017 	ldw	r4,0(r2)
40804354:	08070fc0 	call	408070fc <__hi0bits>
40804358:	b885c83a 	sub	r2,r23,r2
4080435c:	1585883a 	add	r2,r2,r22
40804360:	108007cc 	andi	r2,r2,31
40804364:	1000b326 	beq	r2,zero,40804634 <_dtoa_r+0xda0>
40804368:	00c00804 	movi	r3,32
4080436c:	1887c83a 	sub	r3,r3,r2
40804370:	01000104 	movi	r4,4
40804374:	20c2cd0e 	bge	r4,r3,40804eac <_dtoa_r+0x1618>
40804378:	00c00704 	movi	r3,28
4080437c:	1885c83a 	sub	r2,r3,r2
40804380:	d8c00817 	ldw	r3,32(sp)
40804384:	a0a9883a 	add	r20,r20,r2
40804388:	b0ad883a 	add	r22,r22,r2
4080438c:	1887883a 	add	r3,r3,r2
40804390:	d8c00815 	stw	r3,32(sp)
40804394:	d9800817 	ldw	r6,32(sp)
40804398:	0180040e 	bge	zero,r6,408043ac <_dtoa_r+0xb18>
4080439c:	800b883a 	mov	r5,r16
408043a0:	e009883a 	mov	r4,fp
408043a4:	08075880 	call	40807588 <__lshift>
408043a8:	1021883a 	mov	r16,r2
408043ac:	0580050e 	bge	zero,r22,408043c4 <_dtoa_r+0xb30>
408043b0:	a80b883a 	mov	r5,r21
408043b4:	b00d883a 	mov	r6,r22
408043b8:	e009883a 	mov	r4,fp
408043bc:	08075880 	call	40807588 <__lshift>
408043c0:	102b883a 	mov	r21,r2
408043c4:	d9c00e17 	ldw	r7,56(sp)
408043c8:	3801211e 	bne	r7,zero,40804850 <_dtoa_r+0xfbc>
408043cc:	d9800617 	ldw	r6,24(sp)
408043d0:	0181380e 	bge	zero,r6,408048b4 <_dtoa_r+0x1020>
408043d4:	d8c00b17 	ldw	r3,44(sp)
408043d8:	1800ab1e 	bne	r3,zero,40804688 <_dtoa_r+0xdf4>
408043dc:	dc800717 	ldw	r18,28(sp)
408043e0:	dcc00617 	ldw	r19,24(sp)
408043e4:	9029883a 	mov	r20,r18
408043e8:	00000206 	br	408043f4 <_dtoa_r+0xb60>
408043ec:	0806ed80 	call	40806ed8 <__multadd>
408043f0:	1021883a 	mov	r16,r2
408043f4:	a80b883a 	mov	r5,r21
408043f8:	8009883a 	mov	r4,r16
408043fc:	08036940 	call	40803694 <quorem>
40804400:	10800c04 	addi	r2,r2,48
40804404:	90800005 	stb	r2,0(r18)
40804408:	94800044 	addi	r18,r18,1
4080440c:	9507c83a 	sub	r3,r18,r20
40804410:	000f883a 	mov	r7,zero
40804414:	01800284 	movi	r6,10
40804418:	800b883a 	mov	r5,r16
4080441c:	e009883a 	mov	r4,fp
40804420:	1cfff216 	blt	r3,r19,408043ec <__alt_mem_onchip_flash_0_data+0xff7c43ec>
40804424:	1011883a 	mov	r8,r2
40804428:	d8800617 	ldw	r2,24(sp)
4080442c:	0082370e 	bge	zero,r2,40804d0c <_dtoa_r+0x1478>
40804430:	d9000717 	ldw	r4,28(sp)
40804434:	0025883a 	mov	r18,zero
40804438:	20af883a 	add	r23,r4,r2
4080443c:	01800044 	movi	r6,1
40804440:	800b883a 	mov	r5,r16
40804444:	e009883a 	mov	r4,fp
40804448:	da001715 	stw	r8,92(sp)
4080444c:	08075880 	call	40807588 <__lshift>
40804450:	a80b883a 	mov	r5,r21
40804454:	1009883a 	mov	r4,r2
40804458:	d8800915 	stw	r2,36(sp)
4080445c:	08076d00 	call	408076d0 <__mcmp>
40804460:	da001717 	ldw	r8,92(sp)
40804464:	0081800e 	bge	zero,r2,40804a68 <_dtoa_r+0x11d4>
40804468:	b93fffc3 	ldbu	r4,-1(r23)
4080446c:	b8bfffc4 	addi	r2,r23,-1
40804470:	1007883a 	mov	r3,r2
40804474:	01800e44 	movi	r6,57
40804478:	d9c00717 	ldw	r7,28(sp)
4080447c:	00000506 	br	40804494 <_dtoa_r+0xc00>
40804480:	18ffffc4 	addi	r3,r3,-1
40804484:	11c12326 	beq	r2,r7,40804914 <_dtoa_r+0x1080>
40804488:	19000003 	ldbu	r4,0(r3)
4080448c:	102f883a 	mov	r23,r2
40804490:	10bfffc4 	addi	r2,r2,-1
40804494:	21403fcc 	andi	r5,r4,255
40804498:	2940201c 	xori	r5,r5,128
4080449c:	297fe004 	addi	r5,r5,-128
408044a0:	29bff726 	beq	r5,r6,40804480 <__alt_mem_onchip_flash_0_data+0xff7c4480>
408044a4:	21000044 	addi	r4,r4,1
408044a8:	11000005 	stb	r4,0(r2)
408044ac:	a80b883a 	mov	r5,r21
408044b0:	e009883a 	mov	r4,fp
408044b4:	0806eb00 	call	40806eb0 <_Bfree>
408044b8:	883ea026 	beq	r17,zero,40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
408044bc:	90000426 	beq	r18,zero,408044d0 <_dtoa_r+0xc3c>
408044c0:	94400326 	beq	r18,r17,408044d0 <_dtoa_r+0xc3c>
408044c4:	900b883a 	mov	r5,r18
408044c8:	e009883a 	mov	r4,fp
408044cc:	0806eb00 	call	40806eb0 <_Bfree>
408044d0:	880b883a 	mov	r5,r17
408044d4:	e009883a 	mov	r4,fp
408044d8:	0806eb00 	call	40806eb0 <_Bfree>
408044dc:	003e9706 	br	40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
408044e0:	01800044 	movi	r6,1
408044e4:	d9800e15 	stw	r6,56(sp)
408044e8:	003d9606 	br	40803b44 <__alt_mem_onchip_flash_0_data+0xff7c3b44>
408044ec:	d8800817 	ldw	r2,32(sp)
408044f0:	d8c00517 	ldw	r3,20(sp)
408044f4:	d8000d15 	stw	zero,52(sp)
408044f8:	10c5c83a 	sub	r2,r2,r3
408044fc:	00c9c83a 	sub	r4,zero,r3
40804500:	d8800815 	stw	r2,32(sp)
40804504:	d9000a15 	stw	r4,40(sp)
40804508:	003d9706 	br	40803b68 <__alt_mem_onchip_flash_0_data+0xff7c3b68>
4080450c:	05adc83a 	sub	r22,zero,r22
40804510:	dd800815 	stw	r22,32(sp)
40804514:	002d883a 	mov	r22,zero
40804518:	003d8e06 	br	40803b54 <__alt_mem_onchip_flash_0_data+0xff7c3b54>
4080451c:	d9000517 	ldw	r4,20(sp)
40804520:	080d6a80 	call	4080d6a8 <__floatsidf>
40804524:	100d883a 	mov	r6,r2
40804528:	180f883a 	mov	r7,r3
4080452c:	a009883a 	mov	r4,r20
40804530:	880b883a 	mov	r5,r17
40804534:	080c3bc0 	call	4080c3bc <__eqdf2>
40804538:	103d7126 	beq	r2,zero,40803b00 <__alt_mem_onchip_flash_0_data+0xff7c3b00>
4080453c:	d9c00517 	ldw	r7,20(sp)
40804540:	39ffffc4 	addi	r7,r7,-1
40804544:	d9c00515 	stw	r7,20(sp)
40804548:	003d6d06 	br	40803b00 <__alt_mem_onchip_flash_0_data+0xff7c3b00>
4080454c:	dd400a17 	ldw	r21,40(sp)
40804550:	dd000817 	ldw	r20,32(sp)
40804554:	0023883a 	mov	r17,zero
40804558:	003f4806 	br	4080427c <__alt_mem_onchip_flash_0_data+0xff7c427c>
4080455c:	10e3c83a 	sub	r17,r2,r3
40804560:	9448983a 	sll	r4,r18,r17
40804564:	003d3206 	br	40803a30 <__alt_mem_onchip_flash_0_data+0xff7c3a30>
40804568:	d8000e15 	stw	zero,56(sp)
4080456c:	003d7506 	br	40803b44 <__alt_mem_onchip_flash_0_data+0xff7c3b44>
40804570:	b005883a 	mov	r2,r22
40804574:	003f4506 	br	4080428c <__alt_mem_onchip_flash_0_data+0xff7c428c>
40804578:	dc000915 	stw	r16,36(sp)
4080457c:	d9800a17 	ldw	r6,40(sp)
40804580:	d9400917 	ldw	r5,36(sp)
40804584:	e009883a 	mov	r4,fp
40804588:	08074480 	call	40807448 <__pow5mult>
4080458c:	1021883a 	mov	r16,r2
40804590:	003f5a06 	br	408042fc <__alt_mem_onchip_flash_0_data+0xff7c42fc>
40804594:	01c00044 	movi	r7,1
40804598:	d9c00b15 	stw	r7,44(sp)
4080459c:	d8802217 	ldw	r2,136(sp)
408045a0:	0081280e 	bge	zero,r2,40804a44 <_dtoa_r+0x11b0>
408045a4:	100d883a 	mov	r6,r2
408045a8:	1021883a 	mov	r16,r2
408045ac:	d8800c15 	stw	r2,48(sp)
408045b0:	d8800615 	stw	r2,24(sp)
408045b4:	003d8806 	br	40803bd8 <__alt_mem_onchip_flash_0_data+0xff7c3bd8>
408045b8:	d8800617 	ldw	r2,24(sp)
408045bc:	00be9b16 	blt	zero,r2,4080402c <__alt_mem_onchip_flash_0_data+0xff7c402c>
408045c0:	10010f1e 	bne	r2,zero,40804a00 <_dtoa_r+0x116c>
408045c4:	880b883a 	mov	r5,r17
408045c8:	000d883a 	mov	r6,zero
408045cc:	01d00534 	movhi	r7,16404
408045d0:	8009883a 	mov	r4,r16
408045d4:	080c6140 	call	4080c614 <__muldf3>
408045d8:	900d883a 	mov	r6,r18
408045dc:	980f883a 	mov	r7,r19
408045e0:	1009883a 	mov	r4,r2
408045e4:	180b883a 	mov	r5,r3
408045e8:	080c4440 	call	4080c444 <__gedf2>
408045ec:	002b883a 	mov	r21,zero
408045f0:	0023883a 	mov	r17,zero
408045f4:	1000bf16 	blt	r2,zero,408048f4 <_dtoa_r+0x1060>
408045f8:	d9802217 	ldw	r6,136(sp)
408045fc:	ddc00717 	ldw	r23,28(sp)
40804600:	018c303a 	nor	r6,zero,r6
40804604:	d9800515 	stw	r6,20(sp)
40804608:	a80b883a 	mov	r5,r21
4080460c:	e009883a 	mov	r4,fp
40804610:	0806eb00 	call	40806eb0 <_Bfree>
40804614:	883e4926 	beq	r17,zero,40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
40804618:	003fad06 	br	408044d0 <__alt_mem_onchip_flash_0_data+0xff7c44d0>
4080461c:	d9c01117 	ldw	r7,68(sp)
40804620:	3801bc26 	beq	r7,zero,40804d14 <_dtoa_r+0x1480>
40804624:	10810cc4 	addi	r2,r2,1075
40804628:	dd400a17 	ldw	r21,40(sp)
4080462c:	dd000817 	ldw	r20,32(sp)
40804630:	003f0a06 	br	4080425c <__alt_mem_onchip_flash_0_data+0xff7c425c>
40804634:	00800704 	movi	r2,28
40804638:	d9000817 	ldw	r4,32(sp)
4080463c:	a0a9883a 	add	r20,r20,r2
40804640:	b0ad883a 	add	r22,r22,r2
40804644:	2089883a 	add	r4,r4,r2
40804648:	d9000815 	stw	r4,32(sp)
4080464c:	003f5106 	br	40804394 <__alt_mem_onchip_flash_0_data+0xff7c4394>
40804650:	d8c00317 	ldw	r3,12(sp)
40804654:	b8c1fc0e 	bge	r23,r3,40804e48 <_dtoa_r+0x15b4>
40804658:	0027883a 	mov	r19,zero
4080465c:	b805883a 	mov	r2,r23
40804660:	003f3e06 	br	4080435c <__alt_mem_onchip_flash_0_data+0xff7c435c>
40804664:	880b883a 	mov	r5,r17
40804668:	e009883a 	mov	r4,fp
4080466c:	000f883a 	mov	r7,zero
40804670:	01800284 	movi	r6,10
40804674:	0806ed80 	call	40806ed8 <__multadd>
40804678:	d9000c17 	ldw	r4,48(sp)
4080467c:	1023883a 	mov	r17,r2
40804680:	0102040e 	bge	zero,r4,40804e94 <_dtoa_r+0x1600>
40804684:	d9000615 	stw	r4,24(sp)
40804688:	0500050e 	bge	zero,r20,408046a0 <_dtoa_r+0xe0c>
4080468c:	880b883a 	mov	r5,r17
40804690:	a00d883a 	mov	r6,r20
40804694:	e009883a 	mov	r4,fp
40804698:	08075880 	call	40807588 <__lshift>
4080469c:	1023883a 	mov	r17,r2
408046a0:	9801241e 	bne	r19,zero,40804b34 <_dtoa_r+0x12a0>
408046a4:	8829883a 	mov	r20,r17
408046a8:	d9000617 	ldw	r4,24(sp)
408046ac:	dcc00717 	ldw	r19,28(sp)
408046b0:	9480004c 	andi	r18,r18,1
408046b4:	20bfffc4 	addi	r2,r4,-1
408046b8:	9885883a 	add	r2,r19,r2
408046bc:	d8800415 	stw	r2,16(sp)
408046c0:	dc800615 	stw	r18,24(sp)
408046c4:	a80b883a 	mov	r5,r21
408046c8:	8009883a 	mov	r4,r16
408046cc:	08036940 	call	40803694 <quorem>
408046d0:	880b883a 	mov	r5,r17
408046d4:	8009883a 	mov	r4,r16
408046d8:	102f883a 	mov	r23,r2
408046dc:	08076d00 	call	408076d0 <__mcmp>
408046e0:	a80b883a 	mov	r5,r21
408046e4:	a00d883a 	mov	r6,r20
408046e8:	e009883a 	mov	r4,fp
408046ec:	102d883a 	mov	r22,r2
408046f0:	08077300 	call	40807730 <__mdiff>
408046f4:	1007883a 	mov	r3,r2
408046f8:	10800317 	ldw	r2,12(r2)
408046fc:	bc800c04 	addi	r18,r23,48
40804700:	180b883a 	mov	r5,r3
40804704:	10004e1e 	bne	r2,zero,40804840 <_dtoa_r+0xfac>
40804708:	8009883a 	mov	r4,r16
4080470c:	d8c01615 	stw	r3,88(sp)
40804710:	08076d00 	call	408076d0 <__mcmp>
40804714:	d8c01617 	ldw	r3,88(sp)
40804718:	e009883a 	mov	r4,fp
4080471c:	d8801615 	stw	r2,88(sp)
40804720:	180b883a 	mov	r5,r3
40804724:	0806eb00 	call	40806eb0 <_Bfree>
40804728:	d8801617 	ldw	r2,88(sp)
4080472c:	1000041e 	bne	r2,zero,40804740 <_dtoa_r+0xeac>
40804730:	d9800317 	ldw	r6,12(sp)
40804734:	3000021e 	bne	r6,zero,40804740 <_dtoa_r+0xeac>
40804738:	d8c00617 	ldw	r3,24(sp)
4080473c:	18003726 	beq	r3,zero,4080481c <_dtoa_r+0xf88>
40804740:	b0002016 	blt	r22,zero,408047c4 <_dtoa_r+0xf30>
40804744:	b000041e 	bne	r22,zero,40804758 <_dtoa_r+0xec4>
40804748:	d9000317 	ldw	r4,12(sp)
4080474c:	2000021e 	bne	r4,zero,40804758 <_dtoa_r+0xec4>
40804750:	d8c00617 	ldw	r3,24(sp)
40804754:	18001b26 	beq	r3,zero,408047c4 <_dtoa_r+0xf30>
40804758:	00810716 	blt	zero,r2,40804b78 <_dtoa_r+0x12e4>
4080475c:	d8c00417 	ldw	r3,16(sp)
40804760:	9d800044 	addi	r22,r19,1
40804764:	9c800005 	stb	r18,0(r19)
40804768:	b02f883a 	mov	r23,r22
4080476c:	98c10626 	beq	r19,r3,40804b88 <_dtoa_r+0x12f4>
40804770:	800b883a 	mov	r5,r16
40804774:	000f883a 	mov	r7,zero
40804778:	01800284 	movi	r6,10
4080477c:	e009883a 	mov	r4,fp
40804780:	0806ed80 	call	40806ed8 <__multadd>
40804784:	1021883a 	mov	r16,r2
40804788:	000f883a 	mov	r7,zero
4080478c:	01800284 	movi	r6,10
40804790:	880b883a 	mov	r5,r17
40804794:	e009883a 	mov	r4,fp
40804798:	8d002526 	beq	r17,r20,40804830 <_dtoa_r+0xf9c>
4080479c:	0806ed80 	call	40806ed8 <__multadd>
408047a0:	a00b883a 	mov	r5,r20
408047a4:	000f883a 	mov	r7,zero
408047a8:	01800284 	movi	r6,10
408047ac:	e009883a 	mov	r4,fp
408047b0:	1023883a 	mov	r17,r2
408047b4:	0806ed80 	call	40806ed8 <__multadd>
408047b8:	1029883a 	mov	r20,r2
408047bc:	b027883a 	mov	r19,r22
408047c0:	003fc006 	br	408046c4 <__alt_mem_onchip_flash_0_data+0xff7c46c4>
408047c4:	9011883a 	mov	r8,r18
408047c8:	00800e0e 	bge	zero,r2,40804804 <_dtoa_r+0xf70>
408047cc:	800b883a 	mov	r5,r16
408047d0:	01800044 	movi	r6,1
408047d4:	e009883a 	mov	r4,fp
408047d8:	da001715 	stw	r8,92(sp)
408047dc:	08075880 	call	40807588 <__lshift>
408047e0:	a80b883a 	mov	r5,r21
408047e4:	1009883a 	mov	r4,r2
408047e8:	1021883a 	mov	r16,r2
408047ec:	08076d00 	call	408076d0 <__mcmp>
408047f0:	da001717 	ldw	r8,92(sp)
408047f4:	0081960e 	bge	zero,r2,40804e50 <_dtoa_r+0x15bc>
408047f8:	00800e44 	movi	r2,57
408047fc:	40817026 	beq	r8,r2,40804dc0 <_dtoa_r+0x152c>
40804800:	ba000c44 	addi	r8,r23,49
40804804:	8825883a 	mov	r18,r17
40804808:	9dc00044 	addi	r23,r19,1
4080480c:	9a000005 	stb	r8,0(r19)
40804810:	a023883a 	mov	r17,r20
40804814:	dc000915 	stw	r16,36(sp)
40804818:	003f2406 	br	408044ac <__alt_mem_onchip_flash_0_data+0xff7c44ac>
4080481c:	00800e44 	movi	r2,57
40804820:	9011883a 	mov	r8,r18
40804824:	90816626 	beq	r18,r2,40804dc0 <_dtoa_r+0x152c>
40804828:	05bff516 	blt	zero,r22,40804800 <__alt_mem_onchip_flash_0_data+0xff7c4800>
4080482c:	003ff506 	br	40804804 <__alt_mem_onchip_flash_0_data+0xff7c4804>
40804830:	0806ed80 	call	40806ed8 <__multadd>
40804834:	1023883a 	mov	r17,r2
40804838:	1029883a 	mov	r20,r2
4080483c:	003fdf06 	br	408047bc <__alt_mem_onchip_flash_0_data+0xff7c47bc>
40804840:	e009883a 	mov	r4,fp
40804844:	0806eb00 	call	40806eb0 <_Bfree>
40804848:	00800044 	movi	r2,1
4080484c:	003fbc06 	br	40804740 <__alt_mem_onchip_flash_0_data+0xff7c4740>
40804850:	a80b883a 	mov	r5,r21
40804854:	8009883a 	mov	r4,r16
40804858:	08076d00 	call	408076d0 <__mcmp>
4080485c:	103edb0e 	bge	r2,zero,408043cc <__alt_mem_onchip_flash_0_data+0xff7c43cc>
40804860:	800b883a 	mov	r5,r16
40804864:	000f883a 	mov	r7,zero
40804868:	01800284 	movi	r6,10
4080486c:	e009883a 	mov	r4,fp
40804870:	0806ed80 	call	40806ed8 <__multadd>
40804874:	1021883a 	mov	r16,r2
40804878:	d8800517 	ldw	r2,20(sp)
4080487c:	d8c00b17 	ldw	r3,44(sp)
40804880:	10bfffc4 	addi	r2,r2,-1
40804884:	d8800515 	stw	r2,20(sp)
40804888:	183f761e 	bne	r3,zero,40804664 <__alt_mem_onchip_flash_0_data+0xff7c4664>
4080488c:	d9000c17 	ldw	r4,48(sp)
40804890:	0101730e 	bge	zero,r4,40804e60 <_dtoa_r+0x15cc>
40804894:	d9000615 	stw	r4,24(sp)
40804898:	003ed006 	br	408043dc <__alt_mem_onchip_flash_0_data+0xff7c43dc>
4080489c:	00800084 	movi	r2,2
408048a0:	3081861e 	bne	r6,r2,40804ebc <_dtoa_r+0x1628>
408048a4:	d8000b15 	stw	zero,44(sp)
408048a8:	003f3c06 	br	4080459c <__alt_mem_onchip_flash_0_data+0xff7c459c>
408048ac:	dc000917 	ldw	r16,36(sp)
408048b0:	003e9206 	br	408042fc <__alt_mem_onchip_flash_0_data+0xff7c42fc>
408048b4:	d9c00317 	ldw	r7,12(sp)
408048b8:	00800084 	movi	r2,2
408048bc:	11fec50e 	bge	r2,r7,408043d4 <__alt_mem_onchip_flash_0_data+0xff7c43d4>
408048c0:	d9000617 	ldw	r4,24(sp)
408048c4:	20013c1e 	bne	r4,zero,40804db8 <_dtoa_r+0x1524>
408048c8:	a80b883a 	mov	r5,r21
408048cc:	000f883a 	mov	r7,zero
408048d0:	01800144 	movi	r6,5
408048d4:	e009883a 	mov	r4,fp
408048d8:	0806ed80 	call	40806ed8 <__multadd>
408048dc:	100b883a 	mov	r5,r2
408048e0:	8009883a 	mov	r4,r16
408048e4:	102b883a 	mov	r21,r2
408048e8:	08076d00 	call	408076d0 <__mcmp>
408048ec:	dc000915 	stw	r16,36(sp)
408048f0:	00bf410e 	bge	zero,r2,408045f8 <__alt_mem_onchip_flash_0_data+0xff7c45f8>
408048f4:	d9c00717 	ldw	r7,28(sp)
408048f8:	00800c44 	movi	r2,49
408048fc:	38800005 	stb	r2,0(r7)
40804900:	d8800517 	ldw	r2,20(sp)
40804904:	3dc00044 	addi	r23,r7,1
40804908:	10800044 	addi	r2,r2,1
4080490c:	d8800515 	stw	r2,20(sp)
40804910:	003f3d06 	br	40804608 <__alt_mem_onchip_flash_0_data+0xff7c4608>
40804914:	d9800517 	ldw	r6,20(sp)
40804918:	d9c00717 	ldw	r7,28(sp)
4080491c:	00800c44 	movi	r2,49
40804920:	31800044 	addi	r6,r6,1
40804924:	d9800515 	stw	r6,20(sp)
40804928:	38800005 	stb	r2,0(r7)
4080492c:	003edf06 	br	408044ac <__alt_mem_onchip_flash_0_data+0xff7c44ac>
40804930:	d8000b15 	stw	zero,44(sp)
40804934:	003c9f06 	br	40803bb4 <__alt_mem_onchip_flash_0_data+0xff7c3bb4>
40804938:	903e7e1e 	bne	r18,zero,40804334 <__alt_mem_onchip_flash_0_data+0xff7c4334>
4080493c:	00800434 	movhi	r2,16
40804940:	10bfffc4 	addi	r2,r2,-1
40804944:	9884703a 	and	r2,r19,r2
40804948:	1000ea1e 	bne	r2,zero,40804cf4 <_dtoa_r+0x1460>
4080494c:	9cdffc2c 	andhi	r19,r19,32752
40804950:	9800e826 	beq	r19,zero,40804cf4 <_dtoa_r+0x1460>
40804954:	d9c00817 	ldw	r7,32(sp)
40804958:	b5800044 	addi	r22,r22,1
4080495c:	04c00044 	movi	r19,1
40804960:	39c00044 	addi	r7,r7,1
40804964:	d9c00815 	stw	r7,32(sp)
40804968:	d8800d17 	ldw	r2,52(sp)
4080496c:	103e721e 	bne	r2,zero,40804338 <__alt_mem_onchip_flash_0_data+0xff7c4338>
40804970:	00800044 	movi	r2,1
40804974:	003e7906 	br	4080435c <__alt_mem_onchip_flash_0_data+0xff7c435c>
40804978:	8009883a 	mov	r4,r16
4080497c:	080d6a80 	call	4080d6a8 <__floatsidf>
40804980:	d9800f17 	ldw	r6,60(sp)
40804984:	d9c01017 	ldw	r7,64(sp)
40804988:	1009883a 	mov	r4,r2
4080498c:	180b883a 	mov	r5,r3
40804990:	080c6140 	call	4080c614 <__muldf3>
40804994:	000d883a 	mov	r6,zero
40804998:	01d00734 	movhi	r7,16412
4080499c:	1009883a 	mov	r4,r2
408049a0:	180b883a 	mov	r5,r3
408049a4:	080b2280 	call	4080b228 <__adddf3>
408049a8:	047f3034 	movhi	r17,64704
408049ac:	1021883a 	mov	r16,r2
408049b0:	1c63883a 	add	r17,r3,r17
408049b4:	d9000f17 	ldw	r4,60(sp)
408049b8:	d9401017 	ldw	r5,64(sp)
408049bc:	000d883a 	mov	r6,zero
408049c0:	01d00534 	movhi	r7,16404
408049c4:	080cd2c0 	call	4080cd2c <__subdf3>
408049c8:	800d883a 	mov	r6,r16
408049cc:	880f883a 	mov	r7,r17
408049d0:	1009883a 	mov	r4,r2
408049d4:	180b883a 	mov	r5,r3
408049d8:	102b883a 	mov	r21,r2
408049dc:	1829883a 	mov	r20,r3
408049e0:	080c4440 	call	4080c444 <__gedf2>
408049e4:	00806c16 	blt	zero,r2,40804b98 <_dtoa_r+0x1304>
408049e8:	89e0003c 	xorhi	r7,r17,32768
408049ec:	800d883a 	mov	r6,r16
408049f0:	a809883a 	mov	r4,r21
408049f4:	a00b883a 	mov	r5,r20
408049f8:	080c5200 	call	4080c520 <__ledf2>
408049fc:	103d7e0e 	bge	r2,zero,40803ff8 <__alt_mem_onchip_flash_0_data+0xff7c3ff8>
40804a00:	002b883a 	mov	r21,zero
40804a04:	0023883a 	mov	r17,zero
40804a08:	003efb06 	br	408045f8 <__alt_mem_onchip_flash_0_data+0xff7c45f8>
40804a0c:	d8800717 	ldw	r2,28(sp)
40804a10:	003bd006 	br	40803954 <__alt_mem_onchip_flash_0_data+0xff7c3954>
40804a14:	d9000a17 	ldw	r4,40(sp)
40804a18:	d9800d17 	ldw	r6,52(sp)
40804a1c:	dd400a15 	stw	r21,40(sp)
40804a20:	a905c83a 	sub	r2,r21,r4
40804a24:	308d883a 	add	r6,r6,r2
40804a28:	d9800d15 	stw	r6,52(sp)
40804a2c:	002b883a 	mov	r21,zero
40804a30:	003e0606 	br	4080424c <__alt_mem_onchip_flash_0_data+0xff7c424c>
40804a34:	9023883a 	mov	r17,r18
40804a38:	9829883a 	mov	r20,r19
40804a3c:	04000084 	movi	r16,2
40804a40:	003c9206 	br	40803c8c <__alt_mem_onchip_flash_0_data+0xff7c3c8c>
40804a44:	04000044 	movi	r16,1
40804a48:	dc000c15 	stw	r16,48(sp)
40804a4c:	dc000615 	stw	r16,24(sp)
40804a50:	dc002215 	stw	r16,136(sp)
40804a54:	e0001115 	stw	zero,68(fp)
40804a58:	000b883a 	mov	r5,zero
40804a5c:	003c6906 	br	40803c04 <__alt_mem_onchip_flash_0_data+0xff7c3c04>
40804a60:	3021883a 	mov	r16,r6
40804a64:	003ffb06 	br	40804a54 <__alt_mem_onchip_flash_0_data+0xff7c4a54>
40804a68:	1000021e 	bne	r2,zero,40804a74 <_dtoa_r+0x11e0>
40804a6c:	4200004c 	andi	r8,r8,1
40804a70:	403e7d1e 	bne	r8,zero,40804468 <__alt_mem_onchip_flash_0_data+0xff7c4468>
40804a74:	01000c04 	movi	r4,48
40804a78:	00000106 	br	40804a80 <_dtoa_r+0x11ec>
40804a7c:	102f883a 	mov	r23,r2
40804a80:	b8bfffc4 	addi	r2,r23,-1
40804a84:	10c00007 	ldb	r3,0(r2)
40804a88:	193ffc26 	beq	r3,r4,40804a7c <__alt_mem_onchip_flash_0_data+0xff7c4a7c>
40804a8c:	003e8706 	br	408044ac <__alt_mem_onchip_flash_0_data+0xff7c44ac>
40804a90:	d8800517 	ldw	r2,20(sp)
40804a94:	00a3c83a 	sub	r17,zero,r2
40804a98:	8800a426 	beq	r17,zero,40804d2c <_dtoa_r+0x1498>
40804a9c:	888003cc 	andi	r2,r17,15
40804aa0:	100490fa 	slli	r2,r2,3
40804aa4:	00d02074 	movhi	r3,16513
40804aa8:	18c6dd04 	addi	r3,r3,7028
40804aac:	1885883a 	add	r2,r3,r2
40804ab0:	11800017 	ldw	r6,0(r2)
40804ab4:	11c00117 	ldw	r7,4(r2)
40804ab8:	9009883a 	mov	r4,r18
40804abc:	980b883a 	mov	r5,r19
40804ac0:	8823d13a 	srai	r17,r17,4
40804ac4:	080c6140 	call	4080c614 <__muldf3>
40804ac8:	d8800f15 	stw	r2,60(sp)
40804acc:	d8c01015 	stw	r3,64(sp)
40804ad0:	8800e826 	beq	r17,zero,40804e74 <_dtoa_r+0x15e0>
40804ad4:	05102074 	movhi	r20,16513
40804ad8:	a506d304 	addi	r20,r20,6988
40804adc:	04000084 	movi	r16,2
40804ae0:	8980004c 	andi	r6,r17,1
40804ae4:	1009883a 	mov	r4,r2
40804ae8:	8823d07a 	srai	r17,r17,1
40804aec:	180b883a 	mov	r5,r3
40804af0:	30000426 	beq	r6,zero,40804b04 <_dtoa_r+0x1270>
40804af4:	a1800017 	ldw	r6,0(r20)
40804af8:	a1c00117 	ldw	r7,4(r20)
40804afc:	84000044 	addi	r16,r16,1
40804b00:	080c6140 	call	4080c614 <__muldf3>
40804b04:	a5000204 	addi	r20,r20,8
40804b08:	883ff51e 	bne	r17,zero,40804ae0 <__alt_mem_onchip_flash_0_data+0xff7c4ae0>
40804b0c:	d8800f15 	stw	r2,60(sp)
40804b10:	d8c01015 	stw	r3,64(sp)
40804b14:	003c7606 	br	40803cf0 <__alt_mem_onchip_flash_0_data+0xff7c3cf0>
40804b18:	00c00c04 	movi	r3,48
40804b1c:	10c00005 	stb	r3,0(r2)
40804b20:	d8c00517 	ldw	r3,20(sp)
40804b24:	bd3fffc3 	ldbu	r20,-1(r23)
40804b28:	18c00044 	addi	r3,r3,1
40804b2c:	d8c00515 	stw	r3,20(sp)
40804b30:	003db906 	br	40804218 <__alt_mem_onchip_flash_0_data+0xff7c4218>
40804b34:	89400117 	ldw	r5,4(r17)
40804b38:	e009883a 	mov	r4,fp
40804b3c:	0806e080 	call	40806e08 <_Balloc>
40804b40:	89800417 	ldw	r6,16(r17)
40804b44:	89400304 	addi	r5,r17,12
40804b48:	11000304 	addi	r4,r2,12
40804b4c:	31800084 	addi	r6,r6,2
40804b50:	318d883a 	add	r6,r6,r6
40804b54:	318d883a 	add	r6,r6,r6
40804b58:	1027883a 	mov	r19,r2
40804b5c:	0806b640 	call	40806b64 <memcpy>
40804b60:	01800044 	movi	r6,1
40804b64:	980b883a 	mov	r5,r19
40804b68:	e009883a 	mov	r4,fp
40804b6c:	08075880 	call	40807588 <__lshift>
40804b70:	1029883a 	mov	r20,r2
40804b74:	003ecc06 	br	408046a8 <__alt_mem_onchip_flash_0_data+0xff7c46a8>
40804b78:	00800e44 	movi	r2,57
40804b7c:	90809026 	beq	r18,r2,40804dc0 <_dtoa_r+0x152c>
40804b80:	92000044 	addi	r8,r18,1
40804b84:	003f1f06 	br	40804804 <__alt_mem_onchip_flash_0_data+0xff7c4804>
40804b88:	9011883a 	mov	r8,r18
40804b8c:	8825883a 	mov	r18,r17
40804b90:	a023883a 	mov	r17,r20
40804b94:	003e2906 	br	4080443c <__alt_mem_onchip_flash_0_data+0xff7c443c>
40804b98:	002b883a 	mov	r21,zero
40804b9c:	0023883a 	mov	r17,zero
40804ba0:	003f5406 	br	408048f4 <__alt_mem_onchip_flash_0_data+0xff7c48f4>
40804ba4:	61bfffc4 	addi	r6,r12,-1
40804ba8:	300490fa 	slli	r2,r6,3
40804bac:	00d02074 	movhi	r3,16513
40804bb0:	18c6dd04 	addi	r3,r3,7028
40804bb4:	1885883a 	add	r2,r3,r2
40804bb8:	11000017 	ldw	r4,0(r2)
40804bbc:	11400117 	ldw	r5,4(r2)
40804bc0:	d8800717 	ldw	r2,28(sp)
40804bc4:	880f883a 	mov	r7,r17
40804bc8:	d9801215 	stw	r6,72(sp)
40804bcc:	800d883a 	mov	r6,r16
40804bd0:	db001615 	stw	r12,88(sp)
40804bd4:	15c00044 	addi	r23,r2,1
40804bd8:	080c6140 	call	4080c614 <__muldf3>
40804bdc:	d9401017 	ldw	r5,64(sp)
40804be0:	d9000f17 	ldw	r4,60(sp)
40804be4:	d8c01515 	stw	r3,84(sp)
40804be8:	d8801415 	stw	r2,80(sp)
40804bec:	080d6280 	call	4080d628 <__fixdfsi>
40804bf0:	1009883a 	mov	r4,r2
40804bf4:	1021883a 	mov	r16,r2
40804bf8:	080d6a80 	call	4080d6a8 <__floatsidf>
40804bfc:	d9000f17 	ldw	r4,60(sp)
40804c00:	d9401017 	ldw	r5,64(sp)
40804c04:	100d883a 	mov	r6,r2
40804c08:	180f883a 	mov	r7,r3
40804c0c:	080cd2c0 	call	4080cd2c <__subdf3>
40804c10:	1829883a 	mov	r20,r3
40804c14:	d8c00717 	ldw	r3,28(sp)
40804c18:	84000c04 	addi	r16,r16,48
40804c1c:	1023883a 	mov	r17,r2
40804c20:	1c000005 	stb	r16,0(r3)
40804c24:	db001617 	ldw	r12,88(sp)
40804c28:	00800044 	movi	r2,1
40804c2c:	60802226 	beq	r12,r2,40804cb8 <_dtoa_r+0x1424>
40804c30:	d9c00717 	ldw	r7,28(sp)
40804c34:	8805883a 	mov	r2,r17
40804c38:	b82b883a 	mov	r21,r23
40804c3c:	3b19883a 	add	r12,r7,r12
40804c40:	6023883a 	mov	r17,r12
40804c44:	a007883a 	mov	r3,r20
40804c48:	dc800f15 	stw	r18,60(sp)
40804c4c:	000d883a 	mov	r6,zero
40804c50:	01d00934 	movhi	r7,16420
40804c54:	1009883a 	mov	r4,r2
40804c58:	180b883a 	mov	r5,r3
40804c5c:	080c6140 	call	4080c614 <__muldf3>
40804c60:	180b883a 	mov	r5,r3
40804c64:	1009883a 	mov	r4,r2
40804c68:	1829883a 	mov	r20,r3
40804c6c:	1025883a 	mov	r18,r2
40804c70:	080d6280 	call	4080d628 <__fixdfsi>
40804c74:	1009883a 	mov	r4,r2
40804c78:	1021883a 	mov	r16,r2
40804c7c:	080d6a80 	call	4080d6a8 <__floatsidf>
40804c80:	100d883a 	mov	r6,r2
40804c84:	180f883a 	mov	r7,r3
40804c88:	9009883a 	mov	r4,r18
40804c8c:	a00b883a 	mov	r5,r20
40804c90:	84000c04 	addi	r16,r16,48
40804c94:	080cd2c0 	call	4080cd2c <__subdf3>
40804c98:	ad400044 	addi	r21,r21,1
40804c9c:	ac3fffc5 	stb	r16,-1(r21)
40804ca0:	ac7fea1e 	bne	r21,r17,40804c4c <__alt_mem_onchip_flash_0_data+0xff7c4c4c>
40804ca4:	1023883a 	mov	r17,r2
40804ca8:	d8801217 	ldw	r2,72(sp)
40804cac:	dc800f17 	ldw	r18,60(sp)
40804cb0:	1829883a 	mov	r20,r3
40804cb4:	b8af883a 	add	r23,r23,r2
40804cb8:	d9001417 	ldw	r4,80(sp)
40804cbc:	d9401517 	ldw	r5,84(sp)
40804cc0:	000d883a 	mov	r6,zero
40804cc4:	01cff834 	movhi	r7,16352
40804cc8:	080b2280 	call	4080b228 <__adddf3>
40804ccc:	880d883a 	mov	r6,r17
40804cd0:	a00f883a 	mov	r7,r20
40804cd4:	1009883a 	mov	r4,r2
40804cd8:	180b883a 	mov	r5,r3
40804cdc:	080c5200 	call	4080c520 <__ledf2>
40804ce0:	10003e0e 	bge	r2,zero,40804ddc <_dtoa_r+0x1548>
40804ce4:	d9001317 	ldw	r4,76(sp)
40804ce8:	bd3fffc3 	ldbu	r20,-1(r23)
40804cec:	d9000515 	stw	r4,20(sp)
40804cf0:	003d3b06 	br	408041e0 <__alt_mem_onchip_flash_0_data+0xff7c41e0>
40804cf4:	0027883a 	mov	r19,zero
40804cf8:	003f1b06 	br	40804968 <__alt_mem_onchip_flash_0_data+0xff7c4968>
40804cfc:	d8800817 	ldw	r2,32(sp)
40804d00:	11e9c83a 	sub	r20,r2,r7
40804d04:	0005883a 	mov	r2,zero
40804d08:	003d5406 	br	4080425c <__alt_mem_onchip_flash_0_data+0xff7c425c>
40804d0c:	00800044 	movi	r2,1
40804d10:	003dc706 	br	40804430 <__alt_mem_onchip_flash_0_data+0xff7c4430>
40804d14:	d8c00217 	ldw	r3,8(sp)
40804d18:	00800d84 	movi	r2,54
40804d1c:	dd400a17 	ldw	r21,40(sp)
40804d20:	10c5c83a 	sub	r2,r2,r3
40804d24:	dd000817 	ldw	r20,32(sp)
40804d28:	003d4c06 	br	4080425c <__alt_mem_onchip_flash_0_data+0xff7c425c>
40804d2c:	dc800f15 	stw	r18,60(sp)
40804d30:	dcc01015 	stw	r19,64(sp)
40804d34:	04000084 	movi	r16,2
40804d38:	003bed06 	br	40803cf0 <__alt_mem_onchip_flash_0_data+0xff7c3cf0>
40804d3c:	d9000617 	ldw	r4,24(sp)
40804d40:	203f0d26 	beq	r4,zero,40804978 <__alt_mem_onchip_flash_0_data+0xff7c4978>
40804d44:	d9800c17 	ldw	r6,48(sp)
40804d48:	01bcab0e 	bge	zero,r6,40803ff8 <__alt_mem_onchip_flash_0_data+0xff7c3ff8>
40804d4c:	d9401017 	ldw	r5,64(sp)
40804d50:	d9000f17 	ldw	r4,60(sp)
40804d54:	000d883a 	mov	r6,zero
40804d58:	01d00934 	movhi	r7,16420
40804d5c:	080c6140 	call	4080c614 <__muldf3>
40804d60:	81000044 	addi	r4,r16,1
40804d64:	d8800f15 	stw	r2,60(sp)
40804d68:	d8c01015 	stw	r3,64(sp)
40804d6c:	080d6a80 	call	4080d6a8 <__floatsidf>
40804d70:	d9800f17 	ldw	r6,60(sp)
40804d74:	d9c01017 	ldw	r7,64(sp)
40804d78:	1009883a 	mov	r4,r2
40804d7c:	180b883a 	mov	r5,r3
40804d80:	080c6140 	call	4080c614 <__muldf3>
40804d84:	01d00734 	movhi	r7,16412
40804d88:	000d883a 	mov	r6,zero
40804d8c:	1009883a 	mov	r4,r2
40804d90:	180b883a 	mov	r5,r3
40804d94:	080b2280 	call	4080b228 <__adddf3>
40804d98:	d9c00517 	ldw	r7,20(sp)
40804d9c:	047f3034 	movhi	r17,64704
40804da0:	1021883a 	mov	r16,r2
40804da4:	39ffffc4 	addi	r7,r7,-1
40804da8:	d9c01315 	stw	r7,76(sp)
40804dac:	1c63883a 	add	r17,r3,r17
40804db0:	db000c17 	ldw	r12,48(sp)
40804db4:	003bea06 	br	40803d60 <__alt_mem_onchip_flash_0_data+0xff7c3d60>
40804db8:	dc000915 	stw	r16,36(sp)
40804dbc:	003e0e06 	br	408045f8 <__alt_mem_onchip_flash_0_data+0xff7c45f8>
40804dc0:	01000e44 	movi	r4,57
40804dc4:	8825883a 	mov	r18,r17
40804dc8:	9dc00044 	addi	r23,r19,1
40804dcc:	99000005 	stb	r4,0(r19)
40804dd0:	a023883a 	mov	r17,r20
40804dd4:	dc000915 	stw	r16,36(sp)
40804dd8:	003da406 	br	4080446c <__alt_mem_onchip_flash_0_data+0xff7c446c>
40804ddc:	d9801417 	ldw	r6,80(sp)
40804de0:	d9c01517 	ldw	r7,84(sp)
40804de4:	0009883a 	mov	r4,zero
40804de8:	014ff834 	movhi	r5,16352
40804dec:	080cd2c0 	call	4080cd2c <__subdf3>
40804df0:	880d883a 	mov	r6,r17
40804df4:	a00f883a 	mov	r7,r20
40804df8:	1009883a 	mov	r4,r2
40804dfc:	180b883a 	mov	r5,r3
40804e00:	080c4440 	call	4080c444 <__gedf2>
40804e04:	00bc7c0e 	bge	zero,r2,40803ff8 <__alt_mem_onchip_flash_0_data+0xff7c3ff8>
40804e08:	01000c04 	movi	r4,48
40804e0c:	00000106 	br	40804e14 <_dtoa_r+0x1580>
40804e10:	102f883a 	mov	r23,r2
40804e14:	b8bfffc4 	addi	r2,r23,-1
40804e18:	10c00007 	ldb	r3,0(r2)
40804e1c:	193ffc26 	beq	r3,r4,40804e10 <__alt_mem_onchip_flash_0_data+0xff7c4e10>
40804e20:	d9801317 	ldw	r6,76(sp)
40804e24:	d9800515 	stw	r6,20(sp)
40804e28:	003c4406 	br	40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
40804e2c:	d9801317 	ldw	r6,76(sp)
40804e30:	d9800515 	stw	r6,20(sp)
40804e34:	003cea06 	br	408041e0 <__alt_mem_onchip_flash_0_data+0xff7c41e0>
40804e38:	dd800f17 	ldw	r22,60(sp)
40804e3c:	dcc01017 	ldw	r19,64(sp)
40804e40:	dc801217 	ldw	r18,72(sp)
40804e44:	003c6c06 	br	40803ff8 <__alt_mem_onchip_flash_0_data+0xff7c3ff8>
40804e48:	903e031e 	bne	r18,zero,40804658 <__alt_mem_onchip_flash_0_data+0xff7c4658>
40804e4c:	003ebb06 	br	4080493c <__alt_mem_onchip_flash_0_data+0xff7c493c>
40804e50:	103e6c1e 	bne	r2,zero,40804804 <__alt_mem_onchip_flash_0_data+0xff7c4804>
40804e54:	4080004c 	andi	r2,r8,1
40804e58:	103e6a26 	beq	r2,zero,40804804 <__alt_mem_onchip_flash_0_data+0xff7c4804>
40804e5c:	003e6606 	br	408047f8 <__alt_mem_onchip_flash_0_data+0xff7c47f8>
40804e60:	d8c00317 	ldw	r3,12(sp)
40804e64:	00800084 	movi	r2,2
40804e68:	10c02916 	blt	r2,r3,40804f10 <_dtoa_r+0x167c>
40804e6c:	d9000c17 	ldw	r4,48(sp)
40804e70:	003e8806 	br	40804894 <__alt_mem_onchip_flash_0_data+0xff7c4894>
40804e74:	04000084 	movi	r16,2
40804e78:	003b9d06 	br	40803cf0 <__alt_mem_onchip_flash_0_data+0xff7c3cf0>
40804e7c:	d9001317 	ldw	r4,76(sp)
40804e80:	d9000515 	stw	r4,20(sp)
40804e84:	003cd606 	br	408041e0 <__alt_mem_onchip_flash_0_data+0xff7c41e0>
40804e88:	d8801317 	ldw	r2,76(sp)
40804e8c:	d8800515 	stw	r2,20(sp)
40804e90:	003c2a06 	br	40803f3c <__alt_mem_onchip_flash_0_data+0xff7c3f3c>
40804e94:	d9800317 	ldw	r6,12(sp)
40804e98:	00800084 	movi	r2,2
40804e9c:	11801516 	blt	r2,r6,40804ef4 <_dtoa_r+0x1660>
40804ea0:	d9c00c17 	ldw	r7,48(sp)
40804ea4:	d9c00615 	stw	r7,24(sp)
40804ea8:	003df706 	br	40804688 <__alt_mem_onchip_flash_0_data+0xff7c4688>
40804eac:	193d3926 	beq	r3,r4,40804394 <__alt_mem_onchip_flash_0_data+0xff7c4394>
40804eb0:	00c00f04 	movi	r3,60
40804eb4:	1885c83a 	sub	r2,r3,r2
40804eb8:	003ddf06 	br	40804638 <__alt_mem_onchip_flash_0_data+0xff7c4638>
40804ebc:	e009883a 	mov	r4,fp
40804ec0:	e0001115 	stw	zero,68(fp)
40804ec4:	000b883a 	mov	r5,zero
40804ec8:	0806e080 	call	40806e08 <_Balloc>
40804ecc:	d8800715 	stw	r2,28(sp)
40804ed0:	d8c00717 	ldw	r3,28(sp)
40804ed4:	00bfffc4 	movi	r2,-1
40804ed8:	01000044 	movi	r4,1
40804edc:	d8800c15 	stw	r2,48(sp)
40804ee0:	e0c01015 	stw	r3,64(fp)
40804ee4:	d9000b15 	stw	r4,44(sp)
40804ee8:	d8800615 	stw	r2,24(sp)
40804eec:	d8002215 	stw	zero,136(sp)
40804ef0:	003c4106 	br	40803ff8 <__alt_mem_onchip_flash_0_data+0xff7c3ff8>
40804ef4:	d8c00c17 	ldw	r3,48(sp)
40804ef8:	d8c00615 	stw	r3,24(sp)
40804efc:	003e7006 	br	408048c0 <__alt_mem_onchip_flash_0_data+0xff7c48c0>
40804f00:	04400044 	movi	r17,1
40804f04:	003b2006 	br	40803b88 <__alt_mem_onchip_flash_0_data+0xff7c3b88>
40804f08:	000b883a 	mov	r5,zero
40804f0c:	003b3d06 	br	40803c04 <__alt_mem_onchip_flash_0_data+0xff7c3c04>
40804f10:	d8800c17 	ldw	r2,48(sp)
40804f14:	d8800615 	stw	r2,24(sp)
40804f18:	003e6906 	br	408048c0 <__alt_mem_onchip_flash_0_data+0xff7c48c0>

40804f1c <__sflush_r>:
40804f1c:	2880030b 	ldhu	r2,12(r5)
40804f20:	defffb04 	addi	sp,sp,-20
40804f24:	dcc00315 	stw	r19,12(sp)
40804f28:	dc400115 	stw	r17,4(sp)
40804f2c:	dfc00415 	stw	ra,16(sp)
40804f30:	dc800215 	stw	r18,8(sp)
40804f34:	dc000015 	stw	r16,0(sp)
40804f38:	10c0020c 	andi	r3,r2,8
40804f3c:	2823883a 	mov	r17,r5
40804f40:	2027883a 	mov	r19,r4
40804f44:	1800311e 	bne	r3,zero,4080500c <__sflush_r+0xf0>
40804f48:	28c00117 	ldw	r3,4(r5)
40804f4c:	10820014 	ori	r2,r2,2048
40804f50:	2880030d 	sth	r2,12(r5)
40804f54:	00c04b0e 	bge	zero,r3,40805084 <__sflush_r+0x168>
40804f58:	8a000a17 	ldw	r8,40(r17)
40804f5c:	40002326 	beq	r8,zero,40804fec <__sflush_r+0xd0>
40804f60:	9c000017 	ldw	r16,0(r19)
40804f64:	10c4000c 	andi	r3,r2,4096
40804f68:	98000015 	stw	zero,0(r19)
40804f6c:	18004826 	beq	r3,zero,40805090 <__sflush_r+0x174>
40804f70:	89801417 	ldw	r6,80(r17)
40804f74:	10c0010c 	andi	r3,r2,4
40804f78:	18000626 	beq	r3,zero,40804f94 <__sflush_r+0x78>
40804f7c:	88c00117 	ldw	r3,4(r17)
40804f80:	88800c17 	ldw	r2,48(r17)
40804f84:	30cdc83a 	sub	r6,r6,r3
40804f88:	10000226 	beq	r2,zero,40804f94 <__sflush_r+0x78>
40804f8c:	88800f17 	ldw	r2,60(r17)
40804f90:	308dc83a 	sub	r6,r6,r2
40804f94:	89400717 	ldw	r5,28(r17)
40804f98:	000f883a 	mov	r7,zero
40804f9c:	9809883a 	mov	r4,r19
40804fa0:	403ee83a 	callr	r8
40804fa4:	00ffffc4 	movi	r3,-1
40804fa8:	10c04426 	beq	r2,r3,408050bc <__sflush_r+0x1a0>
40804fac:	88c0030b 	ldhu	r3,12(r17)
40804fb0:	89000417 	ldw	r4,16(r17)
40804fb4:	88000115 	stw	zero,4(r17)
40804fb8:	197dffcc 	andi	r5,r3,63487
40804fbc:	8940030d 	sth	r5,12(r17)
40804fc0:	89000015 	stw	r4,0(r17)
40804fc4:	18c4000c 	andi	r3,r3,4096
40804fc8:	18002c1e 	bne	r3,zero,4080507c <__sflush_r+0x160>
40804fcc:	89400c17 	ldw	r5,48(r17)
40804fd0:	9c000015 	stw	r16,0(r19)
40804fd4:	28000526 	beq	r5,zero,40804fec <__sflush_r+0xd0>
40804fd8:	88801004 	addi	r2,r17,64
40804fdc:	28800226 	beq	r5,r2,40804fe8 <__sflush_r+0xcc>
40804fe0:	9809883a 	mov	r4,r19
40804fe4:	08056880 	call	40805688 <_free_r>
40804fe8:	88000c15 	stw	zero,48(r17)
40804fec:	0005883a 	mov	r2,zero
40804ff0:	dfc00417 	ldw	ra,16(sp)
40804ff4:	dcc00317 	ldw	r19,12(sp)
40804ff8:	dc800217 	ldw	r18,8(sp)
40804ffc:	dc400117 	ldw	r17,4(sp)
40805000:	dc000017 	ldw	r16,0(sp)
40805004:	dec00504 	addi	sp,sp,20
40805008:	f800283a 	ret
4080500c:	2c800417 	ldw	r18,16(r5)
40805010:	903ff626 	beq	r18,zero,40804fec <__alt_mem_onchip_flash_0_data+0xff7c4fec>
40805014:	2c000017 	ldw	r16,0(r5)
40805018:	108000cc 	andi	r2,r2,3
4080501c:	2c800015 	stw	r18,0(r5)
40805020:	84a1c83a 	sub	r16,r16,r18
40805024:	1000131e 	bne	r2,zero,40805074 <__sflush_r+0x158>
40805028:	28800517 	ldw	r2,20(r5)
4080502c:	88800215 	stw	r2,8(r17)
40805030:	04000316 	blt	zero,r16,40805040 <__sflush_r+0x124>
40805034:	003fed06 	br	40804fec <__alt_mem_onchip_flash_0_data+0xff7c4fec>
40805038:	90a5883a 	add	r18,r18,r2
4080503c:	043feb0e 	bge	zero,r16,40804fec <__alt_mem_onchip_flash_0_data+0xff7c4fec>
40805040:	88800917 	ldw	r2,36(r17)
40805044:	89400717 	ldw	r5,28(r17)
40805048:	800f883a 	mov	r7,r16
4080504c:	900d883a 	mov	r6,r18
40805050:	9809883a 	mov	r4,r19
40805054:	103ee83a 	callr	r2
40805058:	80a1c83a 	sub	r16,r16,r2
4080505c:	00bff616 	blt	zero,r2,40805038 <__alt_mem_onchip_flash_0_data+0xff7c5038>
40805060:	88c0030b 	ldhu	r3,12(r17)
40805064:	00bfffc4 	movi	r2,-1
40805068:	18c01014 	ori	r3,r3,64
4080506c:	88c0030d 	sth	r3,12(r17)
40805070:	003fdf06 	br	40804ff0 <__alt_mem_onchip_flash_0_data+0xff7c4ff0>
40805074:	0005883a 	mov	r2,zero
40805078:	003fec06 	br	4080502c <__alt_mem_onchip_flash_0_data+0xff7c502c>
4080507c:	88801415 	stw	r2,80(r17)
40805080:	003fd206 	br	40804fcc <__alt_mem_onchip_flash_0_data+0xff7c4fcc>
40805084:	28c00f17 	ldw	r3,60(r5)
40805088:	00ffb316 	blt	zero,r3,40804f58 <__alt_mem_onchip_flash_0_data+0xff7c4f58>
4080508c:	003fd706 	br	40804fec <__alt_mem_onchip_flash_0_data+0xff7c4fec>
40805090:	89400717 	ldw	r5,28(r17)
40805094:	000d883a 	mov	r6,zero
40805098:	01c00044 	movi	r7,1
4080509c:	9809883a 	mov	r4,r19
408050a0:	403ee83a 	callr	r8
408050a4:	100d883a 	mov	r6,r2
408050a8:	00bfffc4 	movi	r2,-1
408050ac:	30801426 	beq	r6,r2,40805100 <__sflush_r+0x1e4>
408050b0:	8880030b 	ldhu	r2,12(r17)
408050b4:	8a000a17 	ldw	r8,40(r17)
408050b8:	003fae06 	br	40804f74 <__alt_mem_onchip_flash_0_data+0xff7c4f74>
408050bc:	98c00017 	ldw	r3,0(r19)
408050c0:	183fba26 	beq	r3,zero,40804fac <__alt_mem_onchip_flash_0_data+0xff7c4fac>
408050c4:	01000744 	movi	r4,29
408050c8:	19000626 	beq	r3,r4,408050e4 <__sflush_r+0x1c8>
408050cc:	01000584 	movi	r4,22
408050d0:	19000426 	beq	r3,r4,408050e4 <__sflush_r+0x1c8>
408050d4:	88c0030b 	ldhu	r3,12(r17)
408050d8:	18c01014 	ori	r3,r3,64
408050dc:	88c0030d 	sth	r3,12(r17)
408050e0:	003fc306 	br	40804ff0 <__alt_mem_onchip_flash_0_data+0xff7c4ff0>
408050e4:	8880030b 	ldhu	r2,12(r17)
408050e8:	88c00417 	ldw	r3,16(r17)
408050ec:	88000115 	stw	zero,4(r17)
408050f0:	10bdffcc 	andi	r2,r2,63487
408050f4:	8880030d 	sth	r2,12(r17)
408050f8:	88c00015 	stw	r3,0(r17)
408050fc:	003fb306 	br	40804fcc <__alt_mem_onchip_flash_0_data+0xff7c4fcc>
40805100:	98800017 	ldw	r2,0(r19)
40805104:	103fea26 	beq	r2,zero,408050b0 <__alt_mem_onchip_flash_0_data+0xff7c50b0>
40805108:	00c00744 	movi	r3,29
4080510c:	10c00226 	beq	r2,r3,40805118 <__sflush_r+0x1fc>
40805110:	00c00584 	movi	r3,22
40805114:	10c0031e 	bne	r2,r3,40805124 <__sflush_r+0x208>
40805118:	9c000015 	stw	r16,0(r19)
4080511c:	0005883a 	mov	r2,zero
40805120:	003fb306 	br	40804ff0 <__alt_mem_onchip_flash_0_data+0xff7c4ff0>
40805124:	88c0030b 	ldhu	r3,12(r17)
40805128:	3005883a 	mov	r2,r6
4080512c:	18c01014 	ori	r3,r3,64
40805130:	88c0030d 	sth	r3,12(r17)
40805134:	003fae06 	br	40804ff0 <__alt_mem_onchip_flash_0_data+0xff7c4ff0>

40805138 <_fflush_r>:
40805138:	defffd04 	addi	sp,sp,-12
4080513c:	dc000115 	stw	r16,4(sp)
40805140:	dfc00215 	stw	ra,8(sp)
40805144:	2021883a 	mov	r16,r4
40805148:	20000226 	beq	r4,zero,40805154 <_fflush_r+0x1c>
4080514c:	20800e17 	ldw	r2,56(r4)
40805150:	10000c26 	beq	r2,zero,40805184 <_fflush_r+0x4c>
40805154:	2880030f 	ldh	r2,12(r5)
40805158:	1000051e 	bne	r2,zero,40805170 <_fflush_r+0x38>
4080515c:	0005883a 	mov	r2,zero
40805160:	dfc00217 	ldw	ra,8(sp)
40805164:	dc000117 	ldw	r16,4(sp)
40805168:	dec00304 	addi	sp,sp,12
4080516c:	f800283a 	ret
40805170:	8009883a 	mov	r4,r16
40805174:	dfc00217 	ldw	ra,8(sp)
40805178:	dc000117 	ldw	r16,4(sp)
4080517c:	dec00304 	addi	sp,sp,12
40805180:	0804f1c1 	jmpi	40804f1c <__sflush_r>
40805184:	d9400015 	stw	r5,0(sp)
40805188:	08055140 	call	40805514 <__sinit>
4080518c:	d9400017 	ldw	r5,0(sp)
40805190:	003ff006 	br	40805154 <__alt_mem_onchip_flash_0_data+0xff7c5154>

40805194 <fflush>:
40805194:	20000526 	beq	r4,zero,408051ac <fflush+0x18>
40805198:	00902074 	movhi	r2,16513
4080519c:	108eaf04 	addi	r2,r2,15036
408051a0:	200b883a 	mov	r5,r4
408051a4:	11000017 	ldw	r4,0(r2)
408051a8:	08051381 	jmpi	40805138 <_fflush_r>
408051ac:	00902074 	movhi	r2,16513
408051b0:	108eae04 	addi	r2,r2,15032
408051b4:	11000017 	ldw	r4,0(r2)
408051b8:	01502034 	movhi	r5,16512
408051bc:	29544e04 	addi	r5,r5,20792
408051c0:	0805f181 	jmpi	40805f18 <_fwalk_reent>

408051c4 <__fp_unlock>:
408051c4:	0005883a 	mov	r2,zero
408051c8:	f800283a 	ret

408051cc <_cleanup_r>:
408051cc:	01502074 	movhi	r5,16513
408051d0:	29678204 	addi	r5,r5,-25080
408051d4:	0805f181 	jmpi	40805f18 <_fwalk_reent>

408051d8 <__sinit.part.1>:
408051d8:	defff704 	addi	sp,sp,-36
408051dc:	00d02034 	movhi	r3,16512
408051e0:	dfc00815 	stw	ra,32(sp)
408051e4:	ddc00715 	stw	r23,28(sp)
408051e8:	dd800615 	stw	r22,24(sp)
408051ec:	dd400515 	stw	r21,20(sp)
408051f0:	dd000415 	stw	r20,16(sp)
408051f4:	dcc00315 	stw	r19,12(sp)
408051f8:	dc800215 	stw	r18,8(sp)
408051fc:	dc400115 	stw	r17,4(sp)
40805200:	dc000015 	stw	r16,0(sp)
40805204:	18d47304 	addi	r3,r3,20940
40805208:	24000117 	ldw	r16,4(r4)
4080520c:	20c00f15 	stw	r3,60(r4)
40805210:	2080bb04 	addi	r2,r4,748
40805214:	00c000c4 	movi	r3,3
40805218:	20c0b915 	stw	r3,740(r4)
4080521c:	2080ba15 	stw	r2,744(r4)
40805220:	2000b815 	stw	zero,736(r4)
40805224:	05c00204 	movi	r23,8
40805228:	00800104 	movi	r2,4
4080522c:	2025883a 	mov	r18,r4
40805230:	b80d883a 	mov	r6,r23
40805234:	81001704 	addi	r4,r16,92
40805238:	000b883a 	mov	r5,zero
4080523c:	80000015 	stw	zero,0(r16)
40805240:	80000115 	stw	zero,4(r16)
40805244:	80000215 	stw	zero,8(r16)
40805248:	8080030d 	sth	r2,12(r16)
4080524c:	80001915 	stw	zero,100(r16)
40805250:	8000038d 	sth	zero,14(r16)
40805254:	80000415 	stw	zero,16(r16)
40805258:	80000515 	stw	zero,20(r16)
4080525c:	80000615 	stw	zero,24(r16)
40805260:	0800f700 	call	40800f70 <memset>
40805264:	05902074 	movhi	r22,16513
40805268:	94400217 	ldw	r17,8(r18)
4080526c:	05502074 	movhi	r21,16513
40805270:	05102074 	movhi	r20,16513
40805274:	04d02074 	movhi	r19,16513
40805278:	b5a10c04 	addi	r22,r22,-31696
4080527c:	ad612304 	addi	r21,r21,-31604
40805280:	a5214204 	addi	r20,r20,-31480
40805284:	9ce15904 	addi	r19,r19,-31388
40805288:	85800815 	stw	r22,32(r16)
4080528c:	85400915 	stw	r21,36(r16)
40805290:	85000a15 	stw	r20,40(r16)
40805294:	84c00b15 	stw	r19,44(r16)
40805298:	84000715 	stw	r16,28(r16)
4080529c:	00800284 	movi	r2,10
408052a0:	8880030d 	sth	r2,12(r17)
408052a4:	00800044 	movi	r2,1
408052a8:	b80d883a 	mov	r6,r23
408052ac:	89001704 	addi	r4,r17,92
408052b0:	000b883a 	mov	r5,zero
408052b4:	88000015 	stw	zero,0(r17)
408052b8:	88000115 	stw	zero,4(r17)
408052bc:	88000215 	stw	zero,8(r17)
408052c0:	88001915 	stw	zero,100(r17)
408052c4:	8880038d 	sth	r2,14(r17)
408052c8:	88000415 	stw	zero,16(r17)
408052cc:	88000515 	stw	zero,20(r17)
408052d0:	88000615 	stw	zero,24(r17)
408052d4:	0800f700 	call	40800f70 <memset>
408052d8:	94000317 	ldw	r16,12(r18)
408052dc:	00800484 	movi	r2,18
408052e0:	8c400715 	stw	r17,28(r17)
408052e4:	8d800815 	stw	r22,32(r17)
408052e8:	8d400915 	stw	r21,36(r17)
408052ec:	8d000a15 	stw	r20,40(r17)
408052f0:	8cc00b15 	stw	r19,44(r17)
408052f4:	8080030d 	sth	r2,12(r16)
408052f8:	00800084 	movi	r2,2
408052fc:	80000015 	stw	zero,0(r16)
40805300:	80000115 	stw	zero,4(r16)
40805304:	80000215 	stw	zero,8(r16)
40805308:	80001915 	stw	zero,100(r16)
4080530c:	8080038d 	sth	r2,14(r16)
40805310:	80000415 	stw	zero,16(r16)
40805314:	80000515 	stw	zero,20(r16)
40805318:	80000615 	stw	zero,24(r16)
4080531c:	b80d883a 	mov	r6,r23
40805320:	000b883a 	mov	r5,zero
40805324:	81001704 	addi	r4,r16,92
40805328:	0800f700 	call	40800f70 <memset>
4080532c:	00800044 	movi	r2,1
40805330:	84000715 	stw	r16,28(r16)
40805334:	85800815 	stw	r22,32(r16)
40805338:	85400915 	stw	r21,36(r16)
4080533c:	85000a15 	stw	r20,40(r16)
40805340:	84c00b15 	stw	r19,44(r16)
40805344:	90800e15 	stw	r2,56(r18)
40805348:	dfc00817 	ldw	ra,32(sp)
4080534c:	ddc00717 	ldw	r23,28(sp)
40805350:	dd800617 	ldw	r22,24(sp)
40805354:	dd400517 	ldw	r21,20(sp)
40805358:	dd000417 	ldw	r20,16(sp)
4080535c:	dcc00317 	ldw	r19,12(sp)
40805360:	dc800217 	ldw	r18,8(sp)
40805364:	dc400117 	ldw	r17,4(sp)
40805368:	dc000017 	ldw	r16,0(sp)
4080536c:	dec00904 	addi	sp,sp,36
40805370:	f800283a 	ret

40805374 <__fp_lock>:
40805374:	0005883a 	mov	r2,zero
40805378:	f800283a 	ret

4080537c <__sfmoreglue>:
4080537c:	defffc04 	addi	sp,sp,-16
40805380:	dc400115 	stw	r17,4(sp)
40805384:	2c7fffc4 	addi	r17,r5,-1
40805388:	8c401a24 	muli	r17,r17,104
4080538c:	dc800215 	stw	r18,8(sp)
40805390:	2825883a 	mov	r18,r5
40805394:	89401d04 	addi	r5,r17,116
40805398:	dc000015 	stw	r16,0(sp)
4080539c:	dfc00315 	stw	ra,12(sp)
408053a0:	08062740 	call	40806274 <_malloc_r>
408053a4:	1021883a 	mov	r16,r2
408053a8:	10000726 	beq	r2,zero,408053c8 <__sfmoreglue+0x4c>
408053ac:	11000304 	addi	r4,r2,12
408053b0:	10000015 	stw	zero,0(r2)
408053b4:	14800115 	stw	r18,4(r2)
408053b8:	11000215 	stw	r4,8(r2)
408053bc:	89801a04 	addi	r6,r17,104
408053c0:	000b883a 	mov	r5,zero
408053c4:	0800f700 	call	40800f70 <memset>
408053c8:	8005883a 	mov	r2,r16
408053cc:	dfc00317 	ldw	ra,12(sp)
408053d0:	dc800217 	ldw	r18,8(sp)
408053d4:	dc400117 	ldw	r17,4(sp)
408053d8:	dc000017 	ldw	r16,0(sp)
408053dc:	dec00404 	addi	sp,sp,16
408053e0:	f800283a 	ret

408053e4 <__sfp>:
408053e4:	defffb04 	addi	sp,sp,-20
408053e8:	dc000015 	stw	r16,0(sp)
408053ec:	04102074 	movhi	r16,16513
408053f0:	840eae04 	addi	r16,r16,15032
408053f4:	dcc00315 	stw	r19,12(sp)
408053f8:	2027883a 	mov	r19,r4
408053fc:	81000017 	ldw	r4,0(r16)
40805400:	dfc00415 	stw	ra,16(sp)
40805404:	dc800215 	stw	r18,8(sp)
40805408:	20800e17 	ldw	r2,56(r4)
4080540c:	dc400115 	stw	r17,4(sp)
40805410:	1000021e 	bne	r2,zero,4080541c <__sfp+0x38>
40805414:	08051d80 	call	408051d8 <__sinit.part.1>
40805418:	81000017 	ldw	r4,0(r16)
4080541c:	2480b804 	addi	r18,r4,736
40805420:	047fffc4 	movi	r17,-1
40805424:	91000117 	ldw	r4,4(r18)
40805428:	94000217 	ldw	r16,8(r18)
4080542c:	213fffc4 	addi	r4,r4,-1
40805430:	20000a16 	blt	r4,zero,4080545c <__sfp+0x78>
40805434:	8080030f 	ldh	r2,12(r16)
40805438:	10000c26 	beq	r2,zero,4080546c <__sfp+0x88>
4080543c:	80c01d04 	addi	r3,r16,116
40805440:	00000206 	br	4080544c <__sfp+0x68>
40805444:	18bfe60f 	ldh	r2,-104(r3)
40805448:	10000826 	beq	r2,zero,4080546c <__sfp+0x88>
4080544c:	213fffc4 	addi	r4,r4,-1
40805450:	1c3ffd04 	addi	r16,r3,-12
40805454:	18c01a04 	addi	r3,r3,104
40805458:	247ffa1e 	bne	r4,r17,40805444 <__alt_mem_onchip_flash_0_data+0xff7c5444>
4080545c:	90800017 	ldw	r2,0(r18)
40805460:	10001d26 	beq	r2,zero,408054d8 <__sfp+0xf4>
40805464:	1025883a 	mov	r18,r2
40805468:	003fee06 	br	40805424 <__alt_mem_onchip_flash_0_data+0xff7c5424>
4080546c:	00bfffc4 	movi	r2,-1
40805470:	8080038d 	sth	r2,14(r16)
40805474:	00800044 	movi	r2,1
40805478:	8080030d 	sth	r2,12(r16)
4080547c:	80001915 	stw	zero,100(r16)
40805480:	80000015 	stw	zero,0(r16)
40805484:	80000215 	stw	zero,8(r16)
40805488:	80000115 	stw	zero,4(r16)
4080548c:	80000415 	stw	zero,16(r16)
40805490:	80000515 	stw	zero,20(r16)
40805494:	80000615 	stw	zero,24(r16)
40805498:	01800204 	movi	r6,8
4080549c:	000b883a 	mov	r5,zero
408054a0:	81001704 	addi	r4,r16,92
408054a4:	0800f700 	call	40800f70 <memset>
408054a8:	8005883a 	mov	r2,r16
408054ac:	80000c15 	stw	zero,48(r16)
408054b0:	80000d15 	stw	zero,52(r16)
408054b4:	80001115 	stw	zero,68(r16)
408054b8:	80001215 	stw	zero,72(r16)
408054bc:	dfc00417 	ldw	ra,16(sp)
408054c0:	dcc00317 	ldw	r19,12(sp)
408054c4:	dc800217 	ldw	r18,8(sp)
408054c8:	dc400117 	ldw	r17,4(sp)
408054cc:	dc000017 	ldw	r16,0(sp)
408054d0:	dec00504 	addi	sp,sp,20
408054d4:	f800283a 	ret
408054d8:	01400104 	movi	r5,4
408054dc:	9809883a 	mov	r4,r19
408054e0:	080537c0 	call	4080537c <__sfmoreglue>
408054e4:	90800015 	stw	r2,0(r18)
408054e8:	103fde1e 	bne	r2,zero,40805464 <__alt_mem_onchip_flash_0_data+0xff7c5464>
408054ec:	00800304 	movi	r2,12
408054f0:	98800015 	stw	r2,0(r19)
408054f4:	0005883a 	mov	r2,zero
408054f8:	003ff006 	br	408054bc <__alt_mem_onchip_flash_0_data+0xff7c54bc>

408054fc <_cleanup>:
408054fc:	00902074 	movhi	r2,16513
40805500:	108eae04 	addi	r2,r2,15032
40805504:	11000017 	ldw	r4,0(r2)
40805508:	01502074 	movhi	r5,16513
4080550c:	29678204 	addi	r5,r5,-25080
40805510:	0805f181 	jmpi	40805f18 <_fwalk_reent>

40805514 <__sinit>:
40805514:	20800e17 	ldw	r2,56(r4)
40805518:	10000126 	beq	r2,zero,40805520 <__sinit+0xc>
4080551c:	f800283a 	ret
40805520:	08051d81 	jmpi	408051d8 <__sinit.part.1>

40805524 <__sfp_lock_acquire>:
40805524:	f800283a 	ret

40805528 <__sfp_lock_release>:
40805528:	f800283a 	ret

4080552c <__sinit_lock_acquire>:
4080552c:	f800283a 	ret

40805530 <__sinit_lock_release>:
40805530:	f800283a 	ret

40805534 <__fp_lock_all>:
40805534:	00902074 	movhi	r2,16513
40805538:	108eaf04 	addi	r2,r2,15036
4080553c:	11000017 	ldw	r4,0(r2)
40805540:	01502034 	movhi	r5,16512
40805544:	2954dd04 	addi	r5,r5,21364
40805548:	0805e541 	jmpi	40805e54 <_fwalk>

4080554c <__fp_unlock_all>:
4080554c:	00902074 	movhi	r2,16513
40805550:	108eaf04 	addi	r2,r2,15036
40805554:	11000017 	ldw	r4,0(r2)
40805558:	01502034 	movhi	r5,16512
4080555c:	29547104 	addi	r5,r5,20932
40805560:	0805e541 	jmpi	40805e54 <_fwalk>

40805564 <_malloc_trim_r>:
40805564:	defffb04 	addi	sp,sp,-20
40805568:	dcc00315 	stw	r19,12(sp)
4080556c:	04d02074 	movhi	r19,16513
40805570:	dc800215 	stw	r18,8(sp)
40805574:	dc400115 	stw	r17,4(sp)
40805578:	dc000015 	stw	r16,0(sp)
4080557c:	dfc00415 	stw	ra,16(sp)
40805580:	2821883a 	mov	r16,r5
40805584:	9cc8aa04 	addi	r19,r19,8872
40805588:	2025883a 	mov	r18,r4
4080558c:	080dcbc0 	call	4080dcbc <__malloc_lock>
40805590:	98800217 	ldw	r2,8(r19)
40805594:	14400117 	ldw	r17,4(r2)
40805598:	00bfff04 	movi	r2,-4
4080559c:	88a2703a 	and	r17,r17,r2
408055a0:	8c21c83a 	sub	r16,r17,r16
408055a4:	8403fbc4 	addi	r16,r16,4079
408055a8:	8020d33a 	srli	r16,r16,12
408055ac:	0083ffc4 	movi	r2,4095
408055b0:	843fffc4 	addi	r16,r16,-1
408055b4:	8020933a 	slli	r16,r16,12
408055b8:	1400060e 	bge	r2,r16,408055d4 <_malloc_trim_r+0x70>
408055bc:	000b883a 	mov	r5,zero
408055c0:	9009883a 	mov	r4,r18
408055c4:	08083dc0 	call	408083dc <_sbrk_r>
408055c8:	98c00217 	ldw	r3,8(r19)
408055cc:	1c47883a 	add	r3,r3,r17
408055d0:	10c00a26 	beq	r2,r3,408055fc <_malloc_trim_r+0x98>
408055d4:	9009883a 	mov	r4,r18
408055d8:	080dce00 	call	4080dce0 <__malloc_unlock>
408055dc:	0005883a 	mov	r2,zero
408055e0:	dfc00417 	ldw	ra,16(sp)
408055e4:	dcc00317 	ldw	r19,12(sp)
408055e8:	dc800217 	ldw	r18,8(sp)
408055ec:	dc400117 	ldw	r17,4(sp)
408055f0:	dc000017 	ldw	r16,0(sp)
408055f4:	dec00504 	addi	sp,sp,20
408055f8:	f800283a 	ret
408055fc:	040bc83a 	sub	r5,zero,r16
40805600:	9009883a 	mov	r4,r18
40805604:	08083dc0 	call	408083dc <_sbrk_r>
40805608:	00ffffc4 	movi	r3,-1
4080560c:	10c00d26 	beq	r2,r3,40805644 <_malloc_trim_r+0xe0>
40805610:	00d02074 	movhi	r3,16513
40805614:	18d3da04 	addi	r3,r3,20328
40805618:	18800017 	ldw	r2,0(r3)
4080561c:	99000217 	ldw	r4,8(r19)
40805620:	8c23c83a 	sub	r17,r17,r16
40805624:	8c400054 	ori	r17,r17,1
40805628:	1421c83a 	sub	r16,r2,r16
4080562c:	24400115 	stw	r17,4(r4)
40805630:	9009883a 	mov	r4,r18
40805634:	1c000015 	stw	r16,0(r3)
40805638:	080dce00 	call	4080dce0 <__malloc_unlock>
4080563c:	00800044 	movi	r2,1
40805640:	003fe706 	br	408055e0 <__alt_mem_onchip_flash_0_data+0xff7c55e0>
40805644:	000b883a 	mov	r5,zero
40805648:	9009883a 	mov	r4,r18
4080564c:	08083dc0 	call	408083dc <_sbrk_r>
40805650:	99000217 	ldw	r4,8(r19)
40805654:	014003c4 	movi	r5,15
40805658:	1107c83a 	sub	r3,r2,r4
4080565c:	28ffdd0e 	bge	r5,r3,408055d4 <__alt_mem_onchip_flash_0_data+0xff7c55d4>
40805660:	01502074 	movhi	r5,16513
40805664:	294eb104 	addi	r5,r5,15044
40805668:	29400017 	ldw	r5,0(r5)
4080566c:	18c00054 	ori	r3,r3,1
40805670:	20c00115 	stw	r3,4(r4)
40805674:	00d02074 	movhi	r3,16513
40805678:	1145c83a 	sub	r2,r2,r5
4080567c:	18d3da04 	addi	r3,r3,20328
40805680:	18800015 	stw	r2,0(r3)
40805684:	003fd306 	br	408055d4 <__alt_mem_onchip_flash_0_data+0xff7c55d4>

40805688 <_free_r>:
40805688:	28004126 	beq	r5,zero,40805790 <_free_r+0x108>
4080568c:	defffd04 	addi	sp,sp,-12
40805690:	dc400115 	stw	r17,4(sp)
40805694:	dc000015 	stw	r16,0(sp)
40805698:	2023883a 	mov	r17,r4
4080569c:	2821883a 	mov	r16,r5
408056a0:	dfc00215 	stw	ra,8(sp)
408056a4:	080dcbc0 	call	4080dcbc <__malloc_lock>
408056a8:	81ffff17 	ldw	r7,-4(r16)
408056ac:	00bfff84 	movi	r2,-2
408056b0:	01102074 	movhi	r4,16513
408056b4:	81bffe04 	addi	r6,r16,-8
408056b8:	3884703a 	and	r2,r7,r2
408056bc:	2108aa04 	addi	r4,r4,8872
408056c0:	308b883a 	add	r5,r6,r2
408056c4:	2a400117 	ldw	r9,4(r5)
408056c8:	22000217 	ldw	r8,8(r4)
408056cc:	00ffff04 	movi	r3,-4
408056d0:	48c6703a 	and	r3,r9,r3
408056d4:	2a005726 	beq	r5,r8,40805834 <_free_r+0x1ac>
408056d8:	28c00115 	stw	r3,4(r5)
408056dc:	39c0004c 	andi	r7,r7,1
408056e0:	3800091e 	bne	r7,zero,40805708 <_free_r+0x80>
408056e4:	823ffe17 	ldw	r8,-8(r16)
408056e8:	22400204 	addi	r9,r4,8
408056ec:	320dc83a 	sub	r6,r6,r8
408056f0:	31c00217 	ldw	r7,8(r6)
408056f4:	1205883a 	add	r2,r2,r8
408056f8:	3a406526 	beq	r7,r9,40805890 <_free_r+0x208>
408056fc:	32000317 	ldw	r8,12(r6)
40805700:	3a000315 	stw	r8,12(r7)
40805704:	41c00215 	stw	r7,8(r8)
40805708:	28cf883a 	add	r7,r5,r3
4080570c:	39c00117 	ldw	r7,4(r7)
40805710:	39c0004c 	andi	r7,r7,1
40805714:	38003a26 	beq	r7,zero,40805800 <_free_r+0x178>
40805718:	10c00054 	ori	r3,r2,1
4080571c:	30c00115 	stw	r3,4(r6)
40805720:	3087883a 	add	r3,r6,r2
40805724:	18800015 	stw	r2,0(r3)
40805728:	00c07fc4 	movi	r3,511
4080572c:	18801936 	bltu	r3,r2,40805794 <_free_r+0x10c>
40805730:	1004d0fa 	srli	r2,r2,3
40805734:	01c00044 	movi	r7,1
40805738:	21400117 	ldw	r5,4(r4)
4080573c:	10c00044 	addi	r3,r2,1
40805740:	18c7883a 	add	r3,r3,r3
40805744:	1005d0ba 	srai	r2,r2,2
40805748:	18c7883a 	add	r3,r3,r3
4080574c:	18c7883a 	add	r3,r3,r3
40805750:	1907883a 	add	r3,r3,r4
40805754:	3884983a 	sll	r2,r7,r2
40805758:	19c00017 	ldw	r7,0(r3)
4080575c:	1a3ffe04 	addi	r8,r3,-8
40805760:	1144b03a 	or	r2,r2,r5
40805764:	32000315 	stw	r8,12(r6)
40805768:	31c00215 	stw	r7,8(r6)
4080576c:	20800115 	stw	r2,4(r4)
40805770:	19800015 	stw	r6,0(r3)
40805774:	39800315 	stw	r6,12(r7)
40805778:	8809883a 	mov	r4,r17
4080577c:	dfc00217 	ldw	ra,8(sp)
40805780:	dc400117 	ldw	r17,4(sp)
40805784:	dc000017 	ldw	r16,0(sp)
40805788:	dec00304 	addi	sp,sp,12
4080578c:	080dce01 	jmpi	4080dce0 <__malloc_unlock>
40805790:	f800283a 	ret
40805794:	100ad27a 	srli	r5,r2,9
40805798:	00c00104 	movi	r3,4
4080579c:	19404a36 	bltu	r3,r5,408058c8 <_free_r+0x240>
408057a0:	100ad1ba 	srli	r5,r2,6
408057a4:	28c00e44 	addi	r3,r5,57
408057a8:	18c7883a 	add	r3,r3,r3
408057ac:	29400e04 	addi	r5,r5,56
408057b0:	18c7883a 	add	r3,r3,r3
408057b4:	18c7883a 	add	r3,r3,r3
408057b8:	1909883a 	add	r4,r3,r4
408057bc:	20c00017 	ldw	r3,0(r4)
408057c0:	01d02074 	movhi	r7,16513
408057c4:	213ffe04 	addi	r4,r4,-8
408057c8:	39c8aa04 	addi	r7,r7,8872
408057cc:	20c04426 	beq	r4,r3,408058e0 <_free_r+0x258>
408057d0:	01ffff04 	movi	r7,-4
408057d4:	19400117 	ldw	r5,4(r3)
408057d8:	29ca703a 	and	r5,r5,r7
408057dc:	1140022e 	bgeu	r2,r5,408057e8 <_free_r+0x160>
408057e0:	18c00217 	ldw	r3,8(r3)
408057e4:	20fffb1e 	bne	r4,r3,408057d4 <__alt_mem_onchip_flash_0_data+0xff7c57d4>
408057e8:	19000317 	ldw	r4,12(r3)
408057ec:	31000315 	stw	r4,12(r6)
408057f0:	30c00215 	stw	r3,8(r6)
408057f4:	21800215 	stw	r6,8(r4)
408057f8:	19800315 	stw	r6,12(r3)
408057fc:	003fde06 	br	40805778 <__alt_mem_onchip_flash_0_data+0xff7c5778>
40805800:	29c00217 	ldw	r7,8(r5)
40805804:	10c5883a 	add	r2,r2,r3
40805808:	00d02074 	movhi	r3,16513
4080580c:	18c8ac04 	addi	r3,r3,8880
40805810:	38c03b26 	beq	r7,r3,40805900 <_free_r+0x278>
40805814:	2a000317 	ldw	r8,12(r5)
40805818:	11400054 	ori	r5,r2,1
4080581c:	3087883a 	add	r3,r6,r2
40805820:	3a000315 	stw	r8,12(r7)
40805824:	41c00215 	stw	r7,8(r8)
40805828:	31400115 	stw	r5,4(r6)
4080582c:	18800015 	stw	r2,0(r3)
40805830:	003fbd06 	br	40805728 <__alt_mem_onchip_flash_0_data+0xff7c5728>
40805834:	39c0004c 	andi	r7,r7,1
40805838:	10c5883a 	add	r2,r2,r3
4080583c:	3800071e 	bne	r7,zero,4080585c <_free_r+0x1d4>
40805840:	81fffe17 	ldw	r7,-8(r16)
40805844:	31cdc83a 	sub	r6,r6,r7
40805848:	30c00317 	ldw	r3,12(r6)
4080584c:	31400217 	ldw	r5,8(r6)
40805850:	11c5883a 	add	r2,r2,r7
40805854:	28c00315 	stw	r3,12(r5)
40805858:	19400215 	stw	r5,8(r3)
4080585c:	10c00054 	ori	r3,r2,1
40805860:	30c00115 	stw	r3,4(r6)
40805864:	00d02074 	movhi	r3,16513
40805868:	18ceb204 	addi	r3,r3,15048
4080586c:	18c00017 	ldw	r3,0(r3)
40805870:	21800215 	stw	r6,8(r4)
40805874:	10ffc036 	bltu	r2,r3,40805778 <__alt_mem_onchip_flash_0_data+0xff7c5778>
40805878:	00902074 	movhi	r2,16513
4080587c:	108ed004 	addi	r2,r2,15168
40805880:	11400017 	ldw	r5,0(r2)
40805884:	8809883a 	mov	r4,r17
40805888:	08055640 	call	40805564 <_malloc_trim_r>
4080588c:	003fba06 	br	40805778 <__alt_mem_onchip_flash_0_data+0xff7c5778>
40805890:	28c9883a 	add	r4,r5,r3
40805894:	21000117 	ldw	r4,4(r4)
40805898:	2100004c 	andi	r4,r4,1
4080589c:	2000391e 	bne	r4,zero,40805984 <_free_r+0x2fc>
408058a0:	29c00217 	ldw	r7,8(r5)
408058a4:	29000317 	ldw	r4,12(r5)
408058a8:	1885883a 	add	r2,r3,r2
408058ac:	10c00054 	ori	r3,r2,1
408058b0:	39000315 	stw	r4,12(r7)
408058b4:	21c00215 	stw	r7,8(r4)
408058b8:	30c00115 	stw	r3,4(r6)
408058bc:	308d883a 	add	r6,r6,r2
408058c0:	30800015 	stw	r2,0(r6)
408058c4:	003fac06 	br	40805778 <__alt_mem_onchip_flash_0_data+0xff7c5778>
408058c8:	00c00504 	movi	r3,20
408058cc:	19401536 	bltu	r3,r5,40805924 <_free_r+0x29c>
408058d0:	28c01704 	addi	r3,r5,92
408058d4:	18c7883a 	add	r3,r3,r3
408058d8:	294016c4 	addi	r5,r5,91
408058dc:	003fb406 	br	408057b0 <__alt_mem_onchip_flash_0_data+0xff7c57b0>
408058e0:	280bd0ba 	srai	r5,r5,2
408058e4:	00c00044 	movi	r3,1
408058e8:	38800117 	ldw	r2,4(r7)
408058ec:	194a983a 	sll	r5,r3,r5
408058f0:	2007883a 	mov	r3,r4
408058f4:	2884b03a 	or	r2,r5,r2
408058f8:	38800115 	stw	r2,4(r7)
408058fc:	003fbb06 	br	408057ec <__alt_mem_onchip_flash_0_data+0xff7c57ec>
40805900:	21800515 	stw	r6,20(r4)
40805904:	21800415 	stw	r6,16(r4)
40805908:	10c00054 	ori	r3,r2,1
4080590c:	31c00315 	stw	r7,12(r6)
40805910:	31c00215 	stw	r7,8(r6)
40805914:	30c00115 	stw	r3,4(r6)
40805918:	308d883a 	add	r6,r6,r2
4080591c:	30800015 	stw	r2,0(r6)
40805920:	003f9506 	br	40805778 <__alt_mem_onchip_flash_0_data+0xff7c5778>
40805924:	00c01504 	movi	r3,84
40805928:	19400536 	bltu	r3,r5,40805940 <_free_r+0x2b8>
4080592c:	100ad33a 	srli	r5,r2,12
40805930:	28c01bc4 	addi	r3,r5,111
40805934:	18c7883a 	add	r3,r3,r3
40805938:	29401b84 	addi	r5,r5,110
4080593c:	003f9c06 	br	408057b0 <__alt_mem_onchip_flash_0_data+0xff7c57b0>
40805940:	00c05504 	movi	r3,340
40805944:	19400536 	bltu	r3,r5,4080595c <_free_r+0x2d4>
40805948:	100ad3fa 	srli	r5,r2,15
4080594c:	28c01e04 	addi	r3,r5,120
40805950:	18c7883a 	add	r3,r3,r3
40805954:	29401dc4 	addi	r5,r5,119
40805958:	003f9506 	br	408057b0 <__alt_mem_onchip_flash_0_data+0xff7c57b0>
4080595c:	00c15504 	movi	r3,1364
40805960:	19400536 	bltu	r3,r5,40805978 <_free_r+0x2f0>
40805964:	100ad4ba 	srli	r5,r2,18
40805968:	28c01f44 	addi	r3,r5,125
4080596c:	18c7883a 	add	r3,r3,r3
40805970:	29401f04 	addi	r5,r5,124
40805974:	003f8e06 	br	408057b0 <__alt_mem_onchip_flash_0_data+0xff7c57b0>
40805978:	00c03f84 	movi	r3,254
4080597c:	01401f84 	movi	r5,126
40805980:	003f8b06 	br	408057b0 <__alt_mem_onchip_flash_0_data+0xff7c57b0>
40805984:	10c00054 	ori	r3,r2,1
40805988:	30c00115 	stw	r3,4(r6)
4080598c:	308d883a 	add	r6,r6,r2
40805990:	30800015 	stw	r2,0(r6)
40805994:	003f7806 	br	40805778 <__alt_mem_onchip_flash_0_data+0xff7c5778>

40805998 <__sfvwrite_r>:
40805998:	30800217 	ldw	r2,8(r6)
4080599c:	10006726 	beq	r2,zero,40805b3c <__sfvwrite_r+0x1a4>
408059a0:	28c0030b 	ldhu	r3,12(r5)
408059a4:	defff404 	addi	sp,sp,-48
408059a8:	dd400715 	stw	r21,28(sp)
408059ac:	dd000615 	stw	r20,24(sp)
408059b0:	dc000215 	stw	r16,8(sp)
408059b4:	dfc00b15 	stw	ra,44(sp)
408059b8:	df000a15 	stw	fp,40(sp)
408059bc:	ddc00915 	stw	r23,36(sp)
408059c0:	dd800815 	stw	r22,32(sp)
408059c4:	dcc00515 	stw	r19,20(sp)
408059c8:	dc800415 	stw	r18,16(sp)
408059cc:	dc400315 	stw	r17,12(sp)
408059d0:	1880020c 	andi	r2,r3,8
408059d4:	2821883a 	mov	r16,r5
408059d8:	202b883a 	mov	r21,r4
408059dc:	3029883a 	mov	r20,r6
408059e0:	10002726 	beq	r2,zero,40805a80 <__sfvwrite_r+0xe8>
408059e4:	28800417 	ldw	r2,16(r5)
408059e8:	10002526 	beq	r2,zero,40805a80 <__sfvwrite_r+0xe8>
408059ec:	1880008c 	andi	r2,r3,2
408059f0:	a4400017 	ldw	r17,0(r20)
408059f4:	10002a26 	beq	r2,zero,40805aa0 <__sfvwrite_r+0x108>
408059f8:	05a00034 	movhi	r22,32768
408059fc:	0027883a 	mov	r19,zero
40805a00:	0025883a 	mov	r18,zero
40805a04:	b5bf0004 	addi	r22,r22,-1024
40805a08:	980d883a 	mov	r6,r19
40805a0c:	a809883a 	mov	r4,r21
40805a10:	90004626 	beq	r18,zero,40805b2c <__sfvwrite_r+0x194>
40805a14:	900f883a 	mov	r7,r18
40805a18:	b480022e 	bgeu	r22,r18,40805a24 <__sfvwrite_r+0x8c>
40805a1c:	01e00034 	movhi	r7,32768
40805a20:	39ff0004 	addi	r7,r7,-1024
40805a24:	80800917 	ldw	r2,36(r16)
40805a28:	81400717 	ldw	r5,28(r16)
40805a2c:	103ee83a 	callr	r2
40805a30:	0080570e 	bge	zero,r2,40805b90 <__sfvwrite_r+0x1f8>
40805a34:	a0c00217 	ldw	r3,8(r20)
40805a38:	98a7883a 	add	r19,r19,r2
40805a3c:	90a5c83a 	sub	r18,r18,r2
40805a40:	1885c83a 	sub	r2,r3,r2
40805a44:	a0800215 	stw	r2,8(r20)
40805a48:	103fef1e 	bne	r2,zero,40805a08 <__alt_mem_onchip_flash_0_data+0xff7c5a08>
40805a4c:	0005883a 	mov	r2,zero
40805a50:	dfc00b17 	ldw	ra,44(sp)
40805a54:	df000a17 	ldw	fp,40(sp)
40805a58:	ddc00917 	ldw	r23,36(sp)
40805a5c:	dd800817 	ldw	r22,32(sp)
40805a60:	dd400717 	ldw	r21,28(sp)
40805a64:	dd000617 	ldw	r20,24(sp)
40805a68:	dcc00517 	ldw	r19,20(sp)
40805a6c:	dc800417 	ldw	r18,16(sp)
40805a70:	dc400317 	ldw	r17,12(sp)
40805a74:	dc000217 	ldw	r16,8(sp)
40805a78:	dec00c04 	addi	sp,sp,48
40805a7c:	f800283a 	ret
40805a80:	800b883a 	mov	r5,r16
40805a84:	a809883a 	mov	r4,r21
40805a88:	08035400 	call	40803540 <__swsetup_r>
40805a8c:	1000eb1e 	bne	r2,zero,40805e3c <__sfvwrite_r+0x4a4>
40805a90:	80c0030b 	ldhu	r3,12(r16)
40805a94:	a4400017 	ldw	r17,0(r20)
40805a98:	1880008c 	andi	r2,r3,2
40805a9c:	103fd61e 	bne	r2,zero,408059f8 <__alt_mem_onchip_flash_0_data+0xff7c59f8>
40805aa0:	1880004c 	andi	r2,r3,1
40805aa4:	10003f1e 	bne	r2,zero,40805ba4 <__sfvwrite_r+0x20c>
40805aa8:	0039883a 	mov	fp,zero
40805aac:	0025883a 	mov	r18,zero
40805ab0:	90001a26 	beq	r18,zero,40805b1c <__sfvwrite_r+0x184>
40805ab4:	1880800c 	andi	r2,r3,512
40805ab8:	84c00217 	ldw	r19,8(r16)
40805abc:	10002126 	beq	r2,zero,40805b44 <__sfvwrite_r+0x1ac>
40805ac0:	982f883a 	mov	r23,r19
40805ac4:	94c09336 	bltu	r18,r19,40805d14 <__sfvwrite_r+0x37c>
40805ac8:	1881200c 	andi	r2,r3,1152
40805acc:	10009e1e 	bne	r2,zero,40805d48 <__sfvwrite_r+0x3b0>
40805ad0:	81000017 	ldw	r4,0(r16)
40805ad4:	b80d883a 	mov	r6,r23
40805ad8:	e00b883a 	mov	r5,fp
40805adc:	0806cac0 	call	40806cac <memmove>
40805ae0:	80c00217 	ldw	r3,8(r16)
40805ae4:	81000017 	ldw	r4,0(r16)
40805ae8:	9005883a 	mov	r2,r18
40805aec:	1ce7c83a 	sub	r19,r3,r19
40805af0:	25cf883a 	add	r7,r4,r23
40805af4:	84c00215 	stw	r19,8(r16)
40805af8:	81c00015 	stw	r7,0(r16)
40805afc:	a0c00217 	ldw	r3,8(r20)
40805b00:	e0b9883a 	add	fp,fp,r2
40805b04:	90a5c83a 	sub	r18,r18,r2
40805b08:	18a7c83a 	sub	r19,r3,r2
40805b0c:	a4c00215 	stw	r19,8(r20)
40805b10:	983fce26 	beq	r19,zero,40805a4c <__alt_mem_onchip_flash_0_data+0xff7c5a4c>
40805b14:	80c0030b 	ldhu	r3,12(r16)
40805b18:	903fe61e 	bne	r18,zero,40805ab4 <__alt_mem_onchip_flash_0_data+0xff7c5ab4>
40805b1c:	8f000017 	ldw	fp,0(r17)
40805b20:	8c800117 	ldw	r18,4(r17)
40805b24:	8c400204 	addi	r17,r17,8
40805b28:	003fe106 	br	40805ab0 <__alt_mem_onchip_flash_0_data+0xff7c5ab0>
40805b2c:	8cc00017 	ldw	r19,0(r17)
40805b30:	8c800117 	ldw	r18,4(r17)
40805b34:	8c400204 	addi	r17,r17,8
40805b38:	003fb306 	br	40805a08 <__alt_mem_onchip_flash_0_data+0xff7c5a08>
40805b3c:	0005883a 	mov	r2,zero
40805b40:	f800283a 	ret
40805b44:	81000017 	ldw	r4,0(r16)
40805b48:	80800417 	ldw	r2,16(r16)
40805b4c:	11005736 	bltu	r2,r4,40805cac <__sfvwrite_r+0x314>
40805b50:	85c00517 	ldw	r23,20(r16)
40805b54:	95c05536 	bltu	r18,r23,40805cac <__sfvwrite_r+0x314>
40805b58:	00a00034 	movhi	r2,32768
40805b5c:	10bfffc4 	addi	r2,r2,-1
40805b60:	9009883a 	mov	r4,r18
40805b64:	1480012e 	bgeu	r2,r18,40805b6c <__sfvwrite_r+0x1d4>
40805b68:	1009883a 	mov	r4,r2
40805b6c:	b80b883a 	mov	r5,r23
40805b70:	080b0740 	call	4080b074 <__divsi3>
40805b74:	15cf383a 	mul	r7,r2,r23
40805b78:	81400717 	ldw	r5,28(r16)
40805b7c:	80800917 	ldw	r2,36(r16)
40805b80:	e00d883a 	mov	r6,fp
40805b84:	a809883a 	mov	r4,r21
40805b88:	103ee83a 	callr	r2
40805b8c:	00bfdb16 	blt	zero,r2,40805afc <__alt_mem_onchip_flash_0_data+0xff7c5afc>
40805b90:	8080030b 	ldhu	r2,12(r16)
40805b94:	10801014 	ori	r2,r2,64
40805b98:	8080030d 	sth	r2,12(r16)
40805b9c:	00bfffc4 	movi	r2,-1
40805ba0:	003fab06 	br	40805a50 <__alt_mem_onchip_flash_0_data+0xff7c5a50>
40805ba4:	0027883a 	mov	r19,zero
40805ba8:	0011883a 	mov	r8,zero
40805bac:	0039883a 	mov	fp,zero
40805bb0:	0025883a 	mov	r18,zero
40805bb4:	90001f26 	beq	r18,zero,40805c34 <__sfvwrite_r+0x29c>
40805bb8:	40005a26 	beq	r8,zero,40805d24 <__sfvwrite_r+0x38c>
40805bbc:	982d883a 	mov	r22,r19
40805bc0:	94c0012e 	bgeu	r18,r19,40805bc8 <__sfvwrite_r+0x230>
40805bc4:	902d883a 	mov	r22,r18
40805bc8:	81000017 	ldw	r4,0(r16)
40805bcc:	80800417 	ldw	r2,16(r16)
40805bd0:	b02f883a 	mov	r23,r22
40805bd4:	81c00517 	ldw	r7,20(r16)
40805bd8:	1100032e 	bgeu	r2,r4,40805be8 <__sfvwrite_r+0x250>
40805bdc:	80c00217 	ldw	r3,8(r16)
40805be0:	38c7883a 	add	r3,r7,r3
40805be4:	1d801816 	blt	r3,r22,40805c48 <__sfvwrite_r+0x2b0>
40805be8:	b1c03e16 	blt	r22,r7,40805ce4 <__sfvwrite_r+0x34c>
40805bec:	80800917 	ldw	r2,36(r16)
40805bf0:	81400717 	ldw	r5,28(r16)
40805bf4:	e00d883a 	mov	r6,fp
40805bf8:	da000115 	stw	r8,4(sp)
40805bfc:	a809883a 	mov	r4,r21
40805c00:	103ee83a 	callr	r2
40805c04:	102f883a 	mov	r23,r2
40805c08:	da000117 	ldw	r8,4(sp)
40805c0c:	00bfe00e 	bge	zero,r2,40805b90 <__alt_mem_onchip_flash_0_data+0xff7c5b90>
40805c10:	9de7c83a 	sub	r19,r19,r23
40805c14:	98001f26 	beq	r19,zero,40805c94 <__sfvwrite_r+0x2fc>
40805c18:	a0800217 	ldw	r2,8(r20)
40805c1c:	e5f9883a 	add	fp,fp,r23
40805c20:	95e5c83a 	sub	r18,r18,r23
40805c24:	15efc83a 	sub	r23,r2,r23
40805c28:	a5c00215 	stw	r23,8(r20)
40805c2c:	b83f8726 	beq	r23,zero,40805a4c <__alt_mem_onchip_flash_0_data+0xff7c5a4c>
40805c30:	903fe11e 	bne	r18,zero,40805bb8 <__alt_mem_onchip_flash_0_data+0xff7c5bb8>
40805c34:	8f000017 	ldw	fp,0(r17)
40805c38:	8c800117 	ldw	r18,4(r17)
40805c3c:	0011883a 	mov	r8,zero
40805c40:	8c400204 	addi	r17,r17,8
40805c44:	003fdb06 	br	40805bb4 <__alt_mem_onchip_flash_0_data+0xff7c5bb4>
40805c48:	180d883a 	mov	r6,r3
40805c4c:	e00b883a 	mov	r5,fp
40805c50:	da000115 	stw	r8,4(sp)
40805c54:	d8c00015 	stw	r3,0(sp)
40805c58:	0806cac0 	call	40806cac <memmove>
40805c5c:	d8c00017 	ldw	r3,0(sp)
40805c60:	80800017 	ldw	r2,0(r16)
40805c64:	800b883a 	mov	r5,r16
40805c68:	a809883a 	mov	r4,r21
40805c6c:	10c5883a 	add	r2,r2,r3
40805c70:	80800015 	stw	r2,0(r16)
40805c74:	d8c00015 	stw	r3,0(sp)
40805c78:	08051380 	call	40805138 <_fflush_r>
40805c7c:	d8c00017 	ldw	r3,0(sp)
40805c80:	da000117 	ldw	r8,4(sp)
40805c84:	103fc21e 	bne	r2,zero,40805b90 <__alt_mem_onchip_flash_0_data+0xff7c5b90>
40805c88:	182f883a 	mov	r23,r3
40805c8c:	9de7c83a 	sub	r19,r19,r23
40805c90:	983fe11e 	bne	r19,zero,40805c18 <__alt_mem_onchip_flash_0_data+0xff7c5c18>
40805c94:	800b883a 	mov	r5,r16
40805c98:	a809883a 	mov	r4,r21
40805c9c:	08051380 	call	40805138 <_fflush_r>
40805ca0:	103fbb1e 	bne	r2,zero,40805b90 <__alt_mem_onchip_flash_0_data+0xff7c5b90>
40805ca4:	0011883a 	mov	r8,zero
40805ca8:	003fdb06 	br	40805c18 <__alt_mem_onchip_flash_0_data+0xff7c5c18>
40805cac:	94c0012e 	bgeu	r18,r19,40805cb4 <__sfvwrite_r+0x31c>
40805cb0:	9027883a 	mov	r19,r18
40805cb4:	980d883a 	mov	r6,r19
40805cb8:	e00b883a 	mov	r5,fp
40805cbc:	0806cac0 	call	40806cac <memmove>
40805cc0:	80800217 	ldw	r2,8(r16)
40805cc4:	80c00017 	ldw	r3,0(r16)
40805cc8:	14c5c83a 	sub	r2,r2,r19
40805ccc:	1cc7883a 	add	r3,r3,r19
40805cd0:	80800215 	stw	r2,8(r16)
40805cd4:	80c00015 	stw	r3,0(r16)
40805cd8:	10004326 	beq	r2,zero,40805de8 <__sfvwrite_r+0x450>
40805cdc:	9805883a 	mov	r2,r19
40805ce0:	003f8606 	br	40805afc <__alt_mem_onchip_flash_0_data+0xff7c5afc>
40805ce4:	b00d883a 	mov	r6,r22
40805ce8:	e00b883a 	mov	r5,fp
40805cec:	da000115 	stw	r8,4(sp)
40805cf0:	0806cac0 	call	40806cac <memmove>
40805cf4:	80800217 	ldw	r2,8(r16)
40805cf8:	80c00017 	ldw	r3,0(r16)
40805cfc:	da000117 	ldw	r8,4(sp)
40805d00:	1585c83a 	sub	r2,r2,r22
40805d04:	1dad883a 	add	r22,r3,r22
40805d08:	80800215 	stw	r2,8(r16)
40805d0c:	85800015 	stw	r22,0(r16)
40805d10:	003fbf06 	br	40805c10 <__alt_mem_onchip_flash_0_data+0xff7c5c10>
40805d14:	81000017 	ldw	r4,0(r16)
40805d18:	9027883a 	mov	r19,r18
40805d1c:	902f883a 	mov	r23,r18
40805d20:	003f6c06 	br	40805ad4 <__alt_mem_onchip_flash_0_data+0xff7c5ad4>
40805d24:	900d883a 	mov	r6,r18
40805d28:	01400284 	movi	r5,10
40805d2c:	e009883a 	mov	r4,fp
40805d30:	0806a800 	call	40806a80 <memchr>
40805d34:	10003e26 	beq	r2,zero,40805e30 <__sfvwrite_r+0x498>
40805d38:	10800044 	addi	r2,r2,1
40805d3c:	1727c83a 	sub	r19,r2,fp
40805d40:	02000044 	movi	r8,1
40805d44:	003f9d06 	br	40805bbc <__alt_mem_onchip_flash_0_data+0xff7c5bbc>
40805d48:	80800517 	ldw	r2,20(r16)
40805d4c:	81400417 	ldw	r5,16(r16)
40805d50:	81c00017 	ldw	r7,0(r16)
40805d54:	10a7883a 	add	r19,r2,r2
40805d58:	9885883a 	add	r2,r19,r2
40805d5c:	1026d7fa 	srli	r19,r2,31
40805d60:	396dc83a 	sub	r22,r7,r5
40805d64:	b1000044 	addi	r4,r22,1
40805d68:	9885883a 	add	r2,r19,r2
40805d6c:	1027d07a 	srai	r19,r2,1
40805d70:	2485883a 	add	r2,r4,r18
40805d74:	980d883a 	mov	r6,r19
40805d78:	9880022e 	bgeu	r19,r2,40805d84 <__sfvwrite_r+0x3ec>
40805d7c:	1027883a 	mov	r19,r2
40805d80:	100d883a 	mov	r6,r2
40805d84:	18c1000c 	andi	r3,r3,1024
40805d88:	18001c26 	beq	r3,zero,40805dfc <__sfvwrite_r+0x464>
40805d8c:	300b883a 	mov	r5,r6
40805d90:	a809883a 	mov	r4,r21
40805d94:	08062740 	call	40806274 <_malloc_r>
40805d98:	102f883a 	mov	r23,r2
40805d9c:	10002926 	beq	r2,zero,40805e44 <__sfvwrite_r+0x4ac>
40805da0:	81400417 	ldw	r5,16(r16)
40805da4:	b00d883a 	mov	r6,r22
40805da8:	1009883a 	mov	r4,r2
40805dac:	0806b640 	call	40806b64 <memcpy>
40805db0:	8080030b 	ldhu	r2,12(r16)
40805db4:	00fedfc4 	movi	r3,-1153
40805db8:	10c4703a 	and	r2,r2,r3
40805dbc:	10802014 	ori	r2,r2,128
40805dc0:	8080030d 	sth	r2,12(r16)
40805dc4:	bd89883a 	add	r4,r23,r22
40805dc8:	9d8fc83a 	sub	r7,r19,r22
40805dcc:	85c00415 	stw	r23,16(r16)
40805dd0:	84c00515 	stw	r19,20(r16)
40805dd4:	81000015 	stw	r4,0(r16)
40805dd8:	9027883a 	mov	r19,r18
40805ddc:	81c00215 	stw	r7,8(r16)
40805de0:	902f883a 	mov	r23,r18
40805de4:	003f3b06 	br	40805ad4 <__alt_mem_onchip_flash_0_data+0xff7c5ad4>
40805de8:	800b883a 	mov	r5,r16
40805dec:	a809883a 	mov	r4,r21
40805df0:	08051380 	call	40805138 <_fflush_r>
40805df4:	103fb926 	beq	r2,zero,40805cdc <__alt_mem_onchip_flash_0_data+0xff7c5cdc>
40805df8:	003f6506 	br	40805b90 <__alt_mem_onchip_flash_0_data+0xff7c5b90>
40805dfc:	a809883a 	mov	r4,r21
40805e00:	0807e040 	call	40807e04 <_realloc_r>
40805e04:	102f883a 	mov	r23,r2
40805e08:	103fee1e 	bne	r2,zero,40805dc4 <__alt_mem_onchip_flash_0_data+0xff7c5dc4>
40805e0c:	81400417 	ldw	r5,16(r16)
40805e10:	a809883a 	mov	r4,r21
40805e14:	08056880 	call	40805688 <_free_r>
40805e18:	8080030b 	ldhu	r2,12(r16)
40805e1c:	00ffdfc4 	movi	r3,-129
40805e20:	1884703a 	and	r2,r3,r2
40805e24:	00c00304 	movi	r3,12
40805e28:	a8c00015 	stw	r3,0(r21)
40805e2c:	003f5906 	br	40805b94 <__alt_mem_onchip_flash_0_data+0xff7c5b94>
40805e30:	94c00044 	addi	r19,r18,1
40805e34:	02000044 	movi	r8,1
40805e38:	003f6006 	br	40805bbc <__alt_mem_onchip_flash_0_data+0xff7c5bbc>
40805e3c:	00bfffc4 	movi	r2,-1
40805e40:	003f0306 	br	40805a50 <__alt_mem_onchip_flash_0_data+0xff7c5a50>
40805e44:	00800304 	movi	r2,12
40805e48:	a8800015 	stw	r2,0(r21)
40805e4c:	8080030b 	ldhu	r2,12(r16)
40805e50:	003f5006 	br	40805b94 <__alt_mem_onchip_flash_0_data+0xff7c5b94>

40805e54 <_fwalk>:
40805e54:	defff704 	addi	sp,sp,-36
40805e58:	dd000415 	stw	r20,16(sp)
40805e5c:	dfc00815 	stw	ra,32(sp)
40805e60:	ddc00715 	stw	r23,28(sp)
40805e64:	dd800615 	stw	r22,24(sp)
40805e68:	dd400515 	stw	r21,20(sp)
40805e6c:	dcc00315 	stw	r19,12(sp)
40805e70:	dc800215 	stw	r18,8(sp)
40805e74:	dc400115 	stw	r17,4(sp)
40805e78:	dc000015 	stw	r16,0(sp)
40805e7c:	2500b804 	addi	r20,r4,736
40805e80:	a0002326 	beq	r20,zero,40805f10 <_fwalk+0xbc>
40805e84:	282b883a 	mov	r21,r5
40805e88:	002f883a 	mov	r23,zero
40805e8c:	05800044 	movi	r22,1
40805e90:	04ffffc4 	movi	r19,-1
40805e94:	a4400117 	ldw	r17,4(r20)
40805e98:	a4800217 	ldw	r18,8(r20)
40805e9c:	8c7fffc4 	addi	r17,r17,-1
40805ea0:	88000d16 	blt	r17,zero,40805ed8 <_fwalk+0x84>
40805ea4:	94000304 	addi	r16,r18,12
40805ea8:	94800384 	addi	r18,r18,14
40805eac:	8080000b 	ldhu	r2,0(r16)
40805eb0:	8c7fffc4 	addi	r17,r17,-1
40805eb4:	813ffd04 	addi	r4,r16,-12
40805eb8:	b080042e 	bgeu	r22,r2,40805ecc <_fwalk+0x78>
40805ebc:	9080000f 	ldh	r2,0(r18)
40805ec0:	14c00226 	beq	r2,r19,40805ecc <_fwalk+0x78>
40805ec4:	a83ee83a 	callr	r21
40805ec8:	b8aeb03a 	or	r23,r23,r2
40805ecc:	84001a04 	addi	r16,r16,104
40805ed0:	94801a04 	addi	r18,r18,104
40805ed4:	8cfff51e 	bne	r17,r19,40805eac <__alt_mem_onchip_flash_0_data+0xff7c5eac>
40805ed8:	a5000017 	ldw	r20,0(r20)
40805edc:	a03fed1e 	bne	r20,zero,40805e94 <__alt_mem_onchip_flash_0_data+0xff7c5e94>
40805ee0:	b805883a 	mov	r2,r23
40805ee4:	dfc00817 	ldw	ra,32(sp)
40805ee8:	ddc00717 	ldw	r23,28(sp)
40805eec:	dd800617 	ldw	r22,24(sp)
40805ef0:	dd400517 	ldw	r21,20(sp)
40805ef4:	dd000417 	ldw	r20,16(sp)
40805ef8:	dcc00317 	ldw	r19,12(sp)
40805efc:	dc800217 	ldw	r18,8(sp)
40805f00:	dc400117 	ldw	r17,4(sp)
40805f04:	dc000017 	ldw	r16,0(sp)
40805f08:	dec00904 	addi	sp,sp,36
40805f0c:	f800283a 	ret
40805f10:	002f883a 	mov	r23,zero
40805f14:	003ff206 	br	40805ee0 <__alt_mem_onchip_flash_0_data+0xff7c5ee0>

40805f18 <_fwalk_reent>:
40805f18:	defff704 	addi	sp,sp,-36
40805f1c:	dd000415 	stw	r20,16(sp)
40805f20:	dfc00815 	stw	ra,32(sp)
40805f24:	ddc00715 	stw	r23,28(sp)
40805f28:	dd800615 	stw	r22,24(sp)
40805f2c:	dd400515 	stw	r21,20(sp)
40805f30:	dcc00315 	stw	r19,12(sp)
40805f34:	dc800215 	stw	r18,8(sp)
40805f38:	dc400115 	stw	r17,4(sp)
40805f3c:	dc000015 	stw	r16,0(sp)
40805f40:	2500b804 	addi	r20,r4,736
40805f44:	a0002326 	beq	r20,zero,40805fd4 <_fwalk_reent+0xbc>
40805f48:	282b883a 	mov	r21,r5
40805f4c:	2027883a 	mov	r19,r4
40805f50:	002f883a 	mov	r23,zero
40805f54:	05800044 	movi	r22,1
40805f58:	04bfffc4 	movi	r18,-1
40805f5c:	a4400117 	ldw	r17,4(r20)
40805f60:	a4000217 	ldw	r16,8(r20)
40805f64:	8c7fffc4 	addi	r17,r17,-1
40805f68:	88000c16 	blt	r17,zero,40805f9c <_fwalk_reent+0x84>
40805f6c:	84000304 	addi	r16,r16,12
40805f70:	8080000b 	ldhu	r2,0(r16)
40805f74:	8c7fffc4 	addi	r17,r17,-1
40805f78:	817ffd04 	addi	r5,r16,-12
40805f7c:	b080052e 	bgeu	r22,r2,40805f94 <_fwalk_reent+0x7c>
40805f80:	8080008f 	ldh	r2,2(r16)
40805f84:	9809883a 	mov	r4,r19
40805f88:	14800226 	beq	r2,r18,40805f94 <_fwalk_reent+0x7c>
40805f8c:	a83ee83a 	callr	r21
40805f90:	b8aeb03a 	or	r23,r23,r2
40805f94:	84001a04 	addi	r16,r16,104
40805f98:	8cbff51e 	bne	r17,r18,40805f70 <__alt_mem_onchip_flash_0_data+0xff7c5f70>
40805f9c:	a5000017 	ldw	r20,0(r20)
40805fa0:	a03fee1e 	bne	r20,zero,40805f5c <__alt_mem_onchip_flash_0_data+0xff7c5f5c>
40805fa4:	b805883a 	mov	r2,r23
40805fa8:	dfc00817 	ldw	ra,32(sp)
40805fac:	ddc00717 	ldw	r23,28(sp)
40805fb0:	dd800617 	ldw	r22,24(sp)
40805fb4:	dd400517 	ldw	r21,20(sp)
40805fb8:	dd000417 	ldw	r20,16(sp)
40805fbc:	dcc00317 	ldw	r19,12(sp)
40805fc0:	dc800217 	ldw	r18,8(sp)
40805fc4:	dc400117 	ldw	r17,4(sp)
40805fc8:	dc000017 	ldw	r16,0(sp)
40805fcc:	dec00904 	addi	sp,sp,36
40805fd0:	f800283a 	ret
40805fd4:	002f883a 	mov	r23,zero
40805fd8:	003ff206 	br	40805fa4 <__alt_mem_onchip_flash_0_data+0xff7c5fa4>

40805fdc <_setlocale_r>:
40805fdc:	30001b26 	beq	r6,zero,4080604c <_setlocale_r+0x70>
40805fe0:	01502074 	movhi	r5,16513
40805fe4:	defffe04 	addi	sp,sp,-8
40805fe8:	2946c304 	addi	r5,r5,6924
40805fec:	3009883a 	mov	r4,r6
40805ff0:	dc000015 	stw	r16,0(sp)
40805ff4:	dfc00115 	stw	ra,4(sp)
40805ff8:	3021883a 	mov	r16,r6
40805ffc:	080856c0 	call	4080856c <strcmp>
40806000:	1000061e 	bne	r2,zero,4080601c <_setlocale_r+0x40>
40806004:	00902074 	movhi	r2,16513
40806008:	1086c204 	addi	r2,r2,6920
4080600c:	dfc00117 	ldw	ra,4(sp)
40806010:	dc000017 	ldw	r16,0(sp)
40806014:	dec00204 	addi	sp,sp,8
40806018:	f800283a 	ret
4080601c:	01502074 	movhi	r5,16513
40806020:	2946c204 	addi	r5,r5,6920
40806024:	8009883a 	mov	r4,r16
40806028:	080856c0 	call	4080856c <strcmp>
4080602c:	103ff526 	beq	r2,zero,40806004 <__alt_mem_onchip_flash_0_data+0xff7c6004>
40806030:	01502074 	movhi	r5,16513
40806034:	2946ad04 	addi	r5,r5,6836
40806038:	8009883a 	mov	r4,r16
4080603c:	080856c0 	call	4080856c <strcmp>
40806040:	103ff026 	beq	r2,zero,40806004 <__alt_mem_onchip_flash_0_data+0xff7c6004>
40806044:	0005883a 	mov	r2,zero
40806048:	003ff006 	br	4080600c <__alt_mem_onchip_flash_0_data+0xff7c600c>
4080604c:	00902074 	movhi	r2,16513
40806050:	1086c204 	addi	r2,r2,6920
40806054:	f800283a 	ret

40806058 <__locale_charset>:
40806058:	00902074 	movhi	r2,16513
4080605c:	10889404 	addi	r2,r2,8784
40806060:	f800283a 	ret

40806064 <__locale_mb_cur_max>:
40806064:	00902074 	movhi	r2,16513
40806068:	108eb004 	addi	r2,r2,15040
4080606c:	10800017 	ldw	r2,0(r2)
40806070:	f800283a 	ret

40806074 <__locale_msgcharset>:
40806074:	00902074 	movhi	r2,16513
40806078:	10888c04 	addi	r2,r2,8752
4080607c:	f800283a 	ret

40806080 <__locale_cjk_lang>:
40806080:	0005883a 	mov	r2,zero
40806084:	f800283a 	ret

40806088 <_localeconv_r>:
40806088:	00902074 	movhi	r2,16513
4080608c:	10889c04 	addi	r2,r2,8816
40806090:	f800283a 	ret

40806094 <setlocale>:
40806094:	00902074 	movhi	r2,16513
40806098:	108eaf04 	addi	r2,r2,15036
4080609c:	280d883a 	mov	r6,r5
408060a0:	200b883a 	mov	r5,r4
408060a4:	11000017 	ldw	r4,0(r2)
408060a8:	0805fdc1 	jmpi	40805fdc <_setlocale_r>

408060ac <localeconv>:
408060ac:	00902074 	movhi	r2,16513
408060b0:	10889c04 	addi	r2,r2,8816
408060b4:	f800283a 	ret

408060b8 <__smakebuf_r>:
408060b8:	2880030b 	ldhu	r2,12(r5)
408060bc:	10c0008c 	andi	r3,r2,2
408060c0:	1800411e 	bne	r3,zero,408061c8 <__smakebuf_r+0x110>
408060c4:	deffec04 	addi	sp,sp,-80
408060c8:	dc000f15 	stw	r16,60(sp)
408060cc:	2821883a 	mov	r16,r5
408060d0:	2940038f 	ldh	r5,14(r5)
408060d4:	dc401015 	stw	r17,64(sp)
408060d8:	dfc01315 	stw	ra,76(sp)
408060dc:	dcc01215 	stw	r19,72(sp)
408060e0:	dc801115 	stw	r18,68(sp)
408060e4:	2023883a 	mov	r17,r4
408060e8:	28001c16 	blt	r5,zero,4080615c <__smakebuf_r+0xa4>
408060ec:	d80d883a 	mov	r6,sp
408060f0:	080a1140 	call	4080a114 <_fstat_r>
408060f4:	10001816 	blt	r2,zero,40806158 <__smakebuf_r+0xa0>
408060f8:	d8800117 	ldw	r2,4(sp)
408060fc:	00e00014 	movui	r3,32768
40806100:	10bc000c 	andi	r2,r2,61440
40806104:	14c80020 	cmpeqi	r19,r2,8192
40806108:	10c03726 	beq	r2,r3,408061e8 <__smakebuf_r+0x130>
4080610c:	80c0030b 	ldhu	r3,12(r16)
40806110:	18c20014 	ori	r3,r3,2048
40806114:	80c0030d 	sth	r3,12(r16)
40806118:	00c80004 	movi	r3,8192
4080611c:	10c0521e 	bne	r2,r3,40806268 <__smakebuf_r+0x1b0>
40806120:	8140038f 	ldh	r5,14(r16)
40806124:	8809883a 	mov	r4,r17
40806128:	080a1700 	call	4080a170 <_isatty_r>
4080612c:	10004c26 	beq	r2,zero,40806260 <__smakebuf_r+0x1a8>
40806130:	8080030b 	ldhu	r2,12(r16)
40806134:	80c010c4 	addi	r3,r16,67
40806138:	80c00015 	stw	r3,0(r16)
4080613c:	10800054 	ori	r2,r2,1
40806140:	8080030d 	sth	r2,12(r16)
40806144:	00800044 	movi	r2,1
40806148:	80c00415 	stw	r3,16(r16)
4080614c:	80800515 	stw	r2,20(r16)
40806150:	04810004 	movi	r18,1024
40806154:	00000706 	br	40806174 <__smakebuf_r+0xbc>
40806158:	8080030b 	ldhu	r2,12(r16)
4080615c:	10c0200c 	andi	r3,r2,128
40806160:	18001f1e 	bne	r3,zero,408061e0 <__smakebuf_r+0x128>
40806164:	04810004 	movi	r18,1024
40806168:	10820014 	ori	r2,r2,2048
4080616c:	8080030d 	sth	r2,12(r16)
40806170:	0027883a 	mov	r19,zero
40806174:	900b883a 	mov	r5,r18
40806178:	8809883a 	mov	r4,r17
4080617c:	08062740 	call	40806274 <_malloc_r>
40806180:	10002c26 	beq	r2,zero,40806234 <__smakebuf_r+0x17c>
40806184:	80c0030b 	ldhu	r3,12(r16)
40806188:	01102034 	movhi	r4,16512
4080618c:	21147304 	addi	r4,r4,20940
40806190:	89000f15 	stw	r4,60(r17)
40806194:	18c02014 	ori	r3,r3,128
40806198:	80c0030d 	sth	r3,12(r16)
4080619c:	80800015 	stw	r2,0(r16)
408061a0:	80800415 	stw	r2,16(r16)
408061a4:	84800515 	stw	r18,20(r16)
408061a8:	98001a1e 	bne	r19,zero,40806214 <__smakebuf_r+0x15c>
408061ac:	dfc01317 	ldw	ra,76(sp)
408061b0:	dcc01217 	ldw	r19,72(sp)
408061b4:	dc801117 	ldw	r18,68(sp)
408061b8:	dc401017 	ldw	r17,64(sp)
408061bc:	dc000f17 	ldw	r16,60(sp)
408061c0:	dec01404 	addi	sp,sp,80
408061c4:	f800283a 	ret
408061c8:	288010c4 	addi	r2,r5,67
408061cc:	28800015 	stw	r2,0(r5)
408061d0:	28800415 	stw	r2,16(r5)
408061d4:	00800044 	movi	r2,1
408061d8:	28800515 	stw	r2,20(r5)
408061dc:	f800283a 	ret
408061e0:	04801004 	movi	r18,64
408061e4:	003fe006 	br	40806168 <__alt_mem_onchip_flash_0_data+0xff7c6168>
408061e8:	81000a17 	ldw	r4,40(r16)
408061ec:	00d02074 	movhi	r3,16513
408061f0:	18e14204 	addi	r3,r3,-31480
408061f4:	20ffc51e 	bne	r4,r3,4080610c <__alt_mem_onchip_flash_0_data+0xff7c610c>
408061f8:	8080030b 	ldhu	r2,12(r16)
408061fc:	04810004 	movi	r18,1024
40806200:	84801315 	stw	r18,76(r16)
40806204:	1484b03a 	or	r2,r2,r18
40806208:	8080030d 	sth	r2,12(r16)
4080620c:	0027883a 	mov	r19,zero
40806210:	003fd806 	br	40806174 <__alt_mem_onchip_flash_0_data+0xff7c6174>
40806214:	8140038f 	ldh	r5,14(r16)
40806218:	8809883a 	mov	r4,r17
4080621c:	080a1700 	call	4080a170 <_isatty_r>
40806220:	103fe226 	beq	r2,zero,408061ac <__alt_mem_onchip_flash_0_data+0xff7c61ac>
40806224:	8080030b 	ldhu	r2,12(r16)
40806228:	10800054 	ori	r2,r2,1
4080622c:	8080030d 	sth	r2,12(r16)
40806230:	003fde06 	br	408061ac <__alt_mem_onchip_flash_0_data+0xff7c61ac>
40806234:	8080030b 	ldhu	r2,12(r16)
40806238:	10c0800c 	andi	r3,r2,512
4080623c:	183fdb1e 	bne	r3,zero,408061ac <__alt_mem_onchip_flash_0_data+0xff7c61ac>
40806240:	10800094 	ori	r2,r2,2
40806244:	80c010c4 	addi	r3,r16,67
40806248:	8080030d 	sth	r2,12(r16)
4080624c:	00800044 	movi	r2,1
40806250:	80c00015 	stw	r3,0(r16)
40806254:	80c00415 	stw	r3,16(r16)
40806258:	80800515 	stw	r2,20(r16)
4080625c:	003fd306 	br	408061ac <__alt_mem_onchip_flash_0_data+0xff7c61ac>
40806260:	04810004 	movi	r18,1024
40806264:	003fc306 	br	40806174 <__alt_mem_onchip_flash_0_data+0xff7c6174>
40806268:	0027883a 	mov	r19,zero
4080626c:	04810004 	movi	r18,1024
40806270:	003fc006 	br	40806174 <__alt_mem_onchip_flash_0_data+0xff7c6174>

40806274 <_malloc_r>:
40806274:	defff504 	addi	sp,sp,-44
40806278:	dc800315 	stw	r18,12(sp)
4080627c:	dfc00a15 	stw	ra,40(sp)
40806280:	df000915 	stw	fp,36(sp)
40806284:	ddc00815 	stw	r23,32(sp)
40806288:	dd800715 	stw	r22,28(sp)
4080628c:	dd400615 	stw	r21,24(sp)
40806290:	dd000515 	stw	r20,20(sp)
40806294:	dcc00415 	stw	r19,16(sp)
40806298:	dc400215 	stw	r17,8(sp)
4080629c:	dc000115 	stw	r16,4(sp)
408062a0:	288002c4 	addi	r2,r5,11
408062a4:	00c00584 	movi	r3,22
408062a8:	2025883a 	mov	r18,r4
408062ac:	18807f2e 	bgeu	r3,r2,408064ac <_malloc_r+0x238>
408062b0:	047ffe04 	movi	r17,-8
408062b4:	1462703a 	and	r17,r2,r17
408062b8:	8800a316 	blt	r17,zero,40806548 <_malloc_r+0x2d4>
408062bc:	8940a236 	bltu	r17,r5,40806548 <_malloc_r+0x2d4>
408062c0:	080dcbc0 	call	4080dcbc <__malloc_lock>
408062c4:	00807dc4 	movi	r2,503
408062c8:	1441e92e 	bgeu	r2,r17,40806a70 <_malloc_r+0x7fc>
408062cc:	8804d27a 	srli	r2,r17,9
408062d0:	1000a126 	beq	r2,zero,40806558 <_malloc_r+0x2e4>
408062d4:	00c00104 	movi	r3,4
408062d8:	18811e36 	bltu	r3,r2,40806754 <_malloc_r+0x4e0>
408062dc:	8804d1ba 	srli	r2,r17,6
408062e0:	12000e44 	addi	r8,r2,57
408062e4:	11c00e04 	addi	r7,r2,56
408062e8:	4209883a 	add	r4,r8,r8
408062ec:	04d02074 	movhi	r19,16513
408062f0:	2109883a 	add	r4,r4,r4
408062f4:	9cc8aa04 	addi	r19,r19,8872
408062f8:	2109883a 	add	r4,r4,r4
408062fc:	9909883a 	add	r4,r19,r4
40806300:	24000117 	ldw	r16,4(r4)
40806304:	213ffe04 	addi	r4,r4,-8
40806308:	24009726 	beq	r4,r16,40806568 <_malloc_r+0x2f4>
4080630c:	80800117 	ldw	r2,4(r16)
40806310:	01bfff04 	movi	r6,-4
40806314:	014003c4 	movi	r5,15
40806318:	1184703a 	and	r2,r2,r6
4080631c:	1447c83a 	sub	r3,r2,r17
40806320:	28c00716 	blt	r5,r3,40806340 <_malloc_r+0xcc>
40806324:	1800920e 	bge	r3,zero,40806570 <_malloc_r+0x2fc>
40806328:	84000317 	ldw	r16,12(r16)
4080632c:	24008e26 	beq	r4,r16,40806568 <_malloc_r+0x2f4>
40806330:	80800117 	ldw	r2,4(r16)
40806334:	1184703a 	and	r2,r2,r6
40806338:	1447c83a 	sub	r3,r2,r17
4080633c:	28fff90e 	bge	r5,r3,40806324 <__alt_mem_onchip_flash_0_data+0xff7c6324>
40806340:	3809883a 	mov	r4,r7
40806344:	01902074 	movhi	r6,16513
40806348:	9c000417 	ldw	r16,16(r19)
4080634c:	3188aa04 	addi	r6,r6,8872
40806350:	32000204 	addi	r8,r6,8
40806354:	82013426 	beq	r16,r8,40806828 <_malloc_r+0x5b4>
40806358:	80c00117 	ldw	r3,4(r16)
4080635c:	00bfff04 	movi	r2,-4
40806360:	188e703a 	and	r7,r3,r2
40806364:	3c45c83a 	sub	r2,r7,r17
40806368:	00c003c4 	movi	r3,15
4080636c:	18811f16 	blt	r3,r2,408067ec <_malloc_r+0x578>
40806370:	32000515 	stw	r8,20(r6)
40806374:	32000415 	stw	r8,16(r6)
40806378:	10007f0e 	bge	r2,zero,40806578 <_malloc_r+0x304>
4080637c:	00807fc4 	movi	r2,511
40806380:	11c0fd36 	bltu	r2,r7,40806778 <_malloc_r+0x504>
40806384:	3806d0fa 	srli	r3,r7,3
40806388:	01c00044 	movi	r7,1
4080638c:	30800117 	ldw	r2,4(r6)
40806390:	19400044 	addi	r5,r3,1
40806394:	294b883a 	add	r5,r5,r5
40806398:	1807d0ba 	srai	r3,r3,2
4080639c:	294b883a 	add	r5,r5,r5
408063a0:	294b883a 	add	r5,r5,r5
408063a4:	298b883a 	add	r5,r5,r6
408063a8:	38c6983a 	sll	r3,r7,r3
408063ac:	29c00017 	ldw	r7,0(r5)
408063b0:	2a7ffe04 	addi	r9,r5,-8
408063b4:	1886b03a 	or	r3,r3,r2
408063b8:	82400315 	stw	r9,12(r16)
408063bc:	81c00215 	stw	r7,8(r16)
408063c0:	30c00115 	stw	r3,4(r6)
408063c4:	2c000015 	stw	r16,0(r5)
408063c8:	3c000315 	stw	r16,12(r7)
408063cc:	2005d0ba 	srai	r2,r4,2
408063d0:	01400044 	movi	r5,1
408063d4:	288a983a 	sll	r5,r5,r2
408063d8:	19406f36 	bltu	r3,r5,40806598 <_malloc_r+0x324>
408063dc:	28c4703a 	and	r2,r5,r3
408063e0:	10000a1e 	bne	r2,zero,4080640c <_malloc_r+0x198>
408063e4:	00bfff04 	movi	r2,-4
408063e8:	294b883a 	add	r5,r5,r5
408063ec:	2088703a 	and	r4,r4,r2
408063f0:	28c4703a 	and	r2,r5,r3
408063f4:	21000104 	addi	r4,r4,4
408063f8:	1000041e 	bne	r2,zero,4080640c <_malloc_r+0x198>
408063fc:	294b883a 	add	r5,r5,r5
40806400:	28c4703a 	and	r2,r5,r3
40806404:	21000104 	addi	r4,r4,4
40806408:	103ffc26 	beq	r2,zero,408063fc <__alt_mem_onchip_flash_0_data+0xff7c63fc>
4080640c:	02bfff04 	movi	r10,-4
40806410:	024003c4 	movi	r9,15
40806414:	21800044 	addi	r6,r4,1
40806418:	318d883a 	add	r6,r6,r6
4080641c:	318d883a 	add	r6,r6,r6
40806420:	318d883a 	add	r6,r6,r6
40806424:	998d883a 	add	r6,r19,r6
40806428:	333ffe04 	addi	r12,r6,-8
4080642c:	2017883a 	mov	r11,r4
40806430:	31800104 	addi	r6,r6,4
40806434:	34000017 	ldw	r16,0(r6)
40806438:	31fffd04 	addi	r7,r6,-12
4080643c:	81c0041e 	bne	r16,r7,40806450 <_malloc_r+0x1dc>
40806440:	0000fb06 	br	40806830 <_malloc_r+0x5bc>
40806444:	1801030e 	bge	r3,zero,40806854 <_malloc_r+0x5e0>
40806448:	84000317 	ldw	r16,12(r16)
4080644c:	81c0f826 	beq	r16,r7,40806830 <_malloc_r+0x5bc>
40806450:	80800117 	ldw	r2,4(r16)
40806454:	1284703a 	and	r2,r2,r10
40806458:	1447c83a 	sub	r3,r2,r17
4080645c:	48fff90e 	bge	r9,r3,40806444 <__alt_mem_onchip_flash_0_data+0xff7c6444>
40806460:	80800317 	ldw	r2,12(r16)
40806464:	81000217 	ldw	r4,8(r16)
40806468:	89400054 	ori	r5,r17,1
4080646c:	81400115 	stw	r5,4(r16)
40806470:	20800315 	stw	r2,12(r4)
40806474:	11000215 	stw	r4,8(r2)
40806478:	8463883a 	add	r17,r16,r17
4080647c:	9c400515 	stw	r17,20(r19)
40806480:	9c400415 	stw	r17,16(r19)
40806484:	18800054 	ori	r2,r3,1
40806488:	88800115 	stw	r2,4(r17)
4080648c:	8a000315 	stw	r8,12(r17)
40806490:	8a000215 	stw	r8,8(r17)
40806494:	88e3883a 	add	r17,r17,r3
40806498:	88c00015 	stw	r3,0(r17)
4080649c:	9009883a 	mov	r4,r18
408064a0:	080dce00 	call	4080dce0 <__malloc_unlock>
408064a4:	80800204 	addi	r2,r16,8
408064a8:	00001b06 	br	40806518 <_malloc_r+0x2a4>
408064ac:	04400404 	movi	r17,16
408064b0:	89402536 	bltu	r17,r5,40806548 <_malloc_r+0x2d4>
408064b4:	080dcbc0 	call	4080dcbc <__malloc_lock>
408064b8:	00800184 	movi	r2,6
408064bc:	01000084 	movi	r4,2
408064c0:	04d02074 	movhi	r19,16513
408064c4:	1085883a 	add	r2,r2,r2
408064c8:	9cc8aa04 	addi	r19,r19,8872
408064cc:	1085883a 	add	r2,r2,r2
408064d0:	9885883a 	add	r2,r19,r2
408064d4:	14000117 	ldw	r16,4(r2)
408064d8:	10fffe04 	addi	r3,r2,-8
408064dc:	80c0d926 	beq	r16,r3,40806844 <_malloc_r+0x5d0>
408064e0:	80c00117 	ldw	r3,4(r16)
408064e4:	81000317 	ldw	r4,12(r16)
408064e8:	00bfff04 	movi	r2,-4
408064ec:	1884703a 	and	r2,r3,r2
408064f0:	81400217 	ldw	r5,8(r16)
408064f4:	8085883a 	add	r2,r16,r2
408064f8:	10c00117 	ldw	r3,4(r2)
408064fc:	29000315 	stw	r4,12(r5)
40806500:	21400215 	stw	r5,8(r4)
40806504:	18c00054 	ori	r3,r3,1
40806508:	10c00115 	stw	r3,4(r2)
4080650c:	9009883a 	mov	r4,r18
40806510:	080dce00 	call	4080dce0 <__malloc_unlock>
40806514:	80800204 	addi	r2,r16,8
40806518:	dfc00a17 	ldw	ra,40(sp)
4080651c:	df000917 	ldw	fp,36(sp)
40806520:	ddc00817 	ldw	r23,32(sp)
40806524:	dd800717 	ldw	r22,28(sp)
40806528:	dd400617 	ldw	r21,24(sp)
4080652c:	dd000517 	ldw	r20,20(sp)
40806530:	dcc00417 	ldw	r19,16(sp)
40806534:	dc800317 	ldw	r18,12(sp)
40806538:	dc400217 	ldw	r17,8(sp)
4080653c:	dc000117 	ldw	r16,4(sp)
40806540:	dec00b04 	addi	sp,sp,44
40806544:	f800283a 	ret
40806548:	00800304 	movi	r2,12
4080654c:	90800015 	stw	r2,0(r18)
40806550:	0005883a 	mov	r2,zero
40806554:	003ff006 	br	40806518 <__alt_mem_onchip_flash_0_data+0xff7c6518>
40806558:	01002004 	movi	r4,128
4080655c:	02001004 	movi	r8,64
40806560:	01c00fc4 	movi	r7,63
40806564:	003f6106 	br	408062ec <__alt_mem_onchip_flash_0_data+0xff7c62ec>
40806568:	4009883a 	mov	r4,r8
4080656c:	003f7506 	br	40806344 <__alt_mem_onchip_flash_0_data+0xff7c6344>
40806570:	81000317 	ldw	r4,12(r16)
40806574:	003fde06 	br	408064f0 <__alt_mem_onchip_flash_0_data+0xff7c64f0>
40806578:	81c5883a 	add	r2,r16,r7
4080657c:	11400117 	ldw	r5,4(r2)
40806580:	9009883a 	mov	r4,r18
40806584:	29400054 	ori	r5,r5,1
40806588:	11400115 	stw	r5,4(r2)
4080658c:	080dce00 	call	4080dce0 <__malloc_unlock>
40806590:	80800204 	addi	r2,r16,8
40806594:	003fe006 	br	40806518 <__alt_mem_onchip_flash_0_data+0xff7c6518>
40806598:	9c000217 	ldw	r16,8(r19)
4080659c:	00bfff04 	movi	r2,-4
408065a0:	85800117 	ldw	r22,4(r16)
408065a4:	b0ac703a 	and	r22,r22,r2
408065a8:	b4400336 	bltu	r22,r17,408065b8 <_malloc_r+0x344>
408065ac:	b445c83a 	sub	r2,r22,r17
408065b0:	00c003c4 	movi	r3,15
408065b4:	18805d16 	blt	r3,r2,4080672c <_malloc_r+0x4b8>
408065b8:	05d02074 	movhi	r23,16513
408065bc:	00902074 	movhi	r2,16513
408065c0:	108ed004 	addi	r2,r2,15168
408065c4:	bdceb104 	addi	r23,r23,15044
408065c8:	15400017 	ldw	r21,0(r2)
408065cc:	b8c00017 	ldw	r3,0(r23)
408065d0:	00bfffc4 	movi	r2,-1
408065d4:	858d883a 	add	r6,r16,r22
408065d8:	8d6b883a 	add	r21,r17,r21
408065dc:	1880ea26 	beq	r3,r2,40806988 <_malloc_r+0x714>
408065e0:	ad4403c4 	addi	r21,r21,4111
408065e4:	00bc0004 	movi	r2,-4096
408065e8:	a8aa703a 	and	r21,r21,r2
408065ec:	a80b883a 	mov	r5,r21
408065f0:	9009883a 	mov	r4,r18
408065f4:	d9800015 	stw	r6,0(sp)
408065f8:	08083dc0 	call	408083dc <_sbrk_r>
408065fc:	1029883a 	mov	r20,r2
40806600:	00bfffc4 	movi	r2,-1
40806604:	d9800017 	ldw	r6,0(sp)
40806608:	a080e826 	beq	r20,r2,408069ac <_malloc_r+0x738>
4080660c:	a180a636 	bltu	r20,r6,408068a8 <_malloc_r+0x634>
40806610:	07102074 	movhi	fp,16513
40806614:	e713da04 	addi	fp,fp,20328
40806618:	e0800017 	ldw	r2,0(fp)
4080661c:	a887883a 	add	r3,r21,r2
40806620:	e0c00015 	stw	r3,0(fp)
40806624:	3500e626 	beq	r6,r20,408069c0 <_malloc_r+0x74c>
40806628:	b9000017 	ldw	r4,0(r23)
4080662c:	00bfffc4 	movi	r2,-1
40806630:	2080ee26 	beq	r4,r2,408069ec <_malloc_r+0x778>
40806634:	a185c83a 	sub	r2,r20,r6
40806638:	10c5883a 	add	r2,r2,r3
4080663c:	e0800015 	stw	r2,0(fp)
40806640:	a0c001cc 	andi	r3,r20,7
40806644:	1800bc26 	beq	r3,zero,40806938 <_malloc_r+0x6c4>
40806648:	a0e9c83a 	sub	r20,r20,r3
4080664c:	00840204 	movi	r2,4104
40806650:	a5000204 	addi	r20,r20,8
40806654:	10c7c83a 	sub	r3,r2,r3
40806658:	a545883a 	add	r2,r20,r21
4080665c:	1083ffcc 	andi	r2,r2,4095
40806660:	18abc83a 	sub	r21,r3,r2
40806664:	a80b883a 	mov	r5,r21
40806668:	9009883a 	mov	r4,r18
4080666c:	08083dc0 	call	408083dc <_sbrk_r>
40806670:	00ffffc4 	movi	r3,-1
40806674:	10c0e126 	beq	r2,r3,408069fc <_malloc_r+0x788>
40806678:	1505c83a 	sub	r2,r2,r20
4080667c:	1545883a 	add	r2,r2,r21
40806680:	10800054 	ori	r2,r2,1
40806684:	e0c00017 	ldw	r3,0(fp)
40806688:	9d000215 	stw	r20,8(r19)
4080668c:	a0800115 	stw	r2,4(r20)
40806690:	a8c7883a 	add	r3,r21,r3
40806694:	e0c00015 	stw	r3,0(fp)
40806698:	84c00e26 	beq	r16,r19,408066d4 <_malloc_r+0x460>
4080669c:	018003c4 	movi	r6,15
408066a0:	3580a72e 	bgeu	r6,r22,40806940 <_malloc_r+0x6cc>
408066a4:	81400117 	ldw	r5,4(r16)
408066a8:	013ffe04 	movi	r4,-8
408066ac:	b0bffd04 	addi	r2,r22,-12
408066b0:	1104703a 	and	r2,r2,r4
408066b4:	2900004c 	andi	r4,r5,1
408066b8:	2088b03a 	or	r4,r4,r2
408066bc:	81000115 	stw	r4,4(r16)
408066c0:	01400144 	movi	r5,5
408066c4:	8089883a 	add	r4,r16,r2
408066c8:	21400115 	stw	r5,4(r4)
408066cc:	21400215 	stw	r5,8(r4)
408066d0:	3080cd36 	bltu	r6,r2,40806a08 <_malloc_r+0x794>
408066d4:	00902074 	movhi	r2,16513
408066d8:	108ecf04 	addi	r2,r2,15164
408066dc:	11000017 	ldw	r4,0(r2)
408066e0:	20c0012e 	bgeu	r4,r3,408066e8 <_malloc_r+0x474>
408066e4:	10c00015 	stw	r3,0(r2)
408066e8:	00902074 	movhi	r2,16513
408066ec:	108ece04 	addi	r2,r2,15160
408066f0:	11000017 	ldw	r4,0(r2)
408066f4:	9c000217 	ldw	r16,8(r19)
408066f8:	20c0012e 	bgeu	r4,r3,40806700 <_malloc_r+0x48c>
408066fc:	10c00015 	stw	r3,0(r2)
40806700:	80c00117 	ldw	r3,4(r16)
40806704:	00bfff04 	movi	r2,-4
40806708:	1886703a 	and	r3,r3,r2
4080670c:	1c45c83a 	sub	r2,r3,r17
40806710:	1c400236 	bltu	r3,r17,4080671c <_malloc_r+0x4a8>
40806714:	00c003c4 	movi	r3,15
40806718:	18800416 	blt	r3,r2,4080672c <_malloc_r+0x4b8>
4080671c:	9009883a 	mov	r4,r18
40806720:	080dce00 	call	4080dce0 <__malloc_unlock>
40806724:	0005883a 	mov	r2,zero
40806728:	003f7b06 	br	40806518 <__alt_mem_onchip_flash_0_data+0xff7c6518>
4080672c:	88c00054 	ori	r3,r17,1
40806730:	80c00115 	stw	r3,4(r16)
40806734:	8463883a 	add	r17,r16,r17
40806738:	10800054 	ori	r2,r2,1
4080673c:	9c400215 	stw	r17,8(r19)
40806740:	88800115 	stw	r2,4(r17)
40806744:	9009883a 	mov	r4,r18
40806748:	080dce00 	call	4080dce0 <__malloc_unlock>
4080674c:	80800204 	addi	r2,r16,8
40806750:	003f7106 	br	40806518 <__alt_mem_onchip_flash_0_data+0xff7c6518>
40806754:	00c00504 	movi	r3,20
40806758:	18804a2e 	bgeu	r3,r2,40806884 <_malloc_r+0x610>
4080675c:	00c01504 	movi	r3,84
40806760:	18806e36 	bltu	r3,r2,4080691c <_malloc_r+0x6a8>
40806764:	8804d33a 	srli	r2,r17,12
40806768:	12001bc4 	addi	r8,r2,111
4080676c:	11c01b84 	addi	r7,r2,110
40806770:	4209883a 	add	r4,r8,r8
40806774:	003edd06 	br	408062ec <__alt_mem_onchip_flash_0_data+0xff7c62ec>
40806778:	3804d27a 	srli	r2,r7,9
4080677c:	00c00104 	movi	r3,4
40806780:	1880442e 	bgeu	r3,r2,40806894 <_malloc_r+0x620>
40806784:	00c00504 	movi	r3,20
40806788:	18808136 	bltu	r3,r2,40806990 <_malloc_r+0x71c>
4080678c:	11401704 	addi	r5,r2,92
40806790:	10c016c4 	addi	r3,r2,91
40806794:	294b883a 	add	r5,r5,r5
40806798:	294b883a 	add	r5,r5,r5
4080679c:	294b883a 	add	r5,r5,r5
408067a0:	994b883a 	add	r5,r19,r5
408067a4:	28800017 	ldw	r2,0(r5)
408067a8:	01902074 	movhi	r6,16513
408067ac:	297ffe04 	addi	r5,r5,-8
408067b0:	3188aa04 	addi	r6,r6,8872
408067b4:	28806526 	beq	r5,r2,4080694c <_malloc_r+0x6d8>
408067b8:	01bfff04 	movi	r6,-4
408067bc:	10c00117 	ldw	r3,4(r2)
408067c0:	1986703a 	and	r3,r3,r6
408067c4:	38c0022e 	bgeu	r7,r3,408067d0 <_malloc_r+0x55c>
408067c8:	10800217 	ldw	r2,8(r2)
408067cc:	28bffb1e 	bne	r5,r2,408067bc <__alt_mem_onchip_flash_0_data+0xff7c67bc>
408067d0:	11400317 	ldw	r5,12(r2)
408067d4:	98c00117 	ldw	r3,4(r19)
408067d8:	81400315 	stw	r5,12(r16)
408067dc:	80800215 	stw	r2,8(r16)
408067e0:	2c000215 	stw	r16,8(r5)
408067e4:	14000315 	stw	r16,12(r2)
408067e8:	003ef806 	br	408063cc <__alt_mem_onchip_flash_0_data+0xff7c63cc>
408067ec:	88c00054 	ori	r3,r17,1
408067f0:	80c00115 	stw	r3,4(r16)
408067f4:	8463883a 	add	r17,r16,r17
408067f8:	34400515 	stw	r17,20(r6)
408067fc:	34400415 	stw	r17,16(r6)
40806800:	10c00054 	ori	r3,r2,1
40806804:	8a000315 	stw	r8,12(r17)
40806808:	8a000215 	stw	r8,8(r17)
4080680c:	88c00115 	stw	r3,4(r17)
40806810:	88a3883a 	add	r17,r17,r2
40806814:	88800015 	stw	r2,0(r17)
40806818:	9009883a 	mov	r4,r18
4080681c:	080dce00 	call	4080dce0 <__malloc_unlock>
40806820:	80800204 	addi	r2,r16,8
40806824:	003f3c06 	br	40806518 <__alt_mem_onchip_flash_0_data+0xff7c6518>
40806828:	30c00117 	ldw	r3,4(r6)
4080682c:	003ee706 	br	408063cc <__alt_mem_onchip_flash_0_data+0xff7c63cc>
40806830:	5ac00044 	addi	r11,r11,1
40806834:	588000cc 	andi	r2,r11,3
40806838:	31800204 	addi	r6,r6,8
4080683c:	103efd1e 	bne	r2,zero,40806434 <__alt_mem_onchip_flash_0_data+0xff7c6434>
40806840:	00002406 	br	408068d4 <_malloc_r+0x660>
40806844:	14000317 	ldw	r16,12(r2)
40806848:	143f251e 	bne	r2,r16,408064e0 <__alt_mem_onchip_flash_0_data+0xff7c64e0>
4080684c:	21000084 	addi	r4,r4,2
40806850:	003ebc06 	br	40806344 <__alt_mem_onchip_flash_0_data+0xff7c6344>
40806854:	8085883a 	add	r2,r16,r2
40806858:	10c00117 	ldw	r3,4(r2)
4080685c:	81000317 	ldw	r4,12(r16)
40806860:	81400217 	ldw	r5,8(r16)
40806864:	18c00054 	ori	r3,r3,1
40806868:	10c00115 	stw	r3,4(r2)
4080686c:	29000315 	stw	r4,12(r5)
40806870:	21400215 	stw	r5,8(r4)
40806874:	9009883a 	mov	r4,r18
40806878:	080dce00 	call	4080dce0 <__malloc_unlock>
4080687c:	80800204 	addi	r2,r16,8
40806880:	003f2506 	br	40806518 <__alt_mem_onchip_flash_0_data+0xff7c6518>
40806884:	12001704 	addi	r8,r2,92
40806888:	11c016c4 	addi	r7,r2,91
4080688c:	4209883a 	add	r4,r8,r8
40806890:	003e9606 	br	408062ec <__alt_mem_onchip_flash_0_data+0xff7c62ec>
40806894:	3804d1ba 	srli	r2,r7,6
40806898:	11400e44 	addi	r5,r2,57
4080689c:	10c00e04 	addi	r3,r2,56
408068a0:	294b883a 	add	r5,r5,r5
408068a4:	003fbc06 	br	40806798 <__alt_mem_onchip_flash_0_data+0xff7c6798>
408068a8:	84ff5926 	beq	r16,r19,40806610 <__alt_mem_onchip_flash_0_data+0xff7c6610>
408068ac:	00902074 	movhi	r2,16513
408068b0:	1088aa04 	addi	r2,r2,8872
408068b4:	14000217 	ldw	r16,8(r2)
408068b8:	00bfff04 	movi	r2,-4
408068bc:	80c00117 	ldw	r3,4(r16)
408068c0:	1886703a 	and	r3,r3,r2
408068c4:	003f9106 	br	4080670c <__alt_mem_onchip_flash_0_data+0xff7c670c>
408068c8:	60800217 	ldw	r2,8(r12)
408068cc:	213fffc4 	addi	r4,r4,-1
408068d0:	1300651e 	bne	r2,r12,40806a68 <_malloc_r+0x7f4>
408068d4:	208000cc 	andi	r2,r4,3
408068d8:	633ffe04 	addi	r12,r12,-8
408068dc:	103ffa1e 	bne	r2,zero,408068c8 <__alt_mem_onchip_flash_0_data+0xff7c68c8>
408068e0:	98800117 	ldw	r2,4(r19)
408068e4:	0146303a 	nor	r3,zero,r5
408068e8:	1884703a 	and	r2,r3,r2
408068ec:	98800115 	stw	r2,4(r19)
408068f0:	294b883a 	add	r5,r5,r5
408068f4:	117f2836 	bltu	r2,r5,40806598 <__alt_mem_onchip_flash_0_data+0xff7c6598>
408068f8:	283f2726 	beq	r5,zero,40806598 <__alt_mem_onchip_flash_0_data+0xff7c6598>
408068fc:	2886703a 	and	r3,r5,r2
40806900:	5809883a 	mov	r4,r11
40806904:	183ec31e 	bne	r3,zero,40806414 <__alt_mem_onchip_flash_0_data+0xff7c6414>
40806908:	294b883a 	add	r5,r5,r5
4080690c:	2886703a 	and	r3,r5,r2
40806910:	21000104 	addi	r4,r4,4
40806914:	183ffc26 	beq	r3,zero,40806908 <__alt_mem_onchip_flash_0_data+0xff7c6908>
40806918:	003ebe06 	br	40806414 <__alt_mem_onchip_flash_0_data+0xff7c6414>
4080691c:	00c05504 	movi	r3,340
40806920:	18801236 	bltu	r3,r2,4080696c <_malloc_r+0x6f8>
40806924:	8804d3fa 	srli	r2,r17,15
40806928:	12001e04 	addi	r8,r2,120
4080692c:	11c01dc4 	addi	r7,r2,119
40806930:	4209883a 	add	r4,r8,r8
40806934:	003e6d06 	br	408062ec <__alt_mem_onchip_flash_0_data+0xff7c62ec>
40806938:	00c40004 	movi	r3,4096
4080693c:	003f4606 	br	40806658 <__alt_mem_onchip_flash_0_data+0xff7c6658>
40806940:	00800044 	movi	r2,1
40806944:	a0800115 	stw	r2,4(r20)
40806948:	003f7406 	br	4080671c <__alt_mem_onchip_flash_0_data+0xff7c671c>
4080694c:	1805d0ba 	srai	r2,r3,2
40806950:	01c00044 	movi	r7,1
40806954:	30c00117 	ldw	r3,4(r6)
40806958:	388e983a 	sll	r7,r7,r2
4080695c:	2805883a 	mov	r2,r5
40806960:	38c6b03a 	or	r3,r7,r3
40806964:	30c00115 	stw	r3,4(r6)
40806968:	003f9b06 	br	408067d8 <__alt_mem_onchip_flash_0_data+0xff7c67d8>
4080696c:	00c15504 	movi	r3,1364
40806970:	18801a36 	bltu	r3,r2,408069dc <_malloc_r+0x768>
40806974:	8804d4ba 	srli	r2,r17,18
40806978:	12001f44 	addi	r8,r2,125
4080697c:	11c01f04 	addi	r7,r2,124
40806980:	4209883a 	add	r4,r8,r8
40806984:	003e5906 	br	408062ec <__alt_mem_onchip_flash_0_data+0xff7c62ec>
40806988:	ad400404 	addi	r21,r21,16
4080698c:	003f1706 	br	408065ec <__alt_mem_onchip_flash_0_data+0xff7c65ec>
40806990:	00c01504 	movi	r3,84
40806994:	18802336 	bltu	r3,r2,40806a24 <_malloc_r+0x7b0>
40806998:	3804d33a 	srli	r2,r7,12
4080699c:	11401bc4 	addi	r5,r2,111
408069a0:	10c01b84 	addi	r3,r2,110
408069a4:	294b883a 	add	r5,r5,r5
408069a8:	003f7b06 	br	40806798 <__alt_mem_onchip_flash_0_data+0xff7c6798>
408069ac:	9c000217 	ldw	r16,8(r19)
408069b0:	00bfff04 	movi	r2,-4
408069b4:	80c00117 	ldw	r3,4(r16)
408069b8:	1886703a 	and	r3,r3,r2
408069bc:	003f5306 	br	4080670c <__alt_mem_onchip_flash_0_data+0xff7c670c>
408069c0:	3083ffcc 	andi	r2,r6,4095
408069c4:	103f181e 	bne	r2,zero,40806628 <__alt_mem_onchip_flash_0_data+0xff7c6628>
408069c8:	99000217 	ldw	r4,8(r19)
408069cc:	b545883a 	add	r2,r22,r21
408069d0:	10800054 	ori	r2,r2,1
408069d4:	20800115 	stw	r2,4(r4)
408069d8:	003f3e06 	br	408066d4 <__alt_mem_onchip_flash_0_data+0xff7c66d4>
408069dc:	01003f84 	movi	r4,254
408069e0:	02001fc4 	movi	r8,127
408069e4:	01c01f84 	movi	r7,126
408069e8:	003e4006 	br	408062ec <__alt_mem_onchip_flash_0_data+0xff7c62ec>
408069ec:	00902074 	movhi	r2,16513
408069f0:	108eb104 	addi	r2,r2,15044
408069f4:	15000015 	stw	r20,0(r2)
408069f8:	003f1106 	br	40806640 <__alt_mem_onchip_flash_0_data+0xff7c6640>
408069fc:	00800044 	movi	r2,1
40806a00:	002b883a 	mov	r21,zero
40806a04:	003f1f06 	br	40806684 <__alt_mem_onchip_flash_0_data+0xff7c6684>
40806a08:	81400204 	addi	r5,r16,8
40806a0c:	9009883a 	mov	r4,r18
40806a10:	08056880 	call	40805688 <_free_r>
40806a14:	00902074 	movhi	r2,16513
40806a18:	1093da04 	addi	r2,r2,20328
40806a1c:	10c00017 	ldw	r3,0(r2)
40806a20:	003f2c06 	br	408066d4 <__alt_mem_onchip_flash_0_data+0xff7c66d4>
40806a24:	00c05504 	movi	r3,340
40806a28:	18800536 	bltu	r3,r2,40806a40 <_malloc_r+0x7cc>
40806a2c:	3804d3fa 	srli	r2,r7,15
40806a30:	11401e04 	addi	r5,r2,120
40806a34:	10c01dc4 	addi	r3,r2,119
40806a38:	294b883a 	add	r5,r5,r5
40806a3c:	003f5606 	br	40806798 <__alt_mem_onchip_flash_0_data+0xff7c6798>
40806a40:	00c15504 	movi	r3,1364
40806a44:	18800536 	bltu	r3,r2,40806a5c <_malloc_r+0x7e8>
40806a48:	3804d4ba 	srli	r2,r7,18
40806a4c:	11401f44 	addi	r5,r2,125
40806a50:	10c01f04 	addi	r3,r2,124
40806a54:	294b883a 	add	r5,r5,r5
40806a58:	003f4f06 	br	40806798 <__alt_mem_onchip_flash_0_data+0xff7c6798>
40806a5c:	01403f84 	movi	r5,254
40806a60:	00c01f84 	movi	r3,126
40806a64:	003f4c06 	br	40806798 <__alt_mem_onchip_flash_0_data+0xff7c6798>
40806a68:	98800117 	ldw	r2,4(r19)
40806a6c:	003fa006 	br	408068f0 <__alt_mem_onchip_flash_0_data+0xff7c68f0>
40806a70:	8808d0fa 	srli	r4,r17,3
40806a74:	20800044 	addi	r2,r4,1
40806a78:	1085883a 	add	r2,r2,r2
40806a7c:	003e9006 	br	408064c0 <__alt_mem_onchip_flash_0_data+0xff7c64c0>

40806a80 <memchr>:
40806a80:	208000cc 	andi	r2,r4,3
40806a84:	280f883a 	mov	r7,r5
40806a88:	10003426 	beq	r2,zero,40806b5c <memchr+0xdc>
40806a8c:	30bfffc4 	addi	r2,r6,-1
40806a90:	30001a26 	beq	r6,zero,40806afc <memchr+0x7c>
40806a94:	20c00003 	ldbu	r3,0(r4)
40806a98:	29803fcc 	andi	r6,r5,255
40806a9c:	30c0051e 	bne	r6,r3,40806ab4 <memchr+0x34>
40806aa0:	00001806 	br	40806b04 <memchr+0x84>
40806aa4:	10001526 	beq	r2,zero,40806afc <memchr+0x7c>
40806aa8:	20c00003 	ldbu	r3,0(r4)
40806aac:	10bfffc4 	addi	r2,r2,-1
40806ab0:	30c01426 	beq	r6,r3,40806b04 <memchr+0x84>
40806ab4:	21000044 	addi	r4,r4,1
40806ab8:	20c000cc 	andi	r3,r4,3
40806abc:	183ff91e 	bne	r3,zero,40806aa4 <__alt_mem_onchip_flash_0_data+0xff7c6aa4>
40806ac0:	020000c4 	movi	r8,3
40806ac4:	40801136 	bltu	r8,r2,40806b0c <memchr+0x8c>
40806ac8:	10000c26 	beq	r2,zero,40806afc <memchr+0x7c>
40806acc:	20c00003 	ldbu	r3,0(r4)
40806ad0:	29403fcc 	andi	r5,r5,255
40806ad4:	28c00b26 	beq	r5,r3,40806b04 <memchr+0x84>
40806ad8:	20c00044 	addi	r3,r4,1
40806adc:	39803fcc 	andi	r6,r7,255
40806ae0:	2089883a 	add	r4,r4,r2
40806ae4:	00000306 	br	40806af4 <memchr+0x74>
40806ae8:	18c00044 	addi	r3,r3,1
40806aec:	197fffc3 	ldbu	r5,-1(r3)
40806af0:	31400526 	beq	r6,r5,40806b08 <memchr+0x88>
40806af4:	1805883a 	mov	r2,r3
40806af8:	20fffb1e 	bne	r4,r3,40806ae8 <__alt_mem_onchip_flash_0_data+0xff7c6ae8>
40806afc:	0005883a 	mov	r2,zero
40806b00:	f800283a 	ret
40806b04:	2005883a 	mov	r2,r4
40806b08:	f800283a 	ret
40806b0c:	28c03fcc 	andi	r3,r5,255
40806b10:	1812923a 	slli	r9,r3,8
40806b14:	02ffbff4 	movhi	r11,65279
40806b18:	02a02074 	movhi	r10,32897
40806b1c:	48d2b03a 	or	r9,r9,r3
40806b20:	4806943a 	slli	r3,r9,16
40806b24:	5affbfc4 	addi	r11,r11,-257
40806b28:	52a02004 	addi	r10,r10,-32640
40806b2c:	48d2b03a 	or	r9,r9,r3
40806b30:	20c00017 	ldw	r3,0(r4)
40806b34:	48c6f03a 	xor	r3,r9,r3
40806b38:	1acd883a 	add	r6,r3,r11
40806b3c:	00c6303a 	nor	r3,zero,r3
40806b40:	30c6703a 	and	r3,r6,r3
40806b44:	1a86703a 	and	r3,r3,r10
40806b48:	183fe01e 	bne	r3,zero,40806acc <__alt_mem_onchip_flash_0_data+0xff7c6acc>
40806b4c:	10bfff04 	addi	r2,r2,-4
40806b50:	21000104 	addi	r4,r4,4
40806b54:	40bff636 	bltu	r8,r2,40806b30 <__alt_mem_onchip_flash_0_data+0xff7c6b30>
40806b58:	003fdb06 	br	40806ac8 <__alt_mem_onchip_flash_0_data+0xff7c6ac8>
40806b5c:	3005883a 	mov	r2,r6
40806b60:	003fd706 	br	40806ac0 <__alt_mem_onchip_flash_0_data+0xff7c6ac0>

40806b64 <memcpy>:
40806b64:	defffd04 	addi	sp,sp,-12
40806b68:	dfc00215 	stw	ra,8(sp)
40806b6c:	dc400115 	stw	r17,4(sp)
40806b70:	dc000015 	stw	r16,0(sp)
40806b74:	00c003c4 	movi	r3,15
40806b78:	2005883a 	mov	r2,r4
40806b7c:	1980452e 	bgeu	r3,r6,40806c94 <memcpy+0x130>
40806b80:	2906b03a 	or	r3,r5,r4
40806b84:	18c000cc 	andi	r3,r3,3
40806b88:	1800441e 	bne	r3,zero,40806c9c <memcpy+0x138>
40806b8c:	347ffc04 	addi	r17,r6,-16
40806b90:	8822d13a 	srli	r17,r17,4
40806b94:	28c00104 	addi	r3,r5,4
40806b98:	23400104 	addi	r13,r4,4
40806b9c:	8820913a 	slli	r16,r17,4
40806ba0:	2b000204 	addi	r12,r5,8
40806ba4:	22c00204 	addi	r11,r4,8
40806ba8:	84000504 	addi	r16,r16,20
40806bac:	2a800304 	addi	r10,r5,12
40806bb0:	22400304 	addi	r9,r4,12
40806bb4:	2c21883a 	add	r16,r5,r16
40806bb8:	2811883a 	mov	r8,r5
40806bbc:	200f883a 	mov	r7,r4
40806bc0:	41000017 	ldw	r4,0(r8)
40806bc4:	1fc00017 	ldw	ra,0(r3)
40806bc8:	63c00017 	ldw	r15,0(r12)
40806bcc:	39000015 	stw	r4,0(r7)
40806bd0:	53800017 	ldw	r14,0(r10)
40806bd4:	6fc00015 	stw	ra,0(r13)
40806bd8:	5bc00015 	stw	r15,0(r11)
40806bdc:	4b800015 	stw	r14,0(r9)
40806be0:	18c00404 	addi	r3,r3,16
40806be4:	39c00404 	addi	r7,r7,16
40806be8:	42000404 	addi	r8,r8,16
40806bec:	6b400404 	addi	r13,r13,16
40806bf0:	63000404 	addi	r12,r12,16
40806bf4:	5ac00404 	addi	r11,r11,16
40806bf8:	52800404 	addi	r10,r10,16
40806bfc:	4a400404 	addi	r9,r9,16
40806c00:	1c3fef1e 	bne	r3,r16,40806bc0 <__alt_mem_onchip_flash_0_data+0xff7c6bc0>
40806c04:	89c00044 	addi	r7,r17,1
40806c08:	380e913a 	slli	r7,r7,4
40806c0c:	310003cc 	andi	r4,r6,15
40806c10:	02c000c4 	movi	r11,3
40806c14:	11c7883a 	add	r3,r2,r7
40806c18:	29cb883a 	add	r5,r5,r7
40806c1c:	5900212e 	bgeu	r11,r4,40806ca4 <memcpy+0x140>
40806c20:	1813883a 	mov	r9,r3
40806c24:	2811883a 	mov	r8,r5
40806c28:	200f883a 	mov	r7,r4
40806c2c:	42800017 	ldw	r10,0(r8)
40806c30:	4a400104 	addi	r9,r9,4
40806c34:	39ffff04 	addi	r7,r7,-4
40806c38:	4abfff15 	stw	r10,-4(r9)
40806c3c:	42000104 	addi	r8,r8,4
40806c40:	59fffa36 	bltu	r11,r7,40806c2c <__alt_mem_onchip_flash_0_data+0xff7c6c2c>
40806c44:	213fff04 	addi	r4,r4,-4
40806c48:	2008d0ba 	srli	r4,r4,2
40806c4c:	318000cc 	andi	r6,r6,3
40806c50:	21000044 	addi	r4,r4,1
40806c54:	2109883a 	add	r4,r4,r4
40806c58:	2109883a 	add	r4,r4,r4
40806c5c:	1907883a 	add	r3,r3,r4
40806c60:	290b883a 	add	r5,r5,r4
40806c64:	30000626 	beq	r6,zero,40806c80 <memcpy+0x11c>
40806c68:	198d883a 	add	r6,r3,r6
40806c6c:	29c00003 	ldbu	r7,0(r5)
40806c70:	18c00044 	addi	r3,r3,1
40806c74:	29400044 	addi	r5,r5,1
40806c78:	19ffffc5 	stb	r7,-1(r3)
40806c7c:	19bffb1e 	bne	r3,r6,40806c6c <__alt_mem_onchip_flash_0_data+0xff7c6c6c>
40806c80:	dfc00217 	ldw	ra,8(sp)
40806c84:	dc400117 	ldw	r17,4(sp)
40806c88:	dc000017 	ldw	r16,0(sp)
40806c8c:	dec00304 	addi	sp,sp,12
40806c90:	f800283a 	ret
40806c94:	2007883a 	mov	r3,r4
40806c98:	003ff206 	br	40806c64 <__alt_mem_onchip_flash_0_data+0xff7c6c64>
40806c9c:	2007883a 	mov	r3,r4
40806ca0:	003ff106 	br	40806c68 <__alt_mem_onchip_flash_0_data+0xff7c6c68>
40806ca4:	200d883a 	mov	r6,r4
40806ca8:	003fee06 	br	40806c64 <__alt_mem_onchip_flash_0_data+0xff7c6c64>

40806cac <memmove>:
40806cac:	2005883a 	mov	r2,r4
40806cb0:	29000b2e 	bgeu	r5,r4,40806ce0 <memmove+0x34>
40806cb4:	298f883a 	add	r7,r5,r6
40806cb8:	21c0092e 	bgeu	r4,r7,40806ce0 <memmove+0x34>
40806cbc:	2187883a 	add	r3,r4,r6
40806cc0:	198bc83a 	sub	r5,r3,r6
40806cc4:	30004826 	beq	r6,zero,40806de8 <memmove+0x13c>
40806cc8:	39ffffc4 	addi	r7,r7,-1
40806ccc:	39000003 	ldbu	r4,0(r7)
40806cd0:	18ffffc4 	addi	r3,r3,-1
40806cd4:	19000005 	stb	r4,0(r3)
40806cd8:	28fffb1e 	bne	r5,r3,40806cc8 <__alt_mem_onchip_flash_0_data+0xff7c6cc8>
40806cdc:	f800283a 	ret
40806ce0:	00c003c4 	movi	r3,15
40806ce4:	1980412e 	bgeu	r3,r6,40806dec <memmove+0x140>
40806ce8:	2886b03a 	or	r3,r5,r2
40806cec:	18c000cc 	andi	r3,r3,3
40806cf0:	1800401e 	bne	r3,zero,40806df4 <memmove+0x148>
40806cf4:	33fffc04 	addi	r15,r6,-16
40806cf8:	781ed13a 	srli	r15,r15,4
40806cfc:	28c00104 	addi	r3,r5,4
40806d00:	13400104 	addi	r13,r2,4
40806d04:	781c913a 	slli	r14,r15,4
40806d08:	2b000204 	addi	r12,r5,8
40806d0c:	12c00204 	addi	r11,r2,8
40806d10:	73800504 	addi	r14,r14,20
40806d14:	2a800304 	addi	r10,r5,12
40806d18:	12400304 	addi	r9,r2,12
40806d1c:	2b9d883a 	add	r14,r5,r14
40806d20:	2811883a 	mov	r8,r5
40806d24:	100f883a 	mov	r7,r2
40806d28:	41000017 	ldw	r4,0(r8)
40806d2c:	39c00404 	addi	r7,r7,16
40806d30:	18c00404 	addi	r3,r3,16
40806d34:	393ffc15 	stw	r4,-16(r7)
40806d38:	193ffc17 	ldw	r4,-16(r3)
40806d3c:	6b400404 	addi	r13,r13,16
40806d40:	5ac00404 	addi	r11,r11,16
40806d44:	693ffc15 	stw	r4,-16(r13)
40806d48:	61000017 	ldw	r4,0(r12)
40806d4c:	4a400404 	addi	r9,r9,16
40806d50:	42000404 	addi	r8,r8,16
40806d54:	593ffc15 	stw	r4,-16(r11)
40806d58:	51000017 	ldw	r4,0(r10)
40806d5c:	63000404 	addi	r12,r12,16
40806d60:	52800404 	addi	r10,r10,16
40806d64:	493ffc15 	stw	r4,-16(r9)
40806d68:	1bbfef1e 	bne	r3,r14,40806d28 <__alt_mem_onchip_flash_0_data+0xff7c6d28>
40806d6c:	79000044 	addi	r4,r15,1
40806d70:	2008913a 	slli	r4,r4,4
40806d74:	328003cc 	andi	r10,r6,15
40806d78:	02c000c4 	movi	r11,3
40806d7c:	1107883a 	add	r3,r2,r4
40806d80:	290b883a 	add	r5,r5,r4
40806d84:	5a801e2e 	bgeu	r11,r10,40806e00 <memmove+0x154>
40806d88:	1813883a 	mov	r9,r3
40806d8c:	2811883a 	mov	r8,r5
40806d90:	500f883a 	mov	r7,r10
40806d94:	41000017 	ldw	r4,0(r8)
40806d98:	4a400104 	addi	r9,r9,4
40806d9c:	39ffff04 	addi	r7,r7,-4
40806da0:	493fff15 	stw	r4,-4(r9)
40806da4:	42000104 	addi	r8,r8,4
40806da8:	59fffa36 	bltu	r11,r7,40806d94 <__alt_mem_onchip_flash_0_data+0xff7c6d94>
40806dac:	513fff04 	addi	r4,r10,-4
40806db0:	2008d0ba 	srli	r4,r4,2
40806db4:	318000cc 	andi	r6,r6,3
40806db8:	21000044 	addi	r4,r4,1
40806dbc:	2109883a 	add	r4,r4,r4
40806dc0:	2109883a 	add	r4,r4,r4
40806dc4:	1907883a 	add	r3,r3,r4
40806dc8:	290b883a 	add	r5,r5,r4
40806dcc:	30000b26 	beq	r6,zero,40806dfc <memmove+0x150>
40806dd0:	198d883a 	add	r6,r3,r6
40806dd4:	29c00003 	ldbu	r7,0(r5)
40806dd8:	18c00044 	addi	r3,r3,1
40806ddc:	29400044 	addi	r5,r5,1
40806de0:	19ffffc5 	stb	r7,-1(r3)
40806de4:	19bffb1e 	bne	r3,r6,40806dd4 <__alt_mem_onchip_flash_0_data+0xff7c6dd4>
40806de8:	f800283a 	ret
40806dec:	1007883a 	mov	r3,r2
40806df0:	003ff606 	br	40806dcc <__alt_mem_onchip_flash_0_data+0xff7c6dcc>
40806df4:	1007883a 	mov	r3,r2
40806df8:	003ff506 	br	40806dd0 <__alt_mem_onchip_flash_0_data+0xff7c6dd0>
40806dfc:	f800283a 	ret
40806e00:	500d883a 	mov	r6,r10
40806e04:	003ff106 	br	40806dcc <__alt_mem_onchip_flash_0_data+0xff7c6dcc>

40806e08 <_Balloc>:
40806e08:	20801317 	ldw	r2,76(r4)
40806e0c:	defffc04 	addi	sp,sp,-16
40806e10:	dc400115 	stw	r17,4(sp)
40806e14:	dc000015 	stw	r16,0(sp)
40806e18:	dfc00315 	stw	ra,12(sp)
40806e1c:	dc800215 	stw	r18,8(sp)
40806e20:	2023883a 	mov	r17,r4
40806e24:	2821883a 	mov	r16,r5
40806e28:	10000f26 	beq	r2,zero,40806e68 <_Balloc+0x60>
40806e2c:	8407883a 	add	r3,r16,r16
40806e30:	18c7883a 	add	r3,r3,r3
40806e34:	10c7883a 	add	r3,r2,r3
40806e38:	18800017 	ldw	r2,0(r3)
40806e3c:	10001126 	beq	r2,zero,40806e84 <_Balloc+0x7c>
40806e40:	11000017 	ldw	r4,0(r2)
40806e44:	19000015 	stw	r4,0(r3)
40806e48:	10000415 	stw	zero,16(r2)
40806e4c:	10000315 	stw	zero,12(r2)
40806e50:	dfc00317 	ldw	ra,12(sp)
40806e54:	dc800217 	ldw	r18,8(sp)
40806e58:	dc400117 	ldw	r17,4(sp)
40806e5c:	dc000017 	ldw	r16,0(sp)
40806e60:	dec00404 	addi	sp,sp,16
40806e64:	f800283a 	ret
40806e68:	01800844 	movi	r6,33
40806e6c:	01400104 	movi	r5,4
40806e70:	0809d440 	call	40809d44 <_calloc_r>
40806e74:	88801315 	stw	r2,76(r17)
40806e78:	103fec1e 	bne	r2,zero,40806e2c <__alt_mem_onchip_flash_0_data+0xff7c6e2c>
40806e7c:	0005883a 	mov	r2,zero
40806e80:	003ff306 	br	40806e50 <__alt_mem_onchip_flash_0_data+0xff7c6e50>
40806e84:	01400044 	movi	r5,1
40806e88:	2c24983a 	sll	r18,r5,r16
40806e8c:	8809883a 	mov	r4,r17
40806e90:	91800144 	addi	r6,r18,5
40806e94:	318d883a 	add	r6,r6,r6
40806e98:	318d883a 	add	r6,r6,r6
40806e9c:	0809d440 	call	40809d44 <_calloc_r>
40806ea0:	103ff626 	beq	r2,zero,40806e7c <__alt_mem_onchip_flash_0_data+0xff7c6e7c>
40806ea4:	14000115 	stw	r16,4(r2)
40806ea8:	14800215 	stw	r18,8(r2)
40806eac:	003fe606 	br	40806e48 <__alt_mem_onchip_flash_0_data+0xff7c6e48>

40806eb0 <_Bfree>:
40806eb0:	28000826 	beq	r5,zero,40806ed4 <_Bfree+0x24>
40806eb4:	28c00117 	ldw	r3,4(r5)
40806eb8:	20801317 	ldw	r2,76(r4)
40806ebc:	18c7883a 	add	r3,r3,r3
40806ec0:	18c7883a 	add	r3,r3,r3
40806ec4:	10c5883a 	add	r2,r2,r3
40806ec8:	10c00017 	ldw	r3,0(r2)
40806ecc:	28c00015 	stw	r3,0(r5)
40806ed0:	11400015 	stw	r5,0(r2)
40806ed4:	f800283a 	ret

40806ed8 <__multadd>:
40806ed8:	defffa04 	addi	sp,sp,-24
40806edc:	dc800315 	stw	r18,12(sp)
40806ee0:	dc400215 	stw	r17,8(sp)
40806ee4:	dc000115 	stw	r16,4(sp)
40806ee8:	2823883a 	mov	r17,r5
40806eec:	2c000417 	ldw	r16,16(r5)
40806ef0:	dfc00515 	stw	ra,20(sp)
40806ef4:	dcc00415 	stw	r19,16(sp)
40806ef8:	2025883a 	mov	r18,r4
40806efc:	29400504 	addi	r5,r5,20
40806f00:	0011883a 	mov	r8,zero
40806f04:	28c00017 	ldw	r3,0(r5)
40806f08:	29400104 	addi	r5,r5,4
40806f0c:	42000044 	addi	r8,r8,1
40806f10:	18bfffcc 	andi	r2,r3,65535
40806f14:	1185383a 	mul	r2,r2,r6
40806f18:	1806d43a 	srli	r3,r3,16
40806f1c:	11cf883a 	add	r7,r2,r7
40806f20:	3808d43a 	srli	r4,r7,16
40806f24:	1987383a 	mul	r3,r3,r6
40806f28:	38bfffcc 	andi	r2,r7,65535
40806f2c:	1907883a 	add	r3,r3,r4
40806f30:	1808943a 	slli	r4,r3,16
40806f34:	180ed43a 	srli	r7,r3,16
40806f38:	2085883a 	add	r2,r4,r2
40806f3c:	28bfff15 	stw	r2,-4(r5)
40806f40:	443ff016 	blt	r8,r16,40806f04 <__alt_mem_onchip_flash_0_data+0xff7c6f04>
40806f44:	38000926 	beq	r7,zero,40806f6c <__multadd+0x94>
40806f48:	88800217 	ldw	r2,8(r17)
40806f4c:	80800f0e 	bge	r16,r2,40806f8c <__multadd+0xb4>
40806f50:	80800144 	addi	r2,r16,5
40806f54:	1085883a 	add	r2,r2,r2
40806f58:	1085883a 	add	r2,r2,r2
40806f5c:	8885883a 	add	r2,r17,r2
40806f60:	11c00015 	stw	r7,0(r2)
40806f64:	84000044 	addi	r16,r16,1
40806f68:	8c000415 	stw	r16,16(r17)
40806f6c:	8805883a 	mov	r2,r17
40806f70:	dfc00517 	ldw	ra,20(sp)
40806f74:	dcc00417 	ldw	r19,16(sp)
40806f78:	dc800317 	ldw	r18,12(sp)
40806f7c:	dc400217 	ldw	r17,8(sp)
40806f80:	dc000117 	ldw	r16,4(sp)
40806f84:	dec00604 	addi	sp,sp,24
40806f88:	f800283a 	ret
40806f8c:	89400117 	ldw	r5,4(r17)
40806f90:	9009883a 	mov	r4,r18
40806f94:	d9c00015 	stw	r7,0(sp)
40806f98:	29400044 	addi	r5,r5,1
40806f9c:	0806e080 	call	40806e08 <_Balloc>
40806fa0:	89800417 	ldw	r6,16(r17)
40806fa4:	89400304 	addi	r5,r17,12
40806fa8:	11000304 	addi	r4,r2,12
40806fac:	31800084 	addi	r6,r6,2
40806fb0:	318d883a 	add	r6,r6,r6
40806fb4:	318d883a 	add	r6,r6,r6
40806fb8:	1027883a 	mov	r19,r2
40806fbc:	0806b640 	call	40806b64 <memcpy>
40806fc0:	d9c00017 	ldw	r7,0(sp)
40806fc4:	88000a26 	beq	r17,zero,40806ff0 <__multadd+0x118>
40806fc8:	88c00117 	ldw	r3,4(r17)
40806fcc:	90801317 	ldw	r2,76(r18)
40806fd0:	18c7883a 	add	r3,r3,r3
40806fd4:	18c7883a 	add	r3,r3,r3
40806fd8:	10c5883a 	add	r2,r2,r3
40806fdc:	10c00017 	ldw	r3,0(r2)
40806fe0:	88c00015 	stw	r3,0(r17)
40806fe4:	14400015 	stw	r17,0(r2)
40806fe8:	9823883a 	mov	r17,r19
40806fec:	003fd806 	br	40806f50 <__alt_mem_onchip_flash_0_data+0xff7c6f50>
40806ff0:	9823883a 	mov	r17,r19
40806ff4:	003fd606 	br	40806f50 <__alt_mem_onchip_flash_0_data+0xff7c6f50>

40806ff8 <__s2b>:
40806ff8:	defff904 	addi	sp,sp,-28
40806ffc:	dc400115 	stw	r17,4(sp)
40807000:	dc000015 	stw	r16,0(sp)
40807004:	2023883a 	mov	r17,r4
40807008:	2821883a 	mov	r16,r5
4080700c:	39000204 	addi	r4,r7,8
40807010:	01400244 	movi	r5,9
40807014:	dcc00315 	stw	r19,12(sp)
40807018:	dc800215 	stw	r18,8(sp)
4080701c:	dfc00615 	stw	ra,24(sp)
40807020:	dd400515 	stw	r21,20(sp)
40807024:	dd000415 	stw	r20,16(sp)
40807028:	3825883a 	mov	r18,r7
4080702c:	3027883a 	mov	r19,r6
40807030:	080b0740 	call	4080b074 <__divsi3>
40807034:	00c00044 	movi	r3,1
40807038:	000b883a 	mov	r5,zero
4080703c:	1880030e 	bge	r3,r2,4080704c <__s2b+0x54>
40807040:	18c7883a 	add	r3,r3,r3
40807044:	29400044 	addi	r5,r5,1
40807048:	18bffd16 	blt	r3,r2,40807040 <__alt_mem_onchip_flash_0_data+0xff7c7040>
4080704c:	8809883a 	mov	r4,r17
40807050:	0806e080 	call	40806e08 <_Balloc>
40807054:	d8c00717 	ldw	r3,28(sp)
40807058:	10c00515 	stw	r3,20(r2)
4080705c:	00c00044 	movi	r3,1
40807060:	10c00415 	stw	r3,16(r2)
40807064:	00c00244 	movi	r3,9
40807068:	1cc0210e 	bge	r3,r19,408070f0 <__s2b+0xf8>
4080706c:	80eb883a 	add	r21,r16,r3
40807070:	a829883a 	mov	r20,r21
40807074:	84e1883a 	add	r16,r16,r19
40807078:	a1c00007 	ldb	r7,0(r20)
4080707c:	01800284 	movi	r6,10
40807080:	a5000044 	addi	r20,r20,1
40807084:	100b883a 	mov	r5,r2
40807088:	39fff404 	addi	r7,r7,-48
4080708c:	8809883a 	mov	r4,r17
40807090:	0806ed80 	call	40806ed8 <__multadd>
40807094:	a43ff81e 	bne	r20,r16,40807078 <__alt_mem_onchip_flash_0_data+0xff7c7078>
40807098:	ace1883a 	add	r16,r21,r19
4080709c:	843ffe04 	addi	r16,r16,-8
408070a0:	9c800a0e 	bge	r19,r18,408070cc <__s2b+0xd4>
408070a4:	94e5c83a 	sub	r18,r18,r19
408070a8:	84a5883a 	add	r18,r16,r18
408070ac:	81c00007 	ldb	r7,0(r16)
408070b0:	01800284 	movi	r6,10
408070b4:	84000044 	addi	r16,r16,1
408070b8:	100b883a 	mov	r5,r2
408070bc:	39fff404 	addi	r7,r7,-48
408070c0:	8809883a 	mov	r4,r17
408070c4:	0806ed80 	call	40806ed8 <__multadd>
408070c8:	84bff81e 	bne	r16,r18,408070ac <__alt_mem_onchip_flash_0_data+0xff7c70ac>
408070cc:	dfc00617 	ldw	ra,24(sp)
408070d0:	dd400517 	ldw	r21,20(sp)
408070d4:	dd000417 	ldw	r20,16(sp)
408070d8:	dcc00317 	ldw	r19,12(sp)
408070dc:	dc800217 	ldw	r18,8(sp)
408070e0:	dc400117 	ldw	r17,4(sp)
408070e4:	dc000017 	ldw	r16,0(sp)
408070e8:	dec00704 	addi	sp,sp,28
408070ec:	f800283a 	ret
408070f0:	84000284 	addi	r16,r16,10
408070f4:	1827883a 	mov	r19,r3
408070f8:	003fe906 	br	408070a0 <__alt_mem_onchip_flash_0_data+0xff7c70a0>

408070fc <__hi0bits>:
408070fc:	20bfffec 	andhi	r2,r4,65535
40807100:	1000141e 	bne	r2,zero,40807154 <__hi0bits+0x58>
40807104:	2008943a 	slli	r4,r4,16
40807108:	00800404 	movi	r2,16
4080710c:	20ffc02c 	andhi	r3,r4,65280
40807110:	1800021e 	bne	r3,zero,4080711c <__hi0bits+0x20>
40807114:	2008923a 	slli	r4,r4,8
40807118:	10800204 	addi	r2,r2,8
4080711c:	20fc002c 	andhi	r3,r4,61440
40807120:	1800021e 	bne	r3,zero,4080712c <__hi0bits+0x30>
40807124:	2008913a 	slli	r4,r4,4
40807128:	10800104 	addi	r2,r2,4
4080712c:	20f0002c 	andhi	r3,r4,49152
40807130:	1800031e 	bne	r3,zero,40807140 <__hi0bits+0x44>
40807134:	2109883a 	add	r4,r4,r4
40807138:	10800084 	addi	r2,r2,2
4080713c:	2109883a 	add	r4,r4,r4
40807140:	20000316 	blt	r4,zero,40807150 <__hi0bits+0x54>
40807144:	2110002c 	andhi	r4,r4,16384
40807148:	2000041e 	bne	r4,zero,4080715c <__hi0bits+0x60>
4080714c:	00800804 	movi	r2,32
40807150:	f800283a 	ret
40807154:	0005883a 	mov	r2,zero
40807158:	003fec06 	br	4080710c <__alt_mem_onchip_flash_0_data+0xff7c710c>
4080715c:	10800044 	addi	r2,r2,1
40807160:	f800283a 	ret

40807164 <__lo0bits>:
40807164:	20c00017 	ldw	r3,0(r4)
40807168:	188001cc 	andi	r2,r3,7
4080716c:	10000826 	beq	r2,zero,40807190 <__lo0bits+0x2c>
40807170:	1880004c 	andi	r2,r3,1
40807174:	1000211e 	bne	r2,zero,408071fc <__lo0bits+0x98>
40807178:	1880008c 	andi	r2,r3,2
4080717c:	1000211e 	bne	r2,zero,40807204 <__lo0bits+0xa0>
40807180:	1806d0ba 	srli	r3,r3,2
40807184:	00800084 	movi	r2,2
40807188:	20c00015 	stw	r3,0(r4)
4080718c:	f800283a 	ret
40807190:	18bfffcc 	andi	r2,r3,65535
40807194:	10001326 	beq	r2,zero,408071e4 <__lo0bits+0x80>
40807198:	0005883a 	mov	r2,zero
4080719c:	19403fcc 	andi	r5,r3,255
408071a0:	2800021e 	bne	r5,zero,408071ac <__lo0bits+0x48>
408071a4:	1806d23a 	srli	r3,r3,8
408071a8:	10800204 	addi	r2,r2,8
408071ac:	194003cc 	andi	r5,r3,15
408071b0:	2800021e 	bne	r5,zero,408071bc <__lo0bits+0x58>
408071b4:	1806d13a 	srli	r3,r3,4
408071b8:	10800104 	addi	r2,r2,4
408071bc:	194000cc 	andi	r5,r3,3
408071c0:	2800021e 	bne	r5,zero,408071cc <__lo0bits+0x68>
408071c4:	1806d0ba 	srli	r3,r3,2
408071c8:	10800084 	addi	r2,r2,2
408071cc:	1940004c 	andi	r5,r3,1
408071d0:	2800081e 	bne	r5,zero,408071f4 <__lo0bits+0x90>
408071d4:	1806d07a 	srli	r3,r3,1
408071d8:	1800051e 	bne	r3,zero,408071f0 <__lo0bits+0x8c>
408071dc:	00800804 	movi	r2,32
408071e0:	f800283a 	ret
408071e4:	1806d43a 	srli	r3,r3,16
408071e8:	00800404 	movi	r2,16
408071ec:	003feb06 	br	4080719c <__alt_mem_onchip_flash_0_data+0xff7c719c>
408071f0:	10800044 	addi	r2,r2,1
408071f4:	20c00015 	stw	r3,0(r4)
408071f8:	f800283a 	ret
408071fc:	0005883a 	mov	r2,zero
40807200:	f800283a 	ret
40807204:	1806d07a 	srli	r3,r3,1
40807208:	00800044 	movi	r2,1
4080720c:	20c00015 	stw	r3,0(r4)
40807210:	f800283a 	ret

40807214 <__i2b>:
40807214:	defffd04 	addi	sp,sp,-12
40807218:	dc000015 	stw	r16,0(sp)
4080721c:	04000044 	movi	r16,1
40807220:	dc400115 	stw	r17,4(sp)
40807224:	2823883a 	mov	r17,r5
40807228:	800b883a 	mov	r5,r16
4080722c:	dfc00215 	stw	ra,8(sp)
40807230:	0806e080 	call	40806e08 <_Balloc>
40807234:	14400515 	stw	r17,20(r2)
40807238:	14000415 	stw	r16,16(r2)
4080723c:	dfc00217 	ldw	ra,8(sp)
40807240:	dc400117 	ldw	r17,4(sp)
40807244:	dc000017 	ldw	r16,0(sp)
40807248:	dec00304 	addi	sp,sp,12
4080724c:	f800283a 	ret

40807250 <__multiply>:
40807250:	defffa04 	addi	sp,sp,-24
40807254:	dcc00315 	stw	r19,12(sp)
40807258:	dc800215 	stw	r18,8(sp)
4080725c:	34c00417 	ldw	r19,16(r6)
40807260:	2c800417 	ldw	r18,16(r5)
40807264:	dd000415 	stw	r20,16(sp)
40807268:	dc400115 	stw	r17,4(sp)
4080726c:	dfc00515 	stw	ra,20(sp)
40807270:	dc000015 	stw	r16,0(sp)
40807274:	2829883a 	mov	r20,r5
40807278:	3023883a 	mov	r17,r6
4080727c:	94c0050e 	bge	r18,r19,40807294 <__multiply+0x44>
40807280:	9007883a 	mov	r3,r18
40807284:	3029883a 	mov	r20,r6
40807288:	9825883a 	mov	r18,r19
4080728c:	2823883a 	mov	r17,r5
40807290:	1827883a 	mov	r19,r3
40807294:	a0800217 	ldw	r2,8(r20)
40807298:	94e1883a 	add	r16,r18,r19
4080729c:	a1400117 	ldw	r5,4(r20)
408072a0:	1400010e 	bge	r2,r16,408072a8 <__multiply+0x58>
408072a4:	29400044 	addi	r5,r5,1
408072a8:	0806e080 	call	40806e08 <_Balloc>
408072ac:	8415883a 	add	r10,r16,r16
408072b0:	12c00504 	addi	r11,r2,20
408072b4:	5295883a 	add	r10,r10,r10
408072b8:	5a95883a 	add	r10,r11,r10
408072bc:	5807883a 	mov	r3,r11
408072c0:	5a80032e 	bgeu	r11,r10,408072d0 <__multiply+0x80>
408072c4:	18000015 	stw	zero,0(r3)
408072c8:	18c00104 	addi	r3,r3,4
408072cc:	1abffd36 	bltu	r3,r10,408072c4 <__alt_mem_onchip_flash_0_data+0xff7c72c4>
408072d0:	9ce7883a 	add	r19,r19,r19
408072d4:	94a5883a 	add	r18,r18,r18
408072d8:	89800504 	addi	r6,r17,20
408072dc:	9ce7883a 	add	r19,r19,r19
408072e0:	a3400504 	addi	r13,r20,20
408072e4:	94a5883a 	add	r18,r18,r18
408072e8:	34d9883a 	add	r12,r6,r19
408072ec:	6c93883a 	add	r9,r13,r18
408072f0:	3300422e 	bgeu	r6,r12,408073fc <__multiply+0x1ac>
408072f4:	37c00017 	ldw	ra,0(r6)
408072f8:	fbffffcc 	andi	r15,ra,65535
408072fc:	78001b26 	beq	r15,zero,4080736c <__multiply+0x11c>
40807300:	5811883a 	mov	r8,r11
40807304:	681d883a 	mov	r14,r13
40807308:	000f883a 	mov	r7,zero
4080730c:	71000017 	ldw	r4,0(r14)
40807310:	40c00017 	ldw	r3,0(r8)
40807314:	73800104 	addi	r14,r14,4
40807318:	217fffcc 	andi	r5,r4,65535
4080731c:	2bcb383a 	mul	r5,r5,r15
40807320:	2008d43a 	srli	r4,r4,16
40807324:	1c7fffcc 	andi	r17,r3,65535
40807328:	2c4b883a 	add	r5,r5,r17
4080732c:	29cb883a 	add	r5,r5,r7
40807330:	23c9383a 	mul	r4,r4,r15
40807334:	1806d43a 	srli	r3,r3,16
40807338:	280ed43a 	srli	r7,r5,16
4080733c:	297fffcc 	andi	r5,r5,65535
40807340:	20c7883a 	add	r3,r4,r3
40807344:	19c7883a 	add	r3,r3,r7
40807348:	1808943a 	slli	r4,r3,16
4080734c:	4023883a 	mov	r17,r8
40807350:	180ed43a 	srli	r7,r3,16
40807354:	214ab03a 	or	r5,r4,r5
40807358:	41400015 	stw	r5,0(r8)
4080735c:	42000104 	addi	r8,r8,4
40807360:	727fea36 	bltu	r14,r9,4080730c <__alt_mem_onchip_flash_0_data+0xff7c730c>
40807364:	89c00115 	stw	r7,4(r17)
40807368:	37c00017 	ldw	ra,0(r6)
4080736c:	f83ed43a 	srli	ra,ra,16
40807370:	f8001f26 	beq	ra,zero,408073f0 <__multiply+0x1a0>
40807374:	58c00017 	ldw	r3,0(r11)
40807378:	681d883a 	mov	r14,r13
4080737c:	581f883a 	mov	r15,r11
40807380:	1811883a 	mov	r8,r3
40807384:	5825883a 	mov	r18,r11
40807388:	000f883a 	mov	r7,zero
4080738c:	00000106 	br	40807394 <__multiply+0x144>
40807390:	8825883a 	mov	r18,r17
40807394:	7140000b 	ldhu	r5,0(r14)
40807398:	4010d43a 	srli	r8,r8,16
4080739c:	193fffcc 	andi	r4,r3,65535
408073a0:	2fcb383a 	mul	r5,r5,ra
408073a4:	7bc00104 	addi	r15,r15,4
408073a8:	73800104 	addi	r14,r14,4
408073ac:	2a0b883a 	add	r5,r5,r8
408073b0:	29cb883a 	add	r5,r5,r7
408073b4:	2806943a 	slli	r3,r5,16
408073b8:	94400104 	addi	r17,r18,4
408073bc:	280ad43a 	srli	r5,r5,16
408073c0:	1908b03a 	or	r4,r3,r4
408073c4:	793fff15 	stw	r4,-4(r15)
408073c8:	70ffff17 	ldw	r3,-4(r14)
408073cc:	8a000017 	ldw	r8,0(r17)
408073d0:	1806d43a 	srli	r3,r3,16
408073d4:	413fffcc 	andi	r4,r8,65535
408073d8:	1fc7383a 	mul	r3,r3,ra
408073dc:	1907883a 	add	r3,r3,r4
408073e0:	1947883a 	add	r3,r3,r5
408073e4:	180ed43a 	srli	r7,r3,16
408073e8:	727fe936 	bltu	r14,r9,40807390 <__alt_mem_onchip_flash_0_data+0xff7c7390>
408073ec:	90c00115 	stw	r3,4(r18)
408073f0:	31800104 	addi	r6,r6,4
408073f4:	5ac00104 	addi	r11,r11,4
408073f8:	333fbe36 	bltu	r6,r12,408072f4 <__alt_mem_onchip_flash_0_data+0xff7c72f4>
408073fc:	0400090e 	bge	zero,r16,40807424 <__multiply+0x1d4>
40807400:	50ffff17 	ldw	r3,-4(r10)
40807404:	52bfff04 	addi	r10,r10,-4
40807408:	18000326 	beq	r3,zero,40807418 <__multiply+0x1c8>
4080740c:	00000506 	br	40807424 <__multiply+0x1d4>
40807410:	50c00017 	ldw	r3,0(r10)
40807414:	1800031e 	bne	r3,zero,40807424 <__multiply+0x1d4>
40807418:	843fffc4 	addi	r16,r16,-1
4080741c:	52bfff04 	addi	r10,r10,-4
40807420:	803ffb1e 	bne	r16,zero,40807410 <__alt_mem_onchip_flash_0_data+0xff7c7410>
40807424:	14000415 	stw	r16,16(r2)
40807428:	dfc00517 	ldw	ra,20(sp)
4080742c:	dd000417 	ldw	r20,16(sp)
40807430:	dcc00317 	ldw	r19,12(sp)
40807434:	dc800217 	ldw	r18,8(sp)
40807438:	dc400117 	ldw	r17,4(sp)
4080743c:	dc000017 	ldw	r16,0(sp)
40807440:	dec00604 	addi	sp,sp,24
40807444:	f800283a 	ret

40807448 <__pow5mult>:
40807448:	defffa04 	addi	sp,sp,-24
4080744c:	dcc00315 	stw	r19,12(sp)
40807450:	dc000015 	stw	r16,0(sp)
40807454:	dfc00515 	stw	ra,20(sp)
40807458:	dd000415 	stw	r20,16(sp)
4080745c:	dc800215 	stw	r18,8(sp)
40807460:	dc400115 	stw	r17,4(sp)
40807464:	308000cc 	andi	r2,r6,3
40807468:	3021883a 	mov	r16,r6
4080746c:	2027883a 	mov	r19,r4
40807470:	10002f1e 	bne	r2,zero,40807530 <__pow5mult+0xe8>
40807474:	2825883a 	mov	r18,r5
40807478:	8021d0ba 	srai	r16,r16,2
4080747c:	80001a26 	beq	r16,zero,408074e8 <__pow5mult+0xa0>
40807480:	9c401217 	ldw	r17,72(r19)
40807484:	8800061e 	bne	r17,zero,408074a0 <__pow5mult+0x58>
40807488:	00003406 	br	4080755c <__pow5mult+0x114>
4080748c:	8021d07a 	srai	r16,r16,1
40807490:	80001526 	beq	r16,zero,408074e8 <__pow5mult+0xa0>
40807494:	88800017 	ldw	r2,0(r17)
40807498:	10001c26 	beq	r2,zero,4080750c <__pow5mult+0xc4>
4080749c:	1023883a 	mov	r17,r2
408074a0:	8080004c 	andi	r2,r16,1
408074a4:	103ff926 	beq	r2,zero,4080748c <__alt_mem_onchip_flash_0_data+0xff7c748c>
408074a8:	880d883a 	mov	r6,r17
408074ac:	900b883a 	mov	r5,r18
408074b0:	9809883a 	mov	r4,r19
408074b4:	08072500 	call	40807250 <__multiply>
408074b8:	90001b26 	beq	r18,zero,40807528 <__pow5mult+0xe0>
408074bc:	91000117 	ldw	r4,4(r18)
408074c0:	98c01317 	ldw	r3,76(r19)
408074c4:	8021d07a 	srai	r16,r16,1
408074c8:	2109883a 	add	r4,r4,r4
408074cc:	2109883a 	add	r4,r4,r4
408074d0:	1907883a 	add	r3,r3,r4
408074d4:	19000017 	ldw	r4,0(r3)
408074d8:	91000015 	stw	r4,0(r18)
408074dc:	1c800015 	stw	r18,0(r3)
408074e0:	1025883a 	mov	r18,r2
408074e4:	803feb1e 	bne	r16,zero,40807494 <__alt_mem_onchip_flash_0_data+0xff7c7494>
408074e8:	9005883a 	mov	r2,r18
408074ec:	dfc00517 	ldw	ra,20(sp)
408074f0:	dd000417 	ldw	r20,16(sp)
408074f4:	dcc00317 	ldw	r19,12(sp)
408074f8:	dc800217 	ldw	r18,8(sp)
408074fc:	dc400117 	ldw	r17,4(sp)
40807500:	dc000017 	ldw	r16,0(sp)
40807504:	dec00604 	addi	sp,sp,24
40807508:	f800283a 	ret
4080750c:	880d883a 	mov	r6,r17
40807510:	880b883a 	mov	r5,r17
40807514:	9809883a 	mov	r4,r19
40807518:	08072500 	call	40807250 <__multiply>
4080751c:	88800015 	stw	r2,0(r17)
40807520:	10000015 	stw	zero,0(r2)
40807524:	003fdd06 	br	4080749c <__alt_mem_onchip_flash_0_data+0xff7c749c>
40807528:	1025883a 	mov	r18,r2
4080752c:	003fd706 	br	4080748c <__alt_mem_onchip_flash_0_data+0xff7c748c>
40807530:	10bfffc4 	addi	r2,r2,-1
40807534:	1085883a 	add	r2,r2,r2
40807538:	00d02074 	movhi	r3,16513
4080753c:	18c6c604 	addi	r3,r3,6936
40807540:	1085883a 	add	r2,r2,r2
40807544:	1885883a 	add	r2,r3,r2
40807548:	11800017 	ldw	r6,0(r2)
4080754c:	000f883a 	mov	r7,zero
40807550:	0806ed80 	call	40806ed8 <__multadd>
40807554:	1025883a 	mov	r18,r2
40807558:	003fc706 	br	40807478 <__alt_mem_onchip_flash_0_data+0xff7c7478>
4080755c:	05000044 	movi	r20,1
40807560:	a00b883a 	mov	r5,r20
40807564:	9809883a 	mov	r4,r19
40807568:	0806e080 	call	40806e08 <_Balloc>
4080756c:	1023883a 	mov	r17,r2
40807570:	00809c44 	movi	r2,625
40807574:	88800515 	stw	r2,20(r17)
40807578:	8d000415 	stw	r20,16(r17)
4080757c:	9c401215 	stw	r17,72(r19)
40807580:	88000015 	stw	zero,0(r17)
40807584:	003fc606 	br	408074a0 <__alt_mem_onchip_flash_0_data+0xff7c74a0>

40807588 <__lshift>:
40807588:	defff904 	addi	sp,sp,-28
4080758c:	dd400515 	stw	r21,20(sp)
40807590:	dcc00315 	stw	r19,12(sp)
40807594:	302bd17a 	srai	r21,r6,5
40807598:	2cc00417 	ldw	r19,16(r5)
4080759c:	28800217 	ldw	r2,8(r5)
408075a0:	dd000415 	stw	r20,16(sp)
408075a4:	ace7883a 	add	r19,r21,r19
408075a8:	dc800215 	stw	r18,8(sp)
408075ac:	dc400115 	stw	r17,4(sp)
408075b0:	dc000015 	stw	r16,0(sp)
408075b4:	dfc00615 	stw	ra,24(sp)
408075b8:	9c000044 	addi	r16,r19,1
408075bc:	2823883a 	mov	r17,r5
408075c0:	3029883a 	mov	r20,r6
408075c4:	2025883a 	mov	r18,r4
408075c8:	29400117 	ldw	r5,4(r5)
408075cc:	1400030e 	bge	r2,r16,408075dc <__lshift+0x54>
408075d0:	1085883a 	add	r2,r2,r2
408075d4:	29400044 	addi	r5,r5,1
408075d8:	143ffd16 	blt	r2,r16,408075d0 <__alt_mem_onchip_flash_0_data+0xff7c75d0>
408075dc:	9009883a 	mov	r4,r18
408075e0:	0806e080 	call	40806e08 <_Balloc>
408075e4:	10c00504 	addi	r3,r2,20
408075e8:	0540070e 	bge	zero,r21,40807608 <__lshift+0x80>
408075ec:	ad6b883a 	add	r21,r21,r21
408075f0:	ad6b883a 	add	r21,r21,r21
408075f4:	1809883a 	mov	r4,r3
408075f8:	1d47883a 	add	r3,r3,r21
408075fc:	20000015 	stw	zero,0(r4)
40807600:	21000104 	addi	r4,r4,4
40807604:	193ffd1e 	bne	r3,r4,408075fc <__alt_mem_onchip_flash_0_data+0xff7c75fc>
40807608:	8a000417 	ldw	r8,16(r17)
4080760c:	89000504 	addi	r4,r17,20
40807610:	a18007cc 	andi	r6,r20,31
40807614:	4211883a 	add	r8,r8,r8
40807618:	4211883a 	add	r8,r8,r8
4080761c:	2211883a 	add	r8,r4,r8
40807620:	30002326 	beq	r6,zero,408076b0 <__lshift+0x128>
40807624:	02400804 	movi	r9,32
40807628:	4993c83a 	sub	r9,r9,r6
4080762c:	000b883a 	mov	r5,zero
40807630:	21c00017 	ldw	r7,0(r4)
40807634:	1815883a 	mov	r10,r3
40807638:	18c00104 	addi	r3,r3,4
4080763c:	398e983a 	sll	r7,r7,r6
40807640:	21000104 	addi	r4,r4,4
40807644:	394ab03a 	or	r5,r7,r5
40807648:	197fff15 	stw	r5,-4(r3)
4080764c:	217fff17 	ldw	r5,-4(r4)
40807650:	2a4ad83a 	srl	r5,r5,r9
40807654:	223ff636 	bltu	r4,r8,40807630 <__alt_mem_onchip_flash_0_data+0xff7c7630>
40807658:	51400115 	stw	r5,4(r10)
4080765c:	28001a1e 	bne	r5,zero,408076c8 <__lshift+0x140>
40807660:	843fffc4 	addi	r16,r16,-1
40807664:	14000415 	stw	r16,16(r2)
40807668:	88000826 	beq	r17,zero,4080768c <__lshift+0x104>
4080766c:	89000117 	ldw	r4,4(r17)
40807670:	90c01317 	ldw	r3,76(r18)
40807674:	2109883a 	add	r4,r4,r4
40807678:	2109883a 	add	r4,r4,r4
4080767c:	1907883a 	add	r3,r3,r4
40807680:	19000017 	ldw	r4,0(r3)
40807684:	89000015 	stw	r4,0(r17)
40807688:	1c400015 	stw	r17,0(r3)
4080768c:	dfc00617 	ldw	ra,24(sp)
40807690:	dd400517 	ldw	r21,20(sp)
40807694:	dd000417 	ldw	r20,16(sp)
40807698:	dcc00317 	ldw	r19,12(sp)
4080769c:	dc800217 	ldw	r18,8(sp)
408076a0:	dc400117 	ldw	r17,4(sp)
408076a4:	dc000017 	ldw	r16,0(sp)
408076a8:	dec00704 	addi	sp,sp,28
408076ac:	f800283a 	ret
408076b0:	21400017 	ldw	r5,0(r4)
408076b4:	18c00104 	addi	r3,r3,4
408076b8:	21000104 	addi	r4,r4,4
408076bc:	197fff15 	stw	r5,-4(r3)
408076c0:	223ffb36 	bltu	r4,r8,408076b0 <__alt_mem_onchip_flash_0_data+0xff7c76b0>
408076c4:	003fe606 	br	40807660 <__alt_mem_onchip_flash_0_data+0xff7c7660>
408076c8:	9c000084 	addi	r16,r19,2
408076cc:	003fe406 	br	40807660 <__alt_mem_onchip_flash_0_data+0xff7c7660>

408076d0 <__mcmp>:
408076d0:	20800417 	ldw	r2,16(r4)
408076d4:	28c00417 	ldw	r3,16(r5)
408076d8:	10c5c83a 	sub	r2,r2,r3
408076dc:	1000111e 	bne	r2,zero,40807724 <__mcmp+0x54>
408076e0:	18c7883a 	add	r3,r3,r3
408076e4:	18c7883a 	add	r3,r3,r3
408076e8:	21000504 	addi	r4,r4,20
408076ec:	29400504 	addi	r5,r5,20
408076f0:	20c5883a 	add	r2,r4,r3
408076f4:	28cb883a 	add	r5,r5,r3
408076f8:	00000106 	br	40807700 <__mcmp+0x30>
408076fc:	20800a2e 	bgeu	r4,r2,40807728 <__mcmp+0x58>
40807700:	10bfff04 	addi	r2,r2,-4
40807704:	297fff04 	addi	r5,r5,-4
40807708:	11800017 	ldw	r6,0(r2)
4080770c:	28c00017 	ldw	r3,0(r5)
40807710:	30fffa26 	beq	r6,r3,408076fc <__alt_mem_onchip_flash_0_data+0xff7c76fc>
40807714:	30c00236 	bltu	r6,r3,40807720 <__mcmp+0x50>
40807718:	00800044 	movi	r2,1
4080771c:	f800283a 	ret
40807720:	00bfffc4 	movi	r2,-1
40807724:	f800283a 	ret
40807728:	0005883a 	mov	r2,zero
4080772c:	f800283a 	ret

40807730 <__mdiff>:
40807730:	28c00417 	ldw	r3,16(r5)
40807734:	30800417 	ldw	r2,16(r6)
40807738:	defffa04 	addi	sp,sp,-24
4080773c:	dcc00315 	stw	r19,12(sp)
40807740:	dc800215 	stw	r18,8(sp)
40807744:	dfc00515 	stw	ra,20(sp)
40807748:	dd000415 	stw	r20,16(sp)
4080774c:	dc400115 	stw	r17,4(sp)
40807750:	dc000015 	stw	r16,0(sp)
40807754:	1887c83a 	sub	r3,r3,r2
40807758:	2825883a 	mov	r18,r5
4080775c:	3027883a 	mov	r19,r6
40807760:	1800141e 	bne	r3,zero,408077b4 <__mdiff+0x84>
40807764:	1085883a 	add	r2,r2,r2
40807768:	1085883a 	add	r2,r2,r2
4080776c:	2a000504 	addi	r8,r5,20
40807770:	34000504 	addi	r16,r6,20
40807774:	4087883a 	add	r3,r8,r2
40807778:	8085883a 	add	r2,r16,r2
4080777c:	00000106 	br	40807784 <__mdiff+0x54>
40807780:	40c0592e 	bgeu	r8,r3,408078e8 <__mdiff+0x1b8>
40807784:	18ffff04 	addi	r3,r3,-4
40807788:	10bfff04 	addi	r2,r2,-4
4080778c:	19c00017 	ldw	r7,0(r3)
40807790:	11400017 	ldw	r5,0(r2)
40807794:	397ffa26 	beq	r7,r5,40807780 <__alt_mem_onchip_flash_0_data+0xff7c7780>
40807798:	3940592e 	bgeu	r7,r5,40807900 <__mdiff+0x1d0>
4080779c:	9005883a 	mov	r2,r18
408077a0:	4023883a 	mov	r17,r8
408077a4:	9825883a 	mov	r18,r19
408077a8:	05000044 	movi	r20,1
408077ac:	1027883a 	mov	r19,r2
408077b0:	00000406 	br	408077c4 <__mdiff+0x94>
408077b4:	18005616 	blt	r3,zero,40807910 <__mdiff+0x1e0>
408077b8:	34400504 	addi	r17,r6,20
408077bc:	2c000504 	addi	r16,r5,20
408077c0:	0029883a 	mov	r20,zero
408077c4:	91400117 	ldw	r5,4(r18)
408077c8:	0806e080 	call	40806e08 <_Balloc>
408077cc:	92400417 	ldw	r9,16(r18)
408077d0:	9b000417 	ldw	r12,16(r19)
408077d4:	12c00504 	addi	r11,r2,20
408077d8:	4a51883a 	add	r8,r9,r9
408077dc:	6319883a 	add	r12,r12,r12
408077e0:	4211883a 	add	r8,r8,r8
408077e4:	6319883a 	add	r12,r12,r12
408077e8:	15000315 	stw	r20,12(r2)
408077ec:	8211883a 	add	r8,r16,r8
408077f0:	8b19883a 	add	r12,r17,r12
408077f4:	0007883a 	mov	r3,zero
408077f8:	81400017 	ldw	r5,0(r16)
408077fc:	89c00017 	ldw	r7,0(r17)
40807800:	59800104 	addi	r6,r11,4
40807804:	293fffcc 	andi	r4,r5,65535
40807808:	20c7883a 	add	r3,r4,r3
4080780c:	393fffcc 	andi	r4,r7,65535
40807810:	1909c83a 	sub	r4,r3,r4
40807814:	280ad43a 	srli	r5,r5,16
40807818:	380ed43a 	srli	r7,r7,16
4080781c:	2007d43a 	srai	r3,r4,16
40807820:	213fffcc 	andi	r4,r4,65535
40807824:	29cbc83a 	sub	r5,r5,r7
40807828:	28c7883a 	add	r3,r5,r3
4080782c:	180a943a 	slli	r5,r3,16
40807830:	8c400104 	addi	r17,r17,4
40807834:	84000104 	addi	r16,r16,4
40807838:	2908b03a 	or	r4,r5,r4
4080783c:	59000015 	stw	r4,0(r11)
40807840:	1807d43a 	srai	r3,r3,16
40807844:	3015883a 	mov	r10,r6
40807848:	3017883a 	mov	r11,r6
4080784c:	8b3fea36 	bltu	r17,r12,408077f8 <__alt_mem_onchip_flash_0_data+0xff7c77f8>
40807850:	8200162e 	bgeu	r16,r8,408078ac <__mdiff+0x17c>
40807854:	8017883a 	mov	r11,r16
40807858:	59400017 	ldw	r5,0(r11)
4080785c:	31800104 	addi	r6,r6,4
40807860:	5ac00104 	addi	r11,r11,4
40807864:	293fffcc 	andi	r4,r5,65535
40807868:	20c7883a 	add	r3,r4,r3
4080786c:	280ed43a 	srli	r7,r5,16
40807870:	180bd43a 	srai	r5,r3,16
40807874:	193fffcc 	andi	r4,r3,65535
40807878:	3947883a 	add	r3,r7,r5
4080787c:	180a943a 	slli	r5,r3,16
40807880:	1807d43a 	srai	r3,r3,16
40807884:	2908b03a 	or	r4,r5,r4
40807888:	313fff15 	stw	r4,-4(r6)
4080788c:	5a3ff236 	bltu	r11,r8,40807858 <__alt_mem_onchip_flash_0_data+0xff7c7858>
40807890:	0406303a 	nor	r3,zero,r16
40807894:	1a07883a 	add	r3,r3,r8
40807898:	1806d0ba 	srli	r3,r3,2
4080789c:	18c00044 	addi	r3,r3,1
408078a0:	18c7883a 	add	r3,r3,r3
408078a4:	18c7883a 	add	r3,r3,r3
408078a8:	50d5883a 	add	r10,r10,r3
408078ac:	50ffff04 	addi	r3,r10,-4
408078b0:	2000041e 	bne	r4,zero,408078c4 <__mdiff+0x194>
408078b4:	18ffff04 	addi	r3,r3,-4
408078b8:	19000017 	ldw	r4,0(r3)
408078bc:	4a7fffc4 	addi	r9,r9,-1
408078c0:	203ffc26 	beq	r4,zero,408078b4 <__alt_mem_onchip_flash_0_data+0xff7c78b4>
408078c4:	12400415 	stw	r9,16(r2)
408078c8:	dfc00517 	ldw	ra,20(sp)
408078cc:	dd000417 	ldw	r20,16(sp)
408078d0:	dcc00317 	ldw	r19,12(sp)
408078d4:	dc800217 	ldw	r18,8(sp)
408078d8:	dc400117 	ldw	r17,4(sp)
408078dc:	dc000017 	ldw	r16,0(sp)
408078e0:	dec00604 	addi	sp,sp,24
408078e4:	f800283a 	ret
408078e8:	000b883a 	mov	r5,zero
408078ec:	0806e080 	call	40806e08 <_Balloc>
408078f0:	00c00044 	movi	r3,1
408078f4:	10c00415 	stw	r3,16(r2)
408078f8:	10000515 	stw	zero,20(r2)
408078fc:	003ff206 	br	408078c8 <__alt_mem_onchip_flash_0_data+0xff7c78c8>
40807900:	8023883a 	mov	r17,r16
40807904:	0029883a 	mov	r20,zero
40807908:	4021883a 	mov	r16,r8
4080790c:	003fad06 	br	408077c4 <__alt_mem_onchip_flash_0_data+0xff7c77c4>
40807910:	9005883a 	mov	r2,r18
40807914:	94400504 	addi	r17,r18,20
40807918:	9c000504 	addi	r16,r19,20
4080791c:	9825883a 	mov	r18,r19
40807920:	05000044 	movi	r20,1
40807924:	1027883a 	mov	r19,r2
40807928:	003fa606 	br	408077c4 <__alt_mem_onchip_flash_0_data+0xff7c77c4>

4080792c <__ulp>:
4080792c:	295ffc2c 	andhi	r5,r5,32752
40807930:	00bf3034 	movhi	r2,64704
40807934:	2887883a 	add	r3,r5,r2
40807938:	00c0020e 	bge	zero,r3,40807944 <__ulp+0x18>
4080793c:	0005883a 	mov	r2,zero
40807940:	f800283a 	ret
40807944:	00c7c83a 	sub	r3,zero,r3
40807948:	1807d53a 	srai	r3,r3,20
4080794c:	008004c4 	movi	r2,19
40807950:	10c00b0e 	bge	r2,r3,40807980 <__ulp+0x54>
40807954:	18bffb04 	addi	r2,r3,-20
40807958:	01000784 	movi	r4,30
4080795c:	0007883a 	mov	r3,zero
40807960:	20800516 	blt	r4,r2,40807978 <__ulp+0x4c>
40807964:	010007c4 	movi	r4,31
40807968:	2089c83a 	sub	r4,r4,r2
4080796c:	00800044 	movi	r2,1
40807970:	1104983a 	sll	r2,r2,r4
40807974:	f800283a 	ret
40807978:	00800044 	movi	r2,1
4080797c:	f800283a 	ret
40807980:	01400234 	movhi	r5,8
40807984:	28c7d83a 	sra	r3,r5,r3
40807988:	0005883a 	mov	r2,zero
4080798c:	f800283a 	ret

40807990 <__b2d>:
40807990:	defffa04 	addi	sp,sp,-24
40807994:	dc000015 	stw	r16,0(sp)
40807998:	24000417 	ldw	r16,16(r4)
4080799c:	dc400115 	stw	r17,4(sp)
408079a0:	24400504 	addi	r17,r4,20
408079a4:	8421883a 	add	r16,r16,r16
408079a8:	8421883a 	add	r16,r16,r16
408079ac:	8c21883a 	add	r16,r17,r16
408079b0:	dc800215 	stw	r18,8(sp)
408079b4:	84bfff17 	ldw	r18,-4(r16)
408079b8:	dd000415 	stw	r20,16(sp)
408079bc:	dcc00315 	stw	r19,12(sp)
408079c0:	9009883a 	mov	r4,r18
408079c4:	2829883a 	mov	r20,r5
408079c8:	dfc00515 	stw	ra,20(sp)
408079cc:	08070fc0 	call	408070fc <__hi0bits>
408079d0:	00c00804 	movi	r3,32
408079d4:	1889c83a 	sub	r4,r3,r2
408079d8:	a1000015 	stw	r4,0(r20)
408079dc:	01000284 	movi	r4,10
408079e0:	84ffff04 	addi	r19,r16,-4
408079e4:	20801216 	blt	r4,r2,40807a30 <__b2d+0xa0>
408079e8:	018002c4 	movi	r6,11
408079ec:	308dc83a 	sub	r6,r6,r2
408079f0:	9186d83a 	srl	r3,r18,r6
408079f4:	18cffc34 	orhi	r3,r3,16368
408079f8:	8cc0212e 	bgeu	r17,r19,40807a80 <__b2d+0xf0>
408079fc:	813ffe17 	ldw	r4,-8(r16)
40807a00:	218cd83a 	srl	r6,r4,r6
40807a04:	10800544 	addi	r2,r2,21
40807a08:	9084983a 	sll	r2,r18,r2
40807a0c:	1184b03a 	or	r2,r2,r6
40807a10:	dfc00517 	ldw	ra,20(sp)
40807a14:	dd000417 	ldw	r20,16(sp)
40807a18:	dcc00317 	ldw	r19,12(sp)
40807a1c:	dc800217 	ldw	r18,8(sp)
40807a20:	dc400117 	ldw	r17,4(sp)
40807a24:	dc000017 	ldw	r16,0(sp)
40807a28:	dec00604 	addi	sp,sp,24
40807a2c:	f800283a 	ret
40807a30:	8cc00f2e 	bgeu	r17,r19,40807a70 <__b2d+0xe0>
40807a34:	117ffd44 	addi	r5,r2,-11
40807a38:	80bffe17 	ldw	r2,-8(r16)
40807a3c:	28000e26 	beq	r5,zero,40807a78 <__b2d+0xe8>
40807a40:	1949c83a 	sub	r4,r3,r5
40807a44:	9164983a 	sll	r18,r18,r5
40807a48:	1106d83a 	srl	r3,r2,r4
40807a4c:	81bffe04 	addi	r6,r16,-8
40807a50:	948ffc34 	orhi	r18,r18,16368
40807a54:	90c6b03a 	or	r3,r18,r3
40807a58:	89800e2e 	bgeu	r17,r6,40807a94 <__b2d+0x104>
40807a5c:	81bffd17 	ldw	r6,-12(r16)
40807a60:	1144983a 	sll	r2,r2,r5
40807a64:	310ad83a 	srl	r5,r6,r4
40807a68:	2884b03a 	or	r2,r5,r2
40807a6c:	003fe806 	br	40807a10 <__alt_mem_onchip_flash_0_data+0xff7c7a10>
40807a70:	10bffd44 	addi	r2,r2,-11
40807a74:	1000041e 	bne	r2,zero,40807a88 <__b2d+0xf8>
40807a78:	90cffc34 	orhi	r3,r18,16368
40807a7c:	003fe406 	br	40807a10 <__alt_mem_onchip_flash_0_data+0xff7c7a10>
40807a80:	000d883a 	mov	r6,zero
40807a84:	003fdf06 	br	40807a04 <__alt_mem_onchip_flash_0_data+0xff7c7a04>
40807a88:	90a4983a 	sll	r18,r18,r2
40807a8c:	0005883a 	mov	r2,zero
40807a90:	003ff906 	br	40807a78 <__alt_mem_onchip_flash_0_data+0xff7c7a78>
40807a94:	1144983a 	sll	r2,r2,r5
40807a98:	003fdd06 	br	40807a10 <__alt_mem_onchip_flash_0_data+0xff7c7a10>

40807a9c <__d2b>:
40807a9c:	defff804 	addi	sp,sp,-32
40807aa0:	dc000215 	stw	r16,8(sp)
40807aa4:	3021883a 	mov	r16,r6
40807aa8:	dc400315 	stw	r17,12(sp)
40807aac:	8022907a 	slli	r17,r16,1
40807ab0:	dd000615 	stw	r20,24(sp)
40807ab4:	2829883a 	mov	r20,r5
40807ab8:	01400044 	movi	r5,1
40807abc:	dcc00515 	stw	r19,20(sp)
40807ac0:	dc800415 	stw	r18,16(sp)
40807ac4:	dfc00715 	stw	ra,28(sp)
40807ac8:	3825883a 	mov	r18,r7
40807acc:	8822d57a 	srli	r17,r17,21
40807ad0:	0806e080 	call	40806e08 <_Balloc>
40807ad4:	1027883a 	mov	r19,r2
40807ad8:	00800434 	movhi	r2,16
40807adc:	10bfffc4 	addi	r2,r2,-1
40807ae0:	808c703a 	and	r6,r16,r2
40807ae4:	88000126 	beq	r17,zero,40807aec <__d2b+0x50>
40807ae8:	31800434 	orhi	r6,r6,16
40807aec:	d9800015 	stw	r6,0(sp)
40807af0:	a0002426 	beq	r20,zero,40807b84 <__d2b+0xe8>
40807af4:	d9000104 	addi	r4,sp,4
40807af8:	dd000115 	stw	r20,4(sp)
40807afc:	08071640 	call	40807164 <__lo0bits>
40807b00:	d8c00017 	ldw	r3,0(sp)
40807b04:	10002f1e 	bne	r2,zero,40807bc4 <__d2b+0x128>
40807b08:	d9000117 	ldw	r4,4(sp)
40807b0c:	99000515 	stw	r4,20(r19)
40807b10:	1821003a 	cmpeq	r16,r3,zero
40807b14:	01000084 	movi	r4,2
40807b18:	2421c83a 	sub	r16,r4,r16
40807b1c:	98c00615 	stw	r3,24(r19)
40807b20:	9c000415 	stw	r16,16(r19)
40807b24:	88001f1e 	bne	r17,zero,40807ba4 <__d2b+0x108>
40807b28:	10bef384 	addi	r2,r2,-1074
40807b2c:	90800015 	stw	r2,0(r18)
40807b30:	00900034 	movhi	r2,16384
40807b34:	10bfffc4 	addi	r2,r2,-1
40807b38:	8085883a 	add	r2,r16,r2
40807b3c:	1085883a 	add	r2,r2,r2
40807b40:	1085883a 	add	r2,r2,r2
40807b44:	9885883a 	add	r2,r19,r2
40807b48:	11000517 	ldw	r4,20(r2)
40807b4c:	8020917a 	slli	r16,r16,5
40807b50:	08070fc0 	call	408070fc <__hi0bits>
40807b54:	d8c00817 	ldw	r3,32(sp)
40807b58:	8085c83a 	sub	r2,r16,r2
40807b5c:	18800015 	stw	r2,0(r3)
40807b60:	9805883a 	mov	r2,r19
40807b64:	dfc00717 	ldw	ra,28(sp)
40807b68:	dd000617 	ldw	r20,24(sp)
40807b6c:	dcc00517 	ldw	r19,20(sp)
40807b70:	dc800417 	ldw	r18,16(sp)
40807b74:	dc400317 	ldw	r17,12(sp)
40807b78:	dc000217 	ldw	r16,8(sp)
40807b7c:	dec00804 	addi	sp,sp,32
40807b80:	f800283a 	ret
40807b84:	d809883a 	mov	r4,sp
40807b88:	08071640 	call	40807164 <__lo0bits>
40807b8c:	d8c00017 	ldw	r3,0(sp)
40807b90:	04000044 	movi	r16,1
40807b94:	9c000415 	stw	r16,16(r19)
40807b98:	98c00515 	stw	r3,20(r19)
40807b9c:	10800804 	addi	r2,r2,32
40807ba0:	883fe126 	beq	r17,zero,40807b28 <__alt_mem_onchip_flash_0_data+0xff7c7b28>
40807ba4:	00c00d44 	movi	r3,53
40807ba8:	8c7ef344 	addi	r17,r17,-1075
40807bac:	88a3883a 	add	r17,r17,r2
40807bb0:	1885c83a 	sub	r2,r3,r2
40807bb4:	d8c00817 	ldw	r3,32(sp)
40807bb8:	94400015 	stw	r17,0(r18)
40807bbc:	18800015 	stw	r2,0(r3)
40807bc0:	003fe706 	br	40807b60 <__alt_mem_onchip_flash_0_data+0xff7c7b60>
40807bc4:	01000804 	movi	r4,32
40807bc8:	2089c83a 	sub	r4,r4,r2
40807bcc:	1908983a 	sll	r4,r3,r4
40807bd0:	d9400117 	ldw	r5,4(sp)
40807bd4:	1886d83a 	srl	r3,r3,r2
40807bd8:	2148b03a 	or	r4,r4,r5
40807bdc:	99000515 	stw	r4,20(r19)
40807be0:	d8c00015 	stw	r3,0(sp)
40807be4:	003fca06 	br	40807b10 <__alt_mem_onchip_flash_0_data+0xff7c7b10>

40807be8 <__ratio>:
40807be8:	defff904 	addi	sp,sp,-28
40807bec:	dc400315 	stw	r17,12(sp)
40807bf0:	2823883a 	mov	r17,r5
40807bf4:	d9400104 	addi	r5,sp,4
40807bf8:	dfc00615 	stw	ra,24(sp)
40807bfc:	dcc00515 	stw	r19,20(sp)
40807c00:	dc800415 	stw	r18,16(sp)
40807c04:	2027883a 	mov	r19,r4
40807c08:	dc000215 	stw	r16,8(sp)
40807c0c:	08079900 	call	40807990 <__b2d>
40807c10:	d80b883a 	mov	r5,sp
40807c14:	8809883a 	mov	r4,r17
40807c18:	1025883a 	mov	r18,r2
40807c1c:	1821883a 	mov	r16,r3
40807c20:	08079900 	call	40807990 <__b2d>
40807c24:	8a000417 	ldw	r8,16(r17)
40807c28:	99000417 	ldw	r4,16(r19)
40807c2c:	d9400117 	ldw	r5,4(sp)
40807c30:	2209c83a 	sub	r4,r4,r8
40807c34:	2010917a 	slli	r8,r4,5
40807c38:	d9000017 	ldw	r4,0(sp)
40807c3c:	2909c83a 	sub	r4,r5,r4
40807c40:	4109883a 	add	r4,r8,r4
40807c44:	01000e0e 	bge	zero,r4,40807c80 <__ratio+0x98>
40807c48:	2008953a 	slli	r4,r4,20
40807c4c:	2421883a 	add	r16,r4,r16
40807c50:	100d883a 	mov	r6,r2
40807c54:	180f883a 	mov	r7,r3
40807c58:	9009883a 	mov	r4,r18
40807c5c:	800b883a 	mov	r5,r16
40807c60:	080bad40 	call	4080bad4 <__divdf3>
40807c64:	dfc00617 	ldw	ra,24(sp)
40807c68:	dcc00517 	ldw	r19,20(sp)
40807c6c:	dc800417 	ldw	r18,16(sp)
40807c70:	dc400317 	ldw	r17,12(sp)
40807c74:	dc000217 	ldw	r16,8(sp)
40807c78:	dec00704 	addi	sp,sp,28
40807c7c:	f800283a 	ret
40807c80:	2008953a 	slli	r4,r4,20
40807c84:	1907c83a 	sub	r3,r3,r4
40807c88:	003ff106 	br	40807c50 <__alt_mem_onchip_flash_0_data+0xff7c7c50>

40807c8c <_mprec_log10>:
40807c8c:	defffe04 	addi	sp,sp,-8
40807c90:	dc000015 	stw	r16,0(sp)
40807c94:	dfc00115 	stw	ra,4(sp)
40807c98:	008005c4 	movi	r2,23
40807c9c:	2021883a 	mov	r16,r4
40807ca0:	11000d0e 	bge	r2,r4,40807cd8 <_mprec_log10+0x4c>
40807ca4:	0005883a 	mov	r2,zero
40807ca8:	00cffc34 	movhi	r3,16368
40807cac:	843fffc4 	addi	r16,r16,-1
40807cb0:	000d883a 	mov	r6,zero
40807cb4:	01d00934 	movhi	r7,16420
40807cb8:	1009883a 	mov	r4,r2
40807cbc:	180b883a 	mov	r5,r3
40807cc0:	080c6140 	call	4080c614 <__muldf3>
40807cc4:	803ff91e 	bne	r16,zero,40807cac <__alt_mem_onchip_flash_0_data+0xff7c7cac>
40807cc8:	dfc00117 	ldw	ra,4(sp)
40807ccc:	dc000017 	ldw	r16,0(sp)
40807cd0:	dec00204 	addi	sp,sp,8
40807cd4:	f800283a 	ret
40807cd8:	202090fa 	slli	r16,r4,3
40807cdc:	00902074 	movhi	r2,16513
40807ce0:	1086dd04 	addi	r2,r2,7028
40807ce4:	1421883a 	add	r16,r2,r16
40807ce8:	80800017 	ldw	r2,0(r16)
40807cec:	80c00117 	ldw	r3,4(r16)
40807cf0:	dfc00117 	ldw	ra,4(sp)
40807cf4:	dc000017 	ldw	r16,0(sp)
40807cf8:	dec00204 	addi	sp,sp,8
40807cfc:	f800283a 	ret

40807d00 <__copybits>:
40807d00:	297fffc4 	addi	r5,r5,-1
40807d04:	280fd17a 	srai	r7,r5,5
40807d08:	30c00417 	ldw	r3,16(r6)
40807d0c:	30800504 	addi	r2,r6,20
40807d10:	39c00044 	addi	r7,r7,1
40807d14:	18c7883a 	add	r3,r3,r3
40807d18:	39cf883a 	add	r7,r7,r7
40807d1c:	18c7883a 	add	r3,r3,r3
40807d20:	39cf883a 	add	r7,r7,r7
40807d24:	10c7883a 	add	r3,r2,r3
40807d28:	21cf883a 	add	r7,r4,r7
40807d2c:	10c00d2e 	bgeu	r2,r3,40807d64 <__copybits+0x64>
40807d30:	200b883a 	mov	r5,r4
40807d34:	12000017 	ldw	r8,0(r2)
40807d38:	29400104 	addi	r5,r5,4
40807d3c:	10800104 	addi	r2,r2,4
40807d40:	2a3fff15 	stw	r8,-4(r5)
40807d44:	10fffb36 	bltu	r2,r3,40807d34 <__alt_mem_onchip_flash_0_data+0xff7c7d34>
40807d48:	1985c83a 	sub	r2,r3,r6
40807d4c:	10bffac4 	addi	r2,r2,-21
40807d50:	1004d0ba 	srli	r2,r2,2
40807d54:	10800044 	addi	r2,r2,1
40807d58:	1085883a 	add	r2,r2,r2
40807d5c:	1085883a 	add	r2,r2,r2
40807d60:	2089883a 	add	r4,r4,r2
40807d64:	21c0032e 	bgeu	r4,r7,40807d74 <__copybits+0x74>
40807d68:	20000015 	stw	zero,0(r4)
40807d6c:	21000104 	addi	r4,r4,4
40807d70:	21fffd36 	bltu	r4,r7,40807d68 <__alt_mem_onchip_flash_0_data+0xff7c7d68>
40807d74:	f800283a 	ret

40807d78 <__any_on>:
40807d78:	20c00417 	ldw	r3,16(r4)
40807d7c:	2805d17a 	srai	r2,r5,5
40807d80:	21000504 	addi	r4,r4,20
40807d84:	18800d0e 	bge	r3,r2,40807dbc <__any_on+0x44>
40807d88:	18c7883a 	add	r3,r3,r3
40807d8c:	18c7883a 	add	r3,r3,r3
40807d90:	20c7883a 	add	r3,r4,r3
40807d94:	20c0192e 	bgeu	r4,r3,40807dfc <__any_on+0x84>
40807d98:	18bfff17 	ldw	r2,-4(r3)
40807d9c:	18ffff04 	addi	r3,r3,-4
40807da0:	1000041e 	bne	r2,zero,40807db4 <__any_on+0x3c>
40807da4:	20c0142e 	bgeu	r4,r3,40807df8 <__any_on+0x80>
40807da8:	18ffff04 	addi	r3,r3,-4
40807dac:	19400017 	ldw	r5,0(r3)
40807db0:	283ffc26 	beq	r5,zero,40807da4 <__alt_mem_onchip_flash_0_data+0xff7c7da4>
40807db4:	00800044 	movi	r2,1
40807db8:	f800283a 	ret
40807dbc:	10c00a0e 	bge	r2,r3,40807de8 <__any_on+0x70>
40807dc0:	1085883a 	add	r2,r2,r2
40807dc4:	1085883a 	add	r2,r2,r2
40807dc8:	294007cc 	andi	r5,r5,31
40807dcc:	2087883a 	add	r3,r4,r2
40807dd0:	283ff026 	beq	r5,zero,40807d94 <__alt_mem_onchip_flash_0_data+0xff7c7d94>
40807dd4:	19800017 	ldw	r6,0(r3)
40807dd8:	3144d83a 	srl	r2,r6,r5
40807ddc:	114a983a 	sll	r5,r2,r5
40807de0:	317ff41e 	bne	r6,r5,40807db4 <__alt_mem_onchip_flash_0_data+0xff7c7db4>
40807de4:	003feb06 	br	40807d94 <__alt_mem_onchip_flash_0_data+0xff7c7d94>
40807de8:	1085883a 	add	r2,r2,r2
40807dec:	1085883a 	add	r2,r2,r2
40807df0:	2087883a 	add	r3,r4,r2
40807df4:	003fe706 	br	40807d94 <__alt_mem_onchip_flash_0_data+0xff7c7d94>
40807df8:	f800283a 	ret
40807dfc:	0005883a 	mov	r2,zero
40807e00:	f800283a 	ret

40807e04 <_realloc_r>:
40807e04:	defff604 	addi	sp,sp,-40
40807e08:	dc800215 	stw	r18,8(sp)
40807e0c:	dfc00915 	stw	ra,36(sp)
40807e10:	df000815 	stw	fp,32(sp)
40807e14:	ddc00715 	stw	r23,28(sp)
40807e18:	dd800615 	stw	r22,24(sp)
40807e1c:	dd400515 	stw	r21,20(sp)
40807e20:	dd000415 	stw	r20,16(sp)
40807e24:	dcc00315 	stw	r19,12(sp)
40807e28:	dc400115 	stw	r17,4(sp)
40807e2c:	dc000015 	stw	r16,0(sp)
40807e30:	3025883a 	mov	r18,r6
40807e34:	2800b726 	beq	r5,zero,40808114 <_realloc_r+0x310>
40807e38:	282b883a 	mov	r21,r5
40807e3c:	2029883a 	mov	r20,r4
40807e40:	080dcbc0 	call	4080dcbc <__malloc_lock>
40807e44:	a8bfff17 	ldw	r2,-4(r21)
40807e48:	043fff04 	movi	r16,-4
40807e4c:	90c002c4 	addi	r3,r18,11
40807e50:	01000584 	movi	r4,22
40807e54:	acfffe04 	addi	r19,r21,-8
40807e58:	1420703a 	and	r16,r2,r16
40807e5c:	20c0332e 	bgeu	r4,r3,40807f2c <_realloc_r+0x128>
40807e60:	047ffe04 	movi	r17,-8
40807e64:	1c62703a 	and	r17,r3,r17
40807e68:	8807883a 	mov	r3,r17
40807e6c:	88005816 	blt	r17,zero,40807fd0 <_realloc_r+0x1cc>
40807e70:	8c805736 	bltu	r17,r18,40807fd0 <_realloc_r+0x1cc>
40807e74:	80c0300e 	bge	r16,r3,40807f38 <_realloc_r+0x134>
40807e78:	07102074 	movhi	fp,16513
40807e7c:	e708aa04 	addi	fp,fp,8872
40807e80:	e1c00217 	ldw	r7,8(fp)
40807e84:	9c09883a 	add	r4,r19,r16
40807e88:	22000117 	ldw	r8,4(r4)
40807e8c:	21c06326 	beq	r4,r7,4080801c <_realloc_r+0x218>
40807e90:	017fff84 	movi	r5,-2
40807e94:	414a703a 	and	r5,r8,r5
40807e98:	214b883a 	add	r5,r4,r5
40807e9c:	29800117 	ldw	r6,4(r5)
40807ea0:	3180004c 	andi	r6,r6,1
40807ea4:	30003f26 	beq	r6,zero,40807fa4 <_realloc_r+0x1a0>
40807ea8:	1080004c 	andi	r2,r2,1
40807eac:	10008326 	beq	r2,zero,408080bc <_realloc_r+0x2b8>
40807eb0:	900b883a 	mov	r5,r18
40807eb4:	a009883a 	mov	r4,r20
40807eb8:	08062740 	call	40806274 <_malloc_r>
40807ebc:	1025883a 	mov	r18,r2
40807ec0:	10011e26 	beq	r2,zero,4080833c <_realloc_r+0x538>
40807ec4:	a93fff17 	ldw	r4,-4(r21)
40807ec8:	10fffe04 	addi	r3,r2,-8
40807ecc:	00bfff84 	movi	r2,-2
40807ed0:	2084703a 	and	r2,r4,r2
40807ed4:	9885883a 	add	r2,r19,r2
40807ed8:	1880ee26 	beq	r3,r2,40808294 <_realloc_r+0x490>
40807edc:	81bfff04 	addi	r6,r16,-4
40807ee0:	00800904 	movi	r2,36
40807ee4:	1180b836 	bltu	r2,r6,408081c8 <_realloc_r+0x3c4>
40807ee8:	00c004c4 	movi	r3,19
40807eec:	19809636 	bltu	r3,r6,40808148 <_realloc_r+0x344>
40807ef0:	9005883a 	mov	r2,r18
40807ef4:	a807883a 	mov	r3,r21
40807ef8:	19000017 	ldw	r4,0(r3)
40807efc:	11000015 	stw	r4,0(r2)
40807f00:	19000117 	ldw	r4,4(r3)
40807f04:	11000115 	stw	r4,4(r2)
40807f08:	18c00217 	ldw	r3,8(r3)
40807f0c:	10c00215 	stw	r3,8(r2)
40807f10:	a80b883a 	mov	r5,r21
40807f14:	a009883a 	mov	r4,r20
40807f18:	08056880 	call	40805688 <_free_r>
40807f1c:	a009883a 	mov	r4,r20
40807f20:	080dce00 	call	4080dce0 <__malloc_unlock>
40807f24:	9005883a 	mov	r2,r18
40807f28:	00001206 	br	40807f74 <_realloc_r+0x170>
40807f2c:	00c00404 	movi	r3,16
40807f30:	1823883a 	mov	r17,r3
40807f34:	003fce06 	br	40807e70 <__alt_mem_onchip_flash_0_data+0xff7c7e70>
40807f38:	a825883a 	mov	r18,r21
40807f3c:	8445c83a 	sub	r2,r16,r17
40807f40:	00c003c4 	movi	r3,15
40807f44:	18802636 	bltu	r3,r2,40807fe0 <_realloc_r+0x1dc>
40807f48:	99800117 	ldw	r6,4(r19)
40807f4c:	9c07883a 	add	r3,r19,r16
40807f50:	3180004c 	andi	r6,r6,1
40807f54:	3420b03a 	or	r16,r6,r16
40807f58:	9c000115 	stw	r16,4(r19)
40807f5c:	18800117 	ldw	r2,4(r3)
40807f60:	10800054 	ori	r2,r2,1
40807f64:	18800115 	stw	r2,4(r3)
40807f68:	a009883a 	mov	r4,r20
40807f6c:	080dce00 	call	4080dce0 <__malloc_unlock>
40807f70:	9005883a 	mov	r2,r18
40807f74:	dfc00917 	ldw	ra,36(sp)
40807f78:	df000817 	ldw	fp,32(sp)
40807f7c:	ddc00717 	ldw	r23,28(sp)
40807f80:	dd800617 	ldw	r22,24(sp)
40807f84:	dd400517 	ldw	r21,20(sp)
40807f88:	dd000417 	ldw	r20,16(sp)
40807f8c:	dcc00317 	ldw	r19,12(sp)
40807f90:	dc800217 	ldw	r18,8(sp)
40807f94:	dc400117 	ldw	r17,4(sp)
40807f98:	dc000017 	ldw	r16,0(sp)
40807f9c:	dec00a04 	addi	sp,sp,40
40807fa0:	f800283a 	ret
40807fa4:	017fff04 	movi	r5,-4
40807fa8:	414a703a 	and	r5,r8,r5
40807fac:	814d883a 	add	r6,r16,r5
40807fb0:	30c01f16 	blt	r6,r3,40808030 <_realloc_r+0x22c>
40807fb4:	20800317 	ldw	r2,12(r4)
40807fb8:	20c00217 	ldw	r3,8(r4)
40807fbc:	a825883a 	mov	r18,r21
40807fc0:	3021883a 	mov	r16,r6
40807fc4:	18800315 	stw	r2,12(r3)
40807fc8:	10c00215 	stw	r3,8(r2)
40807fcc:	003fdb06 	br	40807f3c <__alt_mem_onchip_flash_0_data+0xff7c7f3c>
40807fd0:	00800304 	movi	r2,12
40807fd4:	a0800015 	stw	r2,0(r20)
40807fd8:	0005883a 	mov	r2,zero
40807fdc:	003fe506 	br	40807f74 <__alt_mem_onchip_flash_0_data+0xff7c7f74>
40807fe0:	98c00117 	ldw	r3,4(r19)
40807fe4:	9c4b883a 	add	r5,r19,r17
40807fe8:	11000054 	ori	r4,r2,1
40807fec:	18c0004c 	andi	r3,r3,1
40807ff0:	1c62b03a 	or	r17,r3,r17
40807ff4:	9c400115 	stw	r17,4(r19)
40807ff8:	29000115 	stw	r4,4(r5)
40807ffc:	2885883a 	add	r2,r5,r2
40808000:	10c00117 	ldw	r3,4(r2)
40808004:	29400204 	addi	r5,r5,8
40808008:	a009883a 	mov	r4,r20
4080800c:	18c00054 	ori	r3,r3,1
40808010:	10c00115 	stw	r3,4(r2)
40808014:	08056880 	call	40805688 <_free_r>
40808018:	003fd306 	br	40807f68 <__alt_mem_onchip_flash_0_data+0xff7c7f68>
4080801c:	017fff04 	movi	r5,-4
40808020:	414a703a 	and	r5,r8,r5
40808024:	89800404 	addi	r6,r17,16
40808028:	8151883a 	add	r8,r16,r5
4080802c:	4180590e 	bge	r8,r6,40808194 <_realloc_r+0x390>
40808030:	1080004c 	andi	r2,r2,1
40808034:	103f9e1e 	bne	r2,zero,40807eb0 <__alt_mem_onchip_flash_0_data+0xff7c7eb0>
40808038:	adbffe17 	ldw	r22,-8(r21)
4080803c:	00bfff04 	movi	r2,-4
40808040:	9dadc83a 	sub	r22,r19,r22
40808044:	b1800117 	ldw	r6,4(r22)
40808048:	3084703a 	and	r2,r6,r2
4080804c:	20002026 	beq	r4,zero,408080d0 <_realloc_r+0x2cc>
40808050:	80af883a 	add	r23,r16,r2
40808054:	b96f883a 	add	r23,r23,r5
40808058:	21c05f26 	beq	r4,r7,408081d8 <_realloc_r+0x3d4>
4080805c:	b8c01c16 	blt	r23,r3,408080d0 <_realloc_r+0x2cc>
40808060:	20800317 	ldw	r2,12(r4)
40808064:	20c00217 	ldw	r3,8(r4)
40808068:	81bfff04 	addi	r6,r16,-4
4080806c:	01000904 	movi	r4,36
40808070:	18800315 	stw	r2,12(r3)
40808074:	10c00215 	stw	r3,8(r2)
40808078:	b0c00217 	ldw	r3,8(r22)
4080807c:	b0800317 	ldw	r2,12(r22)
40808080:	b4800204 	addi	r18,r22,8
40808084:	18800315 	stw	r2,12(r3)
40808088:	10c00215 	stw	r3,8(r2)
4080808c:	21801b36 	bltu	r4,r6,408080fc <_realloc_r+0x2f8>
40808090:	008004c4 	movi	r2,19
40808094:	1180352e 	bgeu	r2,r6,4080816c <_realloc_r+0x368>
40808098:	a8800017 	ldw	r2,0(r21)
4080809c:	b0800215 	stw	r2,8(r22)
408080a0:	a8800117 	ldw	r2,4(r21)
408080a4:	b0800315 	stw	r2,12(r22)
408080a8:	008006c4 	movi	r2,27
408080ac:	11807f36 	bltu	r2,r6,408082ac <_realloc_r+0x4a8>
408080b0:	b0800404 	addi	r2,r22,16
408080b4:	ad400204 	addi	r21,r21,8
408080b8:	00002d06 	br	40808170 <_realloc_r+0x36c>
408080bc:	adbffe17 	ldw	r22,-8(r21)
408080c0:	00bfff04 	movi	r2,-4
408080c4:	9dadc83a 	sub	r22,r19,r22
408080c8:	b1000117 	ldw	r4,4(r22)
408080cc:	2084703a 	and	r2,r4,r2
408080d0:	b03f7726 	beq	r22,zero,40807eb0 <__alt_mem_onchip_flash_0_data+0xff7c7eb0>
408080d4:	80af883a 	add	r23,r16,r2
408080d8:	b8ff7516 	blt	r23,r3,40807eb0 <__alt_mem_onchip_flash_0_data+0xff7c7eb0>
408080dc:	b0800317 	ldw	r2,12(r22)
408080e0:	b0c00217 	ldw	r3,8(r22)
408080e4:	81bfff04 	addi	r6,r16,-4
408080e8:	01000904 	movi	r4,36
408080ec:	18800315 	stw	r2,12(r3)
408080f0:	10c00215 	stw	r3,8(r2)
408080f4:	b4800204 	addi	r18,r22,8
408080f8:	21bfe52e 	bgeu	r4,r6,40808090 <__alt_mem_onchip_flash_0_data+0xff7c8090>
408080fc:	a80b883a 	mov	r5,r21
40808100:	9009883a 	mov	r4,r18
40808104:	0806cac0 	call	40806cac <memmove>
40808108:	b821883a 	mov	r16,r23
4080810c:	b027883a 	mov	r19,r22
40808110:	003f8a06 	br	40807f3c <__alt_mem_onchip_flash_0_data+0xff7c7f3c>
40808114:	300b883a 	mov	r5,r6
40808118:	dfc00917 	ldw	ra,36(sp)
4080811c:	df000817 	ldw	fp,32(sp)
40808120:	ddc00717 	ldw	r23,28(sp)
40808124:	dd800617 	ldw	r22,24(sp)
40808128:	dd400517 	ldw	r21,20(sp)
4080812c:	dd000417 	ldw	r20,16(sp)
40808130:	dcc00317 	ldw	r19,12(sp)
40808134:	dc800217 	ldw	r18,8(sp)
40808138:	dc400117 	ldw	r17,4(sp)
4080813c:	dc000017 	ldw	r16,0(sp)
40808140:	dec00a04 	addi	sp,sp,40
40808144:	08062741 	jmpi	40806274 <_malloc_r>
40808148:	a8c00017 	ldw	r3,0(r21)
4080814c:	90c00015 	stw	r3,0(r18)
40808150:	a8c00117 	ldw	r3,4(r21)
40808154:	90c00115 	stw	r3,4(r18)
40808158:	00c006c4 	movi	r3,27
4080815c:	19804536 	bltu	r3,r6,40808274 <_realloc_r+0x470>
40808160:	90800204 	addi	r2,r18,8
40808164:	a8c00204 	addi	r3,r21,8
40808168:	003f6306 	br	40807ef8 <__alt_mem_onchip_flash_0_data+0xff7c7ef8>
4080816c:	9005883a 	mov	r2,r18
40808170:	a8c00017 	ldw	r3,0(r21)
40808174:	b821883a 	mov	r16,r23
40808178:	b027883a 	mov	r19,r22
4080817c:	10c00015 	stw	r3,0(r2)
40808180:	a8c00117 	ldw	r3,4(r21)
40808184:	10c00115 	stw	r3,4(r2)
40808188:	a8c00217 	ldw	r3,8(r21)
4080818c:	10c00215 	stw	r3,8(r2)
40808190:	003f6a06 	br	40807f3c <__alt_mem_onchip_flash_0_data+0xff7c7f3c>
40808194:	9c67883a 	add	r19,r19,r17
40808198:	4445c83a 	sub	r2,r8,r17
4080819c:	e4c00215 	stw	r19,8(fp)
408081a0:	10800054 	ori	r2,r2,1
408081a4:	98800115 	stw	r2,4(r19)
408081a8:	a8bfff17 	ldw	r2,-4(r21)
408081ac:	a009883a 	mov	r4,r20
408081b0:	1080004c 	andi	r2,r2,1
408081b4:	1462b03a 	or	r17,r2,r17
408081b8:	ac7fff15 	stw	r17,-4(r21)
408081bc:	080dce00 	call	4080dce0 <__malloc_unlock>
408081c0:	a805883a 	mov	r2,r21
408081c4:	003f6b06 	br	40807f74 <__alt_mem_onchip_flash_0_data+0xff7c7f74>
408081c8:	a80b883a 	mov	r5,r21
408081cc:	9009883a 	mov	r4,r18
408081d0:	0806cac0 	call	40806cac <memmove>
408081d4:	003f4e06 	br	40807f10 <__alt_mem_onchip_flash_0_data+0xff7c7f10>
408081d8:	89000404 	addi	r4,r17,16
408081dc:	b93fbc16 	blt	r23,r4,408080d0 <__alt_mem_onchip_flash_0_data+0xff7c80d0>
408081e0:	b0800317 	ldw	r2,12(r22)
408081e4:	b0c00217 	ldw	r3,8(r22)
408081e8:	81bfff04 	addi	r6,r16,-4
408081ec:	01000904 	movi	r4,36
408081f0:	18800315 	stw	r2,12(r3)
408081f4:	10c00215 	stw	r3,8(r2)
408081f8:	b4800204 	addi	r18,r22,8
408081fc:	21804336 	bltu	r4,r6,4080830c <_realloc_r+0x508>
40808200:	008004c4 	movi	r2,19
40808204:	11803f2e 	bgeu	r2,r6,40808304 <_realloc_r+0x500>
40808208:	a8800017 	ldw	r2,0(r21)
4080820c:	b0800215 	stw	r2,8(r22)
40808210:	a8800117 	ldw	r2,4(r21)
40808214:	b0800315 	stw	r2,12(r22)
40808218:	008006c4 	movi	r2,27
4080821c:	11803f36 	bltu	r2,r6,4080831c <_realloc_r+0x518>
40808220:	b0800404 	addi	r2,r22,16
40808224:	ad400204 	addi	r21,r21,8
40808228:	a8c00017 	ldw	r3,0(r21)
4080822c:	10c00015 	stw	r3,0(r2)
40808230:	a8c00117 	ldw	r3,4(r21)
40808234:	10c00115 	stw	r3,4(r2)
40808238:	a8c00217 	ldw	r3,8(r21)
4080823c:	10c00215 	stw	r3,8(r2)
40808240:	b447883a 	add	r3,r22,r17
40808244:	bc45c83a 	sub	r2,r23,r17
40808248:	e0c00215 	stw	r3,8(fp)
4080824c:	10800054 	ori	r2,r2,1
40808250:	18800115 	stw	r2,4(r3)
40808254:	b0800117 	ldw	r2,4(r22)
40808258:	a009883a 	mov	r4,r20
4080825c:	1080004c 	andi	r2,r2,1
40808260:	1462b03a 	or	r17,r2,r17
40808264:	b4400115 	stw	r17,4(r22)
40808268:	080dce00 	call	4080dce0 <__malloc_unlock>
4080826c:	9005883a 	mov	r2,r18
40808270:	003f4006 	br	40807f74 <__alt_mem_onchip_flash_0_data+0xff7c7f74>
40808274:	a8c00217 	ldw	r3,8(r21)
40808278:	90c00215 	stw	r3,8(r18)
4080827c:	a8c00317 	ldw	r3,12(r21)
40808280:	90c00315 	stw	r3,12(r18)
40808284:	30801126 	beq	r6,r2,408082cc <_realloc_r+0x4c8>
40808288:	90800404 	addi	r2,r18,16
4080828c:	a8c00404 	addi	r3,r21,16
40808290:	003f1906 	br	40807ef8 <__alt_mem_onchip_flash_0_data+0xff7c7ef8>
40808294:	90ffff17 	ldw	r3,-4(r18)
40808298:	00bfff04 	movi	r2,-4
4080829c:	a825883a 	mov	r18,r21
408082a0:	1884703a 	and	r2,r3,r2
408082a4:	80a1883a 	add	r16,r16,r2
408082a8:	003f2406 	br	40807f3c <__alt_mem_onchip_flash_0_data+0xff7c7f3c>
408082ac:	a8800217 	ldw	r2,8(r21)
408082b0:	b0800415 	stw	r2,16(r22)
408082b4:	a8800317 	ldw	r2,12(r21)
408082b8:	b0800515 	stw	r2,20(r22)
408082bc:	31000a26 	beq	r6,r4,408082e8 <_realloc_r+0x4e4>
408082c0:	b0800604 	addi	r2,r22,24
408082c4:	ad400404 	addi	r21,r21,16
408082c8:	003fa906 	br	40808170 <__alt_mem_onchip_flash_0_data+0xff7c8170>
408082cc:	a9000417 	ldw	r4,16(r21)
408082d0:	90800604 	addi	r2,r18,24
408082d4:	a8c00604 	addi	r3,r21,24
408082d8:	91000415 	stw	r4,16(r18)
408082dc:	a9000517 	ldw	r4,20(r21)
408082e0:	91000515 	stw	r4,20(r18)
408082e4:	003f0406 	br	40807ef8 <__alt_mem_onchip_flash_0_data+0xff7c7ef8>
408082e8:	a8c00417 	ldw	r3,16(r21)
408082ec:	ad400604 	addi	r21,r21,24
408082f0:	b0800804 	addi	r2,r22,32
408082f4:	b0c00615 	stw	r3,24(r22)
408082f8:	a8ffff17 	ldw	r3,-4(r21)
408082fc:	b0c00715 	stw	r3,28(r22)
40808300:	003f9b06 	br	40808170 <__alt_mem_onchip_flash_0_data+0xff7c8170>
40808304:	9005883a 	mov	r2,r18
40808308:	003fc706 	br	40808228 <__alt_mem_onchip_flash_0_data+0xff7c8228>
4080830c:	a80b883a 	mov	r5,r21
40808310:	9009883a 	mov	r4,r18
40808314:	0806cac0 	call	40806cac <memmove>
40808318:	003fc906 	br	40808240 <__alt_mem_onchip_flash_0_data+0xff7c8240>
4080831c:	a8800217 	ldw	r2,8(r21)
40808320:	b0800415 	stw	r2,16(r22)
40808324:	a8800317 	ldw	r2,12(r21)
40808328:	b0800515 	stw	r2,20(r22)
4080832c:	31000726 	beq	r6,r4,4080834c <_realloc_r+0x548>
40808330:	b0800604 	addi	r2,r22,24
40808334:	ad400404 	addi	r21,r21,16
40808338:	003fbb06 	br	40808228 <__alt_mem_onchip_flash_0_data+0xff7c8228>
4080833c:	a009883a 	mov	r4,r20
40808340:	080dce00 	call	4080dce0 <__malloc_unlock>
40808344:	0005883a 	mov	r2,zero
40808348:	003f0a06 	br	40807f74 <__alt_mem_onchip_flash_0_data+0xff7c7f74>
4080834c:	a8c00417 	ldw	r3,16(r21)
40808350:	ad400604 	addi	r21,r21,24
40808354:	b0800804 	addi	r2,r22,32
40808358:	b0c00615 	stw	r3,24(r22)
4080835c:	a8ffff17 	ldw	r3,-4(r21)
40808360:	b0c00715 	stw	r3,28(r22)
40808364:	003fb006 	br	40808228 <__alt_mem_onchip_flash_0_data+0xff7c8228>

40808368 <__fpclassifyd>:
40808368:	00a00034 	movhi	r2,32768
4080836c:	10bfffc4 	addi	r2,r2,-1
40808370:	2884703a 	and	r2,r5,r2
40808374:	10000726 	beq	r2,zero,40808394 <__fpclassifyd+0x2c>
40808378:	00fffc34 	movhi	r3,65520
4080837c:	019ff834 	movhi	r6,32736
40808380:	28c7883a 	add	r3,r5,r3
40808384:	31bfffc4 	addi	r6,r6,-1
40808388:	30c00536 	bltu	r6,r3,408083a0 <__fpclassifyd+0x38>
4080838c:	00800104 	movi	r2,4
40808390:	f800283a 	ret
40808394:	2000021e 	bne	r4,zero,408083a0 <__fpclassifyd+0x38>
40808398:	00800084 	movi	r2,2
4080839c:	f800283a 	ret
408083a0:	00dffc34 	movhi	r3,32752
408083a4:	019ff834 	movhi	r6,32736
408083a8:	28cb883a 	add	r5,r5,r3
408083ac:	31bfffc4 	addi	r6,r6,-1
408083b0:	317ff62e 	bgeu	r6,r5,4080838c <__alt_mem_onchip_flash_0_data+0xff7c838c>
408083b4:	01400434 	movhi	r5,16
408083b8:	297fffc4 	addi	r5,r5,-1
408083bc:	28800236 	bltu	r5,r2,408083c8 <__fpclassifyd+0x60>
408083c0:	008000c4 	movi	r2,3
408083c4:	f800283a 	ret
408083c8:	10c00226 	beq	r2,r3,408083d4 <__fpclassifyd+0x6c>
408083cc:	0005883a 	mov	r2,zero
408083d0:	f800283a 	ret
408083d4:	2005003a 	cmpeq	r2,r4,zero
408083d8:	f800283a 	ret

408083dc <_sbrk_r>:
408083dc:	defffd04 	addi	sp,sp,-12
408083e0:	dc000015 	stw	r16,0(sp)
408083e4:	04102074 	movhi	r16,16513
408083e8:	dc400115 	stw	r17,4(sp)
408083ec:	840ed104 	addi	r16,r16,15172
408083f0:	2023883a 	mov	r17,r4
408083f4:	2809883a 	mov	r4,r5
408083f8:	dfc00215 	stw	ra,8(sp)
408083fc:	80000015 	stw	zero,0(r16)
40808400:	080dea00 	call	4080dea0 <sbrk>
40808404:	00ffffc4 	movi	r3,-1
40808408:	10c00526 	beq	r2,r3,40808420 <_sbrk_r+0x44>
4080840c:	dfc00217 	ldw	ra,8(sp)
40808410:	dc400117 	ldw	r17,4(sp)
40808414:	dc000017 	ldw	r16,0(sp)
40808418:	dec00304 	addi	sp,sp,12
4080841c:	f800283a 	ret
40808420:	80c00017 	ldw	r3,0(r16)
40808424:	183ff926 	beq	r3,zero,4080840c <__alt_mem_onchip_flash_0_data+0xff7c840c>
40808428:	88c00015 	stw	r3,0(r17)
4080842c:	003ff706 	br	4080840c <__alt_mem_onchip_flash_0_data+0xff7c840c>

40808430 <__sread>:
40808430:	defffe04 	addi	sp,sp,-8
40808434:	dc000015 	stw	r16,0(sp)
40808438:	2821883a 	mov	r16,r5
4080843c:	2940038f 	ldh	r5,14(r5)
40808440:	dfc00115 	stw	ra,4(sp)
40808444:	080a2240 	call	4080a224 <_read_r>
40808448:	10000716 	blt	r2,zero,40808468 <__sread+0x38>
4080844c:	80c01417 	ldw	r3,80(r16)
40808450:	1887883a 	add	r3,r3,r2
40808454:	80c01415 	stw	r3,80(r16)
40808458:	dfc00117 	ldw	ra,4(sp)
4080845c:	dc000017 	ldw	r16,0(sp)
40808460:	dec00204 	addi	sp,sp,8
40808464:	f800283a 	ret
40808468:	80c0030b 	ldhu	r3,12(r16)
4080846c:	18fbffcc 	andi	r3,r3,61439
40808470:	80c0030d 	sth	r3,12(r16)
40808474:	dfc00117 	ldw	ra,4(sp)
40808478:	dc000017 	ldw	r16,0(sp)
4080847c:	dec00204 	addi	sp,sp,8
40808480:	f800283a 	ret

40808484 <__seofread>:
40808484:	0005883a 	mov	r2,zero
40808488:	f800283a 	ret

4080848c <__swrite>:
4080848c:	2880030b 	ldhu	r2,12(r5)
40808490:	defffb04 	addi	sp,sp,-20
40808494:	dcc00315 	stw	r19,12(sp)
40808498:	dc800215 	stw	r18,8(sp)
4080849c:	dc400115 	stw	r17,4(sp)
408084a0:	dc000015 	stw	r16,0(sp)
408084a4:	dfc00415 	stw	ra,16(sp)
408084a8:	10c0400c 	andi	r3,r2,256
408084ac:	2821883a 	mov	r16,r5
408084b0:	2023883a 	mov	r17,r4
408084b4:	3025883a 	mov	r18,r6
408084b8:	3827883a 	mov	r19,r7
408084bc:	18000526 	beq	r3,zero,408084d4 <__swrite+0x48>
408084c0:	2940038f 	ldh	r5,14(r5)
408084c4:	01c00084 	movi	r7,2
408084c8:	000d883a 	mov	r6,zero
408084cc:	080a1c40 	call	4080a1c4 <_lseek_r>
408084d0:	8080030b 	ldhu	r2,12(r16)
408084d4:	8140038f 	ldh	r5,14(r16)
408084d8:	10bbffcc 	andi	r2,r2,61439
408084dc:	980f883a 	mov	r7,r19
408084e0:	900d883a 	mov	r6,r18
408084e4:	8809883a 	mov	r4,r17
408084e8:	8080030d 	sth	r2,12(r16)
408084ec:	dfc00417 	ldw	ra,16(sp)
408084f0:	dcc00317 	ldw	r19,12(sp)
408084f4:	dc800217 	ldw	r18,8(sp)
408084f8:	dc400117 	ldw	r17,4(sp)
408084fc:	dc000017 	ldw	r16,0(sp)
40808500:	dec00504 	addi	sp,sp,20
40808504:	0809c901 	jmpi	40809c90 <_write_r>

40808508 <__sseek>:
40808508:	defffe04 	addi	sp,sp,-8
4080850c:	dc000015 	stw	r16,0(sp)
40808510:	2821883a 	mov	r16,r5
40808514:	2940038f 	ldh	r5,14(r5)
40808518:	dfc00115 	stw	ra,4(sp)
4080851c:	080a1c40 	call	4080a1c4 <_lseek_r>
40808520:	00ffffc4 	movi	r3,-1
40808524:	10c00826 	beq	r2,r3,40808548 <__sseek+0x40>
40808528:	80c0030b 	ldhu	r3,12(r16)
4080852c:	80801415 	stw	r2,80(r16)
40808530:	18c40014 	ori	r3,r3,4096
40808534:	80c0030d 	sth	r3,12(r16)
40808538:	dfc00117 	ldw	ra,4(sp)
4080853c:	dc000017 	ldw	r16,0(sp)
40808540:	dec00204 	addi	sp,sp,8
40808544:	f800283a 	ret
40808548:	80c0030b 	ldhu	r3,12(r16)
4080854c:	18fbffcc 	andi	r3,r3,61439
40808550:	80c0030d 	sth	r3,12(r16)
40808554:	dfc00117 	ldw	ra,4(sp)
40808558:	dc000017 	ldw	r16,0(sp)
4080855c:	dec00204 	addi	sp,sp,8
40808560:	f800283a 	ret

40808564 <__sclose>:
40808564:	2940038f 	ldh	r5,14(r5)
40808568:	0809cf01 	jmpi	40809cf0 <_close_r>

4080856c <strcmp>:
4080856c:	2144b03a 	or	r2,r4,r5
40808570:	108000cc 	andi	r2,r2,3
40808574:	1000171e 	bne	r2,zero,408085d4 <strcmp+0x68>
40808578:	20800017 	ldw	r2,0(r4)
4080857c:	28c00017 	ldw	r3,0(r5)
40808580:	10c0141e 	bne	r2,r3,408085d4 <strcmp+0x68>
40808584:	027fbff4 	movhi	r9,65279
40808588:	4a7fbfc4 	addi	r9,r9,-257
4080858c:	0086303a 	nor	r3,zero,r2
40808590:	02202074 	movhi	r8,32897
40808594:	1245883a 	add	r2,r2,r9
40808598:	42202004 	addi	r8,r8,-32640
4080859c:	10c4703a 	and	r2,r2,r3
408085a0:	1204703a 	and	r2,r2,r8
408085a4:	10000226 	beq	r2,zero,408085b0 <strcmp+0x44>
408085a8:	00002306 	br	40808638 <strcmp+0xcc>
408085ac:	1000221e 	bne	r2,zero,40808638 <strcmp+0xcc>
408085b0:	21000104 	addi	r4,r4,4
408085b4:	20c00017 	ldw	r3,0(r4)
408085b8:	29400104 	addi	r5,r5,4
408085bc:	29800017 	ldw	r6,0(r5)
408085c0:	1a4f883a 	add	r7,r3,r9
408085c4:	00c4303a 	nor	r2,zero,r3
408085c8:	3884703a 	and	r2,r7,r2
408085cc:	1204703a 	and	r2,r2,r8
408085d0:	19bff626 	beq	r3,r6,408085ac <__alt_mem_onchip_flash_0_data+0xff7c85ac>
408085d4:	20800003 	ldbu	r2,0(r4)
408085d8:	10c03fcc 	andi	r3,r2,255
408085dc:	18c0201c 	xori	r3,r3,128
408085e0:	18ffe004 	addi	r3,r3,-128
408085e4:	18000c26 	beq	r3,zero,40808618 <strcmp+0xac>
408085e8:	29800007 	ldb	r6,0(r5)
408085ec:	19800326 	beq	r3,r6,408085fc <strcmp+0x90>
408085f0:	00001306 	br	40808640 <strcmp+0xd4>
408085f4:	29800007 	ldb	r6,0(r5)
408085f8:	11800b1e 	bne	r2,r6,40808628 <strcmp+0xbc>
408085fc:	21000044 	addi	r4,r4,1
40808600:	20c00003 	ldbu	r3,0(r4)
40808604:	29400044 	addi	r5,r5,1
40808608:	18803fcc 	andi	r2,r3,255
4080860c:	1080201c 	xori	r2,r2,128
40808610:	10bfe004 	addi	r2,r2,-128
40808614:	103ff71e 	bne	r2,zero,408085f4 <__alt_mem_onchip_flash_0_data+0xff7c85f4>
40808618:	0007883a 	mov	r3,zero
4080861c:	28800003 	ldbu	r2,0(r5)
40808620:	1885c83a 	sub	r2,r3,r2
40808624:	f800283a 	ret
40808628:	28800003 	ldbu	r2,0(r5)
4080862c:	18c03fcc 	andi	r3,r3,255
40808630:	1885c83a 	sub	r2,r3,r2
40808634:	f800283a 	ret
40808638:	0005883a 	mov	r2,zero
4080863c:	f800283a 	ret
40808640:	10c03fcc 	andi	r3,r2,255
40808644:	003ff506 	br	4080861c <__alt_mem_onchip_flash_0_data+0xff7c861c>

40808648 <__sprint_r.part.0>:
40808648:	28801917 	ldw	r2,100(r5)
4080864c:	defff604 	addi	sp,sp,-40
40808650:	dd400515 	stw	r21,20(sp)
40808654:	dfc00915 	stw	ra,36(sp)
40808658:	df000815 	stw	fp,32(sp)
4080865c:	ddc00715 	stw	r23,28(sp)
40808660:	dd800615 	stw	r22,24(sp)
40808664:	dd000415 	stw	r20,16(sp)
40808668:	dcc00315 	stw	r19,12(sp)
4080866c:	dc800215 	stw	r18,8(sp)
40808670:	dc400115 	stw	r17,4(sp)
40808674:	dc000015 	stw	r16,0(sp)
40808678:	1088000c 	andi	r2,r2,8192
4080867c:	302b883a 	mov	r21,r6
40808680:	10002e26 	beq	r2,zero,4080873c <__sprint_r.part.0+0xf4>
40808684:	30800217 	ldw	r2,8(r6)
40808688:	35800017 	ldw	r22,0(r6)
4080868c:	10002926 	beq	r2,zero,40808734 <__sprint_r.part.0+0xec>
40808690:	2827883a 	mov	r19,r5
40808694:	2029883a 	mov	r20,r4
40808698:	b5c00104 	addi	r23,r22,4
4080869c:	04bfffc4 	movi	r18,-1
408086a0:	bc400017 	ldw	r17,0(r23)
408086a4:	b4000017 	ldw	r16,0(r22)
408086a8:	0039883a 	mov	fp,zero
408086ac:	8822d0ba 	srli	r17,r17,2
408086b0:	8800031e 	bne	r17,zero,408086c0 <__sprint_r.part.0+0x78>
408086b4:	00001806 	br	40808718 <__sprint_r.part.0+0xd0>
408086b8:	84000104 	addi	r16,r16,4
408086bc:	8f001526 	beq	r17,fp,40808714 <__sprint_r.part.0+0xcc>
408086c0:	81400017 	ldw	r5,0(r16)
408086c4:	980d883a 	mov	r6,r19
408086c8:	a009883a 	mov	r4,r20
408086cc:	080a0700 	call	4080a070 <_fputwc_r>
408086d0:	e7000044 	addi	fp,fp,1
408086d4:	14bff81e 	bne	r2,r18,408086b8 <__alt_mem_onchip_flash_0_data+0xff7c86b8>
408086d8:	9005883a 	mov	r2,r18
408086dc:	a8000215 	stw	zero,8(r21)
408086e0:	a8000115 	stw	zero,4(r21)
408086e4:	dfc00917 	ldw	ra,36(sp)
408086e8:	df000817 	ldw	fp,32(sp)
408086ec:	ddc00717 	ldw	r23,28(sp)
408086f0:	dd800617 	ldw	r22,24(sp)
408086f4:	dd400517 	ldw	r21,20(sp)
408086f8:	dd000417 	ldw	r20,16(sp)
408086fc:	dcc00317 	ldw	r19,12(sp)
40808700:	dc800217 	ldw	r18,8(sp)
40808704:	dc400117 	ldw	r17,4(sp)
40808708:	dc000017 	ldw	r16,0(sp)
4080870c:	dec00a04 	addi	sp,sp,40
40808710:	f800283a 	ret
40808714:	a8800217 	ldw	r2,8(r21)
40808718:	8c63883a 	add	r17,r17,r17
4080871c:	8c63883a 	add	r17,r17,r17
40808720:	1445c83a 	sub	r2,r2,r17
40808724:	a8800215 	stw	r2,8(r21)
40808728:	b5800204 	addi	r22,r22,8
4080872c:	bdc00204 	addi	r23,r23,8
40808730:	103fdb1e 	bne	r2,zero,408086a0 <__alt_mem_onchip_flash_0_data+0xff7c86a0>
40808734:	0005883a 	mov	r2,zero
40808738:	003fe806 	br	408086dc <__alt_mem_onchip_flash_0_data+0xff7c86dc>
4080873c:	08059980 	call	40805998 <__sfvwrite_r>
40808740:	003fe606 	br	408086dc <__alt_mem_onchip_flash_0_data+0xff7c86dc>

40808744 <__sprint_r>:
40808744:	30c00217 	ldw	r3,8(r6)
40808748:	18000126 	beq	r3,zero,40808750 <__sprint_r+0xc>
4080874c:	08086481 	jmpi	40808648 <__sprint_r.part.0>
40808750:	30000115 	stw	zero,4(r6)
40808754:	0005883a 	mov	r2,zero
40808758:	f800283a 	ret

4080875c <___vfiprintf_internal_r>:
4080875c:	deffc904 	addi	sp,sp,-220
40808760:	df003515 	stw	fp,212(sp)
40808764:	dd003115 	stw	r20,196(sp)
40808768:	dfc03615 	stw	ra,216(sp)
4080876c:	ddc03415 	stw	r23,208(sp)
40808770:	dd803315 	stw	r22,204(sp)
40808774:	dd403215 	stw	r21,200(sp)
40808778:	dcc03015 	stw	r19,192(sp)
4080877c:	dc802f15 	stw	r18,188(sp)
40808780:	dc402e15 	stw	r17,184(sp)
40808784:	dc002d15 	stw	r16,180(sp)
40808788:	d9002015 	stw	r4,128(sp)
4080878c:	d9c02215 	stw	r7,136(sp)
40808790:	2829883a 	mov	r20,r5
40808794:	3039883a 	mov	fp,r6
40808798:	20000226 	beq	r4,zero,408087a4 <___vfiprintf_internal_r+0x48>
4080879c:	20800e17 	ldw	r2,56(r4)
408087a0:	1000cf26 	beq	r2,zero,40808ae0 <___vfiprintf_internal_r+0x384>
408087a4:	a080030b 	ldhu	r2,12(r20)
408087a8:	10c8000c 	andi	r3,r2,8192
408087ac:	1800061e 	bne	r3,zero,408087c8 <___vfiprintf_internal_r+0x6c>
408087b0:	a1001917 	ldw	r4,100(r20)
408087b4:	00f7ffc4 	movi	r3,-8193
408087b8:	10880014 	ori	r2,r2,8192
408087bc:	20c6703a 	and	r3,r4,r3
408087c0:	a080030d 	sth	r2,12(r20)
408087c4:	a0c01915 	stw	r3,100(r20)
408087c8:	10c0020c 	andi	r3,r2,8
408087cc:	1800a926 	beq	r3,zero,40808a74 <___vfiprintf_internal_r+0x318>
408087d0:	a0c00417 	ldw	r3,16(r20)
408087d4:	1800a726 	beq	r3,zero,40808a74 <___vfiprintf_internal_r+0x318>
408087d8:	1080068c 	andi	r2,r2,26
408087dc:	00c00284 	movi	r3,10
408087e0:	10c0ac26 	beq	r2,r3,40808a94 <___vfiprintf_internal_r+0x338>
408087e4:	da801a04 	addi	r10,sp,104
408087e8:	da801e15 	stw	r10,120(sp)
408087ec:	d8801e17 	ldw	r2,120(sp)
408087f0:	da8019c4 	addi	r10,sp,103
408087f4:	05902074 	movhi	r22,16513
408087f8:	05d02074 	movhi	r23,16513
408087fc:	da801f15 	stw	r10,124(sp)
40808800:	1295c83a 	sub	r10,r2,r10
40808804:	b5871304 	addi	r22,r22,7244
40808808:	bdc70f04 	addi	r23,r23,7228
4080880c:	dec01a15 	stw	sp,104(sp)
40808810:	d8001c15 	stw	zero,112(sp)
40808814:	d8001b15 	stw	zero,108(sp)
40808818:	d8002615 	stw	zero,152(sp)
4080881c:	d8002315 	stw	zero,140(sp)
40808820:	da802715 	stw	r10,156(sp)
40808824:	d811883a 	mov	r8,sp
40808828:	dd002115 	stw	r20,132(sp)
4080882c:	e021883a 	mov	r16,fp
40808830:	80800007 	ldb	r2,0(r16)
40808834:	1003ea26 	beq	r2,zero,408097e0 <___vfiprintf_internal_r+0x1084>
40808838:	00c00944 	movi	r3,37
4080883c:	8025883a 	mov	r18,r16
40808840:	10c0021e 	bne	r2,r3,4080884c <___vfiprintf_internal_r+0xf0>
40808844:	00001606 	br	408088a0 <___vfiprintf_internal_r+0x144>
40808848:	10c00326 	beq	r2,r3,40808858 <___vfiprintf_internal_r+0xfc>
4080884c:	94800044 	addi	r18,r18,1
40808850:	90800007 	ldb	r2,0(r18)
40808854:	103ffc1e 	bne	r2,zero,40808848 <__alt_mem_onchip_flash_0_data+0xff7c8848>
40808858:	9423c83a 	sub	r17,r18,r16
4080885c:	88001026 	beq	r17,zero,408088a0 <___vfiprintf_internal_r+0x144>
40808860:	d8c01c17 	ldw	r3,112(sp)
40808864:	d8801b17 	ldw	r2,108(sp)
40808868:	44000015 	stw	r16,0(r8)
4080886c:	88c7883a 	add	r3,r17,r3
40808870:	10800044 	addi	r2,r2,1
40808874:	44400115 	stw	r17,4(r8)
40808878:	d8c01c15 	stw	r3,112(sp)
4080887c:	d8801b15 	stw	r2,108(sp)
40808880:	010001c4 	movi	r4,7
40808884:	2080760e 	bge	r4,r2,40808a60 <___vfiprintf_internal_r+0x304>
40808888:	1803821e 	bne	r3,zero,40809694 <___vfiprintf_internal_r+0xf38>
4080888c:	da802317 	ldw	r10,140(sp)
40808890:	d8001b15 	stw	zero,108(sp)
40808894:	d811883a 	mov	r8,sp
40808898:	5455883a 	add	r10,r10,r17
4080889c:	da802315 	stw	r10,140(sp)
408088a0:	90800007 	ldb	r2,0(r18)
408088a4:	10044626 	beq	r2,zero,408099c0 <___vfiprintf_internal_r+0x1264>
408088a8:	90c00047 	ldb	r3,1(r18)
408088ac:	94000044 	addi	r16,r18,1
408088b0:	d8001d85 	stb	zero,118(sp)
408088b4:	0009883a 	mov	r4,zero
408088b8:	000f883a 	mov	r7,zero
408088bc:	027fffc4 	movi	r9,-1
408088c0:	0023883a 	mov	r17,zero
408088c4:	0029883a 	mov	r20,zero
408088c8:	01401604 	movi	r5,88
408088cc:	01800244 	movi	r6,9
408088d0:	03400a84 	movi	r13,42
408088d4:	03001b04 	movi	r12,108
408088d8:	84000044 	addi	r16,r16,1
408088dc:	18bff804 	addi	r2,r3,-32
408088e0:	28827336 	bltu	r5,r2,408092b0 <___vfiprintf_internal_r+0xb54>
408088e4:	100490ba 	slli	r2,r2,2
408088e8:	02902074 	movhi	r10,16513
408088ec:	52a23f04 	addi	r10,r10,-30468
408088f0:	1285883a 	add	r2,r2,r10
408088f4:	10800017 	ldw	r2,0(r2)
408088f8:	1000683a 	jmp	r2
408088fc:	40808fe4 	muli	r2,r8,575
40808900:	408092b0 	cmpltui	r2,r8,586
40808904:	408092b0 	cmpltui	r2,r8,586
40808908:	40809004 	addi	r2,r8,576
4080890c:	408092b0 	cmpltui	r2,r8,586
40808910:	408092b0 	cmpltui	r2,r8,586
40808914:	408092b0 	cmpltui	r2,r8,586
40808918:	408092b0 	cmpltui	r2,r8,586
4080891c:	408092b0 	cmpltui	r2,r8,586
40808920:	408092b0 	cmpltui	r2,r8,586
40808924:	408091ec 	andhi	r2,r8,583
40808928:	40809208 	cmpgei	r2,r8,584
4080892c:	408092b0 	cmpltui	r2,r8,586
40808930:	40808af0 	cmpltui	r2,r8,555
40808934:	40809218 	cmpnei	r2,r8,584
40808938:	408092b0 	cmpltui	r2,r8,586
4080893c:	40809010 	cmplti	r2,r8,576
40808940:	4080901c 	xori	r2,r8,576
40808944:	4080901c 	xori	r2,r8,576
40808948:	4080901c 	xori	r2,r8,576
4080894c:	4080901c 	xori	r2,r8,576
40808950:	4080901c 	xori	r2,r8,576
40808954:	4080901c 	xori	r2,r8,576
40808958:	4080901c 	xori	r2,r8,576
4080895c:	4080901c 	xori	r2,r8,576
40808960:	4080901c 	xori	r2,r8,576
40808964:	408092b0 	cmpltui	r2,r8,586
40808968:	408092b0 	cmpltui	r2,r8,586
4080896c:	408092b0 	cmpltui	r2,r8,586
40808970:	408092b0 	cmpltui	r2,r8,586
40808974:	408092b0 	cmpltui	r2,r8,586
40808978:	408092b0 	cmpltui	r2,r8,586
4080897c:	408092b0 	cmpltui	r2,r8,586
40808980:	408092b0 	cmpltui	r2,r8,586
40808984:	408092b0 	cmpltui	r2,r8,586
40808988:	408092b0 	cmpltui	r2,r8,586
4080898c:	40809048 	cmpgei	r2,r8,577
40808990:	408092b0 	cmpltui	r2,r8,586
40808994:	408092b0 	cmpltui	r2,r8,586
40808998:	408092b0 	cmpltui	r2,r8,586
4080899c:	408092b0 	cmpltui	r2,r8,586
408089a0:	408092b0 	cmpltui	r2,r8,586
408089a4:	408092b0 	cmpltui	r2,r8,586
408089a8:	408092b0 	cmpltui	r2,r8,586
408089ac:	408092b0 	cmpltui	r2,r8,586
408089b0:	408092b0 	cmpltui	r2,r8,586
408089b4:	408092b0 	cmpltui	r2,r8,586
408089b8:	40809080 	call	44080908 <__alt_mem_onchip_flash_0_data+0x3040908>
408089bc:	408092b0 	cmpltui	r2,r8,586
408089c0:	408092b0 	cmpltui	r2,r8,586
408089c4:	408092b0 	cmpltui	r2,r8,586
408089c8:	408092b0 	cmpltui	r2,r8,586
408089cc:	408092b0 	cmpltui	r2,r8,586
408089d0:	408090d8 	cmpnei	r2,r8,579
408089d4:	408092b0 	cmpltui	r2,r8,586
408089d8:	408092b0 	cmpltui	r2,r8,586
408089dc:	40809148 	cmpgei	r2,r8,581
408089e0:	408092b0 	cmpltui	r2,r8,586
408089e4:	408092b0 	cmpltui	r2,r8,586
408089e8:	408092b0 	cmpltui	r2,r8,586
408089ec:	408092b0 	cmpltui	r2,r8,586
408089f0:	408092b0 	cmpltui	r2,r8,586
408089f4:	408092b0 	cmpltui	r2,r8,586
408089f8:	408092b0 	cmpltui	r2,r8,586
408089fc:	408092b0 	cmpltui	r2,r8,586
40808a00:	408092b0 	cmpltui	r2,r8,586
40808a04:	408092b0 	cmpltui	r2,r8,586
40808a08:	40808ef4 	orhi	r2,r8,571
40808a0c:	40808f20 	cmpeqi	r2,r8,572
40808a10:	408092b0 	cmpltui	r2,r8,586
40808a14:	408092b0 	cmpltui	r2,r8,586
40808a18:	408092b0 	cmpltui	r2,r8,586
40808a1c:	40809258 	cmpnei	r2,r8,585
40808a20:	40808f20 	cmpeqi	r2,r8,572
40808a24:	408092b0 	cmpltui	r2,r8,586
40808a28:	408092b0 	cmpltui	r2,r8,586
40808a2c:	40808db4 	orhi	r2,r8,566
40808a30:	408092b0 	cmpltui	r2,r8,586
40808a34:	40808dc4 	addi	r2,r8,567
40808a38:	40808e00 	call	440808e0 <__alt_mem_onchip_flash_0_data+0x30408e0>
40808a3c:	40808afc 	xorhi	r2,r8,555
40808a40:	40808da8 	cmpgeui	r2,r8,566
40808a44:	408092b0 	cmpltui	r2,r8,586
40808a48:	40809184 	addi	r2,r8,582
40808a4c:	408092b0 	cmpltui	r2,r8,586
40808a50:	408091dc 	xori	r2,r8,583
40808a54:	408092b0 	cmpltui	r2,r8,586
40808a58:	408092b0 	cmpltui	r2,r8,586
40808a5c:	40808ea0 	cmpeqi	r2,r8,570
40808a60:	42000204 	addi	r8,r8,8
40808a64:	da802317 	ldw	r10,140(sp)
40808a68:	5455883a 	add	r10,r10,r17
40808a6c:	da802315 	stw	r10,140(sp)
40808a70:	003f8b06 	br	408088a0 <__alt_mem_onchip_flash_0_data+0xff7c88a0>
40808a74:	d9002017 	ldw	r4,128(sp)
40808a78:	a00b883a 	mov	r5,r20
40808a7c:	08035400 	call	40803540 <__swsetup_r>
40808a80:	1003b11e 	bne	r2,zero,40809948 <___vfiprintf_internal_r+0x11ec>
40808a84:	a080030b 	ldhu	r2,12(r20)
40808a88:	00c00284 	movi	r3,10
40808a8c:	1080068c 	andi	r2,r2,26
40808a90:	10ff541e 	bne	r2,r3,408087e4 <__alt_mem_onchip_flash_0_data+0xff7c87e4>
40808a94:	a080038f 	ldh	r2,14(r20)
40808a98:	103f5216 	blt	r2,zero,408087e4 <__alt_mem_onchip_flash_0_data+0xff7c87e4>
40808a9c:	d9c02217 	ldw	r7,136(sp)
40808aa0:	d9002017 	ldw	r4,128(sp)
40808aa4:	e00d883a 	mov	r6,fp
40808aa8:	a00b883a 	mov	r5,r20
40808aac:	0809bd40 	call	40809bd4 <__sbprintf>
40808ab0:	dfc03617 	ldw	ra,216(sp)
40808ab4:	df003517 	ldw	fp,212(sp)
40808ab8:	ddc03417 	ldw	r23,208(sp)
40808abc:	dd803317 	ldw	r22,204(sp)
40808ac0:	dd403217 	ldw	r21,200(sp)
40808ac4:	dd003117 	ldw	r20,196(sp)
40808ac8:	dcc03017 	ldw	r19,192(sp)
40808acc:	dc802f17 	ldw	r18,188(sp)
40808ad0:	dc402e17 	ldw	r17,184(sp)
40808ad4:	dc002d17 	ldw	r16,180(sp)
40808ad8:	dec03704 	addi	sp,sp,220
40808adc:	f800283a 	ret
40808ae0:	08055140 	call	40805514 <__sinit>
40808ae4:	003f2f06 	br	408087a4 <__alt_mem_onchip_flash_0_data+0xff7c87a4>
40808ae8:	0463c83a 	sub	r17,zero,r17
40808aec:	d8802215 	stw	r2,136(sp)
40808af0:	a5000114 	ori	r20,r20,4
40808af4:	80c00007 	ldb	r3,0(r16)
40808af8:	003f7706 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40808afc:	00800c04 	movi	r2,48
40808b00:	da802217 	ldw	r10,136(sp)
40808b04:	d8801d05 	stb	r2,116(sp)
40808b08:	00801e04 	movi	r2,120
40808b0c:	d8801d45 	stb	r2,117(sp)
40808b10:	d8001d85 	stb	zero,118(sp)
40808b14:	50c00104 	addi	r3,r10,4
40808b18:	54800017 	ldw	r18,0(r10)
40808b1c:	0027883a 	mov	r19,zero
40808b20:	a0800094 	ori	r2,r20,2
40808b24:	48030b16 	blt	r9,zero,40809754 <___vfiprintf_internal_r+0xff8>
40808b28:	00bfdfc4 	movi	r2,-129
40808b2c:	a096703a 	and	r11,r20,r2
40808b30:	d8c02215 	stw	r3,136(sp)
40808b34:	5d000094 	ori	r20,r11,2
40808b38:	90032b1e 	bne	r18,zero,408097e8 <___vfiprintf_internal_r+0x108c>
40808b3c:	00902074 	movhi	r2,16513
40808b40:	1086ae04 	addi	r2,r2,6840
40808b44:	d8802615 	stw	r2,152(sp)
40808b48:	0039883a 	mov	fp,zero
40808b4c:	48017b1e 	bne	r9,zero,4080913c <___vfiprintf_internal_r+0x9e0>
40808b50:	0013883a 	mov	r9,zero
40808b54:	0027883a 	mov	r19,zero
40808b58:	dd401a04 	addi	r21,sp,104
40808b5c:	4825883a 	mov	r18,r9
40808b60:	4cc0010e 	bge	r9,r19,40808b68 <___vfiprintf_internal_r+0x40c>
40808b64:	9825883a 	mov	r18,r19
40808b68:	e7003fcc 	andi	fp,fp,255
40808b6c:	e700201c 	xori	fp,fp,128
40808b70:	e73fe004 	addi	fp,fp,-128
40808b74:	e0000126 	beq	fp,zero,40808b7c <___vfiprintf_internal_r+0x420>
40808b78:	94800044 	addi	r18,r18,1
40808b7c:	a380008c 	andi	r14,r20,2
40808b80:	70000126 	beq	r14,zero,40808b88 <___vfiprintf_internal_r+0x42c>
40808b84:	94800084 	addi	r18,r18,2
40808b88:	a700210c 	andi	fp,r20,132
40808b8c:	e001df1e 	bne	fp,zero,4080930c <___vfiprintf_internal_r+0xbb0>
40808b90:	8c87c83a 	sub	r3,r17,r18
40808b94:	00c1dd0e 	bge	zero,r3,4080930c <___vfiprintf_internal_r+0xbb0>
40808b98:	01c00404 	movi	r7,16
40808b9c:	d8801c17 	ldw	r2,112(sp)
40808ba0:	38c3ad0e 	bge	r7,r3,40809a58 <___vfiprintf_internal_r+0x12fc>
40808ba4:	02902074 	movhi	r10,16513
40808ba8:	52871304 	addi	r10,r10,7244
40808bac:	dc002915 	stw	r16,164(sp)
40808bb0:	d9801b17 	ldw	r6,108(sp)
40808bb4:	da802415 	stw	r10,144(sp)
40808bb8:	03c001c4 	movi	r15,7
40808bbc:	da402515 	stw	r9,148(sp)
40808bc0:	db802815 	stw	r14,160(sp)
40808bc4:	1821883a 	mov	r16,r3
40808bc8:	00000506 	br	40808be0 <___vfiprintf_internal_r+0x484>
40808bcc:	31400084 	addi	r5,r6,2
40808bd0:	42000204 	addi	r8,r8,8
40808bd4:	200d883a 	mov	r6,r4
40808bd8:	843ffc04 	addi	r16,r16,-16
40808bdc:	3c000d0e 	bge	r7,r16,40808c14 <___vfiprintf_internal_r+0x4b8>
40808be0:	10800404 	addi	r2,r2,16
40808be4:	31000044 	addi	r4,r6,1
40808be8:	45800015 	stw	r22,0(r8)
40808bec:	41c00115 	stw	r7,4(r8)
40808bf0:	d8801c15 	stw	r2,112(sp)
40808bf4:	d9001b15 	stw	r4,108(sp)
40808bf8:	793ff40e 	bge	r15,r4,40808bcc <__alt_mem_onchip_flash_0_data+0xff7c8bcc>
40808bfc:	1001b51e 	bne	r2,zero,408092d4 <___vfiprintf_internal_r+0xb78>
40808c00:	843ffc04 	addi	r16,r16,-16
40808c04:	000d883a 	mov	r6,zero
40808c08:	01400044 	movi	r5,1
40808c0c:	d811883a 	mov	r8,sp
40808c10:	3c3ff316 	blt	r7,r16,40808be0 <__alt_mem_onchip_flash_0_data+0xff7c8be0>
40808c14:	8007883a 	mov	r3,r16
40808c18:	da402517 	ldw	r9,148(sp)
40808c1c:	db802817 	ldw	r14,160(sp)
40808c20:	dc002917 	ldw	r16,164(sp)
40808c24:	da802417 	ldw	r10,144(sp)
40808c28:	1885883a 	add	r2,r3,r2
40808c2c:	40c00115 	stw	r3,4(r8)
40808c30:	42800015 	stw	r10,0(r8)
40808c34:	d8801c15 	stw	r2,112(sp)
40808c38:	d9401b15 	stw	r5,108(sp)
40808c3c:	00c001c4 	movi	r3,7
40808c40:	19426016 	blt	r3,r5,408095c4 <___vfiprintf_internal_r+0xe68>
40808c44:	d8c01d87 	ldb	r3,118(sp)
40808c48:	42000204 	addi	r8,r8,8
40808c4c:	29000044 	addi	r4,r5,1
40808c50:	1801b31e 	bne	r3,zero,40809320 <___vfiprintf_internal_r+0xbc4>
40808c54:	7001c026 	beq	r14,zero,40809358 <___vfiprintf_internal_r+0xbfc>
40808c58:	d8c01d04 	addi	r3,sp,116
40808c5c:	10800084 	addi	r2,r2,2
40808c60:	40c00015 	stw	r3,0(r8)
40808c64:	00c00084 	movi	r3,2
40808c68:	40c00115 	stw	r3,4(r8)
40808c6c:	d8801c15 	stw	r2,112(sp)
40808c70:	d9001b15 	stw	r4,108(sp)
40808c74:	00c001c4 	movi	r3,7
40808c78:	1902650e 	bge	r3,r4,40809610 <___vfiprintf_internal_r+0xeb4>
40808c7c:	10029a1e 	bne	r2,zero,408096e8 <___vfiprintf_internal_r+0xf8c>
40808c80:	00c02004 	movi	r3,128
40808c84:	01000044 	movi	r4,1
40808c88:	000b883a 	mov	r5,zero
40808c8c:	d811883a 	mov	r8,sp
40808c90:	e0c1b31e 	bne	fp,r3,40809360 <___vfiprintf_internal_r+0xc04>
40808c94:	8cb9c83a 	sub	fp,r17,r18
40808c98:	0701b10e 	bge	zero,fp,40809360 <___vfiprintf_internal_r+0xc04>
40808c9c:	01c00404 	movi	r7,16
40808ca0:	3f03890e 	bge	r7,fp,40809ac8 <___vfiprintf_internal_r+0x136c>
40808ca4:	00d02074 	movhi	r3,16513
40808ca8:	18c70f04 	addi	r3,r3,7228
40808cac:	d8c02415 	stw	r3,144(sp)
40808cb0:	8007883a 	mov	r3,r16
40808cb4:	034001c4 	movi	r13,7
40808cb8:	e021883a 	mov	r16,fp
40808cbc:	da402515 	stw	r9,148(sp)
40808cc0:	1839883a 	mov	fp,r3
40808cc4:	00000506 	br	40808cdc <___vfiprintf_internal_r+0x580>
40808cc8:	29800084 	addi	r6,r5,2
40808ccc:	42000204 	addi	r8,r8,8
40808cd0:	180b883a 	mov	r5,r3
40808cd4:	843ffc04 	addi	r16,r16,-16
40808cd8:	3c000d0e 	bge	r7,r16,40808d10 <___vfiprintf_internal_r+0x5b4>
40808cdc:	10800404 	addi	r2,r2,16
40808ce0:	28c00044 	addi	r3,r5,1
40808ce4:	45c00015 	stw	r23,0(r8)
40808ce8:	41c00115 	stw	r7,4(r8)
40808cec:	d8801c15 	stw	r2,112(sp)
40808cf0:	d8c01b15 	stw	r3,108(sp)
40808cf4:	68fff40e 	bge	r13,r3,40808cc8 <__alt_mem_onchip_flash_0_data+0xff7c8cc8>
40808cf8:	1002241e 	bne	r2,zero,4080958c <___vfiprintf_internal_r+0xe30>
40808cfc:	843ffc04 	addi	r16,r16,-16
40808d00:	01800044 	movi	r6,1
40808d04:	000b883a 	mov	r5,zero
40808d08:	d811883a 	mov	r8,sp
40808d0c:	3c3ff316 	blt	r7,r16,40808cdc <__alt_mem_onchip_flash_0_data+0xff7c8cdc>
40808d10:	da402517 	ldw	r9,148(sp)
40808d14:	e007883a 	mov	r3,fp
40808d18:	8039883a 	mov	fp,r16
40808d1c:	1821883a 	mov	r16,r3
40808d20:	d8c02417 	ldw	r3,144(sp)
40808d24:	1705883a 	add	r2,r2,fp
40808d28:	47000115 	stw	fp,4(r8)
40808d2c:	40c00015 	stw	r3,0(r8)
40808d30:	d8801c15 	stw	r2,112(sp)
40808d34:	d9801b15 	stw	r6,108(sp)
40808d38:	00c001c4 	movi	r3,7
40808d3c:	19827616 	blt	r3,r6,40809718 <___vfiprintf_internal_r+0xfbc>
40808d40:	4cf9c83a 	sub	fp,r9,r19
40808d44:	42000204 	addi	r8,r8,8
40808d48:	31000044 	addi	r4,r6,1
40808d4c:	300b883a 	mov	r5,r6
40808d50:	07018516 	blt	zero,fp,40809368 <___vfiprintf_internal_r+0xc0c>
40808d54:	9885883a 	add	r2,r19,r2
40808d58:	45400015 	stw	r21,0(r8)
40808d5c:	44c00115 	stw	r19,4(r8)
40808d60:	d8801c15 	stw	r2,112(sp)
40808d64:	d9001b15 	stw	r4,108(sp)
40808d68:	00c001c4 	movi	r3,7
40808d6c:	1901dd0e 	bge	r3,r4,408094e4 <___vfiprintf_internal_r+0xd88>
40808d70:	1002401e 	bne	r2,zero,40809674 <___vfiprintf_internal_r+0xf18>
40808d74:	d8001b15 	stw	zero,108(sp)
40808d78:	a2c0010c 	andi	r11,r20,4
40808d7c:	58000226 	beq	r11,zero,40808d88 <___vfiprintf_internal_r+0x62c>
40808d80:	8ca7c83a 	sub	r19,r17,r18
40808d84:	04c2f216 	blt	zero,r19,40809950 <___vfiprintf_internal_r+0x11f4>
40808d88:	8c80010e 	bge	r17,r18,40808d90 <___vfiprintf_internal_r+0x634>
40808d8c:	9023883a 	mov	r17,r18
40808d90:	da802317 	ldw	r10,140(sp)
40808d94:	5455883a 	add	r10,r10,r17
40808d98:	da802315 	stw	r10,140(sp)
40808d9c:	d8001b15 	stw	zero,108(sp)
40808da0:	d811883a 	mov	r8,sp
40808da4:	003ea206 	br	40808830 <__alt_mem_onchip_flash_0_data+0xff7c8830>
40808da8:	a5000814 	ori	r20,r20,32
40808dac:	80c00007 	ldb	r3,0(r16)
40808db0:	003ec906 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40808db4:	80c00007 	ldb	r3,0(r16)
40808db8:	1b030926 	beq	r3,r12,408099e0 <___vfiprintf_internal_r+0x1284>
40808dbc:	a5000414 	ori	r20,r20,16
40808dc0:	003ec506 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40808dc4:	21003fcc 	andi	r4,r4,255
40808dc8:	20035e1e 	bne	r4,zero,40809b44 <___vfiprintf_internal_r+0x13e8>
40808dcc:	a080080c 	andi	r2,r20,32
40808dd0:	1002a526 	beq	r2,zero,40809868 <___vfiprintf_internal_r+0x110c>
40808dd4:	da802217 	ldw	r10,136(sp)
40808dd8:	50800017 	ldw	r2,0(r10)
40808ddc:	da802317 	ldw	r10,140(sp)
40808de0:	5007d7fa 	srai	r3,r10,31
40808de4:	da802217 	ldw	r10,136(sp)
40808de8:	10c00115 	stw	r3,4(r2)
40808dec:	52800104 	addi	r10,r10,4
40808df0:	da802215 	stw	r10,136(sp)
40808df4:	da802317 	ldw	r10,140(sp)
40808df8:	12800015 	stw	r10,0(r2)
40808dfc:	003e8c06 	br	40808830 <__alt_mem_onchip_flash_0_data+0xff7c8830>
40808e00:	21003fcc 	andi	r4,r4,255
40808e04:	2003511e 	bne	r4,zero,40809b4c <___vfiprintf_internal_r+0x13f0>
40808e08:	a080080c 	andi	r2,r20,32
40808e0c:	1000a126 	beq	r2,zero,40809094 <___vfiprintf_internal_r+0x938>
40808e10:	da802217 	ldw	r10,136(sp)
40808e14:	d8001d85 	stb	zero,118(sp)
40808e18:	50800204 	addi	r2,r10,8
40808e1c:	54800017 	ldw	r18,0(r10)
40808e20:	54c00117 	ldw	r19,4(r10)
40808e24:	4802b416 	blt	r9,zero,408098f8 <___vfiprintf_internal_r+0x119c>
40808e28:	013fdfc4 	movi	r4,-129
40808e2c:	94c6b03a 	or	r3,r18,r19
40808e30:	d8802215 	stw	r2,136(sp)
40808e34:	a128703a 	and	r20,r20,r4
40808e38:	1800a226 	beq	r3,zero,408090c4 <___vfiprintf_internal_r+0x968>
40808e3c:	0039883a 	mov	fp,zero
40808e40:	dd401a04 	addi	r21,sp,104
40808e44:	9006d0fa 	srli	r3,r18,3
40808e48:	9808977a 	slli	r4,r19,29
40808e4c:	9826d0fa 	srli	r19,r19,3
40808e50:	948001cc 	andi	r18,r18,7
40808e54:	90800c04 	addi	r2,r18,48
40808e58:	ad7fffc4 	addi	r21,r21,-1
40808e5c:	20e4b03a 	or	r18,r4,r3
40808e60:	a8800005 	stb	r2,0(r21)
40808e64:	94c6b03a 	or	r3,r18,r19
40808e68:	183ff61e 	bne	r3,zero,40808e44 <__alt_mem_onchip_flash_0_data+0xff7c8e44>
40808e6c:	a0c0004c 	andi	r3,r20,1
40808e70:	18005926 	beq	r3,zero,40808fd8 <___vfiprintf_internal_r+0x87c>
40808e74:	10803fcc 	andi	r2,r2,255
40808e78:	1080201c 	xori	r2,r2,128
40808e7c:	10bfe004 	addi	r2,r2,-128
40808e80:	00c00c04 	movi	r3,48
40808e84:	10c05426 	beq	r2,r3,40808fd8 <___vfiprintf_internal_r+0x87c>
40808e88:	da801e17 	ldw	r10,120(sp)
40808e8c:	a8bfffc4 	addi	r2,r21,-1
40808e90:	a8ffffc5 	stb	r3,-1(r21)
40808e94:	50a7c83a 	sub	r19,r10,r2
40808e98:	102b883a 	mov	r21,r2
40808e9c:	003f2f06 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
40808ea0:	21003fcc 	andi	r4,r4,255
40808ea4:	2003421e 	bne	r4,zero,40809bb0 <___vfiprintf_internal_r+0x1454>
40808ea8:	00902074 	movhi	r2,16513
40808eac:	1086ae04 	addi	r2,r2,6840
40808eb0:	d8802615 	stw	r2,152(sp)
40808eb4:	a080080c 	andi	r2,r20,32
40808eb8:	1000aa26 	beq	r2,zero,40809164 <___vfiprintf_internal_r+0xa08>
40808ebc:	da802217 	ldw	r10,136(sp)
40808ec0:	54800017 	ldw	r18,0(r10)
40808ec4:	54c00117 	ldw	r19,4(r10)
40808ec8:	52800204 	addi	r10,r10,8
40808ecc:	da802215 	stw	r10,136(sp)
40808ed0:	a080004c 	andi	r2,r20,1
40808ed4:	1001d226 	beq	r2,zero,40809620 <___vfiprintf_internal_r+0xec4>
40808ed8:	94c4b03a 	or	r2,r18,r19
40808edc:	1002351e 	bne	r2,zero,408097b4 <___vfiprintf_internal_r+0x1058>
40808ee0:	d8001d85 	stb	zero,118(sp)
40808ee4:	48022216 	blt	r9,zero,40809770 <___vfiprintf_internal_r+0x1014>
40808ee8:	00bfdfc4 	movi	r2,-129
40808eec:	a0a8703a 	and	r20,r20,r2
40808ef0:	003f1506 	br	40808b48 <__alt_mem_onchip_flash_0_data+0xff7c8b48>
40808ef4:	da802217 	ldw	r10,136(sp)
40808ef8:	04800044 	movi	r18,1
40808efc:	d8001d85 	stb	zero,118(sp)
40808f00:	50800017 	ldw	r2,0(r10)
40808f04:	52800104 	addi	r10,r10,4
40808f08:	da802215 	stw	r10,136(sp)
40808f0c:	d8801005 	stb	r2,64(sp)
40808f10:	9027883a 	mov	r19,r18
40808f14:	dd401004 	addi	r21,sp,64
40808f18:	0013883a 	mov	r9,zero
40808f1c:	003f1706 	br	40808b7c <__alt_mem_onchip_flash_0_data+0xff7c8b7c>
40808f20:	21003fcc 	andi	r4,r4,255
40808f24:	2003201e 	bne	r4,zero,40809ba8 <___vfiprintf_internal_r+0x144c>
40808f28:	a080080c 	andi	r2,r20,32
40808f2c:	10004b26 	beq	r2,zero,4080905c <___vfiprintf_internal_r+0x900>
40808f30:	da802217 	ldw	r10,136(sp)
40808f34:	50800117 	ldw	r2,4(r10)
40808f38:	54800017 	ldw	r18,0(r10)
40808f3c:	52800204 	addi	r10,r10,8
40808f40:	da802215 	stw	r10,136(sp)
40808f44:	1027883a 	mov	r19,r2
40808f48:	10022c16 	blt	r2,zero,408097fc <___vfiprintf_internal_r+0x10a0>
40808f4c:	df001d83 	ldbu	fp,118(sp)
40808f50:	48007216 	blt	r9,zero,4080911c <___vfiprintf_internal_r+0x9c0>
40808f54:	00ffdfc4 	movi	r3,-129
40808f58:	94c4b03a 	or	r2,r18,r19
40808f5c:	a0e8703a 	and	r20,r20,r3
40808f60:	1000cc26 	beq	r2,zero,40809294 <___vfiprintf_internal_r+0xb38>
40808f64:	98021026 	beq	r19,zero,408097a8 <___vfiprintf_internal_r+0x104c>
40808f68:	dc402415 	stw	r17,144(sp)
40808f6c:	dc002515 	stw	r16,148(sp)
40808f70:	9823883a 	mov	r17,r19
40808f74:	9021883a 	mov	r16,r18
40808f78:	dd401a04 	addi	r21,sp,104
40808f7c:	4825883a 	mov	r18,r9
40808f80:	4027883a 	mov	r19,r8
40808f84:	8009883a 	mov	r4,r16
40808f88:	880b883a 	mov	r5,r17
40808f8c:	01800284 	movi	r6,10
40808f90:	000f883a 	mov	r7,zero
40808f94:	080ab3c0 	call	4080ab3c <__umoddi3>
40808f98:	10800c04 	addi	r2,r2,48
40808f9c:	ad7fffc4 	addi	r21,r21,-1
40808fa0:	8009883a 	mov	r4,r16
40808fa4:	880b883a 	mov	r5,r17
40808fa8:	a8800005 	stb	r2,0(r21)
40808fac:	01800284 	movi	r6,10
40808fb0:	000f883a 	mov	r7,zero
40808fb4:	080a5c40 	call	4080a5c4 <__udivdi3>
40808fb8:	1021883a 	mov	r16,r2
40808fbc:	10c4b03a 	or	r2,r2,r3
40808fc0:	1823883a 	mov	r17,r3
40808fc4:	103fef1e 	bne	r2,zero,40808f84 <__alt_mem_onchip_flash_0_data+0xff7c8f84>
40808fc8:	dc402417 	ldw	r17,144(sp)
40808fcc:	dc002517 	ldw	r16,148(sp)
40808fd0:	9013883a 	mov	r9,r18
40808fd4:	9811883a 	mov	r8,r19
40808fd8:	da801e17 	ldw	r10,120(sp)
40808fdc:	5567c83a 	sub	r19,r10,r21
40808fe0:	003ede06 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
40808fe4:	38803fcc 	andi	r2,r7,255
40808fe8:	1080201c 	xori	r2,r2,128
40808fec:	10bfe004 	addi	r2,r2,-128
40808ff0:	1002371e 	bne	r2,zero,408098d0 <___vfiprintf_internal_r+0x1174>
40808ff4:	01000044 	movi	r4,1
40808ff8:	01c00804 	movi	r7,32
40808ffc:	80c00007 	ldb	r3,0(r16)
40809000:	003e3506 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40809004:	a5000054 	ori	r20,r20,1
40809008:	80c00007 	ldb	r3,0(r16)
4080900c:	003e3206 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40809010:	a5002014 	ori	r20,r20,128
40809014:	80c00007 	ldb	r3,0(r16)
40809018:	003e2f06 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
4080901c:	8015883a 	mov	r10,r16
40809020:	0023883a 	mov	r17,zero
40809024:	18bff404 	addi	r2,r3,-48
40809028:	50c00007 	ldb	r3,0(r10)
4080902c:	8c4002a4 	muli	r17,r17,10
40809030:	84000044 	addi	r16,r16,1
40809034:	8015883a 	mov	r10,r16
40809038:	1463883a 	add	r17,r2,r17
4080903c:	18bff404 	addi	r2,r3,-48
40809040:	30bff92e 	bgeu	r6,r2,40809028 <__alt_mem_onchip_flash_0_data+0xff7c9028>
40809044:	003e2506 	br	408088dc <__alt_mem_onchip_flash_0_data+0xff7c88dc>
40809048:	21003fcc 	andi	r4,r4,255
4080904c:	2002d41e 	bne	r4,zero,40809ba0 <___vfiprintf_internal_r+0x1444>
40809050:	a5000414 	ori	r20,r20,16
40809054:	a080080c 	andi	r2,r20,32
40809058:	103fb51e 	bne	r2,zero,40808f30 <__alt_mem_onchip_flash_0_data+0xff7c8f30>
4080905c:	a080040c 	andi	r2,r20,16
40809060:	1001f826 	beq	r2,zero,40809844 <___vfiprintf_internal_r+0x10e8>
40809064:	da802217 	ldw	r10,136(sp)
40809068:	54800017 	ldw	r18,0(r10)
4080906c:	52800104 	addi	r10,r10,4
40809070:	da802215 	stw	r10,136(sp)
40809074:	9027d7fa 	srai	r19,r18,31
40809078:	9805883a 	mov	r2,r19
4080907c:	003fb206 	br	40808f48 <__alt_mem_onchip_flash_0_data+0xff7c8f48>
40809080:	21003fcc 	andi	r4,r4,255
40809084:	2002c41e 	bne	r4,zero,40809b98 <___vfiprintf_internal_r+0x143c>
40809088:	a5000414 	ori	r20,r20,16
4080908c:	a080080c 	andi	r2,r20,32
40809090:	103f5f1e 	bne	r2,zero,40808e10 <__alt_mem_onchip_flash_0_data+0xff7c8e10>
40809094:	a080040c 	andi	r2,r20,16
40809098:	10020f26 	beq	r2,zero,408098d8 <___vfiprintf_internal_r+0x117c>
4080909c:	da802217 	ldw	r10,136(sp)
408090a0:	d8001d85 	stb	zero,118(sp)
408090a4:	0027883a 	mov	r19,zero
408090a8:	50800104 	addi	r2,r10,4
408090ac:	54800017 	ldw	r18,0(r10)
408090b0:	48021116 	blt	r9,zero,408098f8 <___vfiprintf_internal_r+0x119c>
408090b4:	00ffdfc4 	movi	r3,-129
408090b8:	d8802215 	stw	r2,136(sp)
408090bc:	a0e8703a 	and	r20,r20,r3
408090c0:	903f5e1e 	bne	r18,zero,40808e3c <__alt_mem_onchip_flash_0_data+0xff7c8e3c>
408090c4:	0039883a 	mov	fp,zero
408090c8:	4802a626 	beq	r9,zero,40809b64 <___vfiprintf_internal_r+0x1408>
408090cc:	0025883a 	mov	r18,zero
408090d0:	0027883a 	mov	r19,zero
408090d4:	003f5a06 	br	40808e40 <__alt_mem_onchip_flash_0_data+0xff7c8e40>
408090d8:	21003fcc 	andi	r4,r4,255
408090dc:	20029f1e 	bne	r4,zero,40809b5c <___vfiprintf_internal_r+0x1400>
408090e0:	a5000414 	ori	r20,r20,16
408090e4:	a080080c 	andi	r2,r20,32
408090e8:	10005e1e 	bne	r2,zero,40809264 <___vfiprintf_internal_r+0xb08>
408090ec:	a080040c 	andi	r2,r20,16
408090f0:	1001a21e 	bne	r2,zero,4080977c <___vfiprintf_internal_r+0x1020>
408090f4:	a080100c 	andi	r2,r20,64
408090f8:	d8001d85 	stb	zero,118(sp)
408090fc:	da802217 	ldw	r10,136(sp)
40809100:	1002231e 	bne	r2,zero,40809990 <___vfiprintf_internal_r+0x1234>
40809104:	50800104 	addi	r2,r10,4
40809108:	54800017 	ldw	r18,0(r10)
4080910c:	0027883a 	mov	r19,zero
40809110:	4801a00e 	bge	r9,zero,40809794 <___vfiprintf_internal_r+0x1038>
40809114:	d8802215 	stw	r2,136(sp)
40809118:	0039883a 	mov	fp,zero
4080911c:	94c4b03a 	or	r2,r18,r19
40809120:	103f901e 	bne	r2,zero,40808f64 <__alt_mem_onchip_flash_0_data+0xff7c8f64>
40809124:	00800044 	movi	r2,1
40809128:	10803fcc 	andi	r2,r2,255
4080912c:	00c00044 	movi	r3,1
40809130:	10c05926 	beq	r2,r3,40809298 <___vfiprintf_internal_r+0xb3c>
40809134:	00c00084 	movi	r3,2
40809138:	10ffe41e 	bne	r2,r3,408090cc <__alt_mem_onchip_flash_0_data+0xff7c90cc>
4080913c:	0025883a 	mov	r18,zero
40809140:	0027883a 	mov	r19,zero
40809144:	00013d06 	br	4080963c <___vfiprintf_internal_r+0xee0>
40809148:	21003fcc 	andi	r4,r4,255
4080914c:	2002811e 	bne	r4,zero,40809b54 <___vfiprintf_internal_r+0x13f8>
40809150:	00902074 	movhi	r2,16513
40809154:	1086a904 	addi	r2,r2,6820
40809158:	d8802615 	stw	r2,152(sp)
4080915c:	a080080c 	andi	r2,r20,32
40809160:	103f561e 	bne	r2,zero,40808ebc <__alt_mem_onchip_flash_0_data+0xff7c8ebc>
40809164:	a080040c 	andi	r2,r20,16
40809168:	1001d126 	beq	r2,zero,408098b0 <___vfiprintf_internal_r+0x1154>
4080916c:	da802217 	ldw	r10,136(sp)
40809170:	0027883a 	mov	r19,zero
40809174:	54800017 	ldw	r18,0(r10)
40809178:	52800104 	addi	r10,r10,4
4080917c:	da802215 	stw	r10,136(sp)
40809180:	003f5306 	br	40808ed0 <__alt_mem_onchip_flash_0_data+0xff7c8ed0>
40809184:	da802217 	ldw	r10,136(sp)
40809188:	d8001d85 	stb	zero,118(sp)
4080918c:	55400017 	ldw	r21,0(r10)
40809190:	50c00104 	addi	r3,r10,4
40809194:	a8024226 	beq	r21,zero,40809aa0 <___vfiprintf_internal_r+0x1344>
40809198:	48021816 	blt	r9,zero,408099fc <___vfiprintf_internal_r+0x12a0>
4080919c:	480d883a 	mov	r6,r9
408091a0:	000b883a 	mov	r5,zero
408091a4:	a809883a 	mov	r4,r21
408091a8:	d8c02a15 	stw	r3,168(sp)
408091ac:	da002b15 	stw	r8,172(sp)
408091b0:	da402c15 	stw	r9,176(sp)
408091b4:	0806a800 	call	40806a80 <memchr>
408091b8:	d8c02a17 	ldw	r3,168(sp)
408091bc:	da002b17 	ldw	r8,172(sp)
408091c0:	da402c17 	ldw	r9,176(sp)
408091c4:	10024826 	beq	r2,zero,40809ae8 <___vfiprintf_internal_r+0x138c>
408091c8:	1567c83a 	sub	r19,r2,r21
408091cc:	df001d83 	ldbu	fp,118(sp)
408091d0:	d8c02215 	stw	r3,136(sp)
408091d4:	0013883a 	mov	r9,zero
408091d8:	003e6006 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
408091dc:	21003fcc 	andi	r4,r4,255
408091e0:	203fc026 	beq	r4,zero,408090e4 <__alt_mem_onchip_flash_0_data+0xff7c90e4>
408091e4:	d9c01d85 	stb	r7,118(sp)
408091e8:	003fbe06 	br	408090e4 <__alt_mem_onchip_flash_0_data+0xff7c90e4>
408091ec:	da802217 	ldw	r10,136(sp)
408091f0:	54400017 	ldw	r17,0(r10)
408091f4:	50800104 	addi	r2,r10,4
408091f8:	883e3b16 	blt	r17,zero,40808ae8 <__alt_mem_onchip_flash_0_data+0xff7c8ae8>
408091fc:	d8802215 	stw	r2,136(sp)
40809200:	80c00007 	ldb	r3,0(r16)
40809204:	003db406 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40809208:	01000044 	movi	r4,1
4080920c:	01c00ac4 	movi	r7,43
40809210:	80c00007 	ldb	r3,0(r16)
40809214:	003db006 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40809218:	80c00007 	ldb	r3,0(r16)
4080921c:	82800044 	addi	r10,r16,1
40809220:	1b423c26 	beq	r3,r13,40809b14 <___vfiprintf_internal_r+0x13b8>
40809224:	18bff404 	addi	r2,r3,-48
40809228:	0013883a 	mov	r9,zero
4080922c:	30822b36 	bltu	r6,r2,40809adc <___vfiprintf_internal_r+0x1380>
40809230:	50c00007 	ldb	r3,0(r10)
40809234:	4a4002a4 	muli	r9,r9,10
40809238:	54000044 	addi	r16,r10,1
4080923c:	8015883a 	mov	r10,r16
40809240:	4893883a 	add	r9,r9,r2
40809244:	18bff404 	addi	r2,r3,-48
40809248:	30bff92e 	bgeu	r6,r2,40809230 <__alt_mem_onchip_flash_0_data+0xff7c9230>
4080924c:	483da30e 	bge	r9,zero,408088dc <__alt_mem_onchip_flash_0_data+0xff7c88dc>
40809250:	027fffc4 	movi	r9,-1
40809254:	003da106 	br	408088dc <__alt_mem_onchip_flash_0_data+0xff7c88dc>
40809258:	a5001014 	ori	r20,r20,64
4080925c:	80c00007 	ldb	r3,0(r16)
40809260:	003d9d06 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40809264:	da802217 	ldw	r10,136(sp)
40809268:	d8001d85 	stb	zero,118(sp)
4080926c:	50c00204 	addi	r3,r10,8
40809270:	54800017 	ldw	r18,0(r10)
40809274:	54c00117 	ldw	r19,4(r10)
40809278:	4801ca16 	blt	r9,zero,408099a4 <___vfiprintf_internal_r+0x1248>
4080927c:	013fdfc4 	movi	r4,-129
40809280:	94c4b03a 	or	r2,r18,r19
40809284:	d8c02215 	stw	r3,136(sp)
40809288:	a128703a 	and	r20,r20,r4
4080928c:	0039883a 	mov	fp,zero
40809290:	103f341e 	bne	r2,zero,40808f64 <__alt_mem_onchip_flash_0_data+0xff7c8f64>
40809294:	483e2e26 	beq	r9,zero,40808b50 <__alt_mem_onchip_flash_0_data+0xff7c8b50>
40809298:	0025883a 	mov	r18,zero
4080929c:	94800c04 	addi	r18,r18,48
408092a0:	dc8019c5 	stb	r18,103(sp)
408092a4:	dcc02717 	ldw	r19,156(sp)
408092a8:	dd4019c4 	addi	r21,sp,103
408092ac:	003e2b06 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
408092b0:	21003fcc 	andi	r4,r4,255
408092b4:	2002361e 	bne	r4,zero,40809b90 <___vfiprintf_internal_r+0x1434>
408092b8:	1801c126 	beq	r3,zero,408099c0 <___vfiprintf_internal_r+0x1264>
408092bc:	04800044 	movi	r18,1
408092c0:	d8c01005 	stb	r3,64(sp)
408092c4:	d8001d85 	stb	zero,118(sp)
408092c8:	9027883a 	mov	r19,r18
408092cc:	dd401004 	addi	r21,sp,64
408092d0:	003f1106 	br	40808f18 <__alt_mem_onchip_flash_0_data+0xff7c8f18>
408092d4:	d9402117 	ldw	r5,132(sp)
408092d8:	d9002017 	ldw	r4,128(sp)
408092dc:	d9801a04 	addi	r6,sp,104
408092e0:	d9c02b15 	stw	r7,172(sp)
408092e4:	dbc02a15 	stw	r15,168(sp)
408092e8:	08086480 	call	40808648 <__sprint_r.part.0>
408092ec:	d9c02b17 	ldw	r7,172(sp)
408092f0:	dbc02a17 	ldw	r15,168(sp)
408092f4:	10006d1e 	bne	r2,zero,408094ac <___vfiprintf_internal_r+0xd50>
408092f8:	d9801b17 	ldw	r6,108(sp)
408092fc:	d8801c17 	ldw	r2,112(sp)
40809300:	d811883a 	mov	r8,sp
40809304:	31400044 	addi	r5,r6,1
40809308:	003e3306 	br	40808bd8 <__alt_mem_onchip_flash_0_data+0xff7c8bd8>
4080930c:	d9401b17 	ldw	r5,108(sp)
40809310:	d8801c17 	ldw	r2,112(sp)
40809314:	29000044 	addi	r4,r5,1
40809318:	d8c01d87 	ldb	r3,118(sp)
4080931c:	183e4d26 	beq	r3,zero,40808c54 <__alt_mem_onchip_flash_0_data+0xff7c8c54>
40809320:	00c00044 	movi	r3,1
40809324:	d9401d84 	addi	r5,sp,118
40809328:	10c5883a 	add	r2,r2,r3
4080932c:	41400015 	stw	r5,0(r8)
40809330:	40c00115 	stw	r3,4(r8)
40809334:	d8801c15 	stw	r2,112(sp)
40809338:	d9001b15 	stw	r4,108(sp)
4080933c:	014001c4 	movi	r5,7
40809340:	2900a90e 	bge	r5,r4,408095e8 <___vfiprintf_internal_r+0xe8c>
40809344:	1000da1e 	bne	r2,zero,408096b0 <___vfiprintf_internal_r+0xf54>
40809348:	7000ab1e 	bne	r14,zero,408095f8 <___vfiprintf_internal_r+0xe9c>
4080934c:	000b883a 	mov	r5,zero
40809350:	1809883a 	mov	r4,r3
40809354:	d811883a 	mov	r8,sp
40809358:	00c02004 	movi	r3,128
4080935c:	e0fe4d26 	beq	fp,r3,40808c94 <__alt_mem_onchip_flash_0_data+0xff7c8c94>
40809360:	4cf9c83a 	sub	fp,r9,r19
40809364:	073e7b0e 	bge	zero,fp,40808d54 <__alt_mem_onchip_flash_0_data+0xff7c8d54>
40809368:	01c00404 	movi	r7,16
4080936c:	3f01900e 	bge	r7,fp,408099b0 <___vfiprintf_internal_r+0x1254>
40809370:	00d02074 	movhi	r3,16513
40809374:	18c70f04 	addi	r3,r3,7228
40809378:	d8c02415 	stw	r3,144(sp)
4080937c:	034001c4 	movi	r13,7
40809380:	00000506 	br	40809398 <___vfiprintf_internal_r+0xc3c>
40809384:	29000084 	addi	r4,r5,2
40809388:	42000204 	addi	r8,r8,8
4080938c:	180b883a 	mov	r5,r3
40809390:	e73ffc04 	addi	fp,fp,-16
40809394:	3f000d0e 	bge	r7,fp,408093cc <___vfiprintf_internal_r+0xc70>
40809398:	10800404 	addi	r2,r2,16
4080939c:	28c00044 	addi	r3,r5,1
408093a0:	45c00015 	stw	r23,0(r8)
408093a4:	41c00115 	stw	r7,4(r8)
408093a8:	d8801c15 	stw	r2,112(sp)
408093ac:	d8c01b15 	stw	r3,108(sp)
408093b0:	68fff40e 	bge	r13,r3,40809384 <__alt_mem_onchip_flash_0_data+0xff7c9384>
408093b4:	1000101e 	bne	r2,zero,408093f8 <___vfiprintf_internal_r+0xc9c>
408093b8:	e73ffc04 	addi	fp,fp,-16
408093bc:	01000044 	movi	r4,1
408093c0:	000b883a 	mov	r5,zero
408093c4:	d811883a 	mov	r8,sp
408093c8:	3f3ff316 	blt	r7,fp,40809398 <__alt_mem_onchip_flash_0_data+0xff7c9398>
408093cc:	da802417 	ldw	r10,144(sp)
408093d0:	1705883a 	add	r2,r2,fp
408093d4:	47000115 	stw	fp,4(r8)
408093d8:	42800015 	stw	r10,0(r8)
408093dc:	d8801c15 	stw	r2,112(sp)
408093e0:	d9001b15 	stw	r4,108(sp)
408093e4:	00c001c4 	movi	r3,7
408093e8:	19003616 	blt	r3,r4,408094c4 <___vfiprintf_internal_r+0xd68>
408093ec:	42000204 	addi	r8,r8,8
408093f0:	21000044 	addi	r4,r4,1
408093f4:	003e5706 	br	40808d54 <__alt_mem_onchip_flash_0_data+0xff7c8d54>
408093f8:	d9402117 	ldw	r5,132(sp)
408093fc:	d9002017 	ldw	r4,128(sp)
40809400:	d9801a04 	addi	r6,sp,104
40809404:	d9c02b15 	stw	r7,172(sp)
40809408:	db402a15 	stw	r13,168(sp)
4080940c:	08086480 	call	40808648 <__sprint_r.part.0>
40809410:	d9c02b17 	ldw	r7,172(sp)
40809414:	db402a17 	ldw	r13,168(sp)
40809418:	1000241e 	bne	r2,zero,408094ac <___vfiprintf_internal_r+0xd50>
4080941c:	d9401b17 	ldw	r5,108(sp)
40809420:	d8801c17 	ldw	r2,112(sp)
40809424:	d811883a 	mov	r8,sp
40809428:	29000044 	addi	r4,r5,1
4080942c:	003fd806 	br	40809390 <__alt_mem_onchip_flash_0_data+0xff7c9390>
40809430:	d9401b17 	ldw	r5,108(sp)
40809434:	00d02074 	movhi	r3,16513
40809438:	18c71304 	addi	r3,r3,7244
4080943c:	d8c02415 	stw	r3,144(sp)
40809440:	29400044 	addi	r5,r5,1
40809444:	d8c02417 	ldw	r3,144(sp)
40809448:	14c5883a 	add	r2,r2,r19
4080944c:	44c00115 	stw	r19,4(r8)
40809450:	40c00015 	stw	r3,0(r8)
40809454:	d8801c15 	stw	r2,112(sp)
40809458:	d9401b15 	stw	r5,108(sp)
4080945c:	00c001c4 	movi	r3,7
40809460:	1940070e 	bge	r3,r5,40809480 <___vfiprintf_internal_r+0xd24>
40809464:	103e4826 	beq	r2,zero,40808d88 <__alt_mem_onchip_flash_0_data+0xff7c8d88>
40809468:	d9402117 	ldw	r5,132(sp)
4080946c:	d9002017 	ldw	r4,128(sp)
40809470:	d9801a04 	addi	r6,sp,104
40809474:	08086480 	call	40808648 <__sprint_r.part.0>
40809478:	10000c1e 	bne	r2,zero,408094ac <___vfiprintf_internal_r+0xd50>
4080947c:	d8801c17 	ldw	r2,112(sp)
40809480:	8c80010e 	bge	r17,r18,40809488 <___vfiprintf_internal_r+0xd2c>
40809484:	9023883a 	mov	r17,r18
40809488:	da802317 	ldw	r10,140(sp)
4080948c:	5455883a 	add	r10,r10,r17
40809490:	da802315 	stw	r10,140(sp)
40809494:	103e4126 	beq	r2,zero,40808d9c <__alt_mem_onchip_flash_0_data+0xff7c8d9c>
40809498:	d9402117 	ldw	r5,132(sp)
4080949c:	d9002017 	ldw	r4,128(sp)
408094a0:	d9801a04 	addi	r6,sp,104
408094a4:	08086480 	call	40808648 <__sprint_r.part.0>
408094a8:	103e3c26 	beq	r2,zero,40808d9c <__alt_mem_onchip_flash_0_data+0xff7c8d9c>
408094ac:	dd002117 	ldw	r20,132(sp)
408094b0:	a080030b 	ldhu	r2,12(r20)
408094b4:	1080100c 	andi	r2,r2,64
408094b8:	1001231e 	bne	r2,zero,40809948 <___vfiprintf_internal_r+0x11ec>
408094bc:	d8802317 	ldw	r2,140(sp)
408094c0:	003d7b06 	br	40808ab0 <__alt_mem_onchip_flash_0_data+0xff7c8ab0>
408094c4:	1000991e 	bne	r2,zero,4080972c <___vfiprintf_internal_r+0xfd0>
408094c8:	00c00044 	movi	r3,1
408094cc:	9805883a 	mov	r2,r19
408094d0:	dd400015 	stw	r21,0(sp)
408094d4:	dcc00115 	stw	r19,4(sp)
408094d8:	dcc01c15 	stw	r19,112(sp)
408094dc:	d8c01b15 	stw	r3,108(sp)
408094e0:	d811883a 	mov	r8,sp
408094e4:	42000204 	addi	r8,r8,8
408094e8:	a2c0010c 	andi	r11,r20,4
408094ec:	583fe426 	beq	r11,zero,40809480 <__alt_mem_onchip_flash_0_data+0xff7c9480>
408094f0:	8ca7c83a 	sub	r19,r17,r18
408094f4:	04ffe20e 	bge	zero,r19,40809480 <__alt_mem_onchip_flash_0_data+0xff7c9480>
408094f8:	01c00404 	movi	r7,16
408094fc:	3cffcc0e 	bge	r7,r19,40809430 <__alt_mem_onchip_flash_0_data+0xff7c9430>
40809500:	02902074 	movhi	r10,16513
40809504:	52871304 	addi	r10,r10,7244
40809508:	d9001b17 	ldw	r4,108(sp)
4080950c:	da802415 	stw	r10,144(sp)
40809510:	382b883a 	mov	r21,r7
40809514:	050001c4 	movi	r20,7
40809518:	df002017 	ldw	fp,128(sp)
4080951c:	00000506 	br	40809534 <___vfiprintf_internal_r+0xdd8>
40809520:	21400084 	addi	r5,r4,2
40809524:	42000204 	addi	r8,r8,8
40809528:	1809883a 	mov	r4,r3
4080952c:	9cfffc04 	addi	r19,r19,-16
40809530:	acffc40e 	bge	r21,r19,40809444 <__alt_mem_onchip_flash_0_data+0xff7c9444>
40809534:	10800404 	addi	r2,r2,16
40809538:	20c00044 	addi	r3,r4,1
4080953c:	45800015 	stw	r22,0(r8)
40809540:	45400115 	stw	r21,4(r8)
40809544:	d8801c15 	stw	r2,112(sp)
40809548:	d8c01b15 	stw	r3,108(sp)
4080954c:	a0fff40e 	bge	r20,r3,40809520 <__alt_mem_onchip_flash_0_data+0xff7c9520>
40809550:	1000041e 	bne	r2,zero,40809564 <___vfiprintf_internal_r+0xe08>
40809554:	01400044 	movi	r5,1
40809558:	0009883a 	mov	r4,zero
4080955c:	d811883a 	mov	r8,sp
40809560:	003ff206 	br	4080952c <__alt_mem_onchip_flash_0_data+0xff7c952c>
40809564:	d9402117 	ldw	r5,132(sp)
40809568:	d9801a04 	addi	r6,sp,104
4080956c:	e009883a 	mov	r4,fp
40809570:	08086480 	call	40808648 <__sprint_r.part.0>
40809574:	103fcd1e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
40809578:	d9001b17 	ldw	r4,108(sp)
4080957c:	d8801c17 	ldw	r2,112(sp)
40809580:	d811883a 	mov	r8,sp
40809584:	21400044 	addi	r5,r4,1
40809588:	003fe806 	br	4080952c <__alt_mem_onchip_flash_0_data+0xff7c952c>
4080958c:	d9402117 	ldw	r5,132(sp)
40809590:	d9002017 	ldw	r4,128(sp)
40809594:	d9801a04 	addi	r6,sp,104
40809598:	d9c02b15 	stw	r7,172(sp)
4080959c:	db402a15 	stw	r13,168(sp)
408095a0:	08086480 	call	40808648 <__sprint_r.part.0>
408095a4:	d9c02b17 	ldw	r7,172(sp)
408095a8:	db402a17 	ldw	r13,168(sp)
408095ac:	103fbf1e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
408095b0:	d9401b17 	ldw	r5,108(sp)
408095b4:	d8801c17 	ldw	r2,112(sp)
408095b8:	d811883a 	mov	r8,sp
408095bc:	29800044 	addi	r6,r5,1
408095c0:	003dc406 	br	40808cd4 <__alt_mem_onchip_flash_0_data+0xff7c8cd4>
408095c4:	1000d21e 	bne	r2,zero,40809910 <___vfiprintf_internal_r+0x11b4>
408095c8:	d8c01d87 	ldb	r3,118(sp)
408095cc:	18009526 	beq	r3,zero,40809824 <___vfiprintf_internal_r+0x10c8>
408095d0:	00800044 	movi	r2,1
408095d4:	d8c01d84 	addi	r3,sp,118
408095d8:	1009883a 	mov	r4,r2
408095dc:	d8c00015 	stw	r3,0(sp)
408095e0:	d8800115 	stw	r2,4(sp)
408095e4:	d811883a 	mov	r8,sp
408095e8:	200b883a 	mov	r5,r4
408095ec:	42000204 	addi	r8,r8,8
408095f0:	21000044 	addi	r4,r4,1
408095f4:	003d9706 	br	40808c54 <__alt_mem_onchip_flash_0_data+0xff7c8c54>
408095f8:	d9001d04 	addi	r4,sp,116
408095fc:	00800084 	movi	r2,2
40809600:	d9000015 	stw	r4,0(sp)
40809604:	d8800115 	stw	r2,4(sp)
40809608:	1809883a 	mov	r4,r3
4080960c:	d811883a 	mov	r8,sp
40809610:	200b883a 	mov	r5,r4
40809614:	42000204 	addi	r8,r8,8
40809618:	21000044 	addi	r4,r4,1
4080961c:	003f4e06 	br	40809358 <__alt_mem_onchip_flash_0_data+0xff7c9358>
40809620:	d8001d85 	stb	zero,118(sp)
40809624:	48005016 	blt	r9,zero,40809768 <___vfiprintf_internal_r+0x100c>
40809628:	00ffdfc4 	movi	r3,-129
4080962c:	94c4b03a 	or	r2,r18,r19
40809630:	a0e8703a 	and	r20,r20,r3
40809634:	103d4426 	beq	r2,zero,40808b48 <__alt_mem_onchip_flash_0_data+0xff7c8b48>
40809638:	0039883a 	mov	fp,zero
4080963c:	d9002617 	ldw	r4,152(sp)
40809640:	dd401a04 	addi	r21,sp,104
40809644:	908003cc 	andi	r2,r18,15
40809648:	9806973a 	slli	r3,r19,28
4080964c:	2085883a 	add	r2,r4,r2
40809650:	9024d13a 	srli	r18,r18,4
40809654:	10800003 	ldbu	r2,0(r2)
40809658:	9826d13a 	srli	r19,r19,4
4080965c:	ad7fffc4 	addi	r21,r21,-1
40809660:	1ca4b03a 	or	r18,r3,r18
40809664:	a8800005 	stb	r2,0(r21)
40809668:	94c4b03a 	or	r2,r18,r19
4080966c:	103ff51e 	bne	r2,zero,40809644 <__alt_mem_onchip_flash_0_data+0xff7c9644>
40809670:	003e5906 	br	40808fd8 <__alt_mem_onchip_flash_0_data+0xff7c8fd8>
40809674:	d9402117 	ldw	r5,132(sp)
40809678:	d9002017 	ldw	r4,128(sp)
4080967c:	d9801a04 	addi	r6,sp,104
40809680:	08086480 	call	40808648 <__sprint_r.part.0>
40809684:	103f891e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
40809688:	d8801c17 	ldw	r2,112(sp)
4080968c:	d811883a 	mov	r8,sp
40809690:	003f9506 	br	408094e8 <__alt_mem_onchip_flash_0_data+0xff7c94e8>
40809694:	d9402117 	ldw	r5,132(sp)
40809698:	d9002017 	ldw	r4,128(sp)
4080969c:	d9801a04 	addi	r6,sp,104
408096a0:	08086480 	call	40808648 <__sprint_r.part.0>
408096a4:	103f811e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
408096a8:	d811883a 	mov	r8,sp
408096ac:	003ced06 	br	40808a64 <__alt_mem_onchip_flash_0_data+0xff7c8a64>
408096b0:	d9402117 	ldw	r5,132(sp)
408096b4:	d9002017 	ldw	r4,128(sp)
408096b8:	d9801a04 	addi	r6,sp,104
408096bc:	da402c15 	stw	r9,176(sp)
408096c0:	db802a15 	stw	r14,168(sp)
408096c4:	08086480 	call	40808648 <__sprint_r.part.0>
408096c8:	da402c17 	ldw	r9,176(sp)
408096cc:	db802a17 	ldw	r14,168(sp)
408096d0:	103f761e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
408096d4:	d9401b17 	ldw	r5,108(sp)
408096d8:	d8801c17 	ldw	r2,112(sp)
408096dc:	d811883a 	mov	r8,sp
408096e0:	29000044 	addi	r4,r5,1
408096e4:	003d5b06 	br	40808c54 <__alt_mem_onchip_flash_0_data+0xff7c8c54>
408096e8:	d9402117 	ldw	r5,132(sp)
408096ec:	d9002017 	ldw	r4,128(sp)
408096f0:	d9801a04 	addi	r6,sp,104
408096f4:	da402c15 	stw	r9,176(sp)
408096f8:	08086480 	call	40808648 <__sprint_r.part.0>
408096fc:	da402c17 	ldw	r9,176(sp)
40809700:	103f6a1e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
40809704:	d9401b17 	ldw	r5,108(sp)
40809708:	d8801c17 	ldw	r2,112(sp)
4080970c:	d811883a 	mov	r8,sp
40809710:	29000044 	addi	r4,r5,1
40809714:	003f1006 	br	40809358 <__alt_mem_onchip_flash_0_data+0xff7c9358>
40809718:	1000c31e 	bne	r2,zero,40809a28 <___vfiprintf_internal_r+0x12cc>
4080971c:	01000044 	movi	r4,1
40809720:	000b883a 	mov	r5,zero
40809724:	d811883a 	mov	r8,sp
40809728:	003f0d06 	br	40809360 <__alt_mem_onchip_flash_0_data+0xff7c9360>
4080972c:	d9402117 	ldw	r5,132(sp)
40809730:	d9002017 	ldw	r4,128(sp)
40809734:	d9801a04 	addi	r6,sp,104
40809738:	08086480 	call	40808648 <__sprint_r.part.0>
4080973c:	103f5b1e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
40809740:	d9001b17 	ldw	r4,108(sp)
40809744:	d8801c17 	ldw	r2,112(sp)
40809748:	d811883a 	mov	r8,sp
4080974c:	21000044 	addi	r4,r4,1
40809750:	003d8006 	br	40808d54 <__alt_mem_onchip_flash_0_data+0xff7c8d54>
40809754:	01102074 	movhi	r4,16513
40809758:	2106ae04 	addi	r4,r4,6840
4080975c:	d9002615 	stw	r4,152(sp)
40809760:	d8c02215 	stw	r3,136(sp)
40809764:	1029883a 	mov	r20,r2
40809768:	94c4b03a 	or	r2,r18,r19
4080976c:	103fb21e 	bne	r2,zero,40809638 <__alt_mem_onchip_flash_0_data+0xff7c9638>
40809770:	0039883a 	mov	fp,zero
40809774:	00800084 	movi	r2,2
40809778:	003e6b06 	br	40809128 <__alt_mem_onchip_flash_0_data+0xff7c9128>
4080977c:	da802217 	ldw	r10,136(sp)
40809780:	d8001d85 	stb	zero,118(sp)
40809784:	0027883a 	mov	r19,zero
40809788:	50800104 	addi	r2,r10,4
4080978c:	54800017 	ldw	r18,0(r10)
40809790:	483e6016 	blt	r9,zero,40809114 <__alt_mem_onchip_flash_0_data+0xff7c9114>
40809794:	00ffdfc4 	movi	r3,-129
40809798:	d8802215 	stw	r2,136(sp)
4080979c:	a0e8703a 	and	r20,r20,r3
408097a0:	0039883a 	mov	fp,zero
408097a4:	903ebb26 	beq	r18,zero,40809294 <__alt_mem_onchip_flash_0_data+0xff7c9294>
408097a8:	00800244 	movi	r2,9
408097ac:	14bdee36 	bltu	r2,r18,40808f68 <__alt_mem_onchip_flash_0_data+0xff7c8f68>
408097b0:	003eba06 	br	4080929c <__alt_mem_onchip_flash_0_data+0xff7c929c>
408097b4:	00800c04 	movi	r2,48
408097b8:	d8c01d45 	stb	r3,117(sp)
408097bc:	d8801d05 	stb	r2,116(sp)
408097c0:	d8001d85 	stb	zero,118(sp)
408097c4:	a0c00094 	ori	r3,r20,2
408097c8:	4800a916 	blt	r9,zero,40809a70 <___vfiprintf_internal_r+0x1314>
408097cc:	00bfdfc4 	movi	r2,-129
408097d0:	a096703a 	and	r11,r20,r2
408097d4:	5d000094 	ori	r20,r11,2
408097d8:	0039883a 	mov	fp,zero
408097dc:	003f9706 	br	4080963c <__alt_mem_onchip_flash_0_data+0xff7c963c>
408097e0:	8025883a 	mov	r18,r16
408097e4:	003c2e06 	br	408088a0 <__alt_mem_onchip_flash_0_data+0xff7c88a0>
408097e8:	00902074 	movhi	r2,16513
408097ec:	1086ae04 	addi	r2,r2,6840
408097f0:	0039883a 	mov	fp,zero
408097f4:	d8802615 	stw	r2,152(sp)
408097f8:	003f9006 	br	4080963c <__alt_mem_onchip_flash_0_data+0xff7c963c>
408097fc:	04a5c83a 	sub	r18,zero,r18
40809800:	07000b44 	movi	fp,45
40809804:	9004c03a 	cmpne	r2,r18,zero
40809808:	04e7c83a 	sub	r19,zero,r19
4080980c:	df001d85 	stb	fp,118(sp)
40809810:	98a7c83a 	sub	r19,r19,r2
40809814:	48009f16 	blt	r9,zero,40809a94 <___vfiprintf_internal_r+0x1338>
40809818:	00bfdfc4 	movi	r2,-129
4080981c:	a0a8703a 	and	r20,r20,r2
40809820:	003dd006 	br	40808f64 <__alt_mem_onchip_flash_0_data+0xff7c8f64>
40809824:	70004c26 	beq	r14,zero,40809958 <___vfiprintf_internal_r+0x11fc>
40809828:	00800084 	movi	r2,2
4080982c:	d8c01d04 	addi	r3,sp,116
40809830:	d8c00015 	stw	r3,0(sp)
40809834:	d8800115 	stw	r2,4(sp)
40809838:	01000044 	movi	r4,1
4080983c:	d811883a 	mov	r8,sp
40809840:	003f7306 	br	40809610 <__alt_mem_onchip_flash_0_data+0xff7c9610>
40809844:	a080100c 	andi	r2,r20,64
40809848:	da802217 	ldw	r10,136(sp)
4080984c:	103e0626 	beq	r2,zero,40809068 <__alt_mem_onchip_flash_0_data+0xff7c9068>
40809850:	5480000f 	ldh	r18,0(r10)
40809854:	52800104 	addi	r10,r10,4
40809858:	da802215 	stw	r10,136(sp)
4080985c:	9027d7fa 	srai	r19,r18,31
40809860:	9805883a 	mov	r2,r19
40809864:	003db806 	br	40808f48 <__alt_mem_onchip_flash_0_data+0xff7c8f48>
40809868:	a080040c 	andi	r2,r20,16
4080986c:	1000091e 	bne	r2,zero,40809894 <___vfiprintf_internal_r+0x1138>
40809870:	a2c0100c 	andi	r11,r20,64
40809874:	58000726 	beq	r11,zero,40809894 <___vfiprintf_internal_r+0x1138>
40809878:	da802217 	ldw	r10,136(sp)
4080987c:	50800017 	ldw	r2,0(r10)
40809880:	52800104 	addi	r10,r10,4
40809884:	da802215 	stw	r10,136(sp)
40809888:	da802317 	ldw	r10,140(sp)
4080988c:	1280000d 	sth	r10,0(r2)
40809890:	003be706 	br	40808830 <__alt_mem_onchip_flash_0_data+0xff7c8830>
40809894:	da802217 	ldw	r10,136(sp)
40809898:	50800017 	ldw	r2,0(r10)
4080989c:	52800104 	addi	r10,r10,4
408098a0:	da802215 	stw	r10,136(sp)
408098a4:	da802317 	ldw	r10,140(sp)
408098a8:	12800015 	stw	r10,0(r2)
408098ac:	003be006 	br	40808830 <__alt_mem_onchip_flash_0_data+0xff7c8830>
408098b0:	a080100c 	andi	r2,r20,64
408098b4:	da802217 	ldw	r10,136(sp)
408098b8:	10003026 	beq	r2,zero,4080997c <___vfiprintf_internal_r+0x1220>
408098bc:	5480000b 	ldhu	r18,0(r10)
408098c0:	52800104 	addi	r10,r10,4
408098c4:	0027883a 	mov	r19,zero
408098c8:	da802215 	stw	r10,136(sp)
408098cc:	003d8006 	br	40808ed0 <__alt_mem_onchip_flash_0_data+0xff7c8ed0>
408098d0:	80c00007 	ldb	r3,0(r16)
408098d4:	003c0006 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
408098d8:	a080100c 	andi	r2,r20,64
408098dc:	d8001d85 	stb	zero,118(sp)
408098e0:	da802217 	ldw	r10,136(sp)
408098e4:	1000201e 	bne	r2,zero,40809968 <___vfiprintf_internal_r+0x120c>
408098e8:	50800104 	addi	r2,r10,4
408098ec:	54800017 	ldw	r18,0(r10)
408098f0:	0027883a 	mov	r19,zero
408098f4:	483def0e 	bge	r9,zero,408090b4 <__alt_mem_onchip_flash_0_data+0xff7c90b4>
408098f8:	94c6b03a 	or	r3,r18,r19
408098fc:	d8802215 	stw	r2,136(sp)
40809900:	183d4e1e 	bne	r3,zero,40808e3c <__alt_mem_onchip_flash_0_data+0xff7c8e3c>
40809904:	0039883a 	mov	fp,zero
40809908:	0005883a 	mov	r2,zero
4080990c:	003e0606 	br	40809128 <__alt_mem_onchip_flash_0_data+0xff7c9128>
40809910:	d9402117 	ldw	r5,132(sp)
40809914:	d9002017 	ldw	r4,128(sp)
40809918:	d9801a04 	addi	r6,sp,104
4080991c:	da402c15 	stw	r9,176(sp)
40809920:	db802a15 	stw	r14,168(sp)
40809924:	08086480 	call	40808648 <__sprint_r.part.0>
40809928:	da402c17 	ldw	r9,176(sp)
4080992c:	db802a17 	ldw	r14,168(sp)
40809930:	103ede1e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
40809934:	d9401b17 	ldw	r5,108(sp)
40809938:	d8801c17 	ldw	r2,112(sp)
4080993c:	d811883a 	mov	r8,sp
40809940:	29000044 	addi	r4,r5,1
40809944:	003e7406 	br	40809318 <__alt_mem_onchip_flash_0_data+0xff7c9318>
40809948:	00bfffc4 	movi	r2,-1
4080994c:	003c5806 	br	40808ab0 <__alt_mem_onchip_flash_0_data+0xff7c8ab0>
40809950:	d811883a 	mov	r8,sp
40809954:	003ee806 	br	408094f8 <__alt_mem_onchip_flash_0_data+0xff7c94f8>
40809958:	000b883a 	mov	r5,zero
4080995c:	01000044 	movi	r4,1
40809960:	d811883a 	mov	r8,sp
40809964:	003e7c06 	br	40809358 <__alt_mem_onchip_flash_0_data+0xff7c9358>
40809968:	50800104 	addi	r2,r10,4
4080996c:	5480000b 	ldhu	r18,0(r10)
40809970:	0027883a 	mov	r19,zero
40809974:	483dcf0e 	bge	r9,zero,408090b4 <__alt_mem_onchip_flash_0_data+0xff7c90b4>
40809978:	003fdf06 	br	408098f8 <__alt_mem_onchip_flash_0_data+0xff7c98f8>
4080997c:	54800017 	ldw	r18,0(r10)
40809980:	52800104 	addi	r10,r10,4
40809984:	0027883a 	mov	r19,zero
40809988:	da802215 	stw	r10,136(sp)
4080998c:	003d5006 	br	40808ed0 <__alt_mem_onchip_flash_0_data+0xff7c8ed0>
40809990:	50800104 	addi	r2,r10,4
40809994:	5480000b 	ldhu	r18,0(r10)
40809998:	0027883a 	mov	r19,zero
4080999c:	483f7d0e 	bge	r9,zero,40809794 <__alt_mem_onchip_flash_0_data+0xff7c9794>
408099a0:	003ddc06 	br	40809114 <__alt_mem_onchip_flash_0_data+0xff7c9114>
408099a4:	d8c02215 	stw	r3,136(sp)
408099a8:	0039883a 	mov	fp,zero
408099ac:	003ddb06 	br	4080911c <__alt_mem_onchip_flash_0_data+0xff7c911c>
408099b0:	02902074 	movhi	r10,16513
408099b4:	52870f04 	addi	r10,r10,7228
408099b8:	da802415 	stw	r10,144(sp)
408099bc:	003e8306 	br	408093cc <__alt_mem_onchip_flash_0_data+0xff7c93cc>
408099c0:	d8801c17 	ldw	r2,112(sp)
408099c4:	dd002117 	ldw	r20,132(sp)
408099c8:	103eb926 	beq	r2,zero,408094b0 <__alt_mem_onchip_flash_0_data+0xff7c94b0>
408099cc:	d9002017 	ldw	r4,128(sp)
408099d0:	d9801a04 	addi	r6,sp,104
408099d4:	a00b883a 	mov	r5,r20
408099d8:	08086480 	call	40808648 <__sprint_r.part.0>
408099dc:	003eb406 	br	408094b0 <__alt_mem_onchip_flash_0_data+0xff7c94b0>
408099e0:	80c00043 	ldbu	r3,1(r16)
408099e4:	a5000814 	ori	r20,r20,32
408099e8:	84000044 	addi	r16,r16,1
408099ec:	18c03fcc 	andi	r3,r3,255
408099f0:	18c0201c 	xori	r3,r3,128
408099f4:	18ffe004 	addi	r3,r3,-128
408099f8:	003bb706 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
408099fc:	a809883a 	mov	r4,r21
40809a00:	d8c02a15 	stw	r3,168(sp)
40809a04:	da002b15 	stw	r8,172(sp)
40809a08:	08011d80 	call	408011d8 <strlen>
40809a0c:	d8c02a17 	ldw	r3,168(sp)
40809a10:	1027883a 	mov	r19,r2
40809a14:	df001d83 	ldbu	fp,118(sp)
40809a18:	d8c02215 	stw	r3,136(sp)
40809a1c:	0013883a 	mov	r9,zero
40809a20:	da002b17 	ldw	r8,172(sp)
40809a24:	003c4d06 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
40809a28:	d9402117 	ldw	r5,132(sp)
40809a2c:	d9002017 	ldw	r4,128(sp)
40809a30:	d9801a04 	addi	r6,sp,104
40809a34:	da402c15 	stw	r9,176(sp)
40809a38:	08086480 	call	40808648 <__sprint_r.part.0>
40809a3c:	da402c17 	ldw	r9,176(sp)
40809a40:	103e9a1e 	bne	r2,zero,408094ac <__alt_mem_onchip_flash_0_data+0xff7c94ac>
40809a44:	d9401b17 	ldw	r5,108(sp)
40809a48:	d8801c17 	ldw	r2,112(sp)
40809a4c:	d811883a 	mov	r8,sp
40809a50:	29000044 	addi	r4,r5,1
40809a54:	003e4206 	br	40809360 <__alt_mem_onchip_flash_0_data+0xff7c9360>
40809a58:	d9401b17 	ldw	r5,108(sp)
40809a5c:	01102074 	movhi	r4,16513
40809a60:	21071304 	addi	r4,r4,7244
40809a64:	d9002415 	stw	r4,144(sp)
40809a68:	29400044 	addi	r5,r5,1
40809a6c:	003c6d06 	br	40808c24 <__alt_mem_onchip_flash_0_data+0xff7c8c24>
40809a70:	0039883a 	mov	fp,zero
40809a74:	00800084 	movi	r2,2
40809a78:	10803fcc 	andi	r2,r2,255
40809a7c:	01000044 	movi	r4,1
40809a80:	11001e26 	beq	r2,r4,40809afc <___vfiprintf_internal_r+0x13a0>
40809a84:	01000084 	movi	r4,2
40809a88:	11001e1e 	bne	r2,r4,40809b04 <___vfiprintf_internal_r+0x13a8>
40809a8c:	1829883a 	mov	r20,r3
40809a90:	003eea06 	br	4080963c <__alt_mem_onchip_flash_0_data+0xff7c963c>
40809a94:	a007883a 	mov	r3,r20
40809a98:	00800044 	movi	r2,1
40809a9c:	003ff606 	br	40809a78 <__alt_mem_onchip_flash_0_data+0xff7c9a78>
40809aa0:	00800184 	movi	r2,6
40809aa4:	1240012e 	bgeu	r2,r9,40809aac <___vfiprintf_internal_r+0x1350>
40809aa8:	1013883a 	mov	r9,r2
40809aac:	4827883a 	mov	r19,r9
40809ab0:	4825883a 	mov	r18,r9
40809ab4:	48001516 	blt	r9,zero,40809b0c <___vfiprintf_internal_r+0x13b0>
40809ab8:	05502074 	movhi	r21,16513
40809abc:	d8c02215 	stw	r3,136(sp)
40809ac0:	ad46b304 	addi	r21,r21,6860
40809ac4:	003d1406 	br	40808f18 <__alt_mem_onchip_flash_0_data+0xff7c8f18>
40809ac8:	02902074 	movhi	r10,16513
40809acc:	52870f04 	addi	r10,r10,7228
40809ad0:	da802415 	stw	r10,144(sp)
40809ad4:	200d883a 	mov	r6,r4
40809ad8:	003c9106 	br	40808d20 <__alt_mem_onchip_flash_0_data+0xff7c8d20>
40809adc:	5021883a 	mov	r16,r10
40809ae0:	0013883a 	mov	r9,zero
40809ae4:	003b7d06 	br	408088dc <__alt_mem_onchip_flash_0_data+0xff7c88dc>
40809ae8:	4827883a 	mov	r19,r9
40809aec:	df001d83 	ldbu	fp,118(sp)
40809af0:	d8c02215 	stw	r3,136(sp)
40809af4:	0013883a 	mov	r9,zero
40809af8:	003c1806 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
40809afc:	1829883a 	mov	r20,r3
40809b00:	003d1806 	br	40808f64 <__alt_mem_onchip_flash_0_data+0xff7c8f64>
40809b04:	1829883a 	mov	r20,r3
40809b08:	003ccd06 	br	40808e40 <__alt_mem_onchip_flash_0_data+0xff7c8e40>
40809b0c:	0025883a 	mov	r18,zero
40809b10:	003fe906 	br	40809ab8 <__alt_mem_onchip_flash_0_data+0xff7c9ab8>
40809b14:	d8802217 	ldw	r2,136(sp)
40809b18:	80c00043 	ldbu	r3,1(r16)
40809b1c:	5021883a 	mov	r16,r10
40809b20:	12400017 	ldw	r9,0(r2)
40809b24:	10800104 	addi	r2,r2,4
40809b28:	d8802215 	stw	r2,136(sp)
40809b2c:	483faf0e 	bge	r9,zero,408099ec <__alt_mem_onchip_flash_0_data+0xff7c99ec>
40809b30:	18c03fcc 	andi	r3,r3,255
40809b34:	18c0201c 	xori	r3,r3,128
40809b38:	027fffc4 	movi	r9,-1
40809b3c:	18ffe004 	addi	r3,r3,-128
40809b40:	003b6506 	br	408088d8 <__alt_mem_onchip_flash_0_data+0xff7c88d8>
40809b44:	d9c01d85 	stb	r7,118(sp)
40809b48:	003ca006 	br	40808dcc <__alt_mem_onchip_flash_0_data+0xff7c8dcc>
40809b4c:	d9c01d85 	stb	r7,118(sp)
40809b50:	003cad06 	br	40808e08 <__alt_mem_onchip_flash_0_data+0xff7c8e08>
40809b54:	d9c01d85 	stb	r7,118(sp)
40809b58:	003d7d06 	br	40809150 <__alt_mem_onchip_flash_0_data+0xff7c9150>
40809b5c:	d9c01d85 	stb	r7,118(sp)
40809b60:	003d5f06 	br	408090e0 <__alt_mem_onchip_flash_0_data+0xff7c90e0>
40809b64:	a080004c 	andi	r2,r20,1
40809b68:	0039883a 	mov	fp,zero
40809b6c:	10000526 	beq	r2,zero,40809b84 <___vfiprintf_internal_r+0x1428>
40809b70:	00800c04 	movi	r2,48
40809b74:	d88019c5 	stb	r2,103(sp)
40809b78:	dcc02717 	ldw	r19,156(sp)
40809b7c:	dd4019c4 	addi	r21,sp,103
40809b80:	003bf606 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
40809b84:	0027883a 	mov	r19,zero
40809b88:	dd401a04 	addi	r21,sp,104
40809b8c:	003bf306 	br	40808b5c <__alt_mem_onchip_flash_0_data+0xff7c8b5c>
40809b90:	d9c01d85 	stb	r7,118(sp)
40809b94:	003dc806 	br	408092b8 <__alt_mem_onchip_flash_0_data+0xff7c92b8>
40809b98:	d9c01d85 	stb	r7,118(sp)
40809b9c:	003d3a06 	br	40809088 <__alt_mem_onchip_flash_0_data+0xff7c9088>
40809ba0:	d9c01d85 	stb	r7,118(sp)
40809ba4:	003d2a06 	br	40809050 <__alt_mem_onchip_flash_0_data+0xff7c9050>
40809ba8:	d9c01d85 	stb	r7,118(sp)
40809bac:	003cde06 	br	40808f28 <__alt_mem_onchip_flash_0_data+0xff7c8f28>
40809bb0:	d9c01d85 	stb	r7,118(sp)
40809bb4:	003cbc06 	br	40808ea8 <__alt_mem_onchip_flash_0_data+0xff7c8ea8>

40809bb8 <__vfiprintf_internal>:
40809bb8:	00902074 	movhi	r2,16513
40809bbc:	108eaf04 	addi	r2,r2,15036
40809bc0:	300f883a 	mov	r7,r6
40809bc4:	280d883a 	mov	r6,r5
40809bc8:	200b883a 	mov	r5,r4
40809bcc:	11000017 	ldw	r4,0(r2)
40809bd0:	080875c1 	jmpi	4080875c <___vfiprintf_internal_r>

40809bd4 <__sbprintf>:
40809bd4:	2880030b 	ldhu	r2,12(r5)
40809bd8:	2ac01917 	ldw	r11,100(r5)
40809bdc:	2a80038b 	ldhu	r10,14(r5)
40809be0:	2a400717 	ldw	r9,28(r5)
40809be4:	2a000917 	ldw	r8,36(r5)
40809be8:	defee204 	addi	sp,sp,-1144
40809bec:	00c10004 	movi	r3,1024
40809bf0:	dc011a15 	stw	r16,1128(sp)
40809bf4:	10bfff4c 	andi	r2,r2,65533
40809bf8:	2821883a 	mov	r16,r5
40809bfc:	d8cb883a 	add	r5,sp,r3
40809c00:	dc811c15 	stw	r18,1136(sp)
40809c04:	dc411b15 	stw	r17,1132(sp)
40809c08:	dfc11d15 	stw	ra,1140(sp)
40809c0c:	2025883a 	mov	r18,r4
40809c10:	d881030d 	sth	r2,1036(sp)
40809c14:	dac11915 	stw	r11,1124(sp)
40809c18:	da81038d 	sth	r10,1038(sp)
40809c1c:	da410715 	stw	r9,1052(sp)
40809c20:	da010915 	stw	r8,1060(sp)
40809c24:	dec10015 	stw	sp,1024(sp)
40809c28:	dec10415 	stw	sp,1040(sp)
40809c2c:	d8c10215 	stw	r3,1032(sp)
40809c30:	d8c10515 	stw	r3,1044(sp)
40809c34:	d8010615 	stw	zero,1048(sp)
40809c38:	080875c0 	call	4080875c <___vfiprintf_internal_r>
40809c3c:	1023883a 	mov	r17,r2
40809c40:	10000416 	blt	r2,zero,40809c54 <__sbprintf+0x80>
40809c44:	d9410004 	addi	r5,sp,1024
40809c48:	9009883a 	mov	r4,r18
40809c4c:	08051380 	call	40805138 <_fflush_r>
40809c50:	10000d1e 	bne	r2,zero,40809c88 <__sbprintf+0xb4>
40809c54:	d881030b 	ldhu	r2,1036(sp)
40809c58:	1080100c 	andi	r2,r2,64
40809c5c:	10000326 	beq	r2,zero,40809c6c <__sbprintf+0x98>
40809c60:	8080030b 	ldhu	r2,12(r16)
40809c64:	10801014 	ori	r2,r2,64
40809c68:	8080030d 	sth	r2,12(r16)
40809c6c:	8805883a 	mov	r2,r17
40809c70:	dfc11d17 	ldw	ra,1140(sp)
40809c74:	dc811c17 	ldw	r18,1136(sp)
40809c78:	dc411b17 	ldw	r17,1132(sp)
40809c7c:	dc011a17 	ldw	r16,1128(sp)
40809c80:	dec11e04 	addi	sp,sp,1144
40809c84:	f800283a 	ret
40809c88:	047fffc4 	movi	r17,-1
40809c8c:	003ff106 	br	40809c54 <__alt_mem_onchip_flash_0_data+0xff7c9c54>

40809c90 <_write_r>:
40809c90:	defffd04 	addi	sp,sp,-12
40809c94:	2805883a 	mov	r2,r5
40809c98:	dc000015 	stw	r16,0(sp)
40809c9c:	04102074 	movhi	r16,16513
40809ca0:	dc400115 	stw	r17,4(sp)
40809ca4:	300b883a 	mov	r5,r6
40809ca8:	840ed104 	addi	r16,r16,15172
40809cac:	2023883a 	mov	r17,r4
40809cb0:	380d883a 	mov	r6,r7
40809cb4:	1009883a 	mov	r4,r2
40809cb8:	dfc00215 	stw	ra,8(sp)
40809cbc:	80000015 	stw	zero,0(r16)
40809cc0:	080dfbc0 	call	4080dfbc <write>
40809cc4:	00ffffc4 	movi	r3,-1
40809cc8:	10c00526 	beq	r2,r3,40809ce0 <_write_r+0x50>
40809ccc:	dfc00217 	ldw	ra,8(sp)
40809cd0:	dc400117 	ldw	r17,4(sp)
40809cd4:	dc000017 	ldw	r16,0(sp)
40809cd8:	dec00304 	addi	sp,sp,12
40809cdc:	f800283a 	ret
40809ce0:	80c00017 	ldw	r3,0(r16)
40809ce4:	183ff926 	beq	r3,zero,40809ccc <__alt_mem_onchip_flash_0_data+0xff7c9ccc>
40809ce8:	88c00015 	stw	r3,0(r17)
40809cec:	003ff706 	br	40809ccc <__alt_mem_onchip_flash_0_data+0xff7c9ccc>

40809cf0 <_close_r>:
40809cf0:	defffd04 	addi	sp,sp,-12
40809cf4:	dc000015 	stw	r16,0(sp)
40809cf8:	04102074 	movhi	r16,16513
40809cfc:	dc400115 	stw	r17,4(sp)
40809d00:	840ed104 	addi	r16,r16,15172
40809d04:	2023883a 	mov	r17,r4
40809d08:	2809883a 	mov	r4,r5
40809d0c:	dfc00215 	stw	ra,8(sp)
40809d10:	80000015 	stw	zero,0(r16)
40809d14:	080d8680 	call	4080d868 <close>
40809d18:	00ffffc4 	movi	r3,-1
40809d1c:	10c00526 	beq	r2,r3,40809d34 <_close_r+0x44>
40809d20:	dfc00217 	ldw	ra,8(sp)
40809d24:	dc400117 	ldw	r17,4(sp)
40809d28:	dc000017 	ldw	r16,0(sp)
40809d2c:	dec00304 	addi	sp,sp,12
40809d30:	f800283a 	ret
40809d34:	80c00017 	ldw	r3,0(r16)
40809d38:	183ff926 	beq	r3,zero,40809d20 <__alt_mem_onchip_flash_0_data+0xff7c9d20>
40809d3c:	88c00015 	stw	r3,0(r17)
40809d40:	003ff706 	br	40809d20 <__alt_mem_onchip_flash_0_data+0xff7c9d20>

40809d44 <_calloc_r>:
40809d44:	298b383a 	mul	r5,r5,r6
40809d48:	defffe04 	addi	sp,sp,-8
40809d4c:	dfc00115 	stw	ra,4(sp)
40809d50:	dc000015 	stw	r16,0(sp)
40809d54:	08062740 	call	40806274 <_malloc_r>
40809d58:	10002926 	beq	r2,zero,40809e00 <_calloc_r+0xbc>
40809d5c:	11bfff17 	ldw	r6,-4(r2)
40809d60:	1021883a 	mov	r16,r2
40809d64:	00bfff04 	movi	r2,-4
40809d68:	308c703a 	and	r6,r6,r2
40809d6c:	00c00904 	movi	r3,36
40809d70:	308d883a 	add	r6,r6,r2
40809d74:	19801636 	bltu	r3,r6,40809dd0 <_calloc_r+0x8c>
40809d78:	008004c4 	movi	r2,19
40809d7c:	11800b2e 	bgeu	r2,r6,40809dac <_calloc_r+0x68>
40809d80:	80000015 	stw	zero,0(r16)
40809d84:	80000115 	stw	zero,4(r16)
40809d88:	008006c4 	movi	r2,27
40809d8c:	11801a2e 	bgeu	r2,r6,40809df8 <_calloc_r+0xb4>
40809d90:	80000215 	stw	zero,8(r16)
40809d94:	80000315 	stw	zero,12(r16)
40809d98:	30c0151e 	bne	r6,r3,40809df0 <_calloc_r+0xac>
40809d9c:	80000415 	stw	zero,16(r16)
40809da0:	80800604 	addi	r2,r16,24
40809da4:	80000515 	stw	zero,20(r16)
40809da8:	00000106 	br	40809db0 <_calloc_r+0x6c>
40809dac:	8005883a 	mov	r2,r16
40809db0:	10000015 	stw	zero,0(r2)
40809db4:	10000115 	stw	zero,4(r2)
40809db8:	10000215 	stw	zero,8(r2)
40809dbc:	8005883a 	mov	r2,r16
40809dc0:	dfc00117 	ldw	ra,4(sp)
40809dc4:	dc000017 	ldw	r16,0(sp)
40809dc8:	dec00204 	addi	sp,sp,8
40809dcc:	f800283a 	ret
40809dd0:	000b883a 	mov	r5,zero
40809dd4:	8009883a 	mov	r4,r16
40809dd8:	0800f700 	call	40800f70 <memset>
40809ddc:	8005883a 	mov	r2,r16
40809de0:	dfc00117 	ldw	ra,4(sp)
40809de4:	dc000017 	ldw	r16,0(sp)
40809de8:	dec00204 	addi	sp,sp,8
40809dec:	f800283a 	ret
40809df0:	80800404 	addi	r2,r16,16
40809df4:	003fee06 	br	40809db0 <__alt_mem_onchip_flash_0_data+0xff7c9db0>
40809df8:	80800204 	addi	r2,r16,8
40809dfc:	003fec06 	br	40809db0 <__alt_mem_onchip_flash_0_data+0xff7c9db0>
40809e00:	0005883a 	mov	r2,zero
40809e04:	003fee06 	br	40809dc0 <__alt_mem_onchip_flash_0_data+0xff7c9dc0>

40809e08 <_fclose_r>:
40809e08:	28003926 	beq	r5,zero,40809ef0 <_fclose_r+0xe8>
40809e0c:	defffc04 	addi	sp,sp,-16
40809e10:	dc400115 	stw	r17,4(sp)
40809e14:	dc000015 	stw	r16,0(sp)
40809e18:	dfc00315 	stw	ra,12(sp)
40809e1c:	dc800215 	stw	r18,8(sp)
40809e20:	2023883a 	mov	r17,r4
40809e24:	2821883a 	mov	r16,r5
40809e28:	20000226 	beq	r4,zero,40809e34 <_fclose_r+0x2c>
40809e2c:	20800e17 	ldw	r2,56(r4)
40809e30:	10002726 	beq	r2,zero,40809ed0 <_fclose_r+0xc8>
40809e34:	8080030f 	ldh	r2,12(r16)
40809e38:	1000071e 	bne	r2,zero,40809e58 <_fclose_r+0x50>
40809e3c:	0005883a 	mov	r2,zero
40809e40:	dfc00317 	ldw	ra,12(sp)
40809e44:	dc800217 	ldw	r18,8(sp)
40809e48:	dc400117 	ldw	r17,4(sp)
40809e4c:	dc000017 	ldw	r16,0(sp)
40809e50:	dec00404 	addi	sp,sp,16
40809e54:	f800283a 	ret
40809e58:	800b883a 	mov	r5,r16
40809e5c:	8809883a 	mov	r4,r17
40809e60:	0804f1c0 	call	40804f1c <__sflush_r>
40809e64:	1025883a 	mov	r18,r2
40809e68:	80800b17 	ldw	r2,44(r16)
40809e6c:	10000426 	beq	r2,zero,40809e80 <_fclose_r+0x78>
40809e70:	81400717 	ldw	r5,28(r16)
40809e74:	8809883a 	mov	r4,r17
40809e78:	103ee83a 	callr	r2
40809e7c:	10001616 	blt	r2,zero,40809ed8 <_fclose_r+0xd0>
40809e80:	8080030b 	ldhu	r2,12(r16)
40809e84:	1080200c 	andi	r2,r2,128
40809e88:	1000151e 	bne	r2,zero,40809ee0 <_fclose_r+0xd8>
40809e8c:	81400c17 	ldw	r5,48(r16)
40809e90:	28000526 	beq	r5,zero,40809ea8 <_fclose_r+0xa0>
40809e94:	80801004 	addi	r2,r16,64
40809e98:	28800226 	beq	r5,r2,40809ea4 <_fclose_r+0x9c>
40809e9c:	8809883a 	mov	r4,r17
40809ea0:	08056880 	call	40805688 <_free_r>
40809ea4:	80000c15 	stw	zero,48(r16)
40809ea8:	81401117 	ldw	r5,68(r16)
40809eac:	28000326 	beq	r5,zero,40809ebc <_fclose_r+0xb4>
40809eb0:	8809883a 	mov	r4,r17
40809eb4:	08056880 	call	40805688 <_free_r>
40809eb8:	80001115 	stw	zero,68(r16)
40809ebc:	08055240 	call	40805524 <__sfp_lock_acquire>
40809ec0:	8000030d 	sth	zero,12(r16)
40809ec4:	08055280 	call	40805528 <__sfp_lock_release>
40809ec8:	9005883a 	mov	r2,r18
40809ecc:	003fdc06 	br	40809e40 <__alt_mem_onchip_flash_0_data+0xff7c9e40>
40809ed0:	08055140 	call	40805514 <__sinit>
40809ed4:	003fd706 	br	40809e34 <__alt_mem_onchip_flash_0_data+0xff7c9e34>
40809ed8:	04bfffc4 	movi	r18,-1
40809edc:	003fe806 	br	40809e80 <__alt_mem_onchip_flash_0_data+0xff7c9e80>
40809ee0:	81400417 	ldw	r5,16(r16)
40809ee4:	8809883a 	mov	r4,r17
40809ee8:	08056880 	call	40805688 <_free_r>
40809eec:	003fe706 	br	40809e8c <__alt_mem_onchip_flash_0_data+0xff7c9e8c>
40809ef0:	0005883a 	mov	r2,zero
40809ef4:	f800283a 	ret

40809ef8 <fclose>:
40809ef8:	00902074 	movhi	r2,16513
40809efc:	108eaf04 	addi	r2,r2,15036
40809f00:	200b883a 	mov	r5,r4
40809f04:	11000017 	ldw	r4,0(r2)
40809f08:	0809e081 	jmpi	40809e08 <_fclose_r>

40809f0c <__fputwc>:
40809f0c:	defff804 	addi	sp,sp,-32
40809f10:	dcc00415 	stw	r19,16(sp)
40809f14:	dc800315 	stw	r18,12(sp)
40809f18:	dc000115 	stw	r16,4(sp)
40809f1c:	dfc00715 	stw	ra,28(sp)
40809f20:	dd400615 	stw	r21,24(sp)
40809f24:	dd000515 	stw	r20,20(sp)
40809f28:	dc400215 	stw	r17,8(sp)
40809f2c:	2027883a 	mov	r19,r4
40809f30:	2825883a 	mov	r18,r5
40809f34:	3021883a 	mov	r16,r6
40809f38:	08060640 	call	40806064 <__locale_mb_cur_max>
40809f3c:	00c00044 	movi	r3,1
40809f40:	10c03e26 	beq	r2,r3,4080a03c <__fputwc+0x130>
40809f44:	81c01704 	addi	r7,r16,92
40809f48:	900d883a 	mov	r6,r18
40809f4c:	d80b883a 	mov	r5,sp
40809f50:	9809883a 	mov	r4,r19
40809f54:	080a3dc0 	call	4080a3dc <_wcrtomb_r>
40809f58:	1029883a 	mov	r20,r2
40809f5c:	00bfffc4 	movi	r2,-1
40809f60:	a0802026 	beq	r20,r2,40809fe4 <__fputwc+0xd8>
40809f64:	d9400003 	ldbu	r5,0(sp)
40809f68:	a0001c26 	beq	r20,zero,40809fdc <__fputwc+0xd0>
40809f6c:	0023883a 	mov	r17,zero
40809f70:	05400284 	movi	r21,10
40809f74:	00000906 	br	40809f9c <__fputwc+0x90>
40809f78:	80800017 	ldw	r2,0(r16)
40809f7c:	11400005 	stb	r5,0(r2)
40809f80:	80c00017 	ldw	r3,0(r16)
40809f84:	18c00044 	addi	r3,r3,1
40809f88:	80c00015 	stw	r3,0(r16)
40809f8c:	8c400044 	addi	r17,r17,1
40809f90:	dc45883a 	add	r2,sp,r17
40809f94:	8d00112e 	bgeu	r17,r20,40809fdc <__fputwc+0xd0>
40809f98:	11400003 	ldbu	r5,0(r2)
40809f9c:	80c00217 	ldw	r3,8(r16)
40809fa0:	18ffffc4 	addi	r3,r3,-1
40809fa4:	80c00215 	stw	r3,8(r16)
40809fa8:	183ff30e 	bge	r3,zero,40809f78 <__alt_mem_onchip_flash_0_data+0xff7c9f78>
40809fac:	80800617 	ldw	r2,24(r16)
40809fb0:	18801916 	blt	r3,r2,4080a018 <__fputwc+0x10c>
40809fb4:	80800017 	ldw	r2,0(r16)
40809fb8:	11400005 	stb	r5,0(r2)
40809fbc:	80800017 	ldw	r2,0(r16)
40809fc0:	10c00003 	ldbu	r3,0(r2)
40809fc4:	10800044 	addi	r2,r2,1
40809fc8:	1d402326 	beq	r3,r21,4080a058 <__fputwc+0x14c>
40809fcc:	80800015 	stw	r2,0(r16)
40809fd0:	8c400044 	addi	r17,r17,1
40809fd4:	dc45883a 	add	r2,sp,r17
40809fd8:	8d3fef36 	bltu	r17,r20,40809f98 <__alt_mem_onchip_flash_0_data+0xff7c9f98>
40809fdc:	9005883a 	mov	r2,r18
40809fe0:	00000406 	br	40809ff4 <__fputwc+0xe8>
40809fe4:	80c0030b 	ldhu	r3,12(r16)
40809fe8:	a005883a 	mov	r2,r20
40809fec:	18c01014 	ori	r3,r3,64
40809ff0:	80c0030d 	sth	r3,12(r16)
40809ff4:	dfc00717 	ldw	ra,28(sp)
40809ff8:	dd400617 	ldw	r21,24(sp)
40809ffc:	dd000517 	ldw	r20,20(sp)
4080a000:	dcc00417 	ldw	r19,16(sp)
4080a004:	dc800317 	ldw	r18,12(sp)
4080a008:	dc400217 	ldw	r17,8(sp)
4080a00c:	dc000117 	ldw	r16,4(sp)
4080a010:	dec00804 	addi	sp,sp,32
4080a014:	f800283a 	ret
4080a018:	800d883a 	mov	r6,r16
4080a01c:	29403fcc 	andi	r5,r5,255
4080a020:	9809883a 	mov	r4,r19
4080a024:	080a2840 	call	4080a284 <__swbuf_r>
4080a028:	10bfffe0 	cmpeqi	r2,r2,-1
4080a02c:	10803fcc 	andi	r2,r2,255
4080a030:	103fd626 	beq	r2,zero,40809f8c <__alt_mem_onchip_flash_0_data+0xff7c9f8c>
4080a034:	00bfffc4 	movi	r2,-1
4080a038:	003fee06 	br	40809ff4 <__alt_mem_onchip_flash_0_data+0xff7c9ff4>
4080a03c:	90ffffc4 	addi	r3,r18,-1
4080a040:	01003f84 	movi	r4,254
4080a044:	20ffbf36 	bltu	r4,r3,40809f44 <__alt_mem_onchip_flash_0_data+0xff7c9f44>
4080a048:	900b883a 	mov	r5,r18
4080a04c:	dc800005 	stb	r18,0(sp)
4080a050:	1029883a 	mov	r20,r2
4080a054:	003fc506 	br	40809f6c <__alt_mem_onchip_flash_0_data+0xff7c9f6c>
4080a058:	800d883a 	mov	r6,r16
4080a05c:	a80b883a 	mov	r5,r21
4080a060:	9809883a 	mov	r4,r19
4080a064:	080a2840 	call	4080a284 <__swbuf_r>
4080a068:	10bfffe0 	cmpeqi	r2,r2,-1
4080a06c:	003fef06 	br	4080a02c <__alt_mem_onchip_flash_0_data+0xff7ca02c>

4080a070 <_fputwc_r>:
4080a070:	3080030b 	ldhu	r2,12(r6)
4080a074:	10c8000c 	andi	r3,r2,8192
4080a078:	1800051e 	bne	r3,zero,4080a090 <_fputwc_r+0x20>
4080a07c:	30c01917 	ldw	r3,100(r6)
4080a080:	10880014 	ori	r2,r2,8192
4080a084:	3080030d 	sth	r2,12(r6)
4080a088:	18880014 	ori	r2,r3,8192
4080a08c:	30801915 	stw	r2,100(r6)
4080a090:	0809f0c1 	jmpi	40809f0c <__fputwc>

4080a094 <fputwc>:
4080a094:	00902074 	movhi	r2,16513
4080a098:	defffc04 	addi	sp,sp,-16
4080a09c:	108eaf04 	addi	r2,r2,15036
4080a0a0:	dc000115 	stw	r16,4(sp)
4080a0a4:	14000017 	ldw	r16,0(r2)
4080a0a8:	dc400215 	stw	r17,8(sp)
4080a0ac:	dfc00315 	stw	ra,12(sp)
4080a0b0:	2023883a 	mov	r17,r4
4080a0b4:	80000226 	beq	r16,zero,4080a0c0 <fputwc+0x2c>
4080a0b8:	80800e17 	ldw	r2,56(r16)
4080a0bc:	10001026 	beq	r2,zero,4080a100 <fputwc+0x6c>
4080a0c0:	2880030b 	ldhu	r2,12(r5)
4080a0c4:	10c8000c 	andi	r3,r2,8192
4080a0c8:	1800051e 	bne	r3,zero,4080a0e0 <fputwc+0x4c>
4080a0cc:	28c01917 	ldw	r3,100(r5)
4080a0d0:	10880014 	ori	r2,r2,8192
4080a0d4:	2880030d 	sth	r2,12(r5)
4080a0d8:	18880014 	ori	r2,r3,8192
4080a0dc:	28801915 	stw	r2,100(r5)
4080a0e0:	280d883a 	mov	r6,r5
4080a0e4:	8009883a 	mov	r4,r16
4080a0e8:	880b883a 	mov	r5,r17
4080a0ec:	dfc00317 	ldw	ra,12(sp)
4080a0f0:	dc400217 	ldw	r17,8(sp)
4080a0f4:	dc000117 	ldw	r16,4(sp)
4080a0f8:	dec00404 	addi	sp,sp,16
4080a0fc:	0809f0c1 	jmpi	40809f0c <__fputwc>
4080a100:	8009883a 	mov	r4,r16
4080a104:	d9400015 	stw	r5,0(sp)
4080a108:	08055140 	call	40805514 <__sinit>
4080a10c:	d9400017 	ldw	r5,0(sp)
4080a110:	003feb06 	br	4080a0c0 <__alt_mem_onchip_flash_0_data+0xff7ca0c0>

4080a114 <_fstat_r>:
4080a114:	defffd04 	addi	sp,sp,-12
4080a118:	2805883a 	mov	r2,r5
4080a11c:	dc000015 	stw	r16,0(sp)
4080a120:	04102074 	movhi	r16,16513
4080a124:	dc400115 	stw	r17,4(sp)
4080a128:	840ed104 	addi	r16,r16,15172
4080a12c:	2023883a 	mov	r17,r4
4080a130:	300b883a 	mov	r5,r6
4080a134:	1009883a 	mov	r4,r2
4080a138:	dfc00215 	stw	ra,8(sp)
4080a13c:	80000015 	stw	zero,0(r16)
4080a140:	080d9a00 	call	4080d9a0 <fstat>
4080a144:	00ffffc4 	movi	r3,-1
4080a148:	10c00526 	beq	r2,r3,4080a160 <_fstat_r+0x4c>
4080a14c:	dfc00217 	ldw	ra,8(sp)
4080a150:	dc400117 	ldw	r17,4(sp)
4080a154:	dc000017 	ldw	r16,0(sp)
4080a158:	dec00304 	addi	sp,sp,12
4080a15c:	f800283a 	ret
4080a160:	80c00017 	ldw	r3,0(r16)
4080a164:	183ff926 	beq	r3,zero,4080a14c <__alt_mem_onchip_flash_0_data+0xff7ca14c>
4080a168:	88c00015 	stw	r3,0(r17)
4080a16c:	003ff706 	br	4080a14c <__alt_mem_onchip_flash_0_data+0xff7ca14c>

4080a170 <_isatty_r>:
4080a170:	defffd04 	addi	sp,sp,-12
4080a174:	dc000015 	stw	r16,0(sp)
4080a178:	04102074 	movhi	r16,16513
4080a17c:	dc400115 	stw	r17,4(sp)
4080a180:	840ed104 	addi	r16,r16,15172
4080a184:	2023883a 	mov	r17,r4
4080a188:	2809883a 	mov	r4,r5
4080a18c:	dfc00215 	stw	ra,8(sp)
4080a190:	80000015 	stw	zero,0(r16)
4080a194:	080da8c0 	call	4080da8c <isatty>
4080a198:	00ffffc4 	movi	r3,-1
4080a19c:	10c00526 	beq	r2,r3,4080a1b4 <_isatty_r+0x44>
4080a1a0:	dfc00217 	ldw	ra,8(sp)
4080a1a4:	dc400117 	ldw	r17,4(sp)
4080a1a8:	dc000017 	ldw	r16,0(sp)
4080a1ac:	dec00304 	addi	sp,sp,12
4080a1b0:	f800283a 	ret
4080a1b4:	80c00017 	ldw	r3,0(r16)
4080a1b8:	183ff926 	beq	r3,zero,4080a1a0 <__alt_mem_onchip_flash_0_data+0xff7ca1a0>
4080a1bc:	88c00015 	stw	r3,0(r17)
4080a1c0:	003ff706 	br	4080a1a0 <__alt_mem_onchip_flash_0_data+0xff7ca1a0>

4080a1c4 <_lseek_r>:
4080a1c4:	defffd04 	addi	sp,sp,-12
4080a1c8:	2805883a 	mov	r2,r5
4080a1cc:	dc000015 	stw	r16,0(sp)
4080a1d0:	04102074 	movhi	r16,16513
4080a1d4:	dc400115 	stw	r17,4(sp)
4080a1d8:	300b883a 	mov	r5,r6
4080a1dc:	840ed104 	addi	r16,r16,15172
4080a1e0:	2023883a 	mov	r17,r4
4080a1e4:	380d883a 	mov	r6,r7
4080a1e8:	1009883a 	mov	r4,r2
4080a1ec:	dfc00215 	stw	ra,8(sp)
4080a1f0:	80000015 	stw	zero,0(r16)
4080a1f4:	080db6c0 	call	4080db6c <lseek>
4080a1f8:	00ffffc4 	movi	r3,-1
4080a1fc:	10c00526 	beq	r2,r3,4080a214 <_lseek_r+0x50>
4080a200:	dfc00217 	ldw	ra,8(sp)
4080a204:	dc400117 	ldw	r17,4(sp)
4080a208:	dc000017 	ldw	r16,0(sp)
4080a20c:	dec00304 	addi	sp,sp,12
4080a210:	f800283a 	ret
4080a214:	80c00017 	ldw	r3,0(r16)
4080a218:	183ff926 	beq	r3,zero,4080a200 <__alt_mem_onchip_flash_0_data+0xff7ca200>
4080a21c:	88c00015 	stw	r3,0(r17)
4080a220:	003ff706 	br	4080a200 <__alt_mem_onchip_flash_0_data+0xff7ca200>

4080a224 <_read_r>:
4080a224:	defffd04 	addi	sp,sp,-12
4080a228:	2805883a 	mov	r2,r5
4080a22c:	dc000015 	stw	r16,0(sp)
4080a230:	04102074 	movhi	r16,16513
4080a234:	dc400115 	stw	r17,4(sp)
4080a238:	300b883a 	mov	r5,r6
4080a23c:	840ed104 	addi	r16,r16,15172
4080a240:	2023883a 	mov	r17,r4
4080a244:	380d883a 	mov	r6,r7
4080a248:	1009883a 	mov	r4,r2
4080a24c:	dfc00215 	stw	ra,8(sp)
4080a250:	80000015 	stw	zero,0(r16)
4080a254:	080dd400 	call	4080dd40 <read>
4080a258:	00ffffc4 	movi	r3,-1
4080a25c:	10c00526 	beq	r2,r3,4080a274 <_read_r+0x50>
4080a260:	dfc00217 	ldw	ra,8(sp)
4080a264:	dc400117 	ldw	r17,4(sp)
4080a268:	dc000017 	ldw	r16,0(sp)
4080a26c:	dec00304 	addi	sp,sp,12
4080a270:	f800283a 	ret
4080a274:	80c00017 	ldw	r3,0(r16)
4080a278:	183ff926 	beq	r3,zero,4080a260 <__alt_mem_onchip_flash_0_data+0xff7ca260>
4080a27c:	88c00015 	stw	r3,0(r17)
4080a280:	003ff706 	br	4080a260 <__alt_mem_onchip_flash_0_data+0xff7ca260>

4080a284 <__swbuf_r>:
4080a284:	defffb04 	addi	sp,sp,-20
4080a288:	dcc00315 	stw	r19,12(sp)
4080a28c:	dc800215 	stw	r18,8(sp)
4080a290:	dc000015 	stw	r16,0(sp)
4080a294:	dfc00415 	stw	ra,16(sp)
4080a298:	dc400115 	stw	r17,4(sp)
4080a29c:	2025883a 	mov	r18,r4
4080a2a0:	2827883a 	mov	r19,r5
4080a2a4:	3021883a 	mov	r16,r6
4080a2a8:	20000226 	beq	r4,zero,4080a2b4 <__swbuf_r+0x30>
4080a2ac:	20800e17 	ldw	r2,56(r4)
4080a2b0:	10004226 	beq	r2,zero,4080a3bc <__swbuf_r+0x138>
4080a2b4:	80800617 	ldw	r2,24(r16)
4080a2b8:	8100030b 	ldhu	r4,12(r16)
4080a2bc:	80800215 	stw	r2,8(r16)
4080a2c0:	2080020c 	andi	r2,r4,8
4080a2c4:	10003626 	beq	r2,zero,4080a3a0 <__swbuf_r+0x11c>
4080a2c8:	80c00417 	ldw	r3,16(r16)
4080a2cc:	18003426 	beq	r3,zero,4080a3a0 <__swbuf_r+0x11c>
4080a2d0:	2088000c 	andi	r2,r4,8192
4080a2d4:	9c403fcc 	andi	r17,r19,255
4080a2d8:	10001a26 	beq	r2,zero,4080a344 <__swbuf_r+0xc0>
4080a2dc:	80800017 	ldw	r2,0(r16)
4080a2e0:	81000517 	ldw	r4,20(r16)
4080a2e4:	10c7c83a 	sub	r3,r2,r3
4080a2e8:	1900200e 	bge	r3,r4,4080a36c <__swbuf_r+0xe8>
4080a2ec:	18c00044 	addi	r3,r3,1
4080a2f0:	81000217 	ldw	r4,8(r16)
4080a2f4:	11400044 	addi	r5,r2,1
4080a2f8:	81400015 	stw	r5,0(r16)
4080a2fc:	213fffc4 	addi	r4,r4,-1
4080a300:	81000215 	stw	r4,8(r16)
4080a304:	14c00005 	stb	r19,0(r2)
4080a308:	80800517 	ldw	r2,20(r16)
4080a30c:	10c01e26 	beq	r2,r3,4080a388 <__swbuf_r+0x104>
4080a310:	8080030b 	ldhu	r2,12(r16)
4080a314:	1080004c 	andi	r2,r2,1
4080a318:	10000226 	beq	r2,zero,4080a324 <__swbuf_r+0xa0>
4080a31c:	00800284 	movi	r2,10
4080a320:	88801926 	beq	r17,r2,4080a388 <__swbuf_r+0x104>
4080a324:	8805883a 	mov	r2,r17
4080a328:	dfc00417 	ldw	ra,16(sp)
4080a32c:	dcc00317 	ldw	r19,12(sp)
4080a330:	dc800217 	ldw	r18,8(sp)
4080a334:	dc400117 	ldw	r17,4(sp)
4080a338:	dc000017 	ldw	r16,0(sp)
4080a33c:	dec00504 	addi	sp,sp,20
4080a340:	f800283a 	ret
4080a344:	81401917 	ldw	r5,100(r16)
4080a348:	00b7ffc4 	movi	r2,-8193
4080a34c:	21080014 	ori	r4,r4,8192
4080a350:	2884703a 	and	r2,r5,r2
4080a354:	80801915 	stw	r2,100(r16)
4080a358:	80800017 	ldw	r2,0(r16)
4080a35c:	8100030d 	sth	r4,12(r16)
4080a360:	81000517 	ldw	r4,20(r16)
4080a364:	10c7c83a 	sub	r3,r2,r3
4080a368:	193fe016 	blt	r3,r4,4080a2ec <__alt_mem_onchip_flash_0_data+0xff7ca2ec>
4080a36c:	800b883a 	mov	r5,r16
4080a370:	9009883a 	mov	r4,r18
4080a374:	08051380 	call	40805138 <_fflush_r>
4080a378:	1000071e 	bne	r2,zero,4080a398 <__swbuf_r+0x114>
4080a37c:	80800017 	ldw	r2,0(r16)
4080a380:	00c00044 	movi	r3,1
4080a384:	003fda06 	br	4080a2f0 <__alt_mem_onchip_flash_0_data+0xff7ca2f0>
4080a388:	800b883a 	mov	r5,r16
4080a38c:	9009883a 	mov	r4,r18
4080a390:	08051380 	call	40805138 <_fflush_r>
4080a394:	103fe326 	beq	r2,zero,4080a324 <__alt_mem_onchip_flash_0_data+0xff7ca324>
4080a398:	00bfffc4 	movi	r2,-1
4080a39c:	003fe206 	br	4080a328 <__alt_mem_onchip_flash_0_data+0xff7ca328>
4080a3a0:	800b883a 	mov	r5,r16
4080a3a4:	9009883a 	mov	r4,r18
4080a3a8:	08035400 	call	40803540 <__swsetup_r>
4080a3ac:	103ffa1e 	bne	r2,zero,4080a398 <__alt_mem_onchip_flash_0_data+0xff7ca398>
4080a3b0:	8100030b 	ldhu	r4,12(r16)
4080a3b4:	80c00417 	ldw	r3,16(r16)
4080a3b8:	003fc506 	br	4080a2d0 <__alt_mem_onchip_flash_0_data+0xff7ca2d0>
4080a3bc:	08055140 	call	40805514 <__sinit>
4080a3c0:	003fbc06 	br	4080a2b4 <__alt_mem_onchip_flash_0_data+0xff7ca2b4>

4080a3c4 <__swbuf>:
4080a3c4:	00902074 	movhi	r2,16513
4080a3c8:	108eaf04 	addi	r2,r2,15036
4080a3cc:	280d883a 	mov	r6,r5
4080a3d0:	200b883a 	mov	r5,r4
4080a3d4:	11000017 	ldw	r4,0(r2)
4080a3d8:	080a2841 	jmpi	4080a284 <__swbuf_r>

4080a3dc <_wcrtomb_r>:
4080a3dc:	defff604 	addi	sp,sp,-40
4080a3e0:	00902074 	movhi	r2,16513
4080a3e4:	dc800815 	stw	r18,32(sp)
4080a3e8:	dc400715 	stw	r17,28(sp)
4080a3ec:	dc000615 	stw	r16,24(sp)
4080a3f0:	108eb304 	addi	r2,r2,15052
4080a3f4:	dfc00915 	stw	ra,36(sp)
4080a3f8:	2021883a 	mov	r16,r4
4080a3fc:	3823883a 	mov	r17,r7
4080a400:	14800017 	ldw	r18,0(r2)
4080a404:	28001426 	beq	r5,zero,4080a458 <_wcrtomb_r+0x7c>
4080a408:	d9400415 	stw	r5,16(sp)
4080a40c:	d9800515 	stw	r6,20(sp)
4080a410:	08060580 	call	40806058 <__locale_charset>
4080a414:	d9800517 	ldw	r6,20(sp)
4080a418:	d9400417 	ldw	r5,16(sp)
4080a41c:	100f883a 	mov	r7,r2
4080a420:	dc400015 	stw	r17,0(sp)
4080a424:	8009883a 	mov	r4,r16
4080a428:	903ee83a 	callr	r18
4080a42c:	00ffffc4 	movi	r3,-1
4080a430:	10c0031e 	bne	r2,r3,4080a440 <_wcrtomb_r+0x64>
4080a434:	88000015 	stw	zero,0(r17)
4080a438:	00c02284 	movi	r3,138
4080a43c:	80c00015 	stw	r3,0(r16)
4080a440:	dfc00917 	ldw	ra,36(sp)
4080a444:	dc800817 	ldw	r18,32(sp)
4080a448:	dc400717 	ldw	r17,28(sp)
4080a44c:	dc000617 	ldw	r16,24(sp)
4080a450:	dec00a04 	addi	sp,sp,40
4080a454:	f800283a 	ret
4080a458:	08060580 	call	40806058 <__locale_charset>
4080a45c:	100f883a 	mov	r7,r2
4080a460:	dc400015 	stw	r17,0(sp)
4080a464:	000d883a 	mov	r6,zero
4080a468:	d9400104 	addi	r5,sp,4
4080a46c:	8009883a 	mov	r4,r16
4080a470:	903ee83a 	callr	r18
4080a474:	003fed06 	br	4080a42c <__alt_mem_onchip_flash_0_data+0xff7ca42c>

4080a478 <wcrtomb>:
4080a478:	defff604 	addi	sp,sp,-40
4080a47c:	00902074 	movhi	r2,16513
4080a480:	dc800615 	stw	r18,24(sp)
4080a484:	dc400515 	stw	r17,20(sp)
4080a488:	108eaf04 	addi	r2,r2,15036
4080a48c:	dfc00915 	stw	ra,36(sp)
4080a490:	dd000815 	stw	r20,32(sp)
4080a494:	dcc00715 	stw	r19,28(sp)
4080a498:	dc000415 	stw	r16,16(sp)
4080a49c:	3025883a 	mov	r18,r6
4080a4a0:	14400017 	ldw	r17,0(r2)
4080a4a4:	20001926 	beq	r4,zero,4080a50c <wcrtomb+0x94>
4080a4a8:	00902074 	movhi	r2,16513
4080a4ac:	108eb304 	addi	r2,r2,15052
4080a4b0:	15000017 	ldw	r20,0(r2)
4080a4b4:	2021883a 	mov	r16,r4
4080a4b8:	2827883a 	mov	r19,r5
4080a4bc:	08060580 	call	40806058 <__locale_charset>
4080a4c0:	100f883a 	mov	r7,r2
4080a4c4:	dc800015 	stw	r18,0(sp)
4080a4c8:	980d883a 	mov	r6,r19
4080a4cc:	800b883a 	mov	r5,r16
4080a4d0:	8809883a 	mov	r4,r17
4080a4d4:	a03ee83a 	callr	r20
4080a4d8:	00ffffc4 	movi	r3,-1
4080a4dc:	10c0031e 	bne	r2,r3,4080a4ec <wcrtomb+0x74>
4080a4e0:	90000015 	stw	zero,0(r18)
4080a4e4:	00c02284 	movi	r3,138
4080a4e8:	88c00015 	stw	r3,0(r17)
4080a4ec:	dfc00917 	ldw	ra,36(sp)
4080a4f0:	dd000817 	ldw	r20,32(sp)
4080a4f4:	dcc00717 	ldw	r19,28(sp)
4080a4f8:	dc800617 	ldw	r18,24(sp)
4080a4fc:	dc400517 	ldw	r17,20(sp)
4080a500:	dc000417 	ldw	r16,16(sp)
4080a504:	dec00a04 	addi	sp,sp,40
4080a508:	f800283a 	ret
4080a50c:	00902074 	movhi	r2,16513
4080a510:	108eb304 	addi	r2,r2,15052
4080a514:	14000017 	ldw	r16,0(r2)
4080a518:	08060580 	call	40806058 <__locale_charset>
4080a51c:	100f883a 	mov	r7,r2
4080a520:	dc800015 	stw	r18,0(sp)
4080a524:	000d883a 	mov	r6,zero
4080a528:	d9400104 	addi	r5,sp,4
4080a52c:	8809883a 	mov	r4,r17
4080a530:	803ee83a 	callr	r16
4080a534:	003fe806 	br	4080a4d8 <__alt_mem_onchip_flash_0_data+0xff7ca4d8>

4080a538 <__ascii_wctomb>:
4080a538:	28000526 	beq	r5,zero,4080a550 <__ascii_wctomb+0x18>
4080a53c:	00803fc4 	movi	r2,255
4080a540:	11800536 	bltu	r2,r6,4080a558 <__ascii_wctomb+0x20>
4080a544:	29800005 	stb	r6,0(r5)
4080a548:	00800044 	movi	r2,1
4080a54c:	f800283a 	ret
4080a550:	0005883a 	mov	r2,zero
4080a554:	f800283a 	ret
4080a558:	00802284 	movi	r2,138
4080a55c:	20800015 	stw	r2,0(r4)
4080a560:	00bfffc4 	movi	r2,-1
4080a564:	f800283a 	ret

4080a568 <_wctomb_r>:
4080a568:	00902074 	movhi	r2,16513
4080a56c:	defff904 	addi	sp,sp,-28
4080a570:	108eb304 	addi	r2,r2,15052
4080a574:	dfc00615 	stw	ra,24(sp)
4080a578:	dc400515 	stw	r17,20(sp)
4080a57c:	dc000415 	stw	r16,16(sp)
4080a580:	3823883a 	mov	r17,r7
4080a584:	14000017 	ldw	r16,0(r2)
4080a588:	d9000115 	stw	r4,4(sp)
4080a58c:	d9400215 	stw	r5,8(sp)
4080a590:	d9800315 	stw	r6,12(sp)
4080a594:	08060580 	call	40806058 <__locale_charset>
4080a598:	d9800317 	ldw	r6,12(sp)
4080a59c:	d9400217 	ldw	r5,8(sp)
4080a5a0:	d9000117 	ldw	r4,4(sp)
4080a5a4:	100f883a 	mov	r7,r2
4080a5a8:	dc400015 	stw	r17,0(sp)
4080a5ac:	803ee83a 	callr	r16
4080a5b0:	dfc00617 	ldw	ra,24(sp)
4080a5b4:	dc400517 	ldw	r17,20(sp)
4080a5b8:	dc000417 	ldw	r16,16(sp)
4080a5bc:	dec00704 	addi	sp,sp,28
4080a5c0:	f800283a 	ret

4080a5c4 <__udivdi3>:
4080a5c4:	defff504 	addi	sp,sp,-44
4080a5c8:	dcc00415 	stw	r19,16(sp)
4080a5cc:	dc000115 	stw	r16,4(sp)
4080a5d0:	dfc00a15 	stw	ra,40(sp)
4080a5d4:	df000915 	stw	fp,36(sp)
4080a5d8:	ddc00815 	stw	r23,32(sp)
4080a5dc:	dd800715 	stw	r22,28(sp)
4080a5e0:	dd400615 	stw	r21,24(sp)
4080a5e4:	dd000515 	stw	r20,20(sp)
4080a5e8:	dc800315 	stw	r18,12(sp)
4080a5ec:	dc400215 	stw	r17,8(sp)
4080a5f0:	2027883a 	mov	r19,r4
4080a5f4:	2821883a 	mov	r16,r5
4080a5f8:	3800411e 	bne	r7,zero,4080a700 <__udivdi3+0x13c>
4080a5fc:	3023883a 	mov	r17,r6
4080a600:	2025883a 	mov	r18,r4
4080a604:	2980522e 	bgeu	r5,r6,4080a750 <__udivdi3+0x18c>
4080a608:	00bfffd4 	movui	r2,65535
4080a60c:	282d883a 	mov	r22,r5
4080a610:	1180a836 	bltu	r2,r6,4080a8b4 <__udivdi3+0x2f0>
4080a614:	00803fc4 	movi	r2,255
4080a618:	1185803a 	cmpltu	r2,r2,r6
4080a61c:	100490fa 	slli	r2,r2,3
4080a620:	3086d83a 	srl	r3,r6,r2
4080a624:	01102074 	movhi	r4,16513
4080a628:	210663c4 	addi	r4,r4,6543
4080a62c:	20c7883a 	add	r3,r4,r3
4080a630:	18c00003 	ldbu	r3,0(r3)
4080a634:	1885883a 	add	r2,r3,r2
4080a638:	00c00804 	movi	r3,32
4080a63c:	1887c83a 	sub	r3,r3,r2
4080a640:	18000526 	beq	r3,zero,4080a658 <__udivdi3+0x94>
4080a644:	80e0983a 	sll	r16,r16,r3
4080a648:	9884d83a 	srl	r2,r19,r2
4080a64c:	30e2983a 	sll	r17,r6,r3
4080a650:	98e4983a 	sll	r18,r19,r3
4080a654:	142cb03a 	or	r22,r2,r16
4080a658:	882ad43a 	srli	r21,r17,16
4080a65c:	b009883a 	mov	r4,r22
4080a660:	8d3fffcc 	andi	r20,r17,65535
4080a664:	a80b883a 	mov	r5,r21
4080a668:	080b1d00 	call	4080b1d0 <__umodsi3>
4080a66c:	b009883a 	mov	r4,r22
4080a670:	a80b883a 	mov	r5,r21
4080a674:	1027883a 	mov	r19,r2
4080a678:	080b16c0 	call	4080b16c <__udivsi3>
4080a67c:	102d883a 	mov	r22,r2
4080a680:	9826943a 	slli	r19,r19,16
4080a684:	9004d43a 	srli	r2,r18,16
4080a688:	a5a1383a 	mul	r16,r20,r22
4080a68c:	14c4b03a 	or	r2,r2,r19
4080a690:	1400052e 	bgeu	r2,r16,4080a6a8 <__udivdi3+0xe4>
4080a694:	1445883a 	add	r2,r2,r17
4080a698:	b0ffffc4 	addi	r3,r22,-1
4080a69c:	14400136 	bltu	r2,r17,4080a6a4 <__udivdi3+0xe0>
4080a6a0:	14012336 	bltu	r2,r16,4080ab30 <__udivdi3+0x56c>
4080a6a4:	182d883a 	mov	r22,r3
4080a6a8:	1421c83a 	sub	r16,r2,r16
4080a6ac:	a80b883a 	mov	r5,r21
4080a6b0:	8009883a 	mov	r4,r16
4080a6b4:	080b1d00 	call	4080b1d0 <__umodsi3>
4080a6b8:	1027883a 	mov	r19,r2
4080a6bc:	a80b883a 	mov	r5,r21
4080a6c0:	8009883a 	mov	r4,r16
4080a6c4:	080b16c0 	call	4080b16c <__udivsi3>
4080a6c8:	9826943a 	slli	r19,r19,16
4080a6cc:	a0a9383a 	mul	r20,r20,r2
4080a6d0:	94bfffcc 	andi	r18,r18,65535
4080a6d4:	94e4b03a 	or	r18,r18,r19
4080a6d8:	9500052e 	bgeu	r18,r20,4080a6f0 <__udivdi3+0x12c>
4080a6dc:	8ca5883a 	add	r18,r17,r18
4080a6e0:	10ffffc4 	addi	r3,r2,-1
4080a6e4:	9440f136 	bltu	r18,r17,4080aaac <__udivdi3+0x4e8>
4080a6e8:	9500f02e 	bgeu	r18,r20,4080aaac <__udivdi3+0x4e8>
4080a6ec:	10bfff84 	addi	r2,r2,-2
4080a6f0:	b00c943a 	slli	r6,r22,16
4080a6f4:	0007883a 	mov	r3,zero
4080a6f8:	3084b03a 	or	r2,r6,r2
4080a6fc:	00005906 	br	4080a864 <__udivdi3+0x2a0>
4080a700:	29c05636 	bltu	r5,r7,4080a85c <__udivdi3+0x298>
4080a704:	00bfffd4 	movui	r2,65535
4080a708:	11c0622e 	bgeu	r2,r7,4080a894 <__udivdi3+0x2d0>
4080a70c:	00804034 	movhi	r2,256
4080a710:	10bfffc4 	addi	r2,r2,-1
4080a714:	11c0ee36 	bltu	r2,r7,4080aad0 <__udivdi3+0x50c>
4080a718:	00800404 	movi	r2,16
4080a71c:	3886d83a 	srl	r3,r7,r2
4080a720:	01102074 	movhi	r4,16513
4080a724:	210663c4 	addi	r4,r4,6543
4080a728:	20c7883a 	add	r3,r4,r3
4080a72c:	18c00003 	ldbu	r3,0(r3)
4080a730:	05400804 	movi	r21,32
4080a734:	1885883a 	add	r2,r3,r2
4080a738:	a8abc83a 	sub	r21,r21,r2
4080a73c:	a800621e 	bne	r21,zero,4080a8c8 <__udivdi3+0x304>
4080a740:	3c00e936 	bltu	r7,r16,4080aae8 <__udivdi3+0x524>
4080a744:	9985403a 	cmpgeu	r2,r19,r6
4080a748:	0007883a 	mov	r3,zero
4080a74c:	00004506 	br	4080a864 <__udivdi3+0x2a0>
4080a750:	3000041e 	bne	r6,zero,4080a764 <__udivdi3+0x1a0>
4080a754:	000b883a 	mov	r5,zero
4080a758:	01000044 	movi	r4,1
4080a75c:	080b16c0 	call	4080b16c <__udivsi3>
4080a760:	1023883a 	mov	r17,r2
4080a764:	00bfffd4 	movui	r2,65535
4080a768:	14404e2e 	bgeu	r2,r17,4080a8a4 <__udivdi3+0x2e0>
4080a76c:	00804034 	movhi	r2,256
4080a770:	10bfffc4 	addi	r2,r2,-1
4080a774:	1440d836 	bltu	r2,r17,4080aad8 <__udivdi3+0x514>
4080a778:	00800404 	movi	r2,16
4080a77c:	8886d83a 	srl	r3,r17,r2
4080a780:	01102074 	movhi	r4,16513
4080a784:	210663c4 	addi	r4,r4,6543
4080a788:	20c7883a 	add	r3,r4,r3
4080a78c:	18c00003 	ldbu	r3,0(r3)
4080a790:	1885883a 	add	r2,r3,r2
4080a794:	00c00804 	movi	r3,32
4080a798:	1887c83a 	sub	r3,r3,r2
4080a79c:	18008f1e 	bne	r3,zero,4080a9dc <__udivdi3+0x418>
4080a7a0:	882ad43a 	srli	r21,r17,16
4080a7a4:	8461c83a 	sub	r16,r16,r17
4080a7a8:	8d3fffcc 	andi	r20,r17,65535
4080a7ac:	00c00044 	movi	r3,1
4080a7b0:	8009883a 	mov	r4,r16
4080a7b4:	a80b883a 	mov	r5,r21
4080a7b8:	d8c00015 	stw	r3,0(sp)
4080a7bc:	080b1d00 	call	4080b1d0 <__umodsi3>
4080a7c0:	8009883a 	mov	r4,r16
4080a7c4:	a80b883a 	mov	r5,r21
4080a7c8:	1027883a 	mov	r19,r2
4080a7cc:	080b16c0 	call	4080b16c <__udivsi3>
4080a7d0:	9826943a 	slli	r19,r19,16
4080a7d4:	9008d43a 	srli	r4,r18,16
4080a7d8:	1521383a 	mul	r16,r2,r20
4080a7dc:	102d883a 	mov	r22,r2
4080a7e0:	24c8b03a 	or	r4,r4,r19
4080a7e4:	d8c00017 	ldw	r3,0(sp)
4080a7e8:	2400052e 	bgeu	r4,r16,4080a800 <__udivdi3+0x23c>
4080a7ec:	2449883a 	add	r4,r4,r17
4080a7f0:	b0bfffc4 	addi	r2,r22,-1
4080a7f4:	24400136 	bltu	r4,r17,4080a7fc <__udivdi3+0x238>
4080a7f8:	2400ca36 	bltu	r4,r16,4080ab24 <__udivdi3+0x560>
4080a7fc:	102d883a 	mov	r22,r2
4080a800:	2421c83a 	sub	r16,r4,r16
4080a804:	a80b883a 	mov	r5,r21
4080a808:	8009883a 	mov	r4,r16
4080a80c:	d8c00015 	stw	r3,0(sp)
4080a810:	080b1d00 	call	4080b1d0 <__umodsi3>
4080a814:	1027883a 	mov	r19,r2
4080a818:	a80b883a 	mov	r5,r21
4080a81c:	8009883a 	mov	r4,r16
4080a820:	080b16c0 	call	4080b16c <__udivsi3>
4080a824:	9826943a 	slli	r19,r19,16
4080a828:	1529383a 	mul	r20,r2,r20
4080a82c:	94bfffcc 	andi	r18,r18,65535
4080a830:	94e4b03a 	or	r18,r18,r19
4080a834:	d8c00017 	ldw	r3,0(sp)
4080a838:	9500052e 	bgeu	r18,r20,4080a850 <__udivdi3+0x28c>
4080a83c:	8ca5883a 	add	r18,r17,r18
4080a840:	113fffc4 	addi	r4,r2,-1
4080a844:	94409736 	bltu	r18,r17,4080aaa4 <__udivdi3+0x4e0>
4080a848:	9500962e 	bgeu	r18,r20,4080aaa4 <__udivdi3+0x4e0>
4080a84c:	10bfff84 	addi	r2,r2,-2
4080a850:	b00c943a 	slli	r6,r22,16
4080a854:	3084b03a 	or	r2,r6,r2
4080a858:	00000206 	br	4080a864 <__udivdi3+0x2a0>
4080a85c:	0007883a 	mov	r3,zero
4080a860:	0005883a 	mov	r2,zero
4080a864:	dfc00a17 	ldw	ra,40(sp)
4080a868:	df000917 	ldw	fp,36(sp)
4080a86c:	ddc00817 	ldw	r23,32(sp)
4080a870:	dd800717 	ldw	r22,28(sp)
4080a874:	dd400617 	ldw	r21,24(sp)
4080a878:	dd000517 	ldw	r20,20(sp)
4080a87c:	dcc00417 	ldw	r19,16(sp)
4080a880:	dc800317 	ldw	r18,12(sp)
4080a884:	dc400217 	ldw	r17,8(sp)
4080a888:	dc000117 	ldw	r16,4(sp)
4080a88c:	dec00b04 	addi	sp,sp,44
4080a890:	f800283a 	ret
4080a894:	00803fc4 	movi	r2,255
4080a898:	11c5803a 	cmpltu	r2,r2,r7
4080a89c:	100490fa 	slli	r2,r2,3
4080a8a0:	003f9e06 	br	4080a71c <__alt_mem_onchip_flash_0_data+0xff7ca71c>
4080a8a4:	00803fc4 	movi	r2,255
4080a8a8:	1445803a 	cmpltu	r2,r2,r17
4080a8ac:	100490fa 	slli	r2,r2,3
4080a8b0:	003fb206 	br	4080a77c <__alt_mem_onchip_flash_0_data+0xff7ca77c>
4080a8b4:	00804034 	movhi	r2,256
4080a8b8:	10bfffc4 	addi	r2,r2,-1
4080a8bc:	11808836 	bltu	r2,r6,4080aae0 <__udivdi3+0x51c>
4080a8c0:	00800404 	movi	r2,16
4080a8c4:	003f5606 	br	4080a620 <__alt_mem_onchip_flash_0_data+0xff7ca620>
4080a8c8:	30aed83a 	srl	r23,r6,r2
4080a8cc:	3d4e983a 	sll	r7,r7,r21
4080a8d0:	80acd83a 	srl	r22,r16,r2
4080a8d4:	9884d83a 	srl	r2,r19,r2
4080a8d8:	3deeb03a 	or	r23,r7,r23
4080a8dc:	b824d43a 	srli	r18,r23,16
4080a8e0:	8560983a 	sll	r16,r16,r21
4080a8e4:	b009883a 	mov	r4,r22
4080a8e8:	900b883a 	mov	r5,r18
4080a8ec:	3568983a 	sll	r20,r6,r21
4080a8f0:	1420b03a 	or	r16,r2,r16
4080a8f4:	080b1d00 	call	4080b1d0 <__umodsi3>
4080a8f8:	b009883a 	mov	r4,r22
4080a8fc:	900b883a 	mov	r5,r18
4080a900:	1023883a 	mov	r17,r2
4080a904:	080b16c0 	call	4080b16c <__udivsi3>
4080a908:	8808943a 	slli	r4,r17,16
4080a90c:	bf3fffcc 	andi	fp,r23,65535
4080a910:	8006d43a 	srli	r3,r16,16
4080a914:	e0a3383a 	mul	r17,fp,r2
4080a918:	100d883a 	mov	r6,r2
4080a91c:	1906b03a 	or	r3,r3,r4
4080a920:	1c40042e 	bgeu	r3,r17,4080a934 <__udivdi3+0x370>
4080a924:	1dc7883a 	add	r3,r3,r23
4080a928:	10bfffc4 	addi	r2,r2,-1
4080a92c:	1dc0752e 	bgeu	r3,r23,4080ab04 <__udivdi3+0x540>
4080a930:	100d883a 	mov	r6,r2
4080a934:	1c63c83a 	sub	r17,r3,r17
4080a938:	900b883a 	mov	r5,r18
4080a93c:	8809883a 	mov	r4,r17
4080a940:	d9800015 	stw	r6,0(sp)
4080a944:	080b1d00 	call	4080b1d0 <__umodsi3>
4080a948:	102d883a 	mov	r22,r2
4080a94c:	8809883a 	mov	r4,r17
4080a950:	900b883a 	mov	r5,r18
4080a954:	080b16c0 	call	4080b16c <__udivsi3>
4080a958:	b02c943a 	slli	r22,r22,16
4080a95c:	e089383a 	mul	r4,fp,r2
4080a960:	843fffcc 	andi	r16,r16,65535
4080a964:	85a0b03a 	or	r16,r16,r22
4080a968:	d9800017 	ldw	r6,0(sp)
4080a96c:	8100042e 	bgeu	r16,r4,4080a980 <__udivdi3+0x3bc>
4080a970:	85e1883a 	add	r16,r16,r23
4080a974:	10ffffc4 	addi	r3,r2,-1
4080a978:	85c05e2e 	bgeu	r16,r23,4080aaf4 <__udivdi3+0x530>
4080a97c:	1805883a 	mov	r2,r3
4080a980:	300c943a 	slli	r6,r6,16
4080a984:	a17fffcc 	andi	r5,r20,65535
4080a988:	a028d43a 	srli	r20,r20,16
4080a98c:	3084b03a 	or	r2,r6,r2
4080a990:	10ffffcc 	andi	r3,r2,65535
4080a994:	100cd43a 	srli	r6,r2,16
4080a998:	194f383a 	mul	r7,r3,r5
4080a99c:	1d07383a 	mul	r3,r3,r20
4080a9a0:	314b383a 	mul	r5,r6,r5
4080a9a4:	3810d43a 	srli	r8,r7,16
4080a9a8:	8121c83a 	sub	r16,r16,r4
4080a9ac:	1947883a 	add	r3,r3,r5
4080a9b0:	40c7883a 	add	r3,r8,r3
4080a9b4:	350d383a 	mul	r6,r6,r20
4080a9b8:	1940022e 	bgeu	r3,r5,4080a9c4 <__udivdi3+0x400>
4080a9bc:	01000074 	movhi	r4,1
4080a9c0:	310d883a 	add	r6,r6,r4
4080a9c4:	1828d43a 	srli	r20,r3,16
4080a9c8:	a18d883a 	add	r6,r20,r6
4080a9cc:	81803e36 	bltu	r16,r6,4080aac8 <__udivdi3+0x504>
4080a9d0:	81803826 	beq	r16,r6,4080aab4 <__udivdi3+0x4f0>
4080a9d4:	0007883a 	mov	r3,zero
4080a9d8:	003fa206 	br	4080a864 <__alt_mem_onchip_flash_0_data+0xff7ca864>
4080a9dc:	88e2983a 	sll	r17,r17,r3
4080a9e0:	80a8d83a 	srl	r20,r16,r2
4080a9e4:	80e0983a 	sll	r16,r16,r3
4080a9e8:	882ad43a 	srli	r21,r17,16
4080a9ec:	9884d83a 	srl	r2,r19,r2
4080a9f0:	a009883a 	mov	r4,r20
4080a9f4:	a80b883a 	mov	r5,r21
4080a9f8:	142eb03a 	or	r23,r2,r16
4080a9fc:	98e4983a 	sll	r18,r19,r3
4080aa00:	080b1d00 	call	4080b1d0 <__umodsi3>
4080aa04:	a009883a 	mov	r4,r20
4080aa08:	a80b883a 	mov	r5,r21
4080aa0c:	1021883a 	mov	r16,r2
4080aa10:	080b16c0 	call	4080b16c <__udivsi3>
4080aa14:	1039883a 	mov	fp,r2
4080aa18:	8d3fffcc 	andi	r20,r17,65535
4080aa1c:	8020943a 	slli	r16,r16,16
4080aa20:	b804d43a 	srli	r2,r23,16
4080aa24:	a72d383a 	mul	r22,r20,fp
4080aa28:	1404b03a 	or	r2,r2,r16
4080aa2c:	1580062e 	bgeu	r2,r22,4080aa48 <__udivdi3+0x484>
4080aa30:	1445883a 	add	r2,r2,r17
4080aa34:	e0ffffc4 	addi	r3,fp,-1
4080aa38:	14403836 	bltu	r2,r17,4080ab1c <__udivdi3+0x558>
4080aa3c:	1580372e 	bgeu	r2,r22,4080ab1c <__udivdi3+0x558>
4080aa40:	e73fff84 	addi	fp,fp,-2
4080aa44:	1445883a 	add	r2,r2,r17
4080aa48:	15adc83a 	sub	r22,r2,r22
4080aa4c:	a80b883a 	mov	r5,r21
4080aa50:	b009883a 	mov	r4,r22
4080aa54:	080b1d00 	call	4080b1d0 <__umodsi3>
4080aa58:	1027883a 	mov	r19,r2
4080aa5c:	b009883a 	mov	r4,r22
4080aa60:	a80b883a 	mov	r5,r21
4080aa64:	080b16c0 	call	4080b16c <__udivsi3>
4080aa68:	9826943a 	slli	r19,r19,16
4080aa6c:	a0a1383a 	mul	r16,r20,r2
4080aa70:	b93fffcc 	andi	r4,r23,65535
4080aa74:	24c8b03a 	or	r4,r4,r19
4080aa78:	2400062e 	bgeu	r4,r16,4080aa94 <__udivdi3+0x4d0>
4080aa7c:	2449883a 	add	r4,r4,r17
4080aa80:	10ffffc4 	addi	r3,r2,-1
4080aa84:	24402336 	bltu	r4,r17,4080ab14 <__udivdi3+0x550>
4080aa88:	2400222e 	bgeu	r4,r16,4080ab14 <__udivdi3+0x550>
4080aa8c:	10bfff84 	addi	r2,r2,-2
4080aa90:	2449883a 	add	r4,r4,r17
4080aa94:	e038943a 	slli	fp,fp,16
4080aa98:	2421c83a 	sub	r16,r4,r16
4080aa9c:	e086b03a 	or	r3,fp,r2
4080aaa0:	003f4306 	br	4080a7b0 <__alt_mem_onchip_flash_0_data+0xff7ca7b0>
4080aaa4:	2005883a 	mov	r2,r4
4080aaa8:	003f6906 	br	4080a850 <__alt_mem_onchip_flash_0_data+0xff7ca850>
4080aaac:	1805883a 	mov	r2,r3
4080aab0:	003f0f06 	br	4080a6f0 <__alt_mem_onchip_flash_0_data+0xff7ca6f0>
4080aab4:	1806943a 	slli	r3,r3,16
4080aab8:	9d66983a 	sll	r19,r19,r21
4080aabc:	39ffffcc 	andi	r7,r7,65535
4080aac0:	19c7883a 	add	r3,r3,r7
4080aac4:	98ffc32e 	bgeu	r19,r3,4080a9d4 <__alt_mem_onchip_flash_0_data+0xff7ca9d4>
4080aac8:	10bfffc4 	addi	r2,r2,-1
4080aacc:	003fc106 	br	4080a9d4 <__alt_mem_onchip_flash_0_data+0xff7ca9d4>
4080aad0:	00800604 	movi	r2,24
4080aad4:	003f1106 	br	4080a71c <__alt_mem_onchip_flash_0_data+0xff7ca71c>
4080aad8:	00800604 	movi	r2,24
4080aadc:	003f2706 	br	4080a77c <__alt_mem_onchip_flash_0_data+0xff7ca77c>
4080aae0:	00800604 	movi	r2,24
4080aae4:	003ece06 	br	4080a620 <__alt_mem_onchip_flash_0_data+0xff7ca620>
4080aae8:	0007883a 	mov	r3,zero
4080aaec:	00800044 	movi	r2,1
4080aaf0:	003f5c06 	br	4080a864 <__alt_mem_onchip_flash_0_data+0xff7ca864>
4080aaf4:	813fa12e 	bgeu	r16,r4,4080a97c <__alt_mem_onchip_flash_0_data+0xff7ca97c>
4080aaf8:	10bfff84 	addi	r2,r2,-2
4080aafc:	85e1883a 	add	r16,r16,r23
4080ab00:	003f9f06 	br	4080a980 <__alt_mem_onchip_flash_0_data+0xff7ca980>
4080ab04:	1c7f8a2e 	bgeu	r3,r17,4080a930 <__alt_mem_onchip_flash_0_data+0xff7ca930>
4080ab08:	31bfff84 	addi	r6,r6,-2
4080ab0c:	1dc7883a 	add	r3,r3,r23
4080ab10:	003f8806 	br	4080a934 <__alt_mem_onchip_flash_0_data+0xff7ca934>
4080ab14:	1805883a 	mov	r2,r3
4080ab18:	003fde06 	br	4080aa94 <__alt_mem_onchip_flash_0_data+0xff7caa94>
4080ab1c:	1839883a 	mov	fp,r3
4080ab20:	003fc906 	br	4080aa48 <__alt_mem_onchip_flash_0_data+0xff7caa48>
4080ab24:	b5bfff84 	addi	r22,r22,-2
4080ab28:	2449883a 	add	r4,r4,r17
4080ab2c:	003f3406 	br	4080a800 <__alt_mem_onchip_flash_0_data+0xff7ca800>
4080ab30:	b5bfff84 	addi	r22,r22,-2
4080ab34:	1445883a 	add	r2,r2,r17
4080ab38:	003edb06 	br	4080a6a8 <__alt_mem_onchip_flash_0_data+0xff7ca6a8>

4080ab3c <__umoddi3>:
4080ab3c:	defff404 	addi	sp,sp,-48
4080ab40:	df000a15 	stw	fp,40(sp)
4080ab44:	dc400315 	stw	r17,12(sp)
4080ab48:	dc000215 	stw	r16,8(sp)
4080ab4c:	dfc00b15 	stw	ra,44(sp)
4080ab50:	ddc00915 	stw	r23,36(sp)
4080ab54:	dd800815 	stw	r22,32(sp)
4080ab58:	dd400715 	stw	r21,28(sp)
4080ab5c:	dd000615 	stw	r20,24(sp)
4080ab60:	dcc00515 	stw	r19,20(sp)
4080ab64:	dc800415 	stw	r18,16(sp)
4080ab68:	2021883a 	mov	r16,r4
4080ab6c:	2823883a 	mov	r17,r5
4080ab70:	2839883a 	mov	fp,r5
4080ab74:	38003c1e 	bne	r7,zero,4080ac68 <__umoddi3+0x12c>
4080ab78:	3027883a 	mov	r19,r6
4080ab7c:	2029883a 	mov	r20,r4
4080ab80:	2980512e 	bgeu	r5,r6,4080acc8 <__umoddi3+0x18c>
4080ab84:	00bfffd4 	movui	r2,65535
4080ab88:	11809a36 	bltu	r2,r6,4080adf4 <__umoddi3+0x2b8>
4080ab8c:	01003fc4 	movi	r4,255
4080ab90:	2189803a 	cmpltu	r4,r4,r6
4080ab94:	200890fa 	slli	r4,r4,3
4080ab98:	3104d83a 	srl	r2,r6,r4
4080ab9c:	00d02074 	movhi	r3,16513
4080aba0:	18c663c4 	addi	r3,r3,6543
4080aba4:	1885883a 	add	r2,r3,r2
4080aba8:	10c00003 	ldbu	r3,0(r2)
4080abac:	00800804 	movi	r2,32
4080abb0:	1909883a 	add	r4,r3,r4
4080abb4:	1125c83a 	sub	r18,r2,r4
4080abb8:	90000526 	beq	r18,zero,4080abd0 <__umoddi3+0x94>
4080abbc:	8ca2983a 	sll	r17,r17,r18
4080abc0:	8108d83a 	srl	r4,r16,r4
4080abc4:	34a6983a 	sll	r19,r6,r18
4080abc8:	84a8983a 	sll	r20,r16,r18
4080abcc:	2478b03a 	or	fp,r4,r17
4080abd0:	982ed43a 	srli	r23,r19,16
4080abd4:	e009883a 	mov	r4,fp
4080abd8:	9dbfffcc 	andi	r22,r19,65535
4080abdc:	b80b883a 	mov	r5,r23
4080abe0:	080b1d00 	call	4080b1d0 <__umodsi3>
4080abe4:	e009883a 	mov	r4,fp
4080abe8:	b80b883a 	mov	r5,r23
4080abec:	102b883a 	mov	r21,r2
4080abf0:	080b16c0 	call	4080b16c <__udivsi3>
4080abf4:	a806943a 	slli	r3,r21,16
4080abf8:	a008d43a 	srli	r4,r20,16
4080abfc:	b085383a 	mul	r2,r22,r2
4080ac00:	20c8b03a 	or	r4,r4,r3
4080ac04:	2080032e 	bgeu	r4,r2,4080ac14 <__umoddi3+0xd8>
4080ac08:	24c9883a 	add	r4,r4,r19
4080ac0c:	24c00136 	bltu	r4,r19,4080ac14 <__umoddi3+0xd8>
4080ac10:	20811036 	bltu	r4,r2,4080b054 <__umoddi3+0x518>
4080ac14:	20abc83a 	sub	r21,r4,r2
4080ac18:	b80b883a 	mov	r5,r23
4080ac1c:	a809883a 	mov	r4,r21
4080ac20:	080b1d00 	call	4080b1d0 <__umodsi3>
4080ac24:	1023883a 	mov	r17,r2
4080ac28:	b80b883a 	mov	r5,r23
4080ac2c:	a809883a 	mov	r4,r21
4080ac30:	080b16c0 	call	4080b16c <__udivsi3>
4080ac34:	8822943a 	slli	r17,r17,16
4080ac38:	b085383a 	mul	r2,r22,r2
4080ac3c:	a0ffffcc 	andi	r3,r20,65535
4080ac40:	1c46b03a 	or	r3,r3,r17
4080ac44:	1880042e 	bgeu	r3,r2,4080ac58 <__umoddi3+0x11c>
4080ac48:	1cc7883a 	add	r3,r3,r19
4080ac4c:	1cc00236 	bltu	r3,r19,4080ac58 <__umoddi3+0x11c>
4080ac50:	1880012e 	bgeu	r3,r2,4080ac58 <__umoddi3+0x11c>
4080ac54:	1cc7883a 	add	r3,r3,r19
4080ac58:	1885c83a 	sub	r2,r3,r2
4080ac5c:	1484d83a 	srl	r2,r2,r18
4080ac60:	0007883a 	mov	r3,zero
4080ac64:	00004f06 	br	4080ada4 <__umoddi3+0x268>
4080ac68:	29c04c36 	bltu	r5,r7,4080ad9c <__umoddi3+0x260>
4080ac6c:	00bfffd4 	movui	r2,65535
4080ac70:	11c0582e 	bgeu	r2,r7,4080add4 <__umoddi3+0x298>
4080ac74:	00804034 	movhi	r2,256
4080ac78:	10bfffc4 	addi	r2,r2,-1
4080ac7c:	11c0e736 	bltu	r2,r7,4080b01c <__umoddi3+0x4e0>
4080ac80:	01000404 	movi	r4,16
4080ac84:	3904d83a 	srl	r2,r7,r4
4080ac88:	00d02074 	movhi	r3,16513
4080ac8c:	18c663c4 	addi	r3,r3,6543
4080ac90:	1885883a 	add	r2,r3,r2
4080ac94:	14c00003 	ldbu	r19,0(r2)
4080ac98:	00c00804 	movi	r3,32
4080ac9c:	9927883a 	add	r19,r19,r4
4080aca0:	1ce9c83a 	sub	r20,r3,r19
4080aca4:	a000581e 	bne	r20,zero,4080ae08 <__umoddi3+0x2cc>
4080aca8:	3c400136 	bltu	r7,r17,4080acb0 <__umoddi3+0x174>
4080acac:	8180eb36 	bltu	r16,r6,4080b05c <__umoddi3+0x520>
4080acb0:	8185c83a 	sub	r2,r16,r6
4080acb4:	89e3c83a 	sub	r17,r17,r7
4080acb8:	8089803a 	cmpltu	r4,r16,r2
4080acbc:	8939c83a 	sub	fp,r17,r4
4080acc0:	e007883a 	mov	r3,fp
4080acc4:	00003706 	br	4080ada4 <__umoddi3+0x268>
4080acc8:	3000041e 	bne	r6,zero,4080acdc <__umoddi3+0x1a0>
4080accc:	000b883a 	mov	r5,zero
4080acd0:	01000044 	movi	r4,1
4080acd4:	080b16c0 	call	4080b16c <__udivsi3>
4080acd8:	1027883a 	mov	r19,r2
4080acdc:	00bfffd4 	movui	r2,65535
4080ace0:	14c0402e 	bgeu	r2,r19,4080ade4 <__umoddi3+0x2a8>
4080ace4:	00804034 	movhi	r2,256
4080ace8:	10bfffc4 	addi	r2,r2,-1
4080acec:	14c0cd36 	bltu	r2,r19,4080b024 <__umoddi3+0x4e8>
4080acf0:	00800404 	movi	r2,16
4080acf4:	9886d83a 	srl	r3,r19,r2
4080acf8:	01102074 	movhi	r4,16513
4080acfc:	210663c4 	addi	r4,r4,6543
4080ad00:	20c7883a 	add	r3,r4,r3
4080ad04:	18c00003 	ldbu	r3,0(r3)
4080ad08:	1887883a 	add	r3,r3,r2
4080ad0c:	00800804 	movi	r2,32
4080ad10:	10e5c83a 	sub	r18,r2,r3
4080ad14:	9000901e 	bne	r18,zero,4080af58 <__umoddi3+0x41c>
4080ad18:	982cd43a 	srli	r22,r19,16
4080ad1c:	8ce3c83a 	sub	r17,r17,r19
4080ad20:	9d7fffcc 	andi	r21,r19,65535
4080ad24:	b00b883a 	mov	r5,r22
4080ad28:	8809883a 	mov	r4,r17
4080ad2c:	080b1d00 	call	4080b1d0 <__umodsi3>
4080ad30:	8809883a 	mov	r4,r17
4080ad34:	b00b883a 	mov	r5,r22
4080ad38:	1021883a 	mov	r16,r2
4080ad3c:	080b16c0 	call	4080b16c <__udivsi3>
4080ad40:	8006943a 	slli	r3,r16,16
4080ad44:	a008d43a 	srli	r4,r20,16
4080ad48:	1545383a 	mul	r2,r2,r21
4080ad4c:	20c8b03a 	or	r4,r4,r3
4080ad50:	2080042e 	bgeu	r4,r2,4080ad64 <__umoddi3+0x228>
4080ad54:	24c9883a 	add	r4,r4,r19
4080ad58:	24c00236 	bltu	r4,r19,4080ad64 <__umoddi3+0x228>
4080ad5c:	2080012e 	bgeu	r4,r2,4080ad64 <__umoddi3+0x228>
4080ad60:	24c9883a 	add	r4,r4,r19
4080ad64:	20a1c83a 	sub	r16,r4,r2
4080ad68:	b00b883a 	mov	r5,r22
4080ad6c:	8009883a 	mov	r4,r16
4080ad70:	080b1d00 	call	4080b1d0 <__umodsi3>
4080ad74:	1023883a 	mov	r17,r2
4080ad78:	b00b883a 	mov	r5,r22
4080ad7c:	8009883a 	mov	r4,r16
4080ad80:	080b16c0 	call	4080b16c <__udivsi3>
4080ad84:	8822943a 	slli	r17,r17,16
4080ad88:	1545383a 	mul	r2,r2,r21
4080ad8c:	a53fffcc 	andi	r20,r20,65535
4080ad90:	a446b03a 	or	r3,r20,r17
4080ad94:	18bfb02e 	bgeu	r3,r2,4080ac58 <__alt_mem_onchip_flash_0_data+0xff7cac58>
4080ad98:	003fab06 	br	4080ac48 <__alt_mem_onchip_flash_0_data+0xff7cac48>
4080ad9c:	2005883a 	mov	r2,r4
4080ada0:	2807883a 	mov	r3,r5
4080ada4:	dfc00b17 	ldw	ra,44(sp)
4080ada8:	df000a17 	ldw	fp,40(sp)
4080adac:	ddc00917 	ldw	r23,36(sp)
4080adb0:	dd800817 	ldw	r22,32(sp)
4080adb4:	dd400717 	ldw	r21,28(sp)
4080adb8:	dd000617 	ldw	r20,24(sp)
4080adbc:	dcc00517 	ldw	r19,20(sp)
4080adc0:	dc800417 	ldw	r18,16(sp)
4080adc4:	dc400317 	ldw	r17,12(sp)
4080adc8:	dc000217 	ldw	r16,8(sp)
4080adcc:	dec00c04 	addi	sp,sp,48
4080add0:	f800283a 	ret
4080add4:	04c03fc4 	movi	r19,255
4080add8:	99c9803a 	cmpltu	r4,r19,r7
4080addc:	200890fa 	slli	r4,r4,3
4080ade0:	003fa806 	br	4080ac84 <__alt_mem_onchip_flash_0_data+0xff7cac84>
4080ade4:	00803fc4 	movi	r2,255
4080ade8:	14c5803a 	cmpltu	r2,r2,r19
4080adec:	100490fa 	slli	r2,r2,3
4080adf0:	003fc006 	br	4080acf4 <__alt_mem_onchip_flash_0_data+0xff7cacf4>
4080adf4:	00804034 	movhi	r2,256
4080adf8:	10bfffc4 	addi	r2,r2,-1
4080adfc:	11808b36 	bltu	r2,r6,4080b02c <__umoddi3+0x4f0>
4080ae00:	01000404 	movi	r4,16
4080ae04:	003f6406 	br	4080ab98 <__alt_mem_onchip_flash_0_data+0xff7cab98>
4080ae08:	34c4d83a 	srl	r2,r6,r19
4080ae0c:	3d0e983a 	sll	r7,r7,r20
4080ae10:	8cf8d83a 	srl	fp,r17,r19
4080ae14:	8d10983a 	sll	r8,r17,r20
4080ae18:	38aab03a 	or	r21,r7,r2
4080ae1c:	a82cd43a 	srli	r22,r21,16
4080ae20:	84e2d83a 	srl	r17,r16,r19
4080ae24:	e009883a 	mov	r4,fp
4080ae28:	b00b883a 	mov	r5,r22
4080ae2c:	8a22b03a 	or	r17,r17,r8
4080ae30:	3524983a 	sll	r18,r6,r20
4080ae34:	080b1d00 	call	4080b1d0 <__umodsi3>
4080ae38:	e009883a 	mov	r4,fp
4080ae3c:	b00b883a 	mov	r5,r22
4080ae40:	102f883a 	mov	r23,r2
4080ae44:	080b16c0 	call	4080b16c <__udivsi3>
4080ae48:	100d883a 	mov	r6,r2
4080ae4c:	b808943a 	slli	r4,r23,16
4080ae50:	aa3fffcc 	andi	r8,r21,65535
4080ae54:	8804d43a 	srli	r2,r17,16
4080ae58:	41af383a 	mul	r23,r8,r6
4080ae5c:	8520983a 	sll	r16,r16,r20
4080ae60:	1104b03a 	or	r2,r2,r4
4080ae64:	15c0042e 	bgeu	r2,r23,4080ae78 <__umoddi3+0x33c>
4080ae68:	1545883a 	add	r2,r2,r21
4080ae6c:	30ffffc4 	addi	r3,r6,-1
4080ae70:	1540742e 	bgeu	r2,r21,4080b044 <__umoddi3+0x508>
4080ae74:	180d883a 	mov	r6,r3
4080ae78:	15efc83a 	sub	r23,r2,r23
4080ae7c:	b00b883a 	mov	r5,r22
4080ae80:	b809883a 	mov	r4,r23
4080ae84:	d9800115 	stw	r6,4(sp)
4080ae88:	da000015 	stw	r8,0(sp)
4080ae8c:	080b1d00 	call	4080b1d0 <__umodsi3>
4080ae90:	b00b883a 	mov	r5,r22
4080ae94:	b809883a 	mov	r4,r23
4080ae98:	1039883a 	mov	fp,r2
4080ae9c:	080b16c0 	call	4080b16c <__udivsi3>
4080aea0:	da000017 	ldw	r8,0(sp)
4080aea4:	e038943a 	slli	fp,fp,16
4080aea8:	100b883a 	mov	r5,r2
4080aeac:	4089383a 	mul	r4,r8,r2
4080aeb0:	8a3fffcc 	andi	r8,r17,65535
4080aeb4:	4710b03a 	or	r8,r8,fp
4080aeb8:	d9800117 	ldw	r6,4(sp)
4080aebc:	4100042e 	bgeu	r8,r4,4080aed0 <__umoddi3+0x394>
4080aec0:	4551883a 	add	r8,r8,r21
4080aec4:	10bfffc4 	addi	r2,r2,-1
4080aec8:	45405a2e 	bgeu	r8,r21,4080b034 <__umoddi3+0x4f8>
4080aecc:	100b883a 	mov	r5,r2
4080aed0:	300c943a 	slli	r6,r6,16
4080aed4:	91ffffcc 	andi	r7,r18,65535
4080aed8:	9004d43a 	srli	r2,r18,16
4080aedc:	314cb03a 	or	r6,r6,r5
4080aee0:	317fffcc 	andi	r5,r6,65535
4080aee4:	300cd43a 	srli	r6,r6,16
4080aee8:	29d3383a 	mul	r9,r5,r7
4080aeec:	288b383a 	mul	r5,r5,r2
4080aef0:	31cf383a 	mul	r7,r6,r7
4080aef4:	4806d43a 	srli	r3,r9,16
4080aef8:	4111c83a 	sub	r8,r8,r4
4080aefc:	29cb883a 	add	r5,r5,r7
4080af00:	194b883a 	add	r5,r3,r5
4080af04:	3085383a 	mul	r2,r6,r2
4080af08:	29c0022e 	bgeu	r5,r7,4080af14 <__umoddi3+0x3d8>
4080af0c:	00c00074 	movhi	r3,1
4080af10:	10c5883a 	add	r2,r2,r3
4080af14:	2808d43a 	srli	r4,r5,16
4080af18:	280a943a 	slli	r5,r5,16
4080af1c:	4a7fffcc 	andi	r9,r9,65535
4080af20:	2085883a 	add	r2,r4,r2
4080af24:	2a4b883a 	add	r5,r5,r9
4080af28:	40803636 	bltu	r8,r2,4080b004 <__umoddi3+0x4c8>
4080af2c:	40804d26 	beq	r8,r2,4080b064 <__umoddi3+0x528>
4080af30:	4089c83a 	sub	r4,r8,r2
4080af34:	280f883a 	mov	r7,r5
4080af38:	81cfc83a 	sub	r7,r16,r7
4080af3c:	81c7803a 	cmpltu	r3,r16,r7
4080af40:	20c7c83a 	sub	r3,r4,r3
4080af44:	1cc4983a 	sll	r2,r3,r19
4080af48:	3d0ed83a 	srl	r7,r7,r20
4080af4c:	1d06d83a 	srl	r3,r3,r20
4080af50:	11c4b03a 	or	r2,r2,r7
4080af54:	003f9306 	br	4080ada4 <__alt_mem_onchip_flash_0_data+0xff7cada4>
4080af58:	9ca6983a 	sll	r19,r19,r18
4080af5c:	88e8d83a 	srl	r20,r17,r3
4080af60:	80c4d83a 	srl	r2,r16,r3
4080af64:	982cd43a 	srli	r22,r19,16
4080af68:	8ca2983a 	sll	r17,r17,r18
4080af6c:	a009883a 	mov	r4,r20
4080af70:	b00b883a 	mov	r5,r22
4080af74:	1478b03a 	or	fp,r2,r17
4080af78:	080b1d00 	call	4080b1d0 <__umodsi3>
4080af7c:	a009883a 	mov	r4,r20
4080af80:	b00b883a 	mov	r5,r22
4080af84:	1023883a 	mov	r17,r2
4080af88:	080b16c0 	call	4080b16c <__udivsi3>
4080af8c:	9d7fffcc 	andi	r21,r19,65535
4080af90:	880a943a 	slli	r5,r17,16
4080af94:	e008d43a 	srli	r4,fp,16
4080af98:	a885383a 	mul	r2,r21,r2
4080af9c:	84a8983a 	sll	r20,r16,r18
4080afa0:	2148b03a 	or	r4,r4,r5
4080afa4:	2080042e 	bgeu	r4,r2,4080afb8 <__umoddi3+0x47c>
4080afa8:	24c9883a 	add	r4,r4,r19
4080afac:	24c00236 	bltu	r4,r19,4080afb8 <__umoddi3+0x47c>
4080afb0:	2080012e 	bgeu	r4,r2,4080afb8 <__umoddi3+0x47c>
4080afb4:	24c9883a 	add	r4,r4,r19
4080afb8:	20a3c83a 	sub	r17,r4,r2
4080afbc:	b00b883a 	mov	r5,r22
4080afc0:	8809883a 	mov	r4,r17
4080afc4:	080b1d00 	call	4080b1d0 <__umodsi3>
4080afc8:	102f883a 	mov	r23,r2
4080afcc:	8809883a 	mov	r4,r17
4080afd0:	b00b883a 	mov	r5,r22
4080afd4:	080b16c0 	call	4080b16c <__udivsi3>
4080afd8:	b82e943a 	slli	r23,r23,16
4080afdc:	a885383a 	mul	r2,r21,r2
4080afe0:	e13fffcc 	andi	r4,fp,65535
4080afe4:	25c8b03a 	or	r4,r4,r23
4080afe8:	2080042e 	bgeu	r4,r2,4080affc <__umoddi3+0x4c0>
4080afec:	24c9883a 	add	r4,r4,r19
4080aff0:	24c00236 	bltu	r4,r19,4080affc <__umoddi3+0x4c0>
4080aff4:	2080012e 	bgeu	r4,r2,4080affc <__umoddi3+0x4c0>
4080aff8:	24c9883a 	add	r4,r4,r19
4080affc:	20a3c83a 	sub	r17,r4,r2
4080b000:	003f4806 	br	4080ad24 <__alt_mem_onchip_flash_0_data+0xff7cad24>
4080b004:	2c8fc83a 	sub	r7,r5,r18
4080b008:	1545c83a 	sub	r2,r2,r21
4080b00c:	29cb803a 	cmpltu	r5,r5,r7
4080b010:	1145c83a 	sub	r2,r2,r5
4080b014:	4089c83a 	sub	r4,r8,r2
4080b018:	003fc706 	br	4080af38 <__alt_mem_onchip_flash_0_data+0xff7caf38>
4080b01c:	01000604 	movi	r4,24
4080b020:	003f1806 	br	4080ac84 <__alt_mem_onchip_flash_0_data+0xff7cac84>
4080b024:	00800604 	movi	r2,24
4080b028:	003f3206 	br	4080acf4 <__alt_mem_onchip_flash_0_data+0xff7cacf4>
4080b02c:	01000604 	movi	r4,24
4080b030:	003ed906 	br	4080ab98 <__alt_mem_onchip_flash_0_data+0xff7cab98>
4080b034:	413fa52e 	bgeu	r8,r4,4080aecc <__alt_mem_onchip_flash_0_data+0xff7caecc>
4080b038:	297fff84 	addi	r5,r5,-2
4080b03c:	4551883a 	add	r8,r8,r21
4080b040:	003fa306 	br	4080aed0 <__alt_mem_onchip_flash_0_data+0xff7caed0>
4080b044:	15ff8b2e 	bgeu	r2,r23,4080ae74 <__alt_mem_onchip_flash_0_data+0xff7cae74>
4080b048:	31bfff84 	addi	r6,r6,-2
4080b04c:	1545883a 	add	r2,r2,r21
4080b050:	003f8906 	br	4080ae78 <__alt_mem_onchip_flash_0_data+0xff7cae78>
4080b054:	24c9883a 	add	r4,r4,r19
4080b058:	003eee06 	br	4080ac14 <__alt_mem_onchip_flash_0_data+0xff7cac14>
4080b05c:	8005883a 	mov	r2,r16
4080b060:	003f1706 	br	4080acc0 <__alt_mem_onchip_flash_0_data+0xff7cacc0>
4080b064:	817fe736 	bltu	r16,r5,4080b004 <__alt_mem_onchip_flash_0_data+0xff7cb004>
4080b068:	280f883a 	mov	r7,r5
4080b06c:	0009883a 	mov	r4,zero
4080b070:	003fb106 	br	4080af38 <__alt_mem_onchip_flash_0_data+0xff7caf38>

4080b074 <__divsi3>:
4080b074:	20001b16 	blt	r4,zero,4080b0e4 <__divsi3+0x70>
4080b078:	000f883a 	mov	r7,zero
4080b07c:	28001616 	blt	r5,zero,4080b0d8 <__divsi3+0x64>
4080b080:	200d883a 	mov	r6,r4
4080b084:	29001a2e 	bgeu	r5,r4,4080b0f0 <__divsi3+0x7c>
4080b088:	00800804 	movi	r2,32
4080b08c:	00c00044 	movi	r3,1
4080b090:	00000106 	br	4080b098 <__divsi3+0x24>
4080b094:	10000d26 	beq	r2,zero,4080b0cc <__divsi3+0x58>
4080b098:	294b883a 	add	r5,r5,r5
4080b09c:	10bfffc4 	addi	r2,r2,-1
4080b0a0:	18c7883a 	add	r3,r3,r3
4080b0a4:	293ffb36 	bltu	r5,r4,4080b094 <__alt_mem_onchip_flash_0_data+0xff7cb094>
4080b0a8:	0005883a 	mov	r2,zero
4080b0ac:	18000726 	beq	r3,zero,4080b0cc <__divsi3+0x58>
4080b0b0:	0005883a 	mov	r2,zero
4080b0b4:	31400236 	bltu	r6,r5,4080b0c0 <__divsi3+0x4c>
4080b0b8:	314dc83a 	sub	r6,r6,r5
4080b0bc:	10c4b03a 	or	r2,r2,r3
4080b0c0:	1806d07a 	srli	r3,r3,1
4080b0c4:	280ad07a 	srli	r5,r5,1
4080b0c8:	183ffa1e 	bne	r3,zero,4080b0b4 <__alt_mem_onchip_flash_0_data+0xff7cb0b4>
4080b0cc:	38000126 	beq	r7,zero,4080b0d4 <__divsi3+0x60>
4080b0d0:	0085c83a 	sub	r2,zero,r2
4080b0d4:	f800283a 	ret
4080b0d8:	014bc83a 	sub	r5,zero,r5
4080b0dc:	39c0005c 	xori	r7,r7,1
4080b0e0:	003fe706 	br	4080b080 <__alt_mem_onchip_flash_0_data+0xff7cb080>
4080b0e4:	0109c83a 	sub	r4,zero,r4
4080b0e8:	01c00044 	movi	r7,1
4080b0ec:	003fe306 	br	4080b07c <__alt_mem_onchip_flash_0_data+0xff7cb07c>
4080b0f0:	00c00044 	movi	r3,1
4080b0f4:	003fee06 	br	4080b0b0 <__alt_mem_onchip_flash_0_data+0xff7cb0b0>

4080b0f8 <__modsi3>:
4080b0f8:	20001716 	blt	r4,zero,4080b158 <__modsi3+0x60>
4080b0fc:	000f883a 	mov	r7,zero
4080b100:	2005883a 	mov	r2,r4
4080b104:	28001216 	blt	r5,zero,4080b150 <__modsi3+0x58>
4080b108:	2900162e 	bgeu	r5,r4,4080b164 <__modsi3+0x6c>
4080b10c:	01800804 	movi	r6,32
4080b110:	00c00044 	movi	r3,1
4080b114:	00000106 	br	4080b11c <__modsi3+0x24>
4080b118:	30000a26 	beq	r6,zero,4080b144 <__modsi3+0x4c>
4080b11c:	294b883a 	add	r5,r5,r5
4080b120:	31bfffc4 	addi	r6,r6,-1
4080b124:	18c7883a 	add	r3,r3,r3
4080b128:	293ffb36 	bltu	r5,r4,4080b118 <__alt_mem_onchip_flash_0_data+0xff7cb118>
4080b12c:	18000526 	beq	r3,zero,4080b144 <__modsi3+0x4c>
4080b130:	1806d07a 	srli	r3,r3,1
4080b134:	11400136 	bltu	r2,r5,4080b13c <__modsi3+0x44>
4080b138:	1145c83a 	sub	r2,r2,r5
4080b13c:	280ad07a 	srli	r5,r5,1
4080b140:	183ffb1e 	bne	r3,zero,4080b130 <__alt_mem_onchip_flash_0_data+0xff7cb130>
4080b144:	38000126 	beq	r7,zero,4080b14c <__modsi3+0x54>
4080b148:	0085c83a 	sub	r2,zero,r2
4080b14c:	f800283a 	ret
4080b150:	014bc83a 	sub	r5,zero,r5
4080b154:	003fec06 	br	4080b108 <__alt_mem_onchip_flash_0_data+0xff7cb108>
4080b158:	0109c83a 	sub	r4,zero,r4
4080b15c:	01c00044 	movi	r7,1
4080b160:	003fe706 	br	4080b100 <__alt_mem_onchip_flash_0_data+0xff7cb100>
4080b164:	00c00044 	movi	r3,1
4080b168:	003ff106 	br	4080b130 <__alt_mem_onchip_flash_0_data+0xff7cb130>

4080b16c <__udivsi3>:
4080b16c:	200d883a 	mov	r6,r4
4080b170:	2900152e 	bgeu	r5,r4,4080b1c8 <__udivsi3+0x5c>
4080b174:	28001416 	blt	r5,zero,4080b1c8 <__udivsi3+0x5c>
4080b178:	00800804 	movi	r2,32
4080b17c:	00c00044 	movi	r3,1
4080b180:	00000206 	br	4080b18c <__udivsi3+0x20>
4080b184:	10000e26 	beq	r2,zero,4080b1c0 <__udivsi3+0x54>
4080b188:	28000516 	blt	r5,zero,4080b1a0 <__udivsi3+0x34>
4080b18c:	294b883a 	add	r5,r5,r5
4080b190:	10bfffc4 	addi	r2,r2,-1
4080b194:	18c7883a 	add	r3,r3,r3
4080b198:	293ffa36 	bltu	r5,r4,4080b184 <__alt_mem_onchip_flash_0_data+0xff7cb184>
4080b19c:	18000826 	beq	r3,zero,4080b1c0 <__udivsi3+0x54>
4080b1a0:	0005883a 	mov	r2,zero
4080b1a4:	31400236 	bltu	r6,r5,4080b1b0 <__udivsi3+0x44>
4080b1a8:	314dc83a 	sub	r6,r6,r5
4080b1ac:	10c4b03a 	or	r2,r2,r3
4080b1b0:	1806d07a 	srli	r3,r3,1
4080b1b4:	280ad07a 	srli	r5,r5,1
4080b1b8:	183ffa1e 	bne	r3,zero,4080b1a4 <__alt_mem_onchip_flash_0_data+0xff7cb1a4>
4080b1bc:	f800283a 	ret
4080b1c0:	0005883a 	mov	r2,zero
4080b1c4:	f800283a 	ret
4080b1c8:	00c00044 	movi	r3,1
4080b1cc:	003ff406 	br	4080b1a0 <__alt_mem_onchip_flash_0_data+0xff7cb1a0>

4080b1d0 <__umodsi3>:
4080b1d0:	2005883a 	mov	r2,r4
4080b1d4:	2900122e 	bgeu	r5,r4,4080b220 <__umodsi3+0x50>
4080b1d8:	28001116 	blt	r5,zero,4080b220 <__umodsi3+0x50>
4080b1dc:	01800804 	movi	r6,32
4080b1e0:	00c00044 	movi	r3,1
4080b1e4:	00000206 	br	4080b1f0 <__umodsi3+0x20>
4080b1e8:	30000c26 	beq	r6,zero,4080b21c <__umodsi3+0x4c>
4080b1ec:	28000516 	blt	r5,zero,4080b204 <__umodsi3+0x34>
4080b1f0:	294b883a 	add	r5,r5,r5
4080b1f4:	31bfffc4 	addi	r6,r6,-1
4080b1f8:	18c7883a 	add	r3,r3,r3
4080b1fc:	293ffa36 	bltu	r5,r4,4080b1e8 <__alt_mem_onchip_flash_0_data+0xff7cb1e8>
4080b200:	18000626 	beq	r3,zero,4080b21c <__umodsi3+0x4c>
4080b204:	1806d07a 	srli	r3,r3,1
4080b208:	11400136 	bltu	r2,r5,4080b210 <__umodsi3+0x40>
4080b20c:	1145c83a 	sub	r2,r2,r5
4080b210:	280ad07a 	srli	r5,r5,1
4080b214:	183ffb1e 	bne	r3,zero,4080b204 <__alt_mem_onchip_flash_0_data+0xff7cb204>
4080b218:	f800283a 	ret
4080b21c:	f800283a 	ret
4080b220:	00c00044 	movi	r3,1
4080b224:	003ff706 	br	4080b204 <__alt_mem_onchip_flash_0_data+0xff7cb204>

4080b228 <__adddf3>:
4080b228:	02c00434 	movhi	r11,16
4080b22c:	5affffc4 	addi	r11,r11,-1
4080b230:	2806d7fa 	srli	r3,r5,31
4080b234:	2ad4703a 	and	r10,r5,r11
4080b238:	3ad2703a 	and	r9,r7,r11
4080b23c:	3804d53a 	srli	r2,r7,20
4080b240:	3018d77a 	srli	r12,r6,29
4080b244:	280ad53a 	srli	r5,r5,20
4080b248:	501490fa 	slli	r10,r10,3
4080b24c:	2010d77a 	srli	r8,r4,29
4080b250:	481290fa 	slli	r9,r9,3
4080b254:	380ed7fa 	srli	r7,r7,31
4080b258:	defffb04 	addi	sp,sp,-20
4080b25c:	dc800215 	stw	r18,8(sp)
4080b260:	dc400115 	stw	r17,4(sp)
4080b264:	dc000015 	stw	r16,0(sp)
4080b268:	dfc00415 	stw	ra,16(sp)
4080b26c:	dcc00315 	stw	r19,12(sp)
4080b270:	1c803fcc 	andi	r18,r3,255
4080b274:	2c01ffcc 	andi	r16,r5,2047
4080b278:	5210b03a 	or	r8,r10,r8
4080b27c:	202290fa 	slli	r17,r4,3
4080b280:	1081ffcc 	andi	r2,r2,2047
4080b284:	4b12b03a 	or	r9,r9,r12
4080b288:	300c90fa 	slli	r6,r6,3
4080b28c:	91c07526 	beq	r18,r7,4080b464 <__adddf3+0x23c>
4080b290:	8087c83a 	sub	r3,r16,r2
4080b294:	00c0ab0e 	bge	zero,r3,4080b544 <__adddf3+0x31c>
4080b298:	10002a1e 	bne	r2,zero,4080b344 <__adddf3+0x11c>
4080b29c:	4984b03a 	or	r2,r9,r6
4080b2a0:	1000961e 	bne	r2,zero,4080b4fc <__adddf3+0x2d4>
4080b2a4:	888001cc 	andi	r2,r17,7
4080b2a8:	10000726 	beq	r2,zero,4080b2c8 <__adddf3+0xa0>
4080b2ac:	888003cc 	andi	r2,r17,15
4080b2b0:	00c00104 	movi	r3,4
4080b2b4:	10c00426 	beq	r2,r3,4080b2c8 <__adddf3+0xa0>
4080b2b8:	88c7883a 	add	r3,r17,r3
4080b2bc:	1c63803a 	cmpltu	r17,r3,r17
4080b2c0:	4451883a 	add	r8,r8,r17
4080b2c4:	1823883a 	mov	r17,r3
4080b2c8:	4080202c 	andhi	r2,r8,128
4080b2cc:	10005926 	beq	r2,zero,4080b434 <__adddf3+0x20c>
4080b2d0:	84000044 	addi	r16,r16,1
4080b2d4:	0081ffc4 	movi	r2,2047
4080b2d8:	8080ba26 	beq	r16,r2,4080b5c4 <__adddf3+0x39c>
4080b2dc:	00bfe034 	movhi	r2,65408
4080b2e0:	10bfffc4 	addi	r2,r2,-1
4080b2e4:	4090703a 	and	r8,r8,r2
4080b2e8:	4004977a 	slli	r2,r8,29
4080b2ec:	4010927a 	slli	r8,r8,9
4080b2f0:	8822d0fa 	srli	r17,r17,3
4080b2f4:	8401ffcc 	andi	r16,r16,2047
4080b2f8:	4010d33a 	srli	r8,r8,12
4080b2fc:	9007883a 	mov	r3,r18
4080b300:	1444b03a 	or	r2,r2,r17
4080b304:	8401ffcc 	andi	r16,r16,2047
4080b308:	8020953a 	slli	r16,r16,20
4080b30c:	18c03fcc 	andi	r3,r3,255
4080b310:	01000434 	movhi	r4,16
4080b314:	213fffc4 	addi	r4,r4,-1
4080b318:	180697fa 	slli	r3,r3,31
4080b31c:	4110703a 	and	r8,r8,r4
4080b320:	4410b03a 	or	r8,r8,r16
4080b324:	40c6b03a 	or	r3,r8,r3
4080b328:	dfc00417 	ldw	ra,16(sp)
4080b32c:	dcc00317 	ldw	r19,12(sp)
4080b330:	dc800217 	ldw	r18,8(sp)
4080b334:	dc400117 	ldw	r17,4(sp)
4080b338:	dc000017 	ldw	r16,0(sp)
4080b33c:	dec00504 	addi	sp,sp,20
4080b340:	f800283a 	ret
4080b344:	0081ffc4 	movi	r2,2047
4080b348:	80bfd626 	beq	r16,r2,4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b34c:	4a402034 	orhi	r9,r9,128
4080b350:	00800e04 	movi	r2,56
4080b354:	10c09f16 	blt	r2,r3,4080b5d4 <__adddf3+0x3ac>
4080b358:	008007c4 	movi	r2,31
4080b35c:	10c0c216 	blt	r2,r3,4080b668 <__adddf3+0x440>
4080b360:	00800804 	movi	r2,32
4080b364:	10c5c83a 	sub	r2,r2,r3
4080b368:	488a983a 	sll	r5,r9,r2
4080b36c:	30c8d83a 	srl	r4,r6,r3
4080b370:	3084983a 	sll	r2,r6,r2
4080b374:	48c6d83a 	srl	r3,r9,r3
4080b378:	290cb03a 	or	r6,r5,r4
4080b37c:	1004c03a 	cmpne	r2,r2,zero
4080b380:	308cb03a 	or	r6,r6,r2
4080b384:	898dc83a 	sub	r6,r17,r6
4080b388:	89a3803a 	cmpltu	r17,r17,r6
4080b38c:	40d1c83a 	sub	r8,r8,r3
4080b390:	4451c83a 	sub	r8,r8,r17
4080b394:	3023883a 	mov	r17,r6
4080b398:	4080202c 	andhi	r2,r8,128
4080b39c:	10002326 	beq	r2,zero,4080b42c <__adddf3+0x204>
4080b3a0:	04c02034 	movhi	r19,128
4080b3a4:	9cffffc4 	addi	r19,r19,-1
4080b3a8:	44e6703a 	and	r19,r8,r19
4080b3ac:	98007626 	beq	r19,zero,4080b588 <__adddf3+0x360>
4080b3b0:	9809883a 	mov	r4,r19
4080b3b4:	0800f0c0 	call	40800f0c <__clzsi2>
4080b3b8:	10fffe04 	addi	r3,r2,-8
4080b3bc:	010007c4 	movi	r4,31
4080b3c0:	20c07716 	blt	r4,r3,4080b5a0 <__adddf3+0x378>
4080b3c4:	00800804 	movi	r2,32
4080b3c8:	10c5c83a 	sub	r2,r2,r3
4080b3cc:	8884d83a 	srl	r2,r17,r2
4080b3d0:	98d0983a 	sll	r8,r19,r3
4080b3d4:	88e2983a 	sll	r17,r17,r3
4080b3d8:	1204b03a 	or	r2,r2,r8
4080b3dc:	1c007416 	blt	r3,r16,4080b5b0 <__adddf3+0x388>
4080b3e0:	1c21c83a 	sub	r16,r3,r16
4080b3e4:	82000044 	addi	r8,r16,1
4080b3e8:	00c007c4 	movi	r3,31
4080b3ec:	1a009116 	blt	r3,r8,4080b634 <__adddf3+0x40c>
4080b3f0:	00c00804 	movi	r3,32
4080b3f4:	1a07c83a 	sub	r3,r3,r8
4080b3f8:	8a08d83a 	srl	r4,r17,r8
4080b3fc:	88e2983a 	sll	r17,r17,r3
4080b400:	10c6983a 	sll	r3,r2,r3
4080b404:	1210d83a 	srl	r8,r2,r8
4080b408:	8804c03a 	cmpne	r2,r17,zero
4080b40c:	1906b03a 	or	r3,r3,r4
4080b410:	18a2b03a 	or	r17,r3,r2
4080b414:	0021883a 	mov	r16,zero
4080b418:	003fa206 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b41c:	1890b03a 	or	r8,r3,r2
4080b420:	40017d26 	beq	r8,zero,4080ba18 <__adddf3+0x7f0>
4080b424:	1011883a 	mov	r8,r2
4080b428:	1823883a 	mov	r17,r3
4080b42c:	888001cc 	andi	r2,r17,7
4080b430:	103f9e1e 	bne	r2,zero,4080b2ac <__alt_mem_onchip_flash_0_data+0xff7cb2ac>
4080b434:	4004977a 	slli	r2,r8,29
4080b438:	8822d0fa 	srli	r17,r17,3
4080b43c:	4010d0fa 	srli	r8,r8,3
4080b440:	9007883a 	mov	r3,r18
4080b444:	1444b03a 	or	r2,r2,r17
4080b448:	0101ffc4 	movi	r4,2047
4080b44c:	81002426 	beq	r16,r4,4080b4e0 <__adddf3+0x2b8>
4080b450:	8120703a 	and	r16,r16,r4
4080b454:	01000434 	movhi	r4,16
4080b458:	213fffc4 	addi	r4,r4,-1
4080b45c:	4110703a 	and	r8,r8,r4
4080b460:	003fa806 	br	4080b304 <__alt_mem_onchip_flash_0_data+0xff7cb304>
4080b464:	8089c83a 	sub	r4,r16,r2
4080b468:	01005e0e 	bge	zero,r4,4080b5e4 <__adddf3+0x3bc>
4080b46c:	10002b26 	beq	r2,zero,4080b51c <__adddf3+0x2f4>
4080b470:	0081ffc4 	movi	r2,2047
4080b474:	80bf8b26 	beq	r16,r2,4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b478:	4a402034 	orhi	r9,r9,128
4080b47c:	00800e04 	movi	r2,56
4080b480:	1100a40e 	bge	r2,r4,4080b714 <__adddf3+0x4ec>
4080b484:	498cb03a 	or	r6,r9,r6
4080b488:	300ac03a 	cmpne	r5,r6,zero
4080b48c:	0013883a 	mov	r9,zero
4080b490:	2c4b883a 	add	r5,r5,r17
4080b494:	2c63803a 	cmpltu	r17,r5,r17
4080b498:	4a11883a 	add	r8,r9,r8
4080b49c:	8a11883a 	add	r8,r17,r8
4080b4a0:	2823883a 	mov	r17,r5
4080b4a4:	4080202c 	andhi	r2,r8,128
4080b4a8:	103fe026 	beq	r2,zero,4080b42c <__alt_mem_onchip_flash_0_data+0xff7cb42c>
4080b4ac:	84000044 	addi	r16,r16,1
4080b4b0:	0081ffc4 	movi	r2,2047
4080b4b4:	8080d226 	beq	r16,r2,4080b800 <__adddf3+0x5d8>
4080b4b8:	00bfe034 	movhi	r2,65408
4080b4bc:	10bfffc4 	addi	r2,r2,-1
4080b4c0:	4090703a 	and	r8,r8,r2
4080b4c4:	880ad07a 	srli	r5,r17,1
4080b4c8:	400897fa 	slli	r4,r8,31
4080b4cc:	88c0004c 	andi	r3,r17,1
4080b4d0:	28e2b03a 	or	r17,r5,r3
4080b4d4:	4010d07a 	srli	r8,r8,1
4080b4d8:	2462b03a 	or	r17,r4,r17
4080b4dc:	003f7106 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b4e0:	4088b03a 	or	r4,r8,r2
4080b4e4:	20014526 	beq	r4,zero,4080b9fc <__adddf3+0x7d4>
4080b4e8:	01000434 	movhi	r4,16
4080b4ec:	42000234 	orhi	r8,r8,8
4080b4f0:	213fffc4 	addi	r4,r4,-1
4080b4f4:	4110703a 	and	r8,r8,r4
4080b4f8:	003f8206 	br	4080b304 <__alt_mem_onchip_flash_0_data+0xff7cb304>
4080b4fc:	18ffffc4 	addi	r3,r3,-1
4080b500:	1800491e 	bne	r3,zero,4080b628 <__adddf3+0x400>
4080b504:	898bc83a 	sub	r5,r17,r6
4080b508:	8963803a 	cmpltu	r17,r17,r5
4080b50c:	4251c83a 	sub	r8,r8,r9
4080b510:	4451c83a 	sub	r8,r8,r17
4080b514:	2823883a 	mov	r17,r5
4080b518:	003f9f06 	br	4080b398 <__alt_mem_onchip_flash_0_data+0xff7cb398>
4080b51c:	4984b03a 	or	r2,r9,r6
4080b520:	103f6026 	beq	r2,zero,4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b524:	213fffc4 	addi	r4,r4,-1
4080b528:	2000931e 	bne	r4,zero,4080b778 <__adddf3+0x550>
4080b52c:	898d883a 	add	r6,r17,r6
4080b530:	3463803a 	cmpltu	r17,r6,r17
4080b534:	4251883a 	add	r8,r8,r9
4080b538:	8a11883a 	add	r8,r17,r8
4080b53c:	3023883a 	mov	r17,r6
4080b540:	003fd806 	br	4080b4a4 <__alt_mem_onchip_flash_0_data+0xff7cb4a4>
4080b544:	1800541e 	bne	r3,zero,4080b698 <__adddf3+0x470>
4080b548:	80800044 	addi	r2,r16,1
4080b54c:	1081ffcc 	andi	r2,r2,2047
4080b550:	00c00044 	movi	r3,1
4080b554:	1880a00e 	bge	r3,r2,4080b7d8 <__adddf3+0x5b0>
4080b558:	8989c83a 	sub	r4,r17,r6
4080b55c:	8905803a 	cmpltu	r2,r17,r4
4080b560:	4267c83a 	sub	r19,r8,r9
4080b564:	98a7c83a 	sub	r19,r19,r2
4080b568:	9880202c 	andhi	r2,r19,128
4080b56c:	10006326 	beq	r2,zero,4080b6fc <__adddf3+0x4d4>
4080b570:	3463c83a 	sub	r17,r6,r17
4080b574:	4a07c83a 	sub	r3,r9,r8
4080b578:	344d803a 	cmpltu	r6,r6,r17
4080b57c:	19a7c83a 	sub	r19,r3,r6
4080b580:	3825883a 	mov	r18,r7
4080b584:	983f8a1e 	bne	r19,zero,4080b3b0 <__alt_mem_onchip_flash_0_data+0xff7cb3b0>
4080b588:	8809883a 	mov	r4,r17
4080b58c:	0800f0c0 	call	40800f0c <__clzsi2>
4080b590:	10800804 	addi	r2,r2,32
4080b594:	10fffe04 	addi	r3,r2,-8
4080b598:	010007c4 	movi	r4,31
4080b59c:	20ff890e 	bge	r4,r3,4080b3c4 <__alt_mem_onchip_flash_0_data+0xff7cb3c4>
4080b5a0:	10bff604 	addi	r2,r2,-40
4080b5a4:	8884983a 	sll	r2,r17,r2
4080b5a8:	0023883a 	mov	r17,zero
4080b5ac:	1c3f8c0e 	bge	r3,r16,4080b3e0 <__alt_mem_onchip_flash_0_data+0xff7cb3e0>
4080b5b0:	023fe034 	movhi	r8,65408
4080b5b4:	423fffc4 	addi	r8,r8,-1
4080b5b8:	80e1c83a 	sub	r16,r16,r3
4080b5bc:	1210703a 	and	r8,r2,r8
4080b5c0:	003f3806 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b5c4:	9007883a 	mov	r3,r18
4080b5c8:	0011883a 	mov	r8,zero
4080b5cc:	0005883a 	mov	r2,zero
4080b5d0:	003f4c06 	br	4080b304 <__alt_mem_onchip_flash_0_data+0xff7cb304>
4080b5d4:	498cb03a 	or	r6,r9,r6
4080b5d8:	300cc03a 	cmpne	r6,r6,zero
4080b5dc:	0007883a 	mov	r3,zero
4080b5e0:	003f6806 	br	4080b384 <__alt_mem_onchip_flash_0_data+0xff7cb384>
4080b5e4:	20009c1e 	bne	r4,zero,4080b858 <__adddf3+0x630>
4080b5e8:	80800044 	addi	r2,r16,1
4080b5ec:	1141ffcc 	andi	r5,r2,2047
4080b5f0:	01000044 	movi	r4,1
4080b5f4:	2140670e 	bge	r4,r5,4080b794 <__adddf3+0x56c>
4080b5f8:	0101ffc4 	movi	r4,2047
4080b5fc:	11007f26 	beq	r2,r4,4080b7fc <__adddf3+0x5d4>
4080b600:	898d883a 	add	r6,r17,r6
4080b604:	4247883a 	add	r3,r8,r9
4080b608:	3451803a 	cmpltu	r8,r6,r17
4080b60c:	40d1883a 	add	r8,r8,r3
4080b610:	402297fa 	slli	r17,r8,31
4080b614:	300cd07a 	srli	r6,r6,1
4080b618:	4010d07a 	srli	r8,r8,1
4080b61c:	1021883a 	mov	r16,r2
4080b620:	89a2b03a 	or	r17,r17,r6
4080b624:	003f1f06 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b628:	0081ffc4 	movi	r2,2047
4080b62c:	80bf481e 	bne	r16,r2,4080b350 <__alt_mem_onchip_flash_0_data+0xff7cb350>
4080b630:	003f1c06 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b634:	843ff844 	addi	r16,r16,-31
4080b638:	01000804 	movi	r4,32
4080b63c:	1406d83a 	srl	r3,r2,r16
4080b640:	41005026 	beq	r8,r4,4080b784 <__adddf3+0x55c>
4080b644:	01001004 	movi	r4,64
4080b648:	2211c83a 	sub	r8,r4,r8
4080b64c:	1204983a 	sll	r2,r2,r8
4080b650:	88a2b03a 	or	r17,r17,r2
4080b654:	8822c03a 	cmpne	r17,r17,zero
4080b658:	1c62b03a 	or	r17,r3,r17
4080b65c:	0011883a 	mov	r8,zero
4080b660:	0021883a 	mov	r16,zero
4080b664:	003f7106 	br	4080b42c <__alt_mem_onchip_flash_0_data+0xff7cb42c>
4080b668:	193ff804 	addi	r4,r3,-32
4080b66c:	00800804 	movi	r2,32
4080b670:	4908d83a 	srl	r4,r9,r4
4080b674:	18804526 	beq	r3,r2,4080b78c <__adddf3+0x564>
4080b678:	00801004 	movi	r2,64
4080b67c:	10c5c83a 	sub	r2,r2,r3
4080b680:	4886983a 	sll	r3,r9,r2
4080b684:	198cb03a 	or	r6,r3,r6
4080b688:	300cc03a 	cmpne	r6,r6,zero
4080b68c:	218cb03a 	or	r6,r4,r6
4080b690:	0007883a 	mov	r3,zero
4080b694:	003f3b06 	br	4080b384 <__alt_mem_onchip_flash_0_data+0xff7cb384>
4080b698:	80002a26 	beq	r16,zero,4080b744 <__adddf3+0x51c>
4080b69c:	0101ffc4 	movi	r4,2047
4080b6a0:	11006826 	beq	r2,r4,4080b844 <__adddf3+0x61c>
4080b6a4:	00c7c83a 	sub	r3,zero,r3
4080b6a8:	42002034 	orhi	r8,r8,128
4080b6ac:	01000e04 	movi	r4,56
4080b6b0:	20c07c16 	blt	r4,r3,4080b8a4 <__adddf3+0x67c>
4080b6b4:	010007c4 	movi	r4,31
4080b6b8:	20c0da16 	blt	r4,r3,4080ba24 <__adddf3+0x7fc>
4080b6bc:	01000804 	movi	r4,32
4080b6c0:	20c9c83a 	sub	r4,r4,r3
4080b6c4:	4114983a 	sll	r10,r8,r4
4080b6c8:	88cad83a 	srl	r5,r17,r3
4080b6cc:	8908983a 	sll	r4,r17,r4
4080b6d0:	40c6d83a 	srl	r3,r8,r3
4080b6d4:	5162b03a 	or	r17,r10,r5
4080b6d8:	2008c03a 	cmpne	r4,r4,zero
4080b6dc:	8922b03a 	or	r17,r17,r4
4080b6e0:	3463c83a 	sub	r17,r6,r17
4080b6e4:	48c7c83a 	sub	r3,r9,r3
4080b6e8:	344d803a 	cmpltu	r6,r6,r17
4080b6ec:	1991c83a 	sub	r8,r3,r6
4080b6f0:	1021883a 	mov	r16,r2
4080b6f4:	3825883a 	mov	r18,r7
4080b6f8:	003f2706 	br	4080b398 <__alt_mem_onchip_flash_0_data+0xff7cb398>
4080b6fc:	24d0b03a 	or	r8,r4,r19
4080b700:	40001b1e 	bne	r8,zero,4080b770 <__adddf3+0x548>
4080b704:	0005883a 	mov	r2,zero
4080b708:	0007883a 	mov	r3,zero
4080b70c:	0021883a 	mov	r16,zero
4080b710:	003f4d06 	br	4080b448 <__alt_mem_onchip_flash_0_data+0xff7cb448>
4080b714:	008007c4 	movi	r2,31
4080b718:	11003c16 	blt	r2,r4,4080b80c <__adddf3+0x5e4>
4080b71c:	00800804 	movi	r2,32
4080b720:	1105c83a 	sub	r2,r2,r4
4080b724:	488e983a 	sll	r7,r9,r2
4080b728:	310ad83a 	srl	r5,r6,r4
4080b72c:	3084983a 	sll	r2,r6,r2
4080b730:	4912d83a 	srl	r9,r9,r4
4080b734:	394ab03a 	or	r5,r7,r5
4080b738:	1004c03a 	cmpne	r2,r2,zero
4080b73c:	288ab03a 	or	r5,r5,r2
4080b740:	003f5306 	br	4080b490 <__alt_mem_onchip_flash_0_data+0xff7cb490>
4080b744:	4448b03a 	or	r4,r8,r17
4080b748:	20003e26 	beq	r4,zero,4080b844 <__adddf3+0x61c>
4080b74c:	00c6303a 	nor	r3,zero,r3
4080b750:	18003a1e 	bne	r3,zero,4080b83c <__adddf3+0x614>
4080b754:	3463c83a 	sub	r17,r6,r17
4080b758:	4a07c83a 	sub	r3,r9,r8
4080b75c:	344d803a 	cmpltu	r6,r6,r17
4080b760:	1991c83a 	sub	r8,r3,r6
4080b764:	1021883a 	mov	r16,r2
4080b768:	3825883a 	mov	r18,r7
4080b76c:	003f0a06 	br	4080b398 <__alt_mem_onchip_flash_0_data+0xff7cb398>
4080b770:	2023883a 	mov	r17,r4
4080b774:	003f0d06 	br	4080b3ac <__alt_mem_onchip_flash_0_data+0xff7cb3ac>
4080b778:	0081ffc4 	movi	r2,2047
4080b77c:	80bf3f1e 	bne	r16,r2,4080b47c <__alt_mem_onchip_flash_0_data+0xff7cb47c>
4080b780:	003ec806 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b784:	0005883a 	mov	r2,zero
4080b788:	003fb106 	br	4080b650 <__alt_mem_onchip_flash_0_data+0xff7cb650>
4080b78c:	0007883a 	mov	r3,zero
4080b790:	003fbc06 	br	4080b684 <__alt_mem_onchip_flash_0_data+0xff7cb684>
4080b794:	4444b03a 	or	r2,r8,r17
4080b798:	8000871e 	bne	r16,zero,4080b9b8 <__adddf3+0x790>
4080b79c:	1000ba26 	beq	r2,zero,4080ba88 <__adddf3+0x860>
4080b7a0:	4984b03a 	or	r2,r9,r6
4080b7a4:	103ebf26 	beq	r2,zero,4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b7a8:	8985883a 	add	r2,r17,r6
4080b7ac:	4247883a 	add	r3,r8,r9
4080b7b0:	1451803a 	cmpltu	r8,r2,r17
4080b7b4:	40d1883a 	add	r8,r8,r3
4080b7b8:	40c0202c 	andhi	r3,r8,128
4080b7bc:	1023883a 	mov	r17,r2
4080b7c0:	183f1a26 	beq	r3,zero,4080b42c <__alt_mem_onchip_flash_0_data+0xff7cb42c>
4080b7c4:	00bfe034 	movhi	r2,65408
4080b7c8:	10bfffc4 	addi	r2,r2,-1
4080b7cc:	2021883a 	mov	r16,r4
4080b7d0:	4090703a 	and	r8,r8,r2
4080b7d4:	003eb306 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b7d8:	4444b03a 	or	r2,r8,r17
4080b7dc:	8000291e 	bne	r16,zero,4080b884 <__adddf3+0x65c>
4080b7e0:	10004b1e 	bne	r2,zero,4080b910 <__adddf3+0x6e8>
4080b7e4:	4990b03a 	or	r8,r9,r6
4080b7e8:	40008b26 	beq	r8,zero,4080ba18 <__adddf3+0x7f0>
4080b7ec:	4811883a 	mov	r8,r9
4080b7f0:	3023883a 	mov	r17,r6
4080b7f4:	3825883a 	mov	r18,r7
4080b7f8:	003eaa06 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b7fc:	1021883a 	mov	r16,r2
4080b800:	0011883a 	mov	r8,zero
4080b804:	0005883a 	mov	r2,zero
4080b808:	003f0f06 	br	4080b448 <__alt_mem_onchip_flash_0_data+0xff7cb448>
4080b80c:	217ff804 	addi	r5,r4,-32
4080b810:	00800804 	movi	r2,32
4080b814:	494ad83a 	srl	r5,r9,r5
4080b818:	20807d26 	beq	r4,r2,4080ba10 <__adddf3+0x7e8>
4080b81c:	00801004 	movi	r2,64
4080b820:	1109c83a 	sub	r4,r2,r4
4080b824:	4912983a 	sll	r9,r9,r4
4080b828:	498cb03a 	or	r6,r9,r6
4080b82c:	300cc03a 	cmpne	r6,r6,zero
4080b830:	298ab03a 	or	r5,r5,r6
4080b834:	0013883a 	mov	r9,zero
4080b838:	003f1506 	br	4080b490 <__alt_mem_onchip_flash_0_data+0xff7cb490>
4080b83c:	0101ffc4 	movi	r4,2047
4080b840:	113f9a1e 	bne	r2,r4,4080b6ac <__alt_mem_onchip_flash_0_data+0xff7cb6ac>
4080b844:	4811883a 	mov	r8,r9
4080b848:	3023883a 	mov	r17,r6
4080b84c:	1021883a 	mov	r16,r2
4080b850:	3825883a 	mov	r18,r7
4080b854:	003e9306 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b858:	8000161e 	bne	r16,zero,4080b8b4 <__adddf3+0x68c>
4080b85c:	444ab03a 	or	r5,r8,r17
4080b860:	28005126 	beq	r5,zero,4080b9a8 <__adddf3+0x780>
4080b864:	0108303a 	nor	r4,zero,r4
4080b868:	20004d1e 	bne	r4,zero,4080b9a0 <__adddf3+0x778>
4080b86c:	89a3883a 	add	r17,r17,r6
4080b870:	4253883a 	add	r9,r8,r9
4080b874:	898d803a 	cmpltu	r6,r17,r6
4080b878:	3251883a 	add	r8,r6,r9
4080b87c:	1021883a 	mov	r16,r2
4080b880:	003f0806 	br	4080b4a4 <__alt_mem_onchip_flash_0_data+0xff7cb4a4>
4080b884:	1000301e 	bne	r2,zero,4080b948 <__adddf3+0x720>
4080b888:	4984b03a 	or	r2,r9,r6
4080b88c:	10007126 	beq	r2,zero,4080ba54 <__adddf3+0x82c>
4080b890:	4811883a 	mov	r8,r9
4080b894:	3023883a 	mov	r17,r6
4080b898:	3825883a 	mov	r18,r7
4080b89c:	0401ffc4 	movi	r16,2047
4080b8a0:	003e8006 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b8a4:	4462b03a 	or	r17,r8,r17
4080b8a8:	8822c03a 	cmpne	r17,r17,zero
4080b8ac:	0007883a 	mov	r3,zero
4080b8b0:	003f8b06 	br	4080b6e0 <__alt_mem_onchip_flash_0_data+0xff7cb6e0>
4080b8b4:	0141ffc4 	movi	r5,2047
4080b8b8:	11403b26 	beq	r2,r5,4080b9a8 <__adddf3+0x780>
4080b8bc:	0109c83a 	sub	r4,zero,r4
4080b8c0:	42002034 	orhi	r8,r8,128
4080b8c4:	01400e04 	movi	r5,56
4080b8c8:	29006716 	blt	r5,r4,4080ba68 <__adddf3+0x840>
4080b8cc:	014007c4 	movi	r5,31
4080b8d0:	29007016 	blt	r5,r4,4080ba94 <__adddf3+0x86c>
4080b8d4:	01400804 	movi	r5,32
4080b8d8:	290bc83a 	sub	r5,r5,r4
4080b8dc:	4154983a 	sll	r10,r8,r5
4080b8e0:	890ed83a 	srl	r7,r17,r4
4080b8e4:	894a983a 	sll	r5,r17,r5
4080b8e8:	4108d83a 	srl	r4,r8,r4
4080b8ec:	51e2b03a 	or	r17,r10,r7
4080b8f0:	280ac03a 	cmpne	r5,r5,zero
4080b8f4:	8962b03a 	or	r17,r17,r5
4080b8f8:	89a3883a 	add	r17,r17,r6
4080b8fc:	2253883a 	add	r9,r4,r9
4080b900:	898d803a 	cmpltu	r6,r17,r6
4080b904:	3251883a 	add	r8,r6,r9
4080b908:	1021883a 	mov	r16,r2
4080b90c:	003ee506 	br	4080b4a4 <__alt_mem_onchip_flash_0_data+0xff7cb4a4>
4080b910:	4984b03a 	or	r2,r9,r6
4080b914:	103e6326 	beq	r2,zero,4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b918:	8987c83a 	sub	r3,r17,r6
4080b91c:	88c9803a 	cmpltu	r4,r17,r3
4080b920:	4245c83a 	sub	r2,r8,r9
4080b924:	1105c83a 	sub	r2,r2,r4
4080b928:	1100202c 	andhi	r4,r2,128
4080b92c:	203ebb26 	beq	r4,zero,4080b41c <__alt_mem_onchip_flash_0_data+0xff7cb41c>
4080b930:	3463c83a 	sub	r17,r6,r17
4080b934:	4a07c83a 	sub	r3,r9,r8
4080b938:	344d803a 	cmpltu	r6,r6,r17
4080b93c:	1991c83a 	sub	r8,r3,r6
4080b940:	3825883a 	mov	r18,r7
4080b944:	003e5706 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b948:	4984b03a 	or	r2,r9,r6
4080b94c:	10002e26 	beq	r2,zero,4080ba08 <__adddf3+0x7e0>
4080b950:	4004d0fa 	srli	r2,r8,3
4080b954:	8822d0fa 	srli	r17,r17,3
4080b958:	4010977a 	slli	r8,r8,29
4080b95c:	10c0022c 	andhi	r3,r2,8
4080b960:	4462b03a 	or	r17,r8,r17
4080b964:	18000826 	beq	r3,zero,4080b988 <__adddf3+0x760>
4080b968:	4808d0fa 	srli	r4,r9,3
4080b96c:	20c0022c 	andhi	r3,r4,8
4080b970:	1800051e 	bne	r3,zero,4080b988 <__adddf3+0x760>
4080b974:	300cd0fa 	srli	r6,r6,3
4080b978:	4806977a 	slli	r3,r9,29
4080b97c:	2005883a 	mov	r2,r4
4080b980:	3825883a 	mov	r18,r7
4080b984:	19a2b03a 	or	r17,r3,r6
4080b988:	8810d77a 	srli	r8,r17,29
4080b98c:	100490fa 	slli	r2,r2,3
4080b990:	882290fa 	slli	r17,r17,3
4080b994:	0401ffc4 	movi	r16,2047
4080b998:	4090b03a 	or	r8,r8,r2
4080b99c:	003e4106 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b9a0:	0141ffc4 	movi	r5,2047
4080b9a4:	117fc71e 	bne	r2,r5,4080b8c4 <__alt_mem_onchip_flash_0_data+0xff7cb8c4>
4080b9a8:	4811883a 	mov	r8,r9
4080b9ac:	3023883a 	mov	r17,r6
4080b9b0:	1021883a 	mov	r16,r2
4080b9b4:	003e3b06 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080b9b8:	10002f26 	beq	r2,zero,4080ba78 <__adddf3+0x850>
4080b9bc:	4984b03a 	or	r2,r9,r6
4080b9c0:	10001126 	beq	r2,zero,4080ba08 <__adddf3+0x7e0>
4080b9c4:	4004d0fa 	srli	r2,r8,3
4080b9c8:	8822d0fa 	srli	r17,r17,3
4080b9cc:	4010977a 	slli	r8,r8,29
4080b9d0:	10c0022c 	andhi	r3,r2,8
4080b9d4:	4462b03a 	or	r17,r8,r17
4080b9d8:	183feb26 	beq	r3,zero,4080b988 <__alt_mem_onchip_flash_0_data+0xff7cb988>
4080b9dc:	4808d0fa 	srli	r4,r9,3
4080b9e0:	20c0022c 	andhi	r3,r4,8
4080b9e4:	183fe81e 	bne	r3,zero,4080b988 <__alt_mem_onchip_flash_0_data+0xff7cb988>
4080b9e8:	300cd0fa 	srli	r6,r6,3
4080b9ec:	4806977a 	slli	r3,r9,29
4080b9f0:	2005883a 	mov	r2,r4
4080b9f4:	19a2b03a 	or	r17,r3,r6
4080b9f8:	003fe306 	br	4080b988 <__alt_mem_onchip_flash_0_data+0xff7cb988>
4080b9fc:	0011883a 	mov	r8,zero
4080ba00:	0005883a 	mov	r2,zero
4080ba04:	003e3f06 	br	4080b304 <__alt_mem_onchip_flash_0_data+0xff7cb304>
4080ba08:	0401ffc4 	movi	r16,2047
4080ba0c:	003e2506 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080ba10:	0013883a 	mov	r9,zero
4080ba14:	003f8406 	br	4080b828 <__alt_mem_onchip_flash_0_data+0xff7cb828>
4080ba18:	0005883a 	mov	r2,zero
4080ba1c:	0007883a 	mov	r3,zero
4080ba20:	003e8906 	br	4080b448 <__alt_mem_onchip_flash_0_data+0xff7cb448>
4080ba24:	197ff804 	addi	r5,r3,-32
4080ba28:	01000804 	movi	r4,32
4080ba2c:	414ad83a 	srl	r5,r8,r5
4080ba30:	19002426 	beq	r3,r4,4080bac4 <__adddf3+0x89c>
4080ba34:	01001004 	movi	r4,64
4080ba38:	20c7c83a 	sub	r3,r4,r3
4080ba3c:	40c6983a 	sll	r3,r8,r3
4080ba40:	1c46b03a 	or	r3,r3,r17
4080ba44:	1806c03a 	cmpne	r3,r3,zero
4080ba48:	28e2b03a 	or	r17,r5,r3
4080ba4c:	0007883a 	mov	r3,zero
4080ba50:	003f2306 	br	4080b6e0 <__alt_mem_onchip_flash_0_data+0xff7cb6e0>
4080ba54:	0007883a 	mov	r3,zero
4080ba58:	5811883a 	mov	r8,r11
4080ba5c:	00bfffc4 	movi	r2,-1
4080ba60:	0401ffc4 	movi	r16,2047
4080ba64:	003e7806 	br	4080b448 <__alt_mem_onchip_flash_0_data+0xff7cb448>
4080ba68:	4462b03a 	or	r17,r8,r17
4080ba6c:	8822c03a 	cmpne	r17,r17,zero
4080ba70:	0009883a 	mov	r4,zero
4080ba74:	003fa006 	br	4080b8f8 <__alt_mem_onchip_flash_0_data+0xff7cb8f8>
4080ba78:	4811883a 	mov	r8,r9
4080ba7c:	3023883a 	mov	r17,r6
4080ba80:	0401ffc4 	movi	r16,2047
4080ba84:	003e0706 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080ba88:	4811883a 	mov	r8,r9
4080ba8c:	3023883a 	mov	r17,r6
4080ba90:	003e0406 	br	4080b2a4 <__alt_mem_onchip_flash_0_data+0xff7cb2a4>
4080ba94:	21fff804 	addi	r7,r4,-32
4080ba98:	01400804 	movi	r5,32
4080ba9c:	41ced83a 	srl	r7,r8,r7
4080baa0:	21400a26 	beq	r4,r5,4080bacc <__adddf3+0x8a4>
4080baa4:	01401004 	movi	r5,64
4080baa8:	2909c83a 	sub	r4,r5,r4
4080baac:	4108983a 	sll	r4,r8,r4
4080bab0:	2448b03a 	or	r4,r4,r17
4080bab4:	2008c03a 	cmpne	r4,r4,zero
4080bab8:	3922b03a 	or	r17,r7,r4
4080babc:	0009883a 	mov	r4,zero
4080bac0:	003f8d06 	br	4080b8f8 <__alt_mem_onchip_flash_0_data+0xff7cb8f8>
4080bac4:	0007883a 	mov	r3,zero
4080bac8:	003fdd06 	br	4080ba40 <__alt_mem_onchip_flash_0_data+0xff7cba40>
4080bacc:	0009883a 	mov	r4,zero
4080bad0:	003ff706 	br	4080bab0 <__alt_mem_onchip_flash_0_data+0xff7cbab0>

4080bad4 <__divdf3>:
4080bad4:	defff204 	addi	sp,sp,-56
4080bad8:	dd400915 	stw	r21,36(sp)
4080badc:	282ad53a 	srli	r21,r5,20
4080bae0:	dd000815 	stw	r20,32(sp)
4080bae4:	2828d7fa 	srli	r20,r5,31
4080bae8:	dc000415 	stw	r16,16(sp)
4080baec:	04000434 	movhi	r16,16
4080baf0:	df000c15 	stw	fp,48(sp)
4080baf4:	843fffc4 	addi	r16,r16,-1
4080baf8:	dfc00d15 	stw	ra,52(sp)
4080bafc:	ddc00b15 	stw	r23,44(sp)
4080bb00:	dd800a15 	stw	r22,40(sp)
4080bb04:	dcc00715 	stw	r19,28(sp)
4080bb08:	dc800615 	stw	r18,24(sp)
4080bb0c:	dc400515 	stw	r17,20(sp)
4080bb10:	ad41ffcc 	andi	r21,r21,2047
4080bb14:	2c20703a 	and	r16,r5,r16
4080bb18:	a7003fcc 	andi	fp,r20,255
4080bb1c:	a8006126 	beq	r21,zero,4080bca4 <__divdf3+0x1d0>
4080bb20:	0081ffc4 	movi	r2,2047
4080bb24:	2025883a 	mov	r18,r4
4080bb28:	a8803726 	beq	r21,r2,4080bc08 <__divdf3+0x134>
4080bb2c:	80800434 	orhi	r2,r16,16
4080bb30:	100490fa 	slli	r2,r2,3
4080bb34:	2020d77a 	srli	r16,r4,29
4080bb38:	202490fa 	slli	r18,r4,3
4080bb3c:	ad7f0044 	addi	r21,r21,-1023
4080bb40:	80a0b03a 	or	r16,r16,r2
4080bb44:	0027883a 	mov	r19,zero
4080bb48:	0013883a 	mov	r9,zero
4080bb4c:	3804d53a 	srli	r2,r7,20
4080bb50:	382cd7fa 	srli	r22,r7,31
4080bb54:	04400434 	movhi	r17,16
4080bb58:	8c7fffc4 	addi	r17,r17,-1
4080bb5c:	1081ffcc 	andi	r2,r2,2047
4080bb60:	3011883a 	mov	r8,r6
4080bb64:	3c62703a 	and	r17,r7,r17
4080bb68:	b5c03fcc 	andi	r23,r22,255
4080bb6c:	10006c26 	beq	r2,zero,4080bd20 <__divdf3+0x24c>
4080bb70:	00c1ffc4 	movi	r3,2047
4080bb74:	10c06426 	beq	r2,r3,4080bd08 <__divdf3+0x234>
4080bb78:	88c00434 	orhi	r3,r17,16
4080bb7c:	180690fa 	slli	r3,r3,3
4080bb80:	3022d77a 	srli	r17,r6,29
4080bb84:	301090fa 	slli	r8,r6,3
4080bb88:	10bf0044 	addi	r2,r2,-1023
4080bb8c:	88e2b03a 	or	r17,r17,r3
4080bb90:	000f883a 	mov	r7,zero
4080bb94:	a58cf03a 	xor	r6,r20,r22
4080bb98:	3cc8b03a 	or	r4,r7,r19
4080bb9c:	a8abc83a 	sub	r21,r21,r2
4080bba0:	008003c4 	movi	r2,15
4080bba4:	3007883a 	mov	r3,r6
4080bba8:	34c03fcc 	andi	r19,r6,255
4080bbac:	11009036 	bltu	r2,r4,4080bdf0 <__divdf3+0x31c>
4080bbb0:	200890ba 	slli	r4,r4,2
4080bbb4:	00902074 	movhi	r2,16513
4080bbb8:	10aef204 	addi	r2,r2,-17464
4080bbbc:	2089883a 	add	r4,r4,r2
4080bbc0:	20800017 	ldw	r2,0(r4)
4080bbc4:	1000683a 	jmp	r2
4080bbc8:	4080bdf0 	cmpltui	r2,r8,759
4080bbcc:	4080bc40 	call	44080bc4 <__alt_mem_onchip_flash_0_data+0x3040bc4>
4080bbd0:	4080bde0 	cmpeqi	r2,r8,759
4080bbd4:	4080bc34 	orhi	r2,r8,752
4080bbd8:	4080bde0 	cmpeqi	r2,r8,759
4080bbdc:	4080bdb4 	orhi	r2,r8,758
4080bbe0:	4080bde0 	cmpeqi	r2,r8,759
4080bbe4:	4080bc34 	orhi	r2,r8,752
4080bbe8:	4080bc40 	call	44080bc4 <__alt_mem_onchip_flash_0_data+0x3040bc4>
4080bbec:	4080bc40 	call	44080bc4 <__alt_mem_onchip_flash_0_data+0x3040bc4>
4080bbf0:	4080bdb4 	orhi	r2,r8,758
4080bbf4:	4080bc34 	orhi	r2,r8,752
4080bbf8:	4080bc24 	muli	r2,r8,752
4080bbfc:	4080bc24 	muli	r2,r8,752
4080bc00:	4080bc24 	muli	r2,r8,752
4080bc04:	4080c0d4 	ori	r2,r8,771
4080bc08:	2404b03a 	or	r2,r4,r16
4080bc0c:	1000661e 	bne	r2,zero,4080bda8 <__divdf3+0x2d4>
4080bc10:	04c00204 	movi	r19,8
4080bc14:	0021883a 	mov	r16,zero
4080bc18:	0025883a 	mov	r18,zero
4080bc1c:	02400084 	movi	r9,2
4080bc20:	003fca06 	br	4080bb4c <__alt_mem_onchip_flash_0_data+0xff7cbb4c>
4080bc24:	8023883a 	mov	r17,r16
4080bc28:	9011883a 	mov	r8,r18
4080bc2c:	e02f883a 	mov	r23,fp
4080bc30:	480f883a 	mov	r7,r9
4080bc34:	00800084 	movi	r2,2
4080bc38:	3881311e 	bne	r7,r2,4080c100 <__divdf3+0x62c>
4080bc3c:	b827883a 	mov	r19,r23
4080bc40:	98c0004c 	andi	r3,r19,1
4080bc44:	0081ffc4 	movi	r2,2047
4080bc48:	000b883a 	mov	r5,zero
4080bc4c:	0025883a 	mov	r18,zero
4080bc50:	1004953a 	slli	r2,r2,20
4080bc54:	18c03fcc 	andi	r3,r3,255
4080bc58:	04400434 	movhi	r17,16
4080bc5c:	8c7fffc4 	addi	r17,r17,-1
4080bc60:	180697fa 	slli	r3,r3,31
4080bc64:	2c4a703a 	and	r5,r5,r17
4080bc68:	288ab03a 	or	r5,r5,r2
4080bc6c:	28c6b03a 	or	r3,r5,r3
4080bc70:	9005883a 	mov	r2,r18
4080bc74:	dfc00d17 	ldw	ra,52(sp)
4080bc78:	df000c17 	ldw	fp,48(sp)
4080bc7c:	ddc00b17 	ldw	r23,44(sp)
4080bc80:	dd800a17 	ldw	r22,40(sp)
4080bc84:	dd400917 	ldw	r21,36(sp)
4080bc88:	dd000817 	ldw	r20,32(sp)
4080bc8c:	dcc00717 	ldw	r19,28(sp)
4080bc90:	dc800617 	ldw	r18,24(sp)
4080bc94:	dc400517 	ldw	r17,20(sp)
4080bc98:	dc000417 	ldw	r16,16(sp)
4080bc9c:	dec00e04 	addi	sp,sp,56
4080bca0:	f800283a 	ret
4080bca4:	2404b03a 	or	r2,r4,r16
4080bca8:	2027883a 	mov	r19,r4
4080bcac:	10003926 	beq	r2,zero,4080bd94 <__divdf3+0x2c0>
4080bcb0:	80012e26 	beq	r16,zero,4080c16c <__divdf3+0x698>
4080bcb4:	8009883a 	mov	r4,r16
4080bcb8:	d9800315 	stw	r6,12(sp)
4080bcbc:	d9c00215 	stw	r7,8(sp)
4080bcc0:	0800f0c0 	call	40800f0c <__clzsi2>
4080bcc4:	d9800317 	ldw	r6,12(sp)
4080bcc8:	d9c00217 	ldw	r7,8(sp)
4080bccc:	113ffd44 	addi	r4,r2,-11
4080bcd0:	00c00704 	movi	r3,28
4080bcd4:	19012116 	blt	r3,r4,4080c15c <__divdf3+0x688>
4080bcd8:	00c00744 	movi	r3,29
4080bcdc:	147ffe04 	addi	r17,r2,-8
4080bce0:	1907c83a 	sub	r3,r3,r4
4080bce4:	8460983a 	sll	r16,r16,r17
4080bce8:	98c6d83a 	srl	r3,r19,r3
4080bcec:	9c64983a 	sll	r18,r19,r17
4080bcf0:	1c20b03a 	or	r16,r3,r16
4080bcf4:	1080fcc4 	addi	r2,r2,1011
4080bcf8:	00abc83a 	sub	r21,zero,r2
4080bcfc:	0027883a 	mov	r19,zero
4080bd00:	0013883a 	mov	r9,zero
4080bd04:	003f9106 	br	4080bb4c <__alt_mem_onchip_flash_0_data+0xff7cbb4c>
4080bd08:	3446b03a 	or	r3,r6,r17
4080bd0c:	18001f1e 	bne	r3,zero,4080bd8c <__divdf3+0x2b8>
4080bd10:	0023883a 	mov	r17,zero
4080bd14:	0011883a 	mov	r8,zero
4080bd18:	01c00084 	movi	r7,2
4080bd1c:	003f9d06 	br	4080bb94 <__alt_mem_onchip_flash_0_data+0xff7cbb94>
4080bd20:	3446b03a 	or	r3,r6,r17
4080bd24:	18001526 	beq	r3,zero,4080bd7c <__divdf3+0x2a8>
4080bd28:	88011b26 	beq	r17,zero,4080c198 <__divdf3+0x6c4>
4080bd2c:	8809883a 	mov	r4,r17
4080bd30:	d9800315 	stw	r6,12(sp)
4080bd34:	da400115 	stw	r9,4(sp)
4080bd38:	0800f0c0 	call	40800f0c <__clzsi2>
4080bd3c:	d9800317 	ldw	r6,12(sp)
4080bd40:	da400117 	ldw	r9,4(sp)
4080bd44:	113ffd44 	addi	r4,r2,-11
4080bd48:	00c00704 	movi	r3,28
4080bd4c:	19010e16 	blt	r3,r4,4080c188 <__divdf3+0x6b4>
4080bd50:	00c00744 	movi	r3,29
4080bd54:	123ffe04 	addi	r8,r2,-8
4080bd58:	1907c83a 	sub	r3,r3,r4
4080bd5c:	8a22983a 	sll	r17,r17,r8
4080bd60:	30c6d83a 	srl	r3,r6,r3
4080bd64:	3210983a 	sll	r8,r6,r8
4080bd68:	1c62b03a 	or	r17,r3,r17
4080bd6c:	1080fcc4 	addi	r2,r2,1011
4080bd70:	0085c83a 	sub	r2,zero,r2
4080bd74:	000f883a 	mov	r7,zero
4080bd78:	003f8606 	br	4080bb94 <__alt_mem_onchip_flash_0_data+0xff7cbb94>
4080bd7c:	0023883a 	mov	r17,zero
4080bd80:	0011883a 	mov	r8,zero
4080bd84:	01c00044 	movi	r7,1
4080bd88:	003f8206 	br	4080bb94 <__alt_mem_onchip_flash_0_data+0xff7cbb94>
4080bd8c:	01c000c4 	movi	r7,3
4080bd90:	003f8006 	br	4080bb94 <__alt_mem_onchip_flash_0_data+0xff7cbb94>
4080bd94:	04c00104 	movi	r19,4
4080bd98:	0021883a 	mov	r16,zero
4080bd9c:	0025883a 	mov	r18,zero
4080bda0:	02400044 	movi	r9,1
4080bda4:	003f6906 	br	4080bb4c <__alt_mem_onchip_flash_0_data+0xff7cbb4c>
4080bda8:	04c00304 	movi	r19,12
4080bdac:	024000c4 	movi	r9,3
4080bdb0:	003f6606 	br	4080bb4c <__alt_mem_onchip_flash_0_data+0xff7cbb4c>
4080bdb4:	01400434 	movhi	r5,16
4080bdb8:	0007883a 	mov	r3,zero
4080bdbc:	297fffc4 	addi	r5,r5,-1
4080bdc0:	04bfffc4 	movi	r18,-1
4080bdc4:	0081ffc4 	movi	r2,2047
4080bdc8:	003fa106 	br	4080bc50 <__alt_mem_onchip_flash_0_data+0xff7cbc50>
4080bdcc:	00c00044 	movi	r3,1
4080bdd0:	1887c83a 	sub	r3,r3,r2
4080bdd4:	01000e04 	movi	r4,56
4080bdd8:	20c1210e 	bge	r4,r3,4080c260 <__divdf3+0x78c>
4080bddc:	98c0004c 	andi	r3,r19,1
4080bde0:	0005883a 	mov	r2,zero
4080bde4:	000b883a 	mov	r5,zero
4080bde8:	0025883a 	mov	r18,zero
4080bdec:	003f9806 	br	4080bc50 <__alt_mem_onchip_flash_0_data+0xff7cbc50>
4080bdf0:	8c00fd36 	bltu	r17,r16,4080c1e8 <__divdf3+0x714>
4080bdf4:	8440fb26 	beq	r16,r17,4080c1e4 <__divdf3+0x710>
4080bdf8:	8007883a 	mov	r3,r16
4080bdfc:	ad7fffc4 	addi	r21,r21,-1
4080be00:	0021883a 	mov	r16,zero
4080be04:	4004d63a 	srli	r2,r8,24
4080be08:	8822923a 	slli	r17,r17,8
4080be0c:	1809883a 	mov	r4,r3
4080be10:	402c923a 	slli	r22,r8,8
4080be14:	88b8b03a 	or	fp,r17,r2
4080be18:	e028d43a 	srli	r20,fp,16
4080be1c:	d8c00015 	stw	r3,0(sp)
4080be20:	e5ffffcc 	andi	r23,fp,65535
4080be24:	a00b883a 	mov	r5,r20
4080be28:	080b16c0 	call	4080b16c <__udivsi3>
4080be2c:	d8c00017 	ldw	r3,0(sp)
4080be30:	a00b883a 	mov	r5,r20
4080be34:	d8800315 	stw	r2,12(sp)
4080be38:	1809883a 	mov	r4,r3
4080be3c:	080b1d00 	call	4080b1d0 <__umodsi3>
4080be40:	d9800317 	ldw	r6,12(sp)
4080be44:	1006943a 	slli	r3,r2,16
4080be48:	9004d43a 	srli	r2,r18,16
4080be4c:	b9a3383a 	mul	r17,r23,r6
4080be50:	10c4b03a 	or	r2,r2,r3
4080be54:	1440062e 	bgeu	r2,r17,4080be70 <__divdf3+0x39c>
4080be58:	1705883a 	add	r2,r2,fp
4080be5c:	30ffffc4 	addi	r3,r6,-1
4080be60:	1700ee36 	bltu	r2,fp,4080c21c <__divdf3+0x748>
4080be64:	1440ed2e 	bgeu	r2,r17,4080c21c <__divdf3+0x748>
4080be68:	31bfff84 	addi	r6,r6,-2
4080be6c:	1705883a 	add	r2,r2,fp
4080be70:	1463c83a 	sub	r17,r2,r17
4080be74:	a00b883a 	mov	r5,r20
4080be78:	8809883a 	mov	r4,r17
4080be7c:	d9800315 	stw	r6,12(sp)
4080be80:	080b16c0 	call	4080b16c <__udivsi3>
4080be84:	a00b883a 	mov	r5,r20
4080be88:	8809883a 	mov	r4,r17
4080be8c:	d8800215 	stw	r2,8(sp)
4080be90:	080b1d00 	call	4080b1d0 <__umodsi3>
4080be94:	d9c00217 	ldw	r7,8(sp)
4080be98:	1004943a 	slli	r2,r2,16
4080be9c:	94bfffcc 	andi	r18,r18,65535
4080bea0:	b9d1383a 	mul	r8,r23,r7
4080bea4:	90a4b03a 	or	r18,r18,r2
4080bea8:	d9800317 	ldw	r6,12(sp)
4080beac:	9200062e 	bgeu	r18,r8,4080bec8 <__divdf3+0x3f4>
4080beb0:	9725883a 	add	r18,r18,fp
4080beb4:	38bfffc4 	addi	r2,r7,-1
4080beb8:	9700d636 	bltu	r18,fp,4080c214 <__divdf3+0x740>
4080bebc:	9200d52e 	bgeu	r18,r8,4080c214 <__divdf3+0x740>
4080bec0:	39ffff84 	addi	r7,r7,-2
4080bec4:	9725883a 	add	r18,r18,fp
4080bec8:	3004943a 	slli	r2,r6,16
4080becc:	b012d43a 	srli	r9,r22,16
4080bed0:	b1bfffcc 	andi	r6,r22,65535
4080bed4:	11e2b03a 	or	r17,r2,r7
4080bed8:	8806d43a 	srli	r3,r17,16
4080bedc:	893fffcc 	andi	r4,r17,65535
4080bee0:	218b383a 	mul	r5,r4,r6
4080bee4:	30c5383a 	mul	r2,r6,r3
4080bee8:	2249383a 	mul	r4,r4,r9
4080beec:	280ed43a 	srli	r7,r5,16
4080bef0:	9225c83a 	sub	r18,r18,r8
4080bef4:	2089883a 	add	r4,r4,r2
4080bef8:	3909883a 	add	r4,r7,r4
4080befc:	1a47383a 	mul	r3,r3,r9
4080bf00:	2080022e 	bgeu	r4,r2,4080bf0c <__divdf3+0x438>
4080bf04:	00800074 	movhi	r2,1
4080bf08:	1887883a 	add	r3,r3,r2
4080bf0c:	2004d43a 	srli	r2,r4,16
4080bf10:	2008943a 	slli	r4,r4,16
4080bf14:	297fffcc 	andi	r5,r5,65535
4080bf18:	10c7883a 	add	r3,r2,r3
4080bf1c:	2149883a 	add	r4,r4,r5
4080bf20:	90c0a536 	bltu	r18,r3,4080c1b8 <__divdf3+0x6e4>
4080bf24:	90c0bf26 	beq	r18,r3,4080c224 <__divdf3+0x750>
4080bf28:	90c7c83a 	sub	r3,r18,r3
4080bf2c:	810fc83a 	sub	r7,r16,r4
4080bf30:	81e5803a 	cmpltu	r18,r16,r7
4080bf34:	1ca5c83a 	sub	r18,r3,r18
4080bf38:	e480c126 	beq	fp,r18,4080c240 <__divdf3+0x76c>
4080bf3c:	a00b883a 	mov	r5,r20
4080bf40:	9009883a 	mov	r4,r18
4080bf44:	d9800315 	stw	r6,12(sp)
4080bf48:	d9c00215 	stw	r7,8(sp)
4080bf4c:	da400115 	stw	r9,4(sp)
4080bf50:	080b16c0 	call	4080b16c <__udivsi3>
4080bf54:	a00b883a 	mov	r5,r20
4080bf58:	9009883a 	mov	r4,r18
4080bf5c:	d8800015 	stw	r2,0(sp)
4080bf60:	080b1d00 	call	4080b1d0 <__umodsi3>
4080bf64:	d9c00217 	ldw	r7,8(sp)
4080bf68:	da000017 	ldw	r8,0(sp)
4080bf6c:	1006943a 	slli	r3,r2,16
4080bf70:	3804d43a 	srli	r2,r7,16
4080bf74:	ba21383a 	mul	r16,r23,r8
4080bf78:	d9800317 	ldw	r6,12(sp)
4080bf7c:	10c4b03a 	or	r2,r2,r3
4080bf80:	da400117 	ldw	r9,4(sp)
4080bf84:	1400062e 	bgeu	r2,r16,4080bfa0 <__divdf3+0x4cc>
4080bf88:	1705883a 	add	r2,r2,fp
4080bf8c:	40ffffc4 	addi	r3,r8,-1
4080bf90:	1700ad36 	bltu	r2,fp,4080c248 <__divdf3+0x774>
4080bf94:	1400ac2e 	bgeu	r2,r16,4080c248 <__divdf3+0x774>
4080bf98:	423fff84 	addi	r8,r8,-2
4080bf9c:	1705883a 	add	r2,r2,fp
4080bfa0:	1421c83a 	sub	r16,r2,r16
4080bfa4:	a00b883a 	mov	r5,r20
4080bfa8:	8009883a 	mov	r4,r16
4080bfac:	d9800315 	stw	r6,12(sp)
4080bfb0:	d9c00215 	stw	r7,8(sp)
4080bfb4:	da000015 	stw	r8,0(sp)
4080bfb8:	da400115 	stw	r9,4(sp)
4080bfbc:	080b16c0 	call	4080b16c <__udivsi3>
4080bfc0:	8009883a 	mov	r4,r16
4080bfc4:	a00b883a 	mov	r5,r20
4080bfc8:	1025883a 	mov	r18,r2
4080bfcc:	080b1d00 	call	4080b1d0 <__umodsi3>
4080bfd0:	d9c00217 	ldw	r7,8(sp)
4080bfd4:	1004943a 	slli	r2,r2,16
4080bfd8:	bcaf383a 	mul	r23,r23,r18
4080bfdc:	393fffcc 	andi	r4,r7,65535
4080bfe0:	2088b03a 	or	r4,r4,r2
4080bfe4:	d9800317 	ldw	r6,12(sp)
4080bfe8:	da000017 	ldw	r8,0(sp)
4080bfec:	da400117 	ldw	r9,4(sp)
4080bff0:	25c0062e 	bgeu	r4,r23,4080c00c <__divdf3+0x538>
4080bff4:	2709883a 	add	r4,r4,fp
4080bff8:	90bfffc4 	addi	r2,r18,-1
4080bffc:	27009436 	bltu	r4,fp,4080c250 <__divdf3+0x77c>
4080c000:	25c0932e 	bgeu	r4,r23,4080c250 <__divdf3+0x77c>
4080c004:	94bfff84 	addi	r18,r18,-2
4080c008:	2709883a 	add	r4,r4,fp
4080c00c:	4004943a 	slli	r2,r8,16
4080c010:	25efc83a 	sub	r23,r4,r23
4080c014:	1490b03a 	or	r8,r2,r18
4080c018:	4008d43a 	srli	r4,r8,16
4080c01c:	40ffffcc 	andi	r3,r8,65535
4080c020:	30c5383a 	mul	r2,r6,r3
4080c024:	1a47383a 	mul	r3,r3,r9
4080c028:	310d383a 	mul	r6,r6,r4
4080c02c:	100ad43a 	srli	r5,r2,16
4080c030:	4913383a 	mul	r9,r9,r4
4080c034:	1987883a 	add	r3,r3,r6
4080c038:	28c7883a 	add	r3,r5,r3
4080c03c:	1980022e 	bgeu	r3,r6,4080c048 <__divdf3+0x574>
4080c040:	01000074 	movhi	r4,1
4080c044:	4913883a 	add	r9,r9,r4
4080c048:	1808d43a 	srli	r4,r3,16
4080c04c:	1806943a 	slli	r3,r3,16
4080c050:	10bfffcc 	andi	r2,r2,65535
4080c054:	2253883a 	add	r9,r4,r9
4080c058:	1887883a 	add	r3,r3,r2
4080c05c:	ba403836 	bltu	r23,r9,4080c140 <__divdf3+0x66c>
4080c060:	ba403626 	beq	r23,r9,4080c13c <__divdf3+0x668>
4080c064:	42000054 	ori	r8,r8,1
4080c068:	a880ffc4 	addi	r2,r21,1023
4080c06c:	00bf570e 	bge	zero,r2,4080bdcc <__alt_mem_onchip_flash_0_data+0xff7cbdcc>
4080c070:	40c001cc 	andi	r3,r8,7
4080c074:	18000726 	beq	r3,zero,4080c094 <__divdf3+0x5c0>
4080c078:	40c003cc 	andi	r3,r8,15
4080c07c:	01000104 	movi	r4,4
4080c080:	19000426 	beq	r3,r4,4080c094 <__divdf3+0x5c0>
4080c084:	4107883a 	add	r3,r8,r4
4080c088:	1a11803a 	cmpltu	r8,r3,r8
4080c08c:	8a23883a 	add	r17,r17,r8
4080c090:	1811883a 	mov	r8,r3
4080c094:	88c0402c 	andhi	r3,r17,256
4080c098:	18000426 	beq	r3,zero,4080c0ac <__divdf3+0x5d8>
4080c09c:	00ffc034 	movhi	r3,65280
4080c0a0:	18ffffc4 	addi	r3,r3,-1
4080c0a4:	a8810004 	addi	r2,r21,1024
4080c0a8:	88e2703a 	and	r17,r17,r3
4080c0ac:	00c1ff84 	movi	r3,2046
4080c0b0:	18bee316 	blt	r3,r2,4080bc40 <__alt_mem_onchip_flash_0_data+0xff7cbc40>
4080c0b4:	8824977a 	slli	r18,r17,29
4080c0b8:	4010d0fa 	srli	r8,r8,3
4080c0bc:	8822927a 	slli	r17,r17,9
4080c0c0:	1081ffcc 	andi	r2,r2,2047
4080c0c4:	9224b03a 	or	r18,r18,r8
4080c0c8:	880ad33a 	srli	r5,r17,12
4080c0cc:	98c0004c 	andi	r3,r19,1
4080c0d0:	003edf06 	br	4080bc50 <__alt_mem_onchip_flash_0_data+0xff7cbc50>
4080c0d4:	8080022c 	andhi	r2,r16,8
4080c0d8:	10001226 	beq	r2,zero,4080c124 <__divdf3+0x650>
4080c0dc:	8880022c 	andhi	r2,r17,8
4080c0e0:	1000101e 	bne	r2,zero,4080c124 <__divdf3+0x650>
4080c0e4:	00800434 	movhi	r2,16
4080c0e8:	89400234 	orhi	r5,r17,8
4080c0ec:	10bfffc4 	addi	r2,r2,-1
4080c0f0:	b007883a 	mov	r3,r22
4080c0f4:	288a703a 	and	r5,r5,r2
4080c0f8:	4025883a 	mov	r18,r8
4080c0fc:	003f3106 	br	4080bdc4 <__alt_mem_onchip_flash_0_data+0xff7cbdc4>
4080c100:	008000c4 	movi	r2,3
4080c104:	3880a626 	beq	r7,r2,4080c3a0 <__divdf3+0x8cc>
4080c108:	00800044 	movi	r2,1
4080c10c:	3880521e 	bne	r7,r2,4080c258 <__divdf3+0x784>
4080c110:	b807883a 	mov	r3,r23
4080c114:	0005883a 	mov	r2,zero
4080c118:	000b883a 	mov	r5,zero
4080c11c:	0025883a 	mov	r18,zero
4080c120:	003ecb06 	br	4080bc50 <__alt_mem_onchip_flash_0_data+0xff7cbc50>
4080c124:	00800434 	movhi	r2,16
4080c128:	81400234 	orhi	r5,r16,8
4080c12c:	10bfffc4 	addi	r2,r2,-1
4080c130:	a007883a 	mov	r3,r20
4080c134:	288a703a 	and	r5,r5,r2
4080c138:	003f2206 	br	4080bdc4 <__alt_mem_onchip_flash_0_data+0xff7cbdc4>
4080c13c:	183fca26 	beq	r3,zero,4080c068 <__alt_mem_onchip_flash_0_data+0xff7cc068>
4080c140:	e5ef883a 	add	r23,fp,r23
4080c144:	40bfffc4 	addi	r2,r8,-1
4080c148:	bf00392e 	bgeu	r23,fp,4080c230 <__divdf3+0x75c>
4080c14c:	1011883a 	mov	r8,r2
4080c150:	ba7fc41e 	bne	r23,r9,4080c064 <__alt_mem_onchip_flash_0_data+0xff7cc064>
4080c154:	b0ffc31e 	bne	r22,r3,4080c064 <__alt_mem_onchip_flash_0_data+0xff7cc064>
4080c158:	003fc306 	br	4080c068 <__alt_mem_onchip_flash_0_data+0xff7cc068>
4080c15c:	143ff604 	addi	r16,r2,-40
4080c160:	9c20983a 	sll	r16,r19,r16
4080c164:	0025883a 	mov	r18,zero
4080c168:	003ee206 	br	4080bcf4 <__alt_mem_onchip_flash_0_data+0xff7cbcf4>
4080c16c:	d9800315 	stw	r6,12(sp)
4080c170:	d9c00215 	stw	r7,8(sp)
4080c174:	0800f0c0 	call	40800f0c <__clzsi2>
4080c178:	10800804 	addi	r2,r2,32
4080c17c:	d9c00217 	ldw	r7,8(sp)
4080c180:	d9800317 	ldw	r6,12(sp)
4080c184:	003ed106 	br	4080bccc <__alt_mem_onchip_flash_0_data+0xff7cbccc>
4080c188:	147ff604 	addi	r17,r2,-40
4080c18c:	3462983a 	sll	r17,r6,r17
4080c190:	0011883a 	mov	r8,zero
4080c194:	003ef506 	br	4080bd6c <__alt_mem_onchip_flash_0_data+0xff7cbd6c>
4080c198:	3009883a 	mov	r4,r6
4080c19c:	d9800315 	stw	r6,12(sp)
4080c1a0:	da400115 	stw	r9,4(sp)
4080c1a4:	0800f0c0 	call	40800f0c <__clzsi2>
4080c1a8:	10800804 	addi	r2,r2,32
4080c1ac:	da400117 	ldw	r9,4(sp)
4080c1b0:	d9800317 	ldw	r6,12(sp)
4080c1b4:	003ee306 	br	4080bd44 <__alt_mem_onchip_flash_0_data+0xff7cbd44>
4080c1b8:	85a1883a 	add	r16,r16,r22
4080c1bc:	8585803a 	cmpltu	r2,r16,r22
4080c1c0:	1705883a 	add	r2,r2,fp
4080c1c4:	14a5883a 	add	r18,r2,r18
4080c1c8:	88bfffc4 	addi	r2,r17,-1
4080c1cc:	e4800c2e 	bgeu	fp,r18,4080c200 <__divdf3+0x72c>
4080c1d0:	90c03e36 	bltu	r18,r3,4080c2cc <__divdf3+0x7f8>
4080c1d4:	1c806926 	beq	r3,r18,4080c37c <__divdf3+0x8a8>
4080c1d8:	90c7c83a 	sub	r3,r18,r3
4080c1dc:	1023883a 	mov	r17,r2
4080c1e0:	003f5206 	br	4080bf2c <__alt_mem_onchip_flash_0_data+0xff7cbf2c>
4080c1e4:	923f0436 	bltu	r18,r8,4080bdf8 <__alt_mem_onchip_flash_0_data+0xff7cbdf8>
4080c1e8:	800897fa 	slli	r4,r16,31
4080c1ec:	9004d07a 	srli	r2,r18,1
4080c1f0:	8006d07a 	srli	r3,r16,1
4080c1f4:	902097fa 	slli	r16,r18,31
4080c1f8:	20a4b03a 	or	r18,r4,r2
4080c1fc:	003f0106 	br	4080be04 <__alt_mem_onchip_flash_0_data+0xff7cbe04>
4080c200:	e4bff51e 	bne	fp,r18,4080c1d8 <__alt_mem_onchip_flash_0_data+0xff7cc1d8>
4080c204:	85bff22e 	bgeu	r16,r22,4080c1d0 <__alt_mem_onchip_flash_0_data+0xff7cc1d0>
4080c208:	e0c7c83a 	sub	r3,fp,r3
4080c20c:	1023883a 	mov	r17,r2
4080c210:	003f4606 	br	4080bf2c <__alt_mem_onchip_flash_0_data+0xff7cbf2c>
4080c214:	100f883a 	mov	r7,r2
4080c218:	003f2b06 	br	4080bec8 <__alt_mem_onchip_flash_0_data+0xff7cbec8>
4080c21c:	180d883a 	mov	r6,r3
4080c220:	003f1306 	br	4080be70 <__alt_mem_onchip_flash_0_data+0xff7cbe70>
4080c224:	813fe436 	bltu	r16,r4,4080c1b8 <__alt_mem_onchip_flash_0_data+0xff7cc1b8>
4080c228:	0007883a 	mov	r3,zero
4080c22c:	003f3f06 	br	4080bf2c <__alt_mem_onchip_flash_0_data+0xff7cbf2c>
4080c230:	ba402c36 	bltu	r23,r9,4080c2e4 <__divdf3+0x810>
4080c234:	4dc05426 	beq	r9,r23,4080c388 <__divdf3+0x8b4>
4080c238:	1011883a 	mov	r8,r2
4080c23c:	003f8906 	br	4080c064 <__alt_mem_onchip_flash_0_data+0xff7cc064>
4080c240:	023fffc4 	movi	r8,-1
4080c244:	003f8806 	br	4080c068 <__alt_mem_onchip_flash_0_data+0xff7cc068>
4080c248:	1811883a 	mov	r8,r3
4080c24c:	003f5406 	br	4080bfa0 <__alt_mem_onchip_flash_0_data+0xff7cbfa0>
4080c250:	1025883a 	mov	r18,r2
4080c254:	003f6d06 	br	4080c00c <__alt_mem_onchip_flash_0_data+0xff7cc00c>
4080c258:	b827883a 	mov	r19,r23
4080c25c:	003f8206 	br	4080c068 <__alt_mem_onchip_flash_0_data+0xff7cc068>
4080c260:	010007c4 	movi	r4,31
4080c264:	20c02616 	blt	r4,r3,4080c300 <__divdf3+0x82c>
4080c268:	00800804 	movi	r2,32
4080c26c:	10c5c83a 	sub	r2,r2,r3
4080c270:	888a983a 	sll	r5,r17,r2
4080c274:	40c8d83a 	srl	r4,r8,r3
4080c278:	4084983a 	sll	r2,r8,r2
4080c27c:	88e2d83a 	srl	r17,r17,r3
4080c280:	2906b03a 	or	r3,r5,r4
4080c284:	1004c03a 	cmpne	r2,r2,zero
4080c288:	1886b03a 	or	r3,r3,r2
4080c28c:	188001cc 	andi	r2,r3,7
4080c290:	10000726 	beq	r2,zero,4080c2b0 <__divdf3+0x7dc>
4080c294:	188003cc 	andi	r2,r3,15
4080c298:	01000104 	movi	r4,4
4080c29c:	11000426 	beq	r2,r4,4080c2b0 <__divdf3+0x7dc>
4080c2a0:	1805883a 	mov	r2,r3
4080c2a4:	10c00104 	addi	r3,r2,4
4080c2a8:	1885803a 	cmpltu	r2,r3,r2
4080c2ac:	88a3883a 	add	r17,r17,r2
4080c2b0:	8880202c 	andhi	r2,r17,128
4080c2b4:	10002726 	beq	r2,zero,4080c354 <__divdf3+0x880>
4080c2b8:	98c0004c 	andi	r3,r19,1
4080c2bc:	00800044 	movi	r2,1
4080c2c0:	000b883a 	mov	r5,zero
4080c2c4:	0025883a 	mov	r18,zero
4080c2c8:	003e6106 	br	4080bc50 <__alt_mem_onchip_flash_0_data+0xff7cbc50>
4080c2cc:	85a1883a 	add	r16,r16,r22
4080c2d0:	8585803a 	cmpltu	r2,r16,r22
4080c2d4:	1705883a 	add	r2,r2,fp
4080c2d8:	14a5883a 	add	r18,r2,r18
4080c2dc:	8c7fff84 	addi	r17,r17,-2
4080c2e0:	003f1106 	br	4080bf28 <__alt_mem_onchip_flash_0_data+0xff7cbf28>
4080c2e4:	b589883a 	add	r4,r22,r22
4080c2e8:	25ad803a 	cmpltu	r22,r4,r22
4080c2ec:	b739883a 	add	fp,r22,fp
4080c2f0:	40bfff84 	addi	r2,r8,-2
4080c2f4:	bf2f883a 	add	r23,r23,fp
4080c2f8:	202d883a 	mov	r22,r4
4080c2fc:	003f9306 	br	4080c14c <__alt_mem_onchip_flash_0_data+0xff7cc14c>
4080c300:	013ff844 	movi	r4,-31
4080c304:	2085c83a 	sub	r2,r4,r2
4080c308:	8888d83a 	srl	r4,r17,r2
4080c30c:	00800804 	movi	r2,32
4080c310:	18802126 	beq	r3,r2,4080c398 <__divdf3+0x8c4>
4080c314:	00801004 	movi	r2,64
4080c318:	10c5c83a 	sub	r2,r2,r3
4080c31c:	8884983a 	sll	r2,r17,r2
4080c320:	1204b03a 	or	r2,r2,r8
4080c324:	1004c03a 	cmpne	r2,r2,zero
4080c328:	2084b03a 	or	r2,r4,r2
4080c32c:	144001cc 	andi	r17,r2,7
4080c330:	88000d1e 	bne	r17,zero,4080c368 <__divdf3+0x894>
4080c334:	000b883a 	mov	r5,zero
4080c338:	1024d0fa 	srli	r18,r2,3
4080c33c:	98c0004c 	andi	r3,r19,1
4080c340:	0005883a 	mov	r2,zero
4080c344:	9464b03a 	or	r18,r18,r17
4080c348:	003e4106 	br	4080bc50 <__alt_mem_onchip_flash_0_data+0xff7cbc50>
4080c34c:	1007883a 	mov	r3,r2
4080c350:	0023883a 	mov	r17,zero
4080c354:	880a927a 	slli	r5,r17,9
4080c358:	1805883a 	mov	r2,r3
4080c35c:	8822977a 	slli	r17,r17,29
4080c360:	280ad33a 	srli	r5,r5,12
4080c364:	003ff406 	br	4080c338 <__alt_mem_onchip_flash_0_data+0xff7cc338>
4080c368:	10c003cc 	andi	r3,r2,15
4080c36c:	01000104 	movi	r4,4
4080c370:	193ff626 	beq	r3,r4,4080c34c <__alt_mem_onchip_flash_0_data+0xff7cc34c>
4080c374:	0023883a 	mov	r17,zero
4080c378:	003fca06 	br	4080c2a4 <__alt_mem_onchip_flash_0_data+0xff7cc2a4>
4080c37c:	813fd336 	bltu	r16,r4,4080c2cc <__alt_mem_onchip_flash_0_data+0xff7cc2cc>
4080c380:	1023883a 	mov	r17,r2
4080c384:	003fa806 	br	4080c228 <__alt_mem_onchip_flash_0_data+0xff7cc228>
4080c388:	b0ffd636 	bltu	r22,r3,4080c2e4 <__alt_mem_onchip_flash_0_data+0xff7cc2e4>
4080c38c:	1011883a 	mov	r8,r2
4080c390:	b0ff341e 	bne	r22,r3,4080c064 <__alt_mem_onchip_flash_0_data+0xff7cc064>
4080c394:	003f3406 	br	4080c068 <__alt_mem_onchip_flash_0_data+0xff7cc068>
4080c398:	0005883a 	mov	r2,zero
4080c39c:	003fe006 	br	4080c320 <__alt_mem_onchip_flash_0_data+0xff7cc320>
4080c3a0:	00800434 	movhi	r2,16
4080c3a4:	89400234 	orhi	r5,r17,8
4080c3a8:	10bfffc4 	addi	r2,r2,-1
4080c3ac:	b807883a 	mov	r3,r23
4080c3b0:	288a703a 	and	r5,r5,r2
4080c3b4:	4025883a 	mov	r18,r8
4080c3b8:	003e8206 	br	4080bdc4 <__alt_mem_onchip_flash_0_data+0xff7cbdc4>

4080c3bc <__eqdf2>:
4080c3bc:	2804d53a 	srli	r2,r5,20
4080c3c0:	3806d53a 	srli	r3,r7,20
4080c3c4:	02000434 	movhi	r8,16
4080c3c8:	423fffc4 	addi	r8,r8,-1
4080c3cc:	1081ffcc 	andi	r2,r2,2047
4080c3d0:	0281ffc4 	movi	r10,2047
4080c3d4:	2a12703a 	and	r9,r5,r8
4080c3d8:	18c1ffcc 	andi	r3,r3,2047
4080c3dc:	3a10703a 	and	r8,r7,r8
4080c3e0:	280ad7fa 	srli	r5,r5,31
4080c3e4:	380ed7fa 	srli	r7,r7,31
4080c3e8:	12801026 	beq	r2,r10,4080c42c <__eqdf2+0x70>
4080c3ec:	0281ffc4 	movi	r10,2047
4080c3f0:	1a800a26 	beq	r3,r10,4080c41c <__eqdf2+0x60>
4080c3f4:	10c00226 	beq	r2,r3,4080c400 <__eqdf2+0x44>
4080c3f8:	00800044 	movi	r2,1
4080c3fc:	f800283a 	ret
4080c400:	4a3ffd1e 	bne	r9,r8,4080c3f8 <__alt_mem_onchip_flash_0_data+0xff7cc3f8>
4080c404:	21bffc1e 	bne	r4,r6,4080c3f8 <__alt_mem_onchip_flash_0_data+0xff7cc3f8>
4080c408:	29c00c26 	beq	r5,r7,4080c43c <__eqdf2+0x80>
4080c40c:	103ffa1e 	bne	r2,zero,4080c3f8 <__alt_mem_onchip_flash_0_data+0xff7cc3f8>
4080c410:	2244b03a 	or	r2,r4,r9
4080c414:	1004c03a 	cmpne	r2,r2,zero
4080c418:	f800283a 	ret
4080c41c:	3214b03a 	or	r10,r6,r8
4080c420:	503ff426 	beq	r10,zero,4080c3f4 <__alt_mem_onchip_flash_0_data+0xff7cc3f4>
4080c424:	00800044 	movi	r2,1
4080c428:	f800283a 	ret
4080c42c:	2254b03a 	or	r10,r4,r9
4080c430:	503fee26 	beq	r10,zero,4080c3ec <__alt_mem_onchip_flash_0_data+0xff7cc3ec>
4080c434:	00800044 	movi	r2,1
4080c438:	f800283a 	ret
4080c43c:	0005883a 	mov	r2,zero
4080c440:	f800283a 	ret

4080c444 <__gedf2>:
4080c444:	2804d53a 	srli	r2,r5,20
4080c448:	3806d53a 	srli	r3,r7,20
4080c44c:	02000434 	movhi	r8,16
4080c450:	423fffc4 	addi	r8,r8,-1
4080c454:	1081ffcc 	andi	r2,r2,2047
4080c458:	0241ffc4 	movi	r9,2047
4080c45c:	2a14703a 	and	r10,r5,r8
4080c460:	18c1ffcc 	andi	r3,r3,2047
4080c464:	3a10703a 	and	r8,r7,r8
4080c468:	280ad7fa 	srli	r5,r5,31
4080c46c:	380ed7fa 	srli	r7,r7,31
4080c470:	12401d26 	beq	r2,r9,4080c4e8 <__gedf2+0xa4>
4080c474:	0241ffc4 	movi	r9,2047
4080c478:	1a401226 	beq	r3,r9,4080c4c4 <__gedf2+0x80>
4080c47c:	1000081e 	bne	r2,zero,4080c4a0 <__gedf2+0x5c>
4080c480:	2296b03a 	or	r11,r4,r10
4080c484:	5813003a 	cmpeq	r9,r11,zero
4080c488:	1800091e 	bne	r3,zero,4080c4b0 <__gedf2+0x6c>
4080c48c:	3218b03a 	or	r12,r6,r8
4080c490:	6000071e 	bne	r12,zero,4080c4b0 <__gedf2+0x6c>
4080c494:	0005883a 	mov	r2,zero
4080c498:	5800101e 	bne	r11,zero,4080c4dc <__gedf2+0x98>
4080c49c:	f800283a 	ret
4080c4a0:	18000c1e 	bne	r3,zero,4080c4d4 <__gedf2+0x90>
4080c4a4:	3212b03a 	or	r9,r6,r8
4080c4a8:	48000c26 	beq	r9,zero,4080c4dc <__gedf2+0x98>
4080c4ac:	0013883a 	mov	r9,zero
4080c4b0:	39c03fcc 	andi	r7,r7,255
4080c4b4:	48000826 	beq	r9,zero,4080c4d8 <__gedf2+0x94>
4080c4b8:	38000926 	beq	r7,zero,4080c4e0 <__gedf2+0x9c>
4080c4bc:	00800044 	movi	r2,1
4080c4c0:	f800283a 	ret
4080c4c4:	3212b03a 	or	r9,r6,r8
4080c4c8:	483fec26 	beq	r9,zero,4080c47c <__alt_mem_onchip_flash_0_data+0xff7cc47c>
4080c4cc:	00bfff84 	movi	r2,-2
4080c4d0:	f800283a 	ret
4080c4d4:	39c03fcc 	andi	r7,r7,255
4080c4d8:	29c00626 	beq	r5,r7,4080c4f4 <__gedf2+0xb0>
4080c4dc:	283ff726 	beq	r5,zero,4080c4bc <__alt_mem_onchip_flash_0_data+0xff7cc4bc>
4080c4e0:	00bfffc4 	movi	r2,-1
4080c4e4:	f800283a 	ret
4080c4e8:	2292b03a 	or	r9,r4,r10
4080c4ec:	483fe126 	beq	r9,zero,4080c474 <__alt_mem_onchip_flash_0_data+0xff7cc474>
4080c4f0:	003ff606 	br	4080c4cc <__alt_mem_onchip_flash_0_data+0xff7cc4cc>
4080c4f4:	18bff916 	blt	r3,r2,4080c4dc <__alt_mem_onchip_flash_0_data+0xff7cc4dc>
4080c4f8:	10c00316 	blt	r2,r3,4080c508 <__gedf2+0xc4>
4080c4fc:	42bff736 	bltu	r8,r10,4080c4dc <__alt_mem_onchip_flash_0_data+0xff7cc4dc>
4080c500:	52000326 	beq	r10,r8,4080c510 <__gedf2+0xcc>
4080c504:	5200042e 	bgeu	r10,r8,4080c518 <__gedf2+0xd4>
4080c508:	283fec1e 	bne	r5,zero,4080c4bc <__alt_mem_onchip_flash_0_data+0xff7cc4bc>
4080c50c:	003ff406 	br	4080c4e0 <__alt_mem_onchip_flash_0_data+0xff7cc4e0>
4080c510:	313ff236 	bltu	r6,r4,4080c4dc <__alt_mem_onchip_flash_0_data+0xff7cc4dc>
4080c514:	21bffc36 	bltu	r4,r6,4080c508 <__alt_mem_onchip_flash_0_data+0xff7cc508>
4080c518:	0005883a 	mov	r2,zero
4080c51c:	f800283a 	ret

4080c520 <__ledf2>:
4080c520:	2804d53a 	srli	r2,r5,20
4080c524:	3810d53a 	srli	r8,r7,20
4080c528:	00c00434 	movhi	r3,16
4080c52c:	18ffffc4 	addi	r3,r3,-1
4080c530:	1081ffcc 	andi	r2,r2,2047
4080c534:	0241ffc4 	movi	r9,2047
4080c538:	28d4703a 	and	r10,r5,r3
4080c53c:	4201ffcc 	andi	r8,r8,2047
4080c540:	38c6703a 	and	r3,r7,r3
4080c544:	280ad7fa 	srli	r5,r5,31
4080c548:	380ed7fa 	srli	r7,r7,31
4080c54c:	12401f26 	beq	r2,r9,4080c5cc <__ledf2+0xac>
4080c550:	0241ffc4 	movi	r9,2047
4080c554:	42401426 	beq	r8,r9,4080c5a8 <__ledf2+0x88>
4080c558:	1000091e 	bne	r2,zero,4080c580 <__ledf2+0x60>
4080c55c:	2296b03a 	or	r11,r4,r10
4080c560:	5813003a 	cmpeq	r9,r11,zero
4080c564:	29403fcc 	andi	r5,r5,255
4080c568:	40000a1e 	bne	r8,zero,4080c594 <__ledf2+0x74>
4080c56c:	30d8b03a 	or	r12,r6,r3
4080c570:	6000081e 	bne	r12,zero,4080c594 <__ledf2+0x74>
4080c574:	0005883a 	mov	r2,zero
4080c578:	5800111e 	bne	r11,zero,4080c5c0 <__ledf2+0xa0>
4080c57c:	f800283a 	ret
4080c580:	29403fcc 	andi	r5,r5,255
4080c584:	40000c1e 	bne	r8,zero,4080c5b8 <__ledf2+0x98>
4080c588:	30d2b03a 	or	r9,r6,r3
4080c58c:	48000c26 	beq	r9,zero,4080c5c0 <__ledf2+0xa0>
4080c590:	0013883a 	mov	r9,zero
4080c594:	39c03fcc 	andi	r7,r7,255
4080c598:	48000826 	beq	r9,zero,4080c5bc <__ledf2+0x9c>
4080c59c:	38001126 	beq	r7,zero,4080c5e4 <__ledf2+0xc4>
4080c5a0:	00800044 	movi	r2,1
4080c5a4:	f800283a 	ret
4080c5a8:	30d2b03a 	or	r9,r6,r3
4080c5ac:	483fea26 	beq	r9,zero,4080c558 <__alt_mem_onchip_flash_0_data+0xff7cc558>
4080c5b0:	00800084 	movi	r2,2
4080c5b4:	f800283a 	ret
4080c5b8:	39c03fcc 	andi	r7,r7,255
4080c5bc:	39400726 	beq	r7,r5,4080c5dc <__ledf2+0xbc>
4080c5c0:	2800081e 	bne	r5,zero,4080c5e4 <__ledf2+0xc4>
4080c5c4:	00800044 	movi	r2,1
4080c5c8:	f800283a 	ret
4080c5cc:	2292b03a 	or	r9,r4,r10
4080c5d0:	483fdf26 	beq	r9,zero,4080c550 <__alt_mem_onchip_flash_0_data+0xff7cc550>
4080c5d4:	00800084 	movi	r2,2
4080c5d8:	f800283a 	ret
4080c5dc:	4080030e 	bge	r8,r2,4080c5ec <__ledf2+0xcc>
4080c5e0:	383fef26 	beq	r7,zero,4080c5a0 <__alt_mem_onchip_flash_0_data+0xff7cc5a0>
4080c5e4:	00bfffc4 	movi	r2,-1
4080c5e8:	f800283a 	ret
4080c5ec:	123feb16 	blt	r2,r8,4080c59c <__alt_mem_onchip_flash_0_data+0xff7cc59c>
4080c5f0:	1abff336 	bltu	r3,r10,4080c5c0 <__alt_mem_onchip_flash_0_data+0xff7cc5c0>
4080c5f4:	50c00326 	beq	r10,r3,4080c604 <__ledf2+0xe4>
4080c5f8:	50c0042e 	bgeu	r10,r3,4080c60c <__ledf2+0xec>
4080c5fc:	283fe81e 	bne	r5,zero,4080c5a0 <__alt_mem_onchip_flash_0_data+0xff7cc5a0>
4080c600:	003ff806 	br	4080c5e4 <__alt_mem_onchip_flash_0_data+0xff7cc5e4>
4080c604:	313fee36 	bltu	r6,r4,4080c5c0 <__alt_mem_onchip_flash_0_data+0xff7cc5c0>
4080c608:	21bffc36 	bltu	r4,r6,4080c5fc <__alt_mem_onchip_flash_0_data+0xff7cc5fc>
4080c60c:	0005883a 	mov	r2,zero
4080c610:	f800283a 	ret

4080c614 <__muldf3>:
4080c614:	defff304 	addi	sp,sp,-52
4080c618:	2804d53a 	srli	r2,r5,20
4080c61c:	dd800915 	stw	r22,36(sp)
4080c620:	282cd7fa 	srli	r22,r5,31
4080c624:	dc000315 	stw	r16,12(sp)
4080c628:	04000434 	movhi	r16,16
4080c62c:	dd400815 	stw	r21,32(sp)
4080c630:	dc800515 	stw	r18,20(sp)
4080c634:	843fffc4 	addi	r16,r16,-1
4080c638:	dfc00c15 	stw	ra,48(sp)
4080c63c:	df000b15 	stw	fp,44(sp)
4080c640:	ddc00a15 	stw	r23,40(sp)
4080c644:	dd000715 	stw	r20,28(sp)
4080c648:	dcc00615 	stw	r19,24(sp)
4080c64c:	dc400415 	stw	r17,16(sp)
4080c650:	1481ffcc 	andi	r18,r2,2047
4080c654:	2c20703a 	and	r16,r5,r16
4080c658:	b02b883a 	mov	r21,r22
4080c65c:	b2403fcc 	andi	r9,r22,255
4080c660:	90006026 	beq	r18,zero,4080c7e4 <__muldf3+0x1d0>
4080c664:	0081ffc4 	movi	r2,2047
4080c668:	2029883a 	mov	r20,r4
4080c66c:	90803626 	beq	r18,r2,4080c748 <__muldf3+0x134>
4080c670:	80800434 	orhi	r2,r16,16
4080c674:	100490fa 	slli	r2,r2,3
4080c678:	2020d77a 	srli	r16,r4,29
4080c67c:	202890fa 	slli	r20,r4,3
4080c680:	94bf0044 	addi	r18,r18,-1023
4080c684:	80a0b03a 	or	r16,r16,r2
4080c688:	0027883a 	mov	r19,zero
4080c68c:	0039883a 	mov	fp,zero
4080c690:	3804d53a 	srli	r2,r7,20
4080c694:	382ed7fa 	srli	r23,r7,31
4080c698:	04400434 	movhi	r17,16
4080c69c:	8c7fffc4 	addi	r17,r17,-1
4080c6a0:	1081ffcc 	andi	r2,r2,2047
4080c6a4:	3011883a 	mov	r8,r6
4080c6a8:	3c62703a 	and	r17,r7,r17
4080c6ac:	ba803fcc 	andi	r10,r23,255
4080c6b0:	10006d26 	beq	r2,zero,4080c868 <__muldf3+0x254>
4080c6b4:	00c1ffc4 	movi	r3,2047
4080c6b8:	10c06526 	beq	r2,r3,4080c850 <__muldf3+0x23c>
4080c6bc:	88c00434 	orhi	r3,r17,16
4080c6c0:	180690fa 	slli	r3,r3,3
4080c6c4:	3022d77a 	srli	r17,r6,29
4080c6c8:	301090fa 	slli	r8,r6,3
4080c6cc:	10bf0044 	addi	r2,r2,-1023
4080c6d0:	88e2b03a 	or	r17,r17,r3
4080c6d4:	000b883a 	mov	r5,zero
4080c6d8:	9085883a 	add	r2,r18,r2
4080c6dc:	2cc8b03a 	or	r4,r5,r19
4080c6e0:	00c003c4 	movi	r3,15
4080c6e4:	bdacf03a 	xor	r22,r23,r22
4080c6e8:	12c00044 	addi	r11,r2,1
4080c6ec:	19009936 	bltu	r3,r4,4080c954 <__muldf3+0x340>
4080c6f0:	200890ba 	slli	r4,r4,2
4080c6f4:	00d02074 	movhi	r3,16513
4080c6f8:	18f1c204 	addi	r3,r3,-14584
4080c6fc:	20c9883a 	add	r4,r4,r3
4080c700:	20c00017 	ldw	r3,0(r4)
4080c704:	1800683a 	jmp	r3
4080c708:	4080c954 	ori	r2,r8,805
4080c70c:	4080c768 	cmpgeui	r2,r8,797
4080c710:	4080c768 	cmpgeui	r2,r8,797
4080c714:	4080c764 	muli	r2,r8,797
4080c718:	4080c930 	cmpltui	r2,r8,804
4080c71c:	4080c930 	cmpltui	r2,r8,804
4080c720:	4080c918 	cmpnei	r2,r8,804
4080c724:	4080c764 	muli	r2,r8,797
4080c728:	4080c930 	cmpltui	r2,r8,804
4080c72c:	4080c918 	cmpnei	r2,r8,804
4080c730:	4080c930 	cmpltui	r2,r8,804
4080c734:	4080c764 	muli	r2,r8,797
4080c738:	4080c940 	call	44080c94 <__alt_mem_onchip_flash_0_data+0x3040c94>
4080c73c:	4080c940 	call	44080c94 <__alt_mem_onchip_flash_0_data+0x3040c94>
4080c740:	4080c940 	call	44080c94 <__alt_mem_onchip_flash_0_data+0x3040c94>
4080c744:	4080cb5c 	xori	r2,r8,813
4080c748:	2404b03a 	or	r2,r4,r16
4080c74c:	10006f1e 	bne	r2,zero,4080c90c <__muldf3+0x2f8>
4080c750:	04c00204 	movi	r19,8
4080c754:	0021883a 	mov	r16,zero
4080c758:	0029883a 	mov	r20,zero
4080c75c:	07000084 	movi	fp,2
4080c760:	003fcb06 	br	4080c690 <__alt_mem_onchip_flash_0_data+0xff7cc690>
4080c764:	502d883a 	mov	r22,r10
4080c768:	00800084 	movi	r2,2
4080c76c:	28805726 	beq	r5,r2,4080c8cc <__muldf3+0x2b8>
4080c770:	008000c4 	movi	r2,3
4080c774:	28816626 	beq	r5,r2,4080cd10 <__muldf3+0x6fc>
4080c778:	00800044 	movi	r2,1
4080c77c:	2881411e 	bne	r5,r2,4080cc84 <__muldf3+0x670>
4080c780:	b02b883a 	mov	r21,r22
4080c784:	0005883a 	mov	r2,zero
4080c788:	000b883a 	mov	r5,zero
4080c78c:	0029883a 	mov	r20,zero
4080c790:	1004953a 	slli	r2,r2,20
4080c794:	a8c03fcc 	andi	r3,r21,255
4080c798:	04400434 	movhi	r17,16
4080c79c:	8c7fffc4 	addi	r17,r17,-1
4080c7a0:	180697fa 	slli	r3,r3,31
4080c7a4:	2c4a703a 	and	r5,r5,r17
4080c7a8:	288ab03a 	or	r5,r5,r2
4080c7ac:	28c6b03a 	or	r3,r5,r3
4080c7b0:	a005883a 	mov	r2,r20
4080c7b4:	dfc00c17 	ldw	ra,48(sp)
4080c7b8:	df000b17 	ldw	fp,44(sp)
4080c7bc:	ddc00a17 	ldw	r23,40(sp)
4080c7c0:	dd800917 	ldw	r22,36(sp)
4080c7c4:	dd400817 	ldw	r21,32(sp)
4080c7c8:	dd000717 	ldw	r20,28(sp)
4080c7cc:	dcc00617 	ldw	r19,24(sp)
4080c7d0:	dc800517 	ldw	r18,20(sp)
4080c7d4:	dc400417 	ldw	r17,16(sp)
4080c7d8:	dc000317 	ldw	r16,12(sp)
4080c7dc:	dec00d04 	addi	sp,sp,52
4080c7e0:	f800283a 	ret
4080c7e4:	2404b03a 	or	r2,r4,r16
4080c7e8:	2027883a 	mov	r19,r4
4080c7ec:	10004226 	beq	r2,zero,4080c8f8 <__muldf3+0x2e4>
4080c7f0:	8000fc26 	beq	r16,zero,4080cbe4 <__muldf3+0x5d0>
4080c7f4:	8009883a 	mov	r4,r16
4080c7f8:	d9800215 	stw	r6,8(sp)
4080c7fc:	d9c00015 	stw	r7,0(sp)
4080c800:	da400115 	stw	r9,4(sp)
4080c804:	0800f0c0 	call	40800f0c <__clzsi2>
4080c808:	d9800217 	ldw	r6,8(sp)
4080c80c:	d9c00017 	ldw	r7,0(sp)
4080c810:	da400117 	ldw	r9,4(sp)
4080c814:	113ffd44 	addi	r4,r2,-11
4080c818:	00c00704 	movi	r3,28
4080c81c:	1900ed16 	blt	r3,r4,4080cbd4 <__muldf3+0x5c0>
4080c820:	00c00744 	movi	r3,29
4080c824:	147ffe04 	addi	r17,r2,-8
4080c828:	1907c83a 	sub	r3,r3,r4
4080c82c:	8460983a 	sll	r16,r16,r17
4080c830:	98c6d83a 	srl	r3,r19,r3
4080c834:	9c68983a 	sll	r20,r19,r17
4080c838:	1c20b03a 	or	r16,r3,r16
4080c83c:	1080fcc4 	addi	r2,r2,1011
4080c840:	00a5c83a 	sub	r18,zero,r2
4080c844:	0027883a 	mov	r19,zero
4080c848:	0039883a 	mov	fp,zero
4080c84c:	003f9006 	br	4080c690 <__alt_mem_onchip_flash_0_data+0xff7cc690>
4080c850:	3446b03a 	or	r3,r6,r17
4080c854:	1800261e 	bne	r3,zero,4080c8f0 <__muldf3+0x2dc>
4080c858:	0023883a 	mov	r17,zero
4080c85c:	0011883a 	mov	r8,zero
4080c860:	01400084 	movi	r5,2
4080c864:	003f9c06 	br	4080c6d8 <__alt_mem_onchip_flash_0_data+0xff7cc6d8>
4080c868:	3446b03a 	or	r3,r6,r17
4080c86c:	18001c26 	beq	r3,zero,4080c8e0 <__muldf3+0x2cc>
4080c870:	8800ce26 	beq	r17,zero,4080cbac <__muldf3+0x598>
4080c874:	8809883a 	mov	r4,r17
4080c878:	d9800215 	stw	r6,8(sp)
4080c87c:	da400115 	stw	r9,4(sp)
4080c880:	da800015 	stw	r10,0(sp)
4080c884:	0800f0c0 	call	40800f0c <__clzsi2>
4080c888:	d9800217 	ldw	r6,8(sp)
4080c88c:	da400117 	ldw	r9,4(sp)
4080c890:	da800017 	ldw	r10,0(sp)
4080c894:	113ffd44 	addi	r4,r2,-11
4080c898:	00c00704 	movi	r3,28
4080c89c:	1900bf16 	blt	r3,r4,4080cb9c <__muldf3+0x588>
4080c8a0:	00c00744 	movi	r3,29
4080c8a4:	123ffe04 	addi	r8,r2,-8
4080c8a8:	1907c83a 	sub	r3,r3,r4
4080c8ac:	8a22983a 	sll	r17,r17,r8
4080c8b0:	30c6d83a 	srl	r3,r6,r3
4080c8b4:	3210983a 	sll	r8,r6,r8
4080c8b8:	1c62b03a 	or	r17,r3,r17
4080c8bc:	1080fcc4 	addi	r2,r2,1011
4080c8c0:	0085c83a 	sub	r2,zero,r2
4080c8c4:	000b883a 	mov	r5,zero
4080c8c8:	003f8306 	br	4080c6d8 <__alt_mem_onchip_flash_0_data+0xff7cc6d8>
4080c8cc:	b02b883a 	mov	r21,r22
4080c8d0:	0081ffc4 	movi	r2,2047
4080c8d4:	000b883a 	mov	r5,zero
4080c8d8:	0029883a 	mov	r20,zero
4080c8dc:	003fac06 	br	4080c790 <__alt_mem_onchip_flash_0_data+0xff7cc790>
4080c8e0:	0023883a 	mov	r17,zero
4080c8e4:	0011883a 	mov	r8,zero
4080c8e8:	01400044 	movi	r5,1
4080c8ec:	003f7a06 	br	4080c6d8 <__alt_mem_onchip_flash_0_data+0xff7cc6d8>
4080c8f0:	014000c4 	movi	r5,3
4080c8f4:	003f7806 	br	4080c6d8 <__alt_mem_onchip_flash_0_data+0xff7cc6d8>
4080c8f8:	04c00104 	movi	r19,4
4080c8fc:	0021883a 	mov	r16,zero
4080c900:	0029883a 	mov	r20,zero
4080c904:	07000044 	movi	fp,1
4080c908:	003f6106 	br	4080c690 <__alt_mem_onchip_flash_0_data+0xff7cc690>
4080c90c:	04c00304 	movi	r19,12
4080c910:	070000c4 	movi	fp,3
4080c914:	003f5e06 	br	4080c690 <__alt_mem_onchip_flash_0_data+0xff7cc690>
4080c918:	01400434 	movhi	r5,16
4080c91c:	002b883a 	mov	r21,zero
4080c920:	297fffc4 	addi	r5,r5,-1
4080c924:	053fffc4 	movi	r20,-1
4080c928:	0081ffc4 	movi	r2,2047
4080c92c:	003f9806 	br	4080c790 <__alt_mem_onchip_flash_0_data+0xff7cc790>
4080c930:	8023883a 	mov	r17,r16
4080c934:	a011883a 	mov	r8,r20
4080c938:	e00b883a 	mov	r5,fp
4080c93c:	003f8a06 	br	4080c768 <__alt_mem_onchip_flash_0_data+0xff7cc768>
4080c940:	8023883a 	mov	r17,r16
4080c944:	a011883a 	mov	r8,r20
4080c948:	482d883a 	mov	r22,r9
4080c94c:	e00b883a 	mov	r5,fp
4080c950:	003f8506 	br	4080c768 <__alt_mem_onchip_flash_0_data+0xff7cc768>
4080c954:	a00ad43a 	srli	r5,r20,16
4080c958:	401ad43a 	srli	r13,r8,16
4080c95c:	a53fffcc 	andi	r20,r20,65535
4080c960:	423fffcc 	andi	r8,r8,65535
4080c964:	4519383a 	mul	r12,r8,r20
4080c968:	4147383a 	mul	r3,r8,r5
4080c96c:	6d09383a 	mul	r4,r13,r20
4080c970:	600cd43a 	srli	r6,r12,16
4080c974:	2b5d383a 	mul	r14,r5,r13
4080c978:	20c9883a 	add	r4,r4,r3
4080c97c:	310d883a 	add	r6,r6,r4
4080c980:	30c0022e 	bgeu	r6,r3,4080c98c <__muldf3+0x378>
4080c984:	00c00074 	movhi	r3,1
4080c988:	70dd883a 	add	r14,r14,r3
4080c98c:	8826d43a 	srli	r19,r17,16
4080c990:	8bffffcc 	andi	r15,r17,65535
4080c994:	7d23383a 	mul	r17,r15,r20
4080c998:	7949383a 	mul	r4,r15,r5
4080c99c:	9d29383a 	mul	r20,r19,r20
4080c9a0:	8814d43a 	srli	r10,r17,16
4080c9a4:	3012943a 	slli	r9,r6,16
4080c9a8:	a129883a 	add	r20,r20,r4
4080c9ac:	633fffcc 	andi	r12,r12,65535
4080c9b0:	5515883a 	add	r10,r10,r20
4080c9b4:	3006d43a 	srli	r3,r6,16
4080c9b8:	4b13883a 	add	r9,r9,r12
4080c9bc:	2ccb383a 	mul	r5,r5,r19
4080c9c0:	5100022e 	bgeu	r10,r4,4080c9cc <__muldf3+0x3b8>
4080c9c4:	01000074 	movhi	r4,1
4080c9c8:	290b883a 	add	r5,r5,r4
4080c9cc:	802ad43a 	srli	r21,r16,16
4080c9d0:	843fffcc 	andi	r16,r16,65535
4080c9d4:	440d383a 	mul	r6,r8,r16
4080c9d8:	4565383a 	mul	r18,r8,r21
4080c9dc:	8349383a 	mul	r4,r16,r13
4080c9e0:	500e943a 	slli	r7,r10,16
4080c9e4:	3010d43a 	srli	r8,r6,16
4080c9e8:	5028d43a 	srli	r20,r10,16
4080c9ec:	2489883a 	add	r4,r4,r18
4080c9f0:	8abfffcc 	andi	r10,r17,65535
4080c9f4:	3a95883a 	add	r10,r7,r10
4080c9f8:	4119883a 	add	r12,r8,r4
4080c9fc:	a169883a 	add	r20,r20,r5
4080ca00:	1a87883a 	add	r3,r3,r10
4080ca04:	6d5b383a 	mul	r13,r13,r21
4080ca08:	6480022e 	bgeu	r12,r18,4080ca14 <__muldf3+0x400>
4080ca0c:	01000074 	movhi	r4,1
4080ca10:	691b883a 	add	r13,r13,r4
4080ca14:	7c25383a 	mul	r18,r15,r16
4080ca18:	7d4b383a 	mul	r5,r15,r21
4080ca1c:	84cf383a 	mul	r7,r16,r19
4080ca20:	901ed43a 	srli	r15,r18,16
4080ca24:	6008d43a 	srli	r4,r12,16
4080ca28:	6010943a 	slli	r8,r12,16
4080ca2c:	394f883a 	add	r7,r7,r5
4080ca30:	333fffcc 	andi	r12,r6,65535
4080ca34:	79df883a 	add	r15,r15,r7
4080ca38:	235b883a 	add	r13,r4,r13
4080ca3c:	9d63383a 	mul	r17,r19,r21
4080ca40:	4309883a 	add	r4,r8,r12
4080ca44:	7940022e 	bgeu	r15,r5,4080ca50 <__muldf3+0x43c>
4080ca48:	01400074 	movhi	r5,1
4080ca4c:	8963883a 	add	r17,r17,r5
4080ca50:	780a943a 	slli	r5,r15,16
4080ca54:	91bfffcc 	andi	r6,r18,65535
4080ca58:	70c7883a 	add	r3,r14,r3
4080ca5c:	298d883a 	add	r6,r5,r6
4080ca60:	1a8f803a 	cmpltu	r7,r3,r10
4080ca64:	350b883a 	add	r5,r6,r20
4080ca68:	20c7883a 	add	r3,r4,r3
4080ca6c:	3955883a 	add	r10,r7,r5
4080ca70:	1909803a 	cmpltu	r4,r3,r4
4080ca74:	6a91883a 	add	r8,r13,r10
4080ca78:	780cd43a 	srli	r6,r15,16
4080ca7c:	2219883a 	add	r12,r4,r8
4080ca80:	2d0b803a 	cmpltu	r5,r5,r20
4080ca84:	51cf803a 	cmpltu	r7,r10,r7
4080ca88:	29ceb03a 	or	r7,r5,r7
4080ca8c:	4351803a 	cmpltu	r8,r8,r13
4080ca90:	610b803a 	cmpltu	r5,r12,r4
4080ca94:	4148b03a 	or	r4,r8,r5
4080ca98:	398f883a 	add	r7,r7,r6
4080ca9c:	3909883a 	add	r4,r7,r4
4080caa0:	1810927a 	slli	r8,r3,9
4080caa4:	2449883a 	add	r4,r4,r17
4080caa8:	2008927a 	slli	r4,r4,9
4080caac:	6022d5fa 	srli	r17,r12,23
4080cab0:	1806d5fa 	srli	r3,r3,23
4080cab4:	4252b03a 	or	r9,r8,r9
4080cab8:	600a927a 	slli	r5,r12,9
4080cabc:	4810c03a 	cmpne	r8,r9,zero
4080cac0:	2462b03a 	or	r17,r4,r17
4080cac4:	40c6b03a 	or	r3,r8,r3
4080cac8:	8900402c 	andhi	r4,r17,256
4080cacc:	1950b03a 	or	r8,r3,r5
4080cad0:	20000726 	beq	r4,zero,4080caf0 <__muldf3+0x4dc>
4080cad4:	4006d07a 	srli	r3,r8,1
4080cad8:	880497fa 	slli	r2,r17,31
4080cadc:	4200004c 	andi	r8,r8,1
4080cae0:	8822d07a 	srli	r17,r17,1
4080cae4:	1a10b03a 	or	r8,r3,r8
4080cae8:	1210b03a 	or	r8,r2,r8
4080caec:	5805883a 	mov	r2,r11
4080caf0:	1140ffc4 	addi	r5,r2,1023
4080caf4:	0140440e 	bge	zero,r5,4080cc08 <__muldf3+0x5f4>
4080caf8:	40c001cc 	andi	r3,r8,7
4080cafc:	18000726 	beq	r3,zero,4080cb1c <__muldf3+0x508>
4080cb00:	40c003cc 	andi	r3,r8,15
4080cb04:	01000104 	movi	r4,4
4080cb08:	19000426 	beq	r3,r4,4080cb1c <__muldf3+0x508>
4080cb0c:	4107883a 	add	r3,r8,r4
4080cb10:	1a11803a 	cmpltu	r8,r3,r8
4080cb14:	8a23883a 	add	r17,r17,r8
4080cb18:	1811883a 	mov	r8,r3
4080cb1c:	88c0402c 	andhi	r3,r17,256
4080cb20:	18000426 	beq	r3,zero,4080cb34 <__muldf3+0x520>
4080cb24:	11410004 	addi	r5,r2,1024
4080cb28:	00bfc034 	movhi	r2,65280
4080cb2c:	10bfffc4 	addi	r2,r2,-1
4080cb30:	88a2703a 	and	r17,r17,r2
4080cb34:	0081ff84 	movi	r2,2046
4080cb38:	117f6416 	blt	r2,r5,4080c8cc <__alt_mem_onchip_flash_0_data+0xff7cc8cc>
4080cb3c:	8828977a 	slli	r20,r17,29
4080cb40:	4010d0fa 	srli	r8,r8,3
4080cb44:	8822927a 	slli	r17,r17,9
4080cb48:	2881ffcc 	andi	r2,r5,2047
4080cb4c:	a228b03a 	or	r20,r20,r8
4080cb50:	880ad33a 	srli	r5,r17,12
4080cb54:	b02b883a 	mov	r21,r22
4080cb58:	003f0d06 	br	4080c790 <__alt_mem_onchip_flash_0_data+0xff7cc790>
4080cb5c:	8080022c 	andhi	r2,r16,8
4080cb60:	10000926 	beq	r2,zero,4080cb88 <__muldf3+0x574>
4080cb64:	8880022c 	andhi	r2,r17,8
4080cb68:	1000071e 	bne	r2,zero,4080cb88 <__muldf3+0x574>
4080cb6c:	00800434 	movhi	r2,16
4080cb70:	89400234 	orhi	r5,r17,8
4080cb74:	10bfffc4 	addi	r2,r2,-1
4080cb78:	b82b883a 	mov	r21,r23
4080cb7c:	288a703a 	and	r5,r5,r2
4080cb80:	4029883a 	mov	r20,r8
4080cb84:	003f6806 	br	4080c928 <__alt_mem_onchip_flash_0_data+0xff7cc928>
4080cb88:	00800434 	movhi	r2,16
4080cb8c:	81400234 	orhi	r5,r16,8
4080cb90:	10bfffc4 	addi	r2,r2,-1
4080cb94:	288a703a 	and	r5,r5,r2
4080cb98:	003f6306 	br	4080c928 <__alt_mem_onchip_flash_0_data+0xff7cc928>
4080cb9c:	147ff604 	addi	r17,r2,-40
4080cba0:	3462983a 	sll	r17,r6,r17
4080cba4:	0011883a 	mov	r8,zero
4080cba8:	003f4406 	br	4080c8bc <__alt_mem_onchip_flash_0_data+0xff7cc8bc>
4080cbac:	3009883a 	mov	r4,r6
4080cbb0:	d9800215 	stw	r6,8(sp)
4080cbb4:	da400115 	stw	r9,4(sp)
4080cbb8:	da800015 	stw	r10,0(sp)
4080cbbc:	0800f0c0 	call	40800f0c <__clzsi2>
4080cbc0:	10800804 	addi	r2,r2,32
4080cbc4:	da800017 	ldw	r10,0(sp)
4080cbc8:	da400117 	ldw	r9,4(sp)
4080cbcc:	d9800217 	ldw	r6,8(sp)
4080cbd0:	003f3006 	br	4080c894 <__alt_mem_onchip_flash_0_data+0xff7cc894>
4080cbd4:	143ff604 	addi	r16,r2,-40
4080cbd8:	9c20983a 	sll	r16,r19,r16
4080cbdc:	0029883a 	mov	r20,zero
4080cbe0:	003f1606 	br	4080c83c <__alt_mem_onchip_flash_0_data+0xff7cc83c>
4080cbe4:	d9800215 	stw	r6,8(sp)
4080cbe8:	d9c00015 	stw	r7,0(sp)
4080cbec:	da400115 	stw	r9,4(sp)
4080cbf0:	0800f0c0 	call	40800f0c <__clzsi2>
4080cbf4:	10800804 	addi	r2,r2,32
4080cbf8:	da400117 	ldw	r9,4(sp)
4080cbfc:	d9c00017 	ldw	r7,0(sp)
4080cc00:	d9800217 	ldw	r6,8(sp)
4080cc04:	003f0306 	br	4080c814 <__alt_mem_onchip_flash_0_data+0xff7cc814>
4080cc08:	00c00044 	movi	r3,1
4080cc0c:	1947c83a 	sub	r3,r3,r5
4080cc10:	00800e04 	movi	r2,56
4080cc14:	10feda16 	blt	r2,r3,4080c780 <__alt_mem_onchip_flash_0_data+0xff7cc780>
4080cc18:	008007c4 	movi	r2,31
4080cc1c:	10c01b16 	blt	r2,r3,4080cc8c <__muldf3+0x678>
4080cc20:	00800804 	movi	r2,32
4080cc24:	10c5c83a 	sub	r2,r2,r3
4080cc28:	888a983a 	sll	r5,r17,r2
4080cc2c:	40c8d83a 	srl	r4,r8,r3
4080cc30:	4084983a 	sll	r2,r8,r2
4080cc34:	88e2d83a 	srl	r17,r17,r3
4080cc38:	2906b03a 	or	r3,r5,r4
4080cc3c:	1004c03a 	cmpne	r2,r2,zero
4080cc40:	1886b03a 	or	r3,r3,r2
4080cc44:	188001cc 	andi	r2,r3,7
4080cc48:	10000726 	beq	r2,zero,4080cc68 <__muldf3+0x654>
4080cc4c:	188003cc 	andi	r2,r3,15
4080cc50:	01000104 	movi	r4,4
4080cc54:	11000426 	beq	r2,r4,4080cc68 <__muldf3+0x654>
4080cc58:	1805883a 	mov	r2,r3
4080cc5c:	10c00104 	addi	r3,r2,4
4080cc60:	1885803a 	cmpltu	r2,r3,r2
4080cc64:	88a3883a 	add	r17,r17,r2
4080cc68:	8880202c 	andhi	r2,r17,128
4080cc6c:	10001c26 	beq	r2,zero,4080cce0 <__muldf3+0x6cc>
4080cc70:	b02b883a 	mov	r21,r22
4080cc74:	00800044 	movi	r2,1
4080cc78:	000b883a 	mov	r5,zero
4080cc7c:	0029883a 	mov	r20,zero
4080cc80:	003ec306 	br	4080c790 <__alt_mem_onchip_flash_0_data+0xff7cc790>
4080cc84:	5805883a 	mov	r2,r11
4080cc88:	003f9906 	br	4080caf0 <__alt_mem_onchip_flash_0_data+0xff7ccaf0>
4080cc8c:	00bff844 	movi	r2,-31
4080cc90:	1145c83a 	sub	r2,r2,r5
4080cc94:	8888d83a 	srl	r4,r17,r2
4080cc98:	00800804 	movi	r2,32
4080cc9c:	18801a26 	beq	r3,r2,4080cd08 <__muldf3+0x6f4>
4080cca0:	00801004 	movi	r2,64
4080cca4:	10c5c83a 	sub	r2,r2,r3
4080cca8:	8884983a 	sll	r2,r17,r2
4080ccac:	1204b03a 	or	r2,r2,r8
4080ccb0:	1004c03a 	cmpne	r2,r2,zero
4080ccb4:	2084b03a 	or	r2,r4,r2
4080ccb8:	144001cc 	andi	r17,r2,7
4080ccbc:	88000d1e 	bne	r17,zero,4080ccf4 <__muldf3+0x6e0>
4080ccc0:	000b883a 	mov	r5,zero
4080ccc4:	1028d0fa 	srli	r20,r2,3
4080ccc8:	b02b883a 	mov	r21,r22
4080cccc:	0005883a 	mov	r2,zero
4080ccd0:	a468b03a 	or	r20,r20,r17
4080ccd4:	003eae06 	br	4080c790 <__alt_mem_onchip_flash_0_data+0xff7cc790>
4080ccd8:	1007883a 	mov	r3,r2
4080ccdc:	0023883a 	mov	r17,zero
4080cce0:	880a927a 	slli	r5,r17,9
4080cce4:	1805883a 	mov	r2,r3
4080cce8:	8822977a 	slli	r17,r17,29
4080ccec:	280ad33a 	srli	r5,r5,12
4080ccf0:	003ff406 	br	4080ccc4 <__alt_mem_onchip_flash_0_data+0xff7cccc4>
4080ccf4:	10c003cc 	andi	r3,r2,15
4080ccf8:	01000104 	movi	r4,4
4080ccfc:	193ff626 	beq	r3,r4,4080ccd8 <__alt_mem_onchip_flash_0_data+0xff7cccd8>
4080cd00:	0023883a 	mov	r17,zero
4080cd04:	003fd506 	br	4080cc5c <__alt_mem_onchip_flash_0_data+0xff7ccc5c>
4080cd08:	0005883a 	mov	r2,zero
4080cd0c:	003fe706 	br	4080ccac <__alt_mem_onchip_flash_0_data+0xff7cccac>
4080cd10:	00800434 	movhi	r2,16
4080cd14:	89400234 	orhi	r5,r17,8
4080cd18:	10bfffc4 	addi	r2,r2,-1
4080cd1c:	b02b883a 	mov	r21,r22
4080cd20:	288a703a 	and	r5,r5,r2
4080cd24:	4029883a 	mov	r20,r8
4080cd28:	003eff06 	br	4080c928 <__alt_mem_onchip_flash_0_data+0xff7cc928>

4080cd2c <__subdf3>:
4080cd2c:	02000434 	movhi	r8,16
4080cd30:	423fffc4 	addi	r8,r8,-1
4080cd34:	defffb04 	addi	sp,sp,-20
4080cd38:	2a14703a 	and	r10,r5,r8
4080cd3c:	3812d53a 	srli	r9,r7,20
4080cd40:	3a10703a 	and	r8,r7,r8
4080cd44:	2006d77a 	srli	r3,r4,29
4080cd48:	3004d77a 	srli	r2,r6,29
4080cd4c:	dc000015 	stw	r16,0(sp)
4080cd50:	501490fa 	slli	r10,r10,3
4080cd54:	2820d53a 	srli	r16,r5,20
4080cd58:	401090fa 	slli	r8,r8,3
4080cd5c:	dc800215 	stw	r18,8(sp)
4080cd60:	dc400115 	stw	r17,4(sp)
4080cd64:	dfc00415 	stw	ra,16(sp)
4080cd68:	202290fa 	slli	r17,r4,3
4080cd6c:	dcc00315 	stw	r19,12(sp)
4080cd70:	4a41ffcc 	andi	r9,r9,2047
4080cd74:	0101ffc4 	movi	r4,2047
4080cd78:	2824d7fa 	srli	r18,r5,31
4080cd7c:	8401ffcc 	andi	r16,r16,2047
4080cd80:	50c6b03a 	or	r3,r10,r3
4080cd84:	380ed7fa 	srli	r7,r7,31
4080cd88:	408ab03a 	or	r5,r8,r2
4080cd8c:	300c90fa 	slli	r6,r6,3
4080cd90:	49009626 	beq	r9,r4,4080cfec <__subdf3+0x2c0>
4080cd94:	39c0005c 	xori	r7,r7,1
4080cd98:	8245c83a 	sub	r2,r16,r9
4080cd9c:	3c807426 	beq	r7,r18,4080cf70 <__subdf3+0x244>
4080cda0:	0080af0e 	bge	zero,r2,4080d060 <__subdf3+0x334>
4080cda4:	48002a1e 	bne	r9,zero,4080ce50 <__subdf3+0x124>
4080cda8:	2988b03a 	or	r4,r5,r6
4080cdac:	20009a1e 	bne	r4,zero,4080d018 <__subdf3+0x2ec>
4080cdb0:	888001cc 	andi	r2,r17,7
4080cdb4:	10000726 	beq	r2,zero,4080cdd4 <__subdf3+0xa8>
4080cdb8:	888003cc 	andi	r2,r17,15
4080cdbc:	01000104 	movi	r4,4
4080cdc0:	11000426 	beq	r2,r4,4080cdd4 <__subdf3+0xa8>
4080cdc4:	890b883a 	add	r5,r17,r4
4080cdc8:	2c63803a 	cmpltu	r17,r5,r17
4080cdcc:	1c47883a 	add	r3,r3,r17
4080cdd0:	2823883a 	mov	r17,r5
4080cdd4:	1880202c 	andhi	r2,r3,128
4080cdd8:	10005926 	beq	r2,zero,4080cf40 <__subdf3+0x214>
4080cddc:	84000044 	addi	r16,r16,1
4080cde0:	0081ffc4 	movi	r2,2047
4080cde4:	8080be26 	beq	r16,r2,4080d0e0 <__subdf3+0x3b4>
4080cde8:	017fe034 	movhi	r5,65408
4080cdec:	297fffc4 	addi	r5,r5,-1
4080cdf0:	1946703a 	and	r3,r3,r5
4080cdf4:	1804977a 	slli	r2,r3,29
4080cdf8:	1806927a 	slli	r3,r3,9
4080cdfc:	8822d0fa 	srli	r17,r17,3
4080ce00:	8401ffcc 	andi	r16,r16,2047
4080ce04:	180ad33a 	srli	r5,r3,12
4080ce08:	9100004c 	andi	r4,r18,1
4080ce0c:	1444b03a 	or	r2,r2,r17
4080ce10:	80c1ffcc 	andi	r3,r16,2047
4080ce14:	1820953a 	slli	r16,r3,20
4080ce18:	20c03fcc 	andi	r3,r4,255
4080ce1c:	180897fa 	slli	r4,r3,31
4080ce20:	00c00434 	movhi	r3,16
4080ce24:	18ffffc4 	addi	r3,r3,-1
4080ce28:	28c6703a 	and	r3,r5,r3
4080ce2c:	1c06b03a 	or	r3,r3,r16
4080ce30:	1906b03a 	or	r3,r3,r4
4080ce34:	dfc00417 	ldw	ra,16(sp)
4080ce38:	dcc00317 	ldw	r19,12(sp)
4080ce3c:	dc800217 	ldw	r18,8(sp)
4080ce40:	dc400117 	ldw	r17,4(sp)
4080ce44:	dc000017 	ldw	r16,0(sp)
4080ce48:	dec00504 	addi	sp,sp,20
4080ce4c:	f800283a 	ret
4080ce50:	0101ffc4 	movi	r4,2047
4080ce54:	813fd626 	beq	r16,r4,4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080ce58:	29402034 	orhi	r5,r5,128
4080ce5c:	01000e04 	movi	r4,56
4080ce60:	2080a316 	blt	r4,r2,4080d0f0 <__subdf3+0x3c4>
4080ce64:	010007c4 	movi	r4,31
4080ce68:	2080c616 	blt	r4,r2,4080d184 <__subdf3+0x458>
4080ce6c:	01000804 	movi	r4,32
4080ce70:	2089c83a 	sub	r4,r4,r2
4080ce74:	2910983a 	sll	r8,r5,r4
4080ce78:	308ed83a 	srl	r7,r6,r2
4080ce7c:	3108983a 	sll	r4,r6,r4
4080ce80:	2884d83a 	srl	r2,r5,r2
4080ce84:	41ccb03a 	or	r6,r8,r7
4080ce88:	2008c03a 	cmpne	r4,r4,zero
4080ce8c:	310cb03a 	or	r6,r6,r4
4080ce90:	898dc83a 	sub	r6,r17,r6
4080ce94:	89a3803a 	cmpltu	r17,r17,r6
4080ce98:	1887c83a 	sub	r3,r3,r2
4080ce9c:	1c47c83a 	sub	r3,r3,r17
4080cea0:	3023883a 	mov	r17,r6
4080cea4:	1880202c 	andhi	r2,r3,128
4080cea8:	10002326 	beq	r2,zero,4080cf38 <__subdf3+0x20c>
4080ceac:	04c02034 	movhi	r19,128
4080ceb0:	9cffffc4 	addi	r19,r19,-1
4080ceb4:	1ce6703a 	and	r19,r3,r19
4080ceb8:	98007a26 	beq	r19,zero,4080d0a4 <__subdf3+0x378>
4080cebc:	9809883a 	mov	r4,r19
4080cec0:	0800f0c0 	call	40800f0c <__clzsi2>
4080cec4:	113ffe04 	addi	r4,r2,-8
4080cec8:	00c007c4 	movi	r3,31
4080cecc:	19007b16 	blt	r3,r4,4080d0bc <__subdf3+0x390>
4080ced0:	00800804 	movi	r2,32
4080ced4:	1105c83a 	sub	r2,r2,r4
4080ced8:	8884d83a 	srl	r2,r17,r2
4080cedc:	9906983a 	sll	r3,r19,r4
4080cee0:	8922983a 	sll	r17,r17,r4
4080cee4:	10c4b03a 	or	r2,r2,r3
4080cee8:	24007816 	blt	r4,r16,4080d0cc <__subdf3+0x3a0>
4080ceec:	2421c83a 	sub	r16,r4,r16
4080cef0:	80c00044 	addi	r3,r16,1
4080cef4:	010007c4 	movi	r4,31
4080cef8:	20c09516 	blt	r4,r3,4080d150 <__subdf3+0x424>
4080cefc:	01400804 	movi	r5,32
4080cf00:	28cbc83a 	sub	r5,r5,r3
4080cf04:	88c8d83a 	srl	r4,r17,r3
4080cf08:	8962983a 	sll	r17,r17,r5
4080cf0c:	114a983a 	sll	r5,r2,r5
4080cf10:	10c6d83a 	srl	r3,r2,r3
4080cf14:	8804c03a 	cmpne	r2,r17,zero
4080cf18:	290ab03a 	or	r5,r5,r4
4080cf1c:	28a2b03a 	or	r17,r5,r2
4080cf20:	0021883a 	mov	r16,zero
4080cf24:	003fa206 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080cf28:	2090b03a 	or	r8,r4,r2
4080cf2c:	40018e26 	beq	r8,zero,4080d568 <__subdf3+0x83c>
4080cf30:	1007883a 	mov	r3,r2
4080cf34:	2023883a 	mov	r17,r4
4080cf38:	888001cc 	andi	r2,r17,7
4080cf3c:	103f9e1e 	bne	r2,zero,4080cdb8 <__alt_mem_onchip_flash_0_data+0xff7ccdb8>
4080cf40:	1804977a 	slli	r2,r3,29
4080cf44:	8822d0fa 	srli	r17,r17,3
4080cf48:	1810d0fa 	srli	r8,r3,3
4080cf4c:	9100004c 	andi	r4,r18,1
4080cf50:	1444b03a 	or	r2,r2,r17
4080cf54:	00c1ffc4 	movi	r3,2047
4080cf58:	80c02826 	beq	r16,r3,4080cffc <__subdf3+0x2d0>
4080cf5c:	01400434 	movhi	r5,16
4080cf60:	297fffc4 	addi	r5,r5,-1
4080cf64:	80e0703a 	and	r16,r16,r3
4080cf68:	414a703a 	and	r5,r8,r5
4080cf6c:	003fa806 	br	4080ce10 <__alt_mem_onchip_flash_0_data+0xff7cce10>
4080cf70:	0080630e 	bge	zero,r2,4080d100 <__subdf3+0x3d4>
4080cf74:	48003026 	beq	r9,zero,4080d038 <__subdf3+0x30c>
4080cf78:	0101ffc4 	movi	r4,2047
4080cf7c:	813f8c26 	beq	r16,r4,4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080cf80:	29402034 	orhi	r5,r5,128
4080cf84:	01000e04 	movi	r4,56
4080cf88:	2080a90e 	bge	r4,r2,4080d230 <__subdf3+0x504>
4080cf8c:	298cb03a 	or	r6,r5,r6
4080cf90:	3012c03a 	cmpne	r9,r6,zero
4080cf94:	0005883a 	mov	r2,zero
4080cf98:	4c53883a 	add	r9,r9,r17
4080cf9c:	4c63803a 	cmpltu	r17,r9,r17
4080cfa0:	10c7883a 	add	r3,r2,r3
4080cfa4:	88c7883a 	add	r3,r17,r3
4080cfa8:	4823883a 	mov	r17,r9
4080cfac:	1880202c 	andhi	r2,r3,128
4080cfb0:	1000d026 	beq	r2,zero,4080d2f4 <__subdf3+0x5c8>
4080cfb4:	84000044 	addi	r16,r16,1
4080cfb8:	0081ffc4 	movi	r2,2047
4080cfbc:	8080fe26 	beq	r16,r2,4080d3b8 <__subdf3+0x68c>
4080cfc0:	00bfe034 	movhi	r2,65408
4080cfc4:	10bfffc4 	addi	r2,r2,-1
4080cfc8:	1886703a 	and	r3,r3,r2
4080cfcc:	880ad07a 	srli	r5,r17,1
4080cfd0:	180497fa 	slli	r2,r3,31
4080cfd4:	8900004c 	andi	r4,r17,1
4080cfd8:	2922b03a 	or	r17,r5,r4
4080cfdc:	1806d07a 	srli	r3,r3,1
4080cfe0:	1462b03a 	or	r17,r2,r17
4080cfe4:	3825883a 	mov	r18,r7
4080cfe8:	003f7106 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080cfec:	2984b03a 	or	r2,r5,r6
4080cff0:	103f6826 	beq	r2,zero,4080cd94 <__alt_mem_onchip_flash_0_data+0xff7ccd94>
4080cff4:	39c03fcc 	andi	r7,r7,255
4080cff8:	003f6706 	br	4080cd98 <__alt_mem_onchip_flash_0_data+0xff7ccd98>
4080cffc:	4086b03a 	or	r3,r8,r2
4080d000:	18015226 	beq	r3,zero,4080d54c <__subdf3+0x820>
4080d004:	00c00434 	movhi	r3,16
4080d008:	41400234 	orhi	r5,r8,8
4080d00c:	18ffffc4 	addi	r3,r3,-1
4080d010:	28ca703a 	and	r5,r5,r3
4080d014:	003f7e06 	br	4080ce10 <__alt_mem_onchip_flash_0_data+0xff7cce10>
4080d018:	10bfffc4 	addi	r2,r2,-1
4080d01c:	1000491e 	bne	r2,zero,4080d144 <__subdf3+0x418>
4080d020:	898fc83a 	sub	r7,r17,r6
4080d024:	89e3803a 	cmpltu	r17,r17,r7
4080d028:	1947c83a 	sub	r3,r3,r5
4080d02c:	1c47c83a 	sub	r3,r3,r17
4080d030:	3823883a 	mov	r17,r7
4080d034:	003f9b06 	br	4080cea4 <__alt_mem_onchip_flash_0_data+0xff7ccea4>
4080d038:	2988b03a 	or	r4,r5,r6
4080d03c:	203f5c26 	beq	r4,zero,4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d040:	10bfffc4 	addi	r2,r2,-1
4080d044:	1000931e 	bne	r2,zero,4080d294 <__subdf3+0x568>
4080d048:	898d883a 	add	r6,r17,r6
4080d04c:	3463803a 	cmpltu	r17,r6,r17
4080d050:	1947883a 	add	r3,r3,r5
4080d054:	88c7883a 	add	r3,r17,r3
4080d058:	3023883a 	mov	r17,r6
4080d05c:	003fd306 	br	4080cfac <__alt_mem_onchip_flash_0_data+0xff7ccfac>
4080d060:	1000541e 	bne	r2,zero,4080d1b4 <__subdf3+0x488>
4080d064:	80800044 	addi	r2,r16,1
4080d068:	1081ffcc 	andi	r2,r2,2047
4080d06c:	01000044 	movi	r4,1
4080d070:	2080a20e 	bge	r4,r2,4080d2fc <__subdf3+0x5d0>
4080d074:	8989c83a 	sub	r4,r17,r6
4080d078:	8905803a 	cmpltu	r2,r17,r4
4080d07c:	1967c83a 	sub	r19,r3,r5
4080d080:	98a7c83a 	sub	r19,r19,r2
4080d084:	9880202c 	andhi	r2,r19,128
4080d088:	10006326 	beq	r2,zero,4080d218 <__subdf3+0x4ec>
4080d08c:	3463c83a 	sub	r17,r6,r17
4080d090:	28c7c83a 	sub	r3,r5,r3
4080d094:	344d803a 	cmpltu	r6,r6,r17
4080d098:	19a7c83a 	sub	r19,r3,r6
4080d09c:	3825883a 	mov	r18,r7
4080d0a0:	983f861e 	bne	r19,zero,4080cebc <__alt_mem_onchip_flash_0_data+0xff7ccebc>
4080d0a4:	8809883a 	mov	r4,r17
4080d0a8:	0800f0c0 	call	40800f0c <__clzsi2>
4080d0ac:	10800804 	addi	r2,r2,32
4080d0b0:	113ffe04 	addi	r4,r2,-8
4080d0b4:	00c007c4 	movi	r3,31
4080d0b8:	193f850e 	bge	r3,r4,4080ced0 <__alt_mem_onchip_flash_0_data+0xff7cced0>
4080d0bc:	10bff604 	addi	r2,r2,-40
4080d0c0:	8884983a 	sll	r2,r17,r2
4080d0c4:	0023883a 	mov	r17,zero
4080d0c8:	243f880e 	bge	r4,r16,4080ceec <__alt_mem_onchip_flash_0_data+0xff7cceec>
4080d0cc:	00ffe034 	movhi	r3,65408
4080d0d0:	18ffffc4 	addi	r3,r3,-1
4080d0d4:	8121c83a 	sub	r16,r16,r4
4080d0d8:	10c6703a 	and	r3,r2,r3
4080d0dc:	003f3406 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d0e0:	9100004c 	andi	r4,r18,1
4080d0e4:	000b883a 	mov	r5,zero
4080d0e8:	0005883a 	mov	r2,zero
4080d0ec:	003f4806 	br	4080ce10 <__alt_mem_onchip_flash_0_data+0xff7cce10>
4080d0f0:	298cb03a 	or	r6,r5,r6
4080d0f4:	300cc03a 	cmpne	r6,r6,zero
4080d0f8:	0005883a 	mov	r2,zero
4080d0fc:	003f6406 	br	4080ce90 <__alt_mem_onchip_flash_0_data+0xff7cce90>
4080d100:	10009a1e 	bne	r2,zero,4080d36c <__subdf3+0x640>
4080d104:	82400044 	addi	r9,r16,1
4080d108:	4881ffcc 	andi	r2,r9,2047
4080d10c:	02800044 	movi	r10,1
4080d110:	5080670e 	bge	r10,r2,4080d2b0 <__subdf3+0x584>
4080d114:	0081ffc4 	movi	r2,2047
4080d118:	4880af26 	beq	r9,r2,4080d3d8 <__subdf3+0x6ac>
4080d11c:	898d883a 	add	r6,r17,r6
4080d120:	1945883a 	add	r2,r3,r5
4080d124:	3447803a 	cmpltu	r3,r6,r17
4080d128:	1887883a 	add	r3,r3,r2
4080d12c:	182297fa 	slli	r17,r3,31
4080d130:	300cd07a 	srli	r6,r6,1
4080d134:	1806d07a 	srli	r3,r3,1
4080d138:	4821883a 	mov	r16,r9
4080d13c:	89a2b03a 	or	r17,r17,r6
4080d140:	003f1b06 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d144:	0101ffc4 	movi	r4,2047
4080d148:	813f441e 	bne	r16,r4,4080ce5c <__alt_mem_onchip_flash_0_data+0xff7cce5c>
4080d14c:	003f1806 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d150:	843ff844 	addi	r16,r16,-31
4080d154:	01400804 	movi	r5,32
4080d158:	1408d83a 	srl	r4,r2,r16
4080d15c:	19405026 	beq	r3,r5,4080d2a0 <__subdf3+0x574>
4080d160:	01401004 	movi	r5,64
4080d164:	28c7c83a 	sub	r3,r5,r3
4080d168:	10c4983a 	sll	r2,r2,r3
4080d16c:	88a2b03a 	or	r17,r17,r2
4080d170:	8822c03a 	cmpne	r17,r17,zero
4080d174:	2462b03a 	or	r17,r4,r17
4080d178:	0007883a 	mov	r3,zero
4080d17c:	0021883a 	mov	r16,zero
4080d180:	003f6d06 	br	4080cf38 <__alt_mem_onchip_flash_0_data+0xff7ccf38>
4080d184:	11fff804 	addi	r7,r2,-32
4080d188:	01000804 	movi	r4,32
4080d18c:	29ced83a 	srl	r7,r5,r7
4080d190:	11004526 	beq	r2,r4,4080d2a8 <__subdf3+0x57c>
4080d194:	01001004 	movi	r4,64
4080d198:	2089c83a 	sub	r4,r4,r2
4080d19c:	2904983a 	sll	r2,r5,r4
4080d1a0:	118cb03a 	or	r6,r2,r6
4080d1a4:	300cc03a 	cmpne	r6,r6,zero
4080d1a8:	398cb03a 	or	r6,r7,r6
4080d1ac:	0005883a 	mov	r2,zero
4080d1b0:	003f3706 	br	4080ce90 <__alt_mem_onchip_flash_0_data+0xff7cce90>
4080d1b4:	80002a26 	beq	r16,zero,4080d260 <__subdf3+0x534>
4080d1b8:	0101ffc4 	movi	r4,2047
4080d1bc:	49006626 	beq	r9,r4,4080d358 <__subdf3+0x62c>
4080d1c0:	0085c83a 	sub	r2,zero,r2
4080d1c4:	18c02034 	orhi	r3,r3,128
4080d1c8:	01000e04 	movi	r4,56
4080d1cc:	20807e16 	blt	r4,r2,4080d3c8 <__subdf3+0x69c>
4080d1d0:	010007c4 	movi	r4,31
4080d1d4:	2080e716 	blt	r4,r2,4080d574 <__subdf3+0x848>
4080d1d8:	01000804 	movi	r4,32
4080d1dc:	2089c83a 	sub	r4,r4,r2
4080d1e0:	1914983a 	sll	r10,r3,r4
4080d1e4:	8890d83a 	srl	r8,r17,r2
4080d1e8:	8908983a 	sll	r4,r17,r4
4080d1ec:	1884d83a 	srl	r2,r3,r2
4080d1f0:	5222b03a 	or	r17,r10,r8
4080d1f4:	2006c03a 	cmpne	r3,r4,zero
4080d1f8:	88e2b03a 	or	r17,r17,r3
4080d1fc:	3463c83a 	sub	r17,r6,r17
4080d200:	2885c83a 	sub	r2,r5,r2
4080d204:	344d803a 	cmpltu	r6,r6,r17
4080d208:	1187c83a 	sub	r3,r2,r6
4080d20c:	4821883a 	mov	r16,r9
4080d210:	3825883a 	mov	r18,r7
4080d214:	003f2306 	br	4080cea4 <__alt_mem_onchip_flash_0_data+0xff7ccea4>
4080d218:	24d0b03a 	or	r8,r4,r19
4080d21c:	40001b1e 	bne	r8,zero,4080d28c <__subdf3+0x560>
4080d220:	0005883a 	mov	r2,zero
4080d224:	0009883a 	mov	r4,zero
4080d228:	0021883a 	mov	r16,zero
4080d22c:	003f4906 	br	4080cf54 <__alt_mem_onchip_flash_0_data+0xff7ccf54>
4080d230:	010007c4 	movi	r4,31
4080d234:	20803a16 	blt	r4,r2,4080d320 <__subdf3+0x5f4>
4080d238:	01000804 	movi	r4,32
4080d23c:	2089c83a 	sub	r4,r4,r2
4080d240:	2912983a 	sll	r9,r5,r4
4080d244:	3090d83a 	srl	r8,r6,r2
4080d248:	3108983a 	sll	r4,r6,r4
4080d24c:	2884d83a 	srl	r2,r5,r2
4080d250:	4a12b03a 	or	r9,r9,r8
4080d254:	2008c03a 	cmpne	r4,r4,zero
4080d258:	4912b03a 	or	r9,r9,r4
4080d25c:	003f4e06 	br	4080cf98 <__alt_mem_onchip_flash_0_data+0xff7ccf98>
4080d260:	1c48b03a 	or	r4,r3,r17
4080d264:	20003c26 	beq	r4,zero,4080d358 <__subdf3+0x62c>
4080d268:	0084303a 	nor	r2,zero,r2
4080d26c:	1000381e 	bne	r2,zero,4080d350 <__subdf3+0x624>
4080d270:	3463c83a 	sub	r17,r6,r17
4080d274:	28c5c83a 	sub	r2,r5,r3
4080d278:	344d803a 	cmpltu	r6,r6,r17
4080d27c:	1187c83a 	sub	r3,r2,r6
4080d280:	4821883a 	mov	r16,r9
4080d284:	3825883a 	mov	r18,r7
4080d288:	003f0606 	br	4080cea4 <__alt_mem_onchip_flash_0_data+0xff7ccea4>
4080d28c:	2023883a 	mov	r17,r4
4080d290:	003f0906 	br	4080ceb8 <__alt_mem_onchip_flash_0_data+0xff7cceb8>
4080d294:	0101ffc4 	movi	r4,2047
4080d298:	813f3a1e 	bne	r16,r4,4080cf84 <__alt_mem_onchip_flash_0_data+0xff7ccf84>
4080d29c:	003ec406 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d2a0:	0005883a 	mov	r2,zero
4080d2a4:	003fb106 	br	4080d16c <__alt_mem_onchip_flash_0_data+0xff7cd16c>
4080d2a8:	0005883a 	mov	r2,zero
4080d2ac:	003fbc06 	br	4080d1a0 <__alt_mem_onchip_flash_0_data+0xff7cd1a0>
4080d2b0:	1c44b03a 	or	r2,r3,r17
4080d2b4:	80008e1e 	bne	r16,zero,4080d4f0 <__subdf3+0x7c4>
4080d2b8:	1000c826 	beq	r2,zero,4080d5dc <__subdf3+0x8b0>
4080d2bc:	2984b03a 	or	r2,r5,r6
4080d2c0:	103ebb26 	beq	r2,zero,4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d2c4:	8989883a 	add	r4,r17,r6
4080d2c8:	1945883a 	add	r2,r3,r5
4080d2cc:	2447803a 	cmpltu	r3,r4,r17
4080d2d0:	1887883a 	add	r3,r3,r2
4080d2d4:	1880202c 	andhi	r2,r3,128
4080d2d8:	2023883a 	mov	r17,r4
4080d2dc:	103f1626 	beq	r2,zero,4080cf38 <__alt_mem_onchip_flash_0_data+0xff7ccf38>
4080d2e0:	00bfe034 	movhi	r2,65408
4080d2e4:	10bfffc4 	addi	r2,r2,-1
4080d2e8:	5021883a 	mov	r16,r10
4080d2ec:	1886703a 	and	r3,r3,r2
4080d2f0:	003eaf06 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d2f4:	3825883a 	mov	r18,r7
4080d2f8:	003f0f06 	br	4080cf38 <__alt_mem_onchip_flash_0_data+0xff7ccf38>
4080d2fc:	1c44b03a 	or	r2,r3,r17
4080d300:	8000251e 	bne	r16,zero,4080d398 <__subdf3+0x66c>
4080d304:	1000661e 	bne	r2,zero,4080d4a0 <__subdf3+0x774>
4080d308:	2990b03a 	or	r8,r5,r6
4080d30c:	40009626 	beq	r8,zero,4080d568 <__subdf3+0x83c>
4080d310:	2807883a 	mov	r3,r5
4080d314:	3023883a 	mov	r17,r6
4080d318:	3825883a 	mov	r18,r7
4080d31c:	003ea406 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d320:	127ff804 	addi	r9,r2,-32
4080d324:	01000804 	movi	r4,32
4080d328:	2a52d83a 	srl	r9,r5,r9
4080d32c:	11008c26 	beq	r2,r4,4080d560 <__subdf3+0x834>
4080d330:	01001004 	movi	r4,64
4080d334:	2085c83a 	sub	r2,r4,r2
4080d338:	2884983a 	sll	r2,r5,r2
4080d33c:	118cb03a 	or	r6,r2,r6
4080d340:	300cc03a 	cmpne	r6,r6,zero
4080d344:	4992b03a 	or	r9,r9,r6
4080d348:	0005883a 	mov	r2,zero
4080d34c:	003f1206 	br	4080cf98 <__alt_mem_onchip_flash_0_data+0xff7ccf98>
4080d350:	0101ffc4 	movi	r4,2047
4080d354:	493f9c1e 	bne	r9,r4,4080d1c8 <__alt_mem_onchip_flash_0_data+0xff7cd1c8>
4080d358:	2807883a 	mov	r3,r5
4080d35c:	3023883a 	mov	r17,r6
4080d360:	4821883a 	mov	r16,r9
4080d364:	3825883a 	mov	r18,r7
4080d368:	003e9106 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d36c:	80001f1e 	bne	r16,zero,4080d3ec <__subdf3+0x6c0>
4080d370:	1c48b03a 	or	r4,r3,r17
4080d374:	20005a26 	beq	r4,zero,4080d4e0 <__subdf3+0x7b4>
4080d378:	0084303a 	nor	r2,zero,r2
4080d37c:	1000561e 	bne	r2,zero,4080d4d8 <__subdf3+0x7ac>
4080d380:	89a3883a 	add	r17,r17,r6
4080d384:	1945883a 	add	r2,r3,r5
4080d388:	898d803a 	cmpltu	r6,r17,r6
4080d38c:	3087883a 	add	r3,r6,r2
4080d390:	4821883a 	mov	r16,r9
4080d394:	003f0506 	br	4080cfac <__alt_mem_onchip_flash_0_data+0xff7ccfac>
4080d398:	10002b1e 	bne	r2,zero,4080d448 <__subdf3+0x71c>
4080d39c:	2984b03a 	or	r2,r5,r6
4080d3a0:	10008026 	beq	r2,zero,4080d5a4 <__subdf3+0x878>
4080d3a4:	2807883a 	mov	r3,r5
4080d3a8:	3023883a 	mov	r17,r6
4080d3ac:	3825883a 	mov	r18,r7
4080d3b0:	0401ffc4 	movi	r16,2047
4080d3b4:	003e7e06 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d3b8:	3809883a 	mov	r4,r7
4080d3bc:	0011883a 	mov	r8,zero
4080d3c0:	0005883a 	mov	r2,zero
4080d3c4:	003ee306 	br	4080cf54 <__alt_mem_onchip_flash_0_data+0xff7ccf54>
4080d3c8:	1c62b03a 	or	r17,r3,r17
4080d3cc:	8822c03a 	cmpne	r17,r17,zero
4080d3d0:	0005883a 	mov	r2,zero
4080d3d4:	003f8906 	br	4080d1fc <__alt_mem_onchip_flash_0_data+0xff7cd1fc>
4080d3d8:	3809883a 	mov	r4,r7
4080d3dc:	4821883a 	mov	r16,r9
4080d3e0:	0011883a 	mov	r8,zero
4080d3e4:	0005883a 	mov	r2,zero
4080d3e8:	003eda06 	br	4080cf54 <__alt_mem_onchip_flash_0_data+0xff7ccf54>
4080d3ec:	0101ffc4 	movi	r4,2047
4080d3f0:	49003b26 	beq	r9,r4,4080d4e0 <__subdf3+0x7b4>
4080d3f4:	0085c83a 	sub	r2,zero,r2
4080d3f8:	18c02034 	orhi	r3,r3,128
4080d3fc:	01000e04 	movi	r4,56
4080d400:	20806e16 	blt	r4,r2,4080d5bc <__subdf3+0x890>
4080d404:	010007c4 	movi	r4,31
4080d408:	20807716 	blt	r4,r2,4080d5e8 <__subdf3+0x8bc>
4080d40c:	01000804 	movi	r4,32
4080d410:	2089c83a 	sub	r4,r4,r2
4080d414:	1914983a 	sll	r10,r3,r4
4080d418:	8890d83a 	srl	r8,r17,r2
4080d41c:	8908983a 	sll	r4,r17,r4
4080d420:	1884d83a 	srl	r2,r3,r2
4080d424:	5222b03a 	or	r17,r10,r8
4080d428:	2006c03a 	cmpne	r3,r4,zero
4080d42c:	88e2b03a 	or	r17,r17,r3
4080d430:	89a3883a 	add	r17,r17,r6
4080d434:	1145883a 	add	r2,r2,r5
4080d438:	898d803a 	cmpltu	r6,r17,r6
4080d43c:	3087883a 	add	r3,r6,r2
4080d440:	4821883a 	mov	r16,r9
4080d444:	003ed906 	br	4080cfac <__alt_mem_onchip_flash_0_data+0xff7ccfac>
4080d448:	2984b03a 	or	r2,r5,r6
4080d44c:	10004226 	beq	r2,zero,4080d558 <__subdf3+0x82c>
4080d450:	1808d0fa 	srli	r4,r3,3
4080d454:	8822d0fa 	srli	r17,r17,3
4080d458:	1806977a 	slli	r3,r3,29
4080d45c:	2080022c 	andhi	r2,r4,8
4080d460:	1c62b03a 	or	r17,r3,r17
4080d464:	10000826 	beq	r2,zero,4080d488 <__subdf3+0x75c>
4080d468:	2812d0fa 	srli	r9,r5,3
4080d46c:	4880022c 	andhi	r2,r9,8
4080d470:	1000051e 	bne	r2,zero,4080d488 <__subdf3+0x75c>
4080d474:	300cd0fa 	srli	r6,r6,3
4080d478:	2804977a 	slli	r2,r5,29
4080d47c:	4809883a 	mov	r4,r9
4080d480:	3825883a 	mov	r18,r7
4080d484:	11a2b03a 	or	r17,r2,r6
4080d488:	8806d77a 	srli	r3,r17,29
4080d48c:	200890fa 	slli	r4,r4,3
4080d490:	882290fa 	slli	r17,r17,3
4080d494:	0401ffc4 	movi	r16,2047
4080d498:	1906b03a 	or	r3,r3,r4
4080d49c:	003e4406 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d4a0:	2984b03a 	or	r2,r5,r6
4080d4a4:	103e4226 	beq	r2,zero,4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d4a8:	8989c83a 	sub	r4,r17,r6
4080d4ac:	8911803a 	cmpltu	r8,r17,r4
4080d4b0:	1945c83a 	sub	r2,r3,r5
4080d4b4:	1205c83a 	sub	r2,r2,r8
4080d4b8:	1200202c 	andhi	r8,r2,128
4080d4bc:	403e9a26 	beq	r8,zero,4080cf28 <__alt_mem_onchip_flash_0_data+0xff7ccf28>
4080d4c0:	3463c83a 	sub	r17,r6,r17
4080d4c4:	28c5c83a 	sub	r2,r5,r3
4080d4c8:	344d803a 	cmpltu	r6,r6,r17
4080d4cc:	1187c83a 	sub	r3,r2,r6
4080d4d0:	3825883a 	mov	r18,r7
4080d4d4:	003e3606 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d4d8:	0101ffc4 	movi	r4,2047
4080d4dc:	493fc71e 	bne	r9,r4,4080d3fc <__alt_mem_onchip_flash_0_data+0xff7cd3fc>
4080d4e0:	2807883a 	mov	r3,r5
4080d4e4:	3023883a 	mov	r17,r6
4080d4e8:	4821883a 	mov	r16,r9
4080d4ec:	003e3006 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d4f0:	10003626 	beq	r2,zero,4080d5cc <__subdf3+0x8a0>
4080d4f4:	2984b03a 	or	r2,r5,r6
4080d4f8:	10001726 	beq	r2,zero,4080d558 <__subdf3+0x82c>
4080d4fc:	1808d0fa 	srli	r4,r3,3
4080d500:	8822d0fa 	srli	r17,r17,3
4080d504:	1806977a 	slli	r3,r3,29
4080d508:	2080022c 	andhi	r2,r4,8
4080d50c:	1c62b03a 	or	r17,r3,r17
4080d510:	10000726 	beq	r2,zero,4080d530 <__subdf3+0x804>
4080d514:	2812d0fa 	srli	r9,r5,3
4080d518:	4880022c 	andhi	r2,r9,8
4080d51c:	1000041e 	bne	r2,zero,4080d530 <__subdf3+0x804>
4080d520:	300cd0fa 	srli	r6,r6,3
4080d524:	2804977a 	slli	r2,r5,29
4080d528:	4809883a 	mov	r4,r9
4080d52c:	11a2b03a 	or	r17,r2,r6
4080d530:	8806d77a 	srli	r3,r17,29
4080d534:	200890fa 	slli	r4,r4,3
4080d538:	882290fa 	slli	r17,r17,3
4080d53c:	3825883a 	mov	r18,r7
4080d540:	1906b03a 	or	r3,r3,r4
4080d544:	0401ffc4 	movi	r16,2047
4080d548:	003e1906 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d54c:	000b883a 	mov	r5,zero
4080d550:	0005883a 	mov	r2,zero
4080d554:	003e2e06 	br	4080ce10 <__alt_mem_onchip_flash_0_data+0xff7cce10>
4080d558:	0401ffc4 	movi	r16,2047
4080d55c:	003e1406 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d560:	0005883a 	mov	r2,zero
4080d564:	003f7506 	br	4080d33c <__alt_mem_onchip_flash_0_data+0xff7cd33c>
4080d568:	0005883a 	mov	r2,zero
4080d56c:	0009883a 	mov	r4,zero
4080d570:	003e7806 	br	4080cf54 <__alt_mem_onchip_flash_0_data+0xff7ccf54>
4080d574:	123ff804 	addi	r8,r2,-32
4080d578:	01000804 	movi	r4,32
4080d57c:	1a10d83a 	srl	r8,r3,r8
4080d580:	11002526 	beq	r2,r4,4080d618 <__subdf3+0x8ec>
4080d584:	01001004 	movi	r4,64
4080d588:	2085c83a 	sub	r2,r4,r2
4080d58c:	1884983a 	sll	r2,r3,r2
4080d590:	1444b03a 	or	r2,r2,r17
4080d594:	1004c03a 	cmpne	r2,r2,zero
4080d598:	40a2b03a 	or	r17,r8,r2
4080d59c:	0005883a 	mov	r2,zero
4080d5a0:	003f1606 	br	4080d1fc <__alt_mem_onchip_flash_0_data+0xff7cd1fc>
4080d5a4:	02000434 	movhi	r8,16
4080d5a8:	0009883a 	mov	r4,zero
4080d5ac:	423fffc4 	addi	r8,r8,-1
4080d5b0:	00bfffc4 	movi	r2,-1
4080d5b4:	0401ffc4 	movi	r16,2047
4080d5b8:	003e6606 	br	4080cf54 <__alt_mem_onchip_flash_0_data+0xff7ccf54>
4080d5bc:	1c62b03a 	or	r17,r3,r17
4080d5c0:	8822c03a 	cmpne	r17,r17,zero
4080d5c4:	0005883a 	mov	r2,zero
4080d5c8:	003f9906 	br	4080d430 <__alt_mem_onchip_flash_0_data+0xff7cd430>
4080d5cc:	2807883a 	mov	r3,r5
4080d5d0:	3023883a 	mov	r17,r6
4080d5d4:	0401ffc4 	movi	r16,2047
4080d5d8:	003df506 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d5dc:	2807883a 	mov	r3,r5
4080d5e0:	3023883a 	mov	r17,r6
4080d5e4:	003df206 	br	4080cdb0 <__alt_mem_onchip_flash_0_data+0xff7ccdb0>
4080d5e8:	123ff804 	addi	r8,r2,-32
4080d5ec:	01000804 	movi	r4,32
4080d5f0:	1a10d83a 	srl	r8,r3,r8
4080d5f4:	11000a26 	beq	r2,r4,4080d620 <__subdf3+0x8f4>
4080d5f8:	01001004 	movi	r4,64
4080d5fc:	2085c83a 	sub	r2,r4,r2
4080d600:	1884983a 	sll	r2,r3,r2
4080d604:	1444b03a 	or	r2,r2,r17
4080d608:	1004c03a 	cmpne	r2,r2,zero
4080d60c:	40a2b03a 	or	r17,r8,r2
4080d610:	0005883a 	mov	r2,zero
4080d614:	003f8606 	br	4080d430 <__alt_mem_onchip_flash_0_data+0xff7cd430>
4080d618:	0005883a 	mov	r2,zero
4080d61c:	003fdc06 	br	4080d590 <__alt_mem_onchip_flash_0_data+0xff7cd590>
4080d620:	0005883a 	mov	r2,zero
4080d624:	003ff706 	br	4080d604 <__alt_mem_onchip_flash_0_data+0xff7cd604>

4080d628 <__fixdfsi>:
4080d628:	280cd53a 	srli	r6,r5,20
4080d62c:	00c00434 	movhi	r3,16
4080d630:	18ffffc4 	addi	r3,r3,-1
4080d634:	3181ffcc 	andi	r6,r6,2047
4080d638:	01c0ff84 	movi	r7,1022
4080d63c:	28c6703a 	and	r3,r5,r3
4080d640:	280ad7fa 	srli	r5,r5,31
4080d644:	3980120e 	bge	r7,r6,4080d690 <__fixdfsi+0x68>
4080d648:	00810744 	movi	r2,1053
4080d64c:	11800c16 	blt	r2,r6,4080d680 <__fixdfsi+0x58>
4080d650:	00810cc4 	movi	r2,1075
4080d654:	1185c83a 	sub	r2,r2,r6
4080d658:	01c007c4 	movi	r7,31
4080d65c:	18c00434 	orhi	r3,r3,16
4080d660:	38800d16 	blt	r7,r2,4080d698 <__fixdfsi+0x70>
4080d664:	31befb44 	addi	r6,r6,-1043
4080d668:	2084d83a 	srl	r2,r4,r2
4080d66c:	1986983a 	sll	r3,r3,r6
4080d670:	1884b03a 	or	r2,r3,r2
4080d674:	28000726 	beq	r5,zero,4080d694 <__fixdfsi+0x6c>
4080d678:	0085c83a 	sub	r2,zero,r2
4080d67c:	f800283a 	ret
4080d680:	00a00034 	movhi	r2,32768
4080d684:	10bfffc4 	addi	r2,r2,-1
4080d688:	2885883a 	add	r2,r5,r2
4080d68c:	f800283a 	ret
4080d690:	0005883a 	mov	r2,zero
4080d694:	f800283a 	ret
4080d698:	008104c4 	movi	r2,1043
4080d69c:	1185c83a 	sub	r2,r2,r6
4080d6a0:	1884d83a 	srl	r2,r3,r2
4080d6a4:	003ff306 	br	4080d674 <__alt_mem_onchip_flash_0_data+0xff7cd674>

4080d6a8 <__floatsidf>:
4080d6a8:	defffd04 	addi	sp,sp,-12
4080d6ac:	dfc00215 	stw	ra,8(sp)
4080d6b0:	dc400115 	stw	r17,4(sp)
4080d6b4:	dc000015 	stw	r16,0(sp)
4080d6b8:	20002b26 	beq	r4,zero,4080d768 <__floatsidf+0xc0>
4080d6bc:	2023883a 	mov	r17,r4
4080d6c0:	2020d7fa 	srli	r16,r4,31
4080d6c4:	20002d16 	blt	r4,zero,4080d77c <__floatsidf+0xd4>
4080d6c8:	8809883a 	mov	r4,r17
4080d6cc:	0800f0c0 	call	40800f0c <__clzsi2>
4080d6d0:	01410784 	movi	r5,1054
4080d6d4:	288bc83a 	sub	r5,r5,r2
4080d6d8:	01010cc4 	movi	r4,1075
4080d6dc:	2149c83a 	sub	r4,r4,r5
4080d6e0:	00c007c4 	movi	r3,31
4080d6e4:	1900160e 	bge	r3,r4,4080d740 <__floatsidf+0x98>
4080d6e8:	00c104c4 	movi	r3,1043
4080d6ec:	1947c83a 	sub	r3,r3,r5
4080d6f0:	88c6983a 	sll	r3,r17,r3
4080d6f4:	00800434 	movhi	r2,16
4080d6f8:	10bfffc4 	addi	r2,r2,-1
4080d6fc:	1886703a 	and	r3,r3,r2
4080d700:	2941ffcc 	andi	r5,r5,2047
4080d704:	800d883a 	mov	r6,r16
4080d708:	0005883a 	mov	r2,zero
4080d70c:	280a953a 	slli	r5,r5,20
4080d710:	31803fcc 	andi	r6,r6,255
4080d714:	01000434 	movhi	r4,16
4080d718:	300c97fa 	slli	r6,r6,31
4080d71c:	213fffc4 	addi	r4,r4,-1
4080d720:	1906703a 	and	r3,r3,r4
4080d724:	1946b03a 	or	r3,r3,r5
4080d728:	1986b03a 	or	r3,r3,r6
4080d72c:	dfc00217 	ldw	ra,8(sp)
4080d730:	dc400117 	ldw	r17,4(sp)
4080d734:	dc000017 	ldw	r16,0(sp)
4080d738:	dec00304 	addi	sp,sp,12
4080d73c:	f800283a 	ret
4080d740:	00c002c4 	movi	r3,11
4080d744:	1887c83a 	sub	r3,r3,r2
4080d748:	88c6d83a 	srl	r3,r17,r3
4080d74c:	8904983a 	sll	r2,r17,r4
4080d750:	01000434 	movhi	r4,16
4080d754:	213fffc4 	addi	r4,r4,-1
4080d758:	2941ffcc 	andi	r5,r5,2047
4080d75c:	1906703a 	and	r3,r3,r4
4080d760:	800d883a 	mov	r6,r16
4080d764:	003fe906 	br	4080d70c <__alt_mem_onchip_flash_0_data+0xff7cd70c>
4080d768:	000d883a 	mov	r6,zero
4080d76c:	000b883a 	mov	r5,zero
4080d770:	0007883a 	mov	r3,zero
4080d774:	0005883a 	mov	r2,zero
4080d778:	003fe406 	br	4080d70c <__alt_mem_onchip_flash_0_data+0xff7cd70c>
4080d77c:	0123c83a 	sub	r17,zero,r4
4080d780:	003fd106 	br	4080d6c8 <__alt_mem_onchip_flash_0_data+0xff7cd6c8>

4080d784 <__floatunsidf>:
4080d784:	defffe04 	addi	sp,sp,-8
4080d788:	dc000015 	stw	r16,0(sp)
4080d78c:	dfc00115 	stw	ra,4(sp)
4080d790:	2021883a 	mov	r16,r4
4080d794:	20002226 	beq	r4,zero,4080d820 <__floatunsidf+0x9c>
4080d798:	0800f0c0 	call	40800f0c <__clzsi2>
4080d79c:	01010784 	movi	r4,1054
4080d7a0:	2089c83a 	sub	r4,r4,r2
4080d7a4:	01810cc4 	movi	r6,1075
4080d7a8:	310dc83a 	sub	r6,r6,r4
4080d7ac:	00c007c4 	movi	r3,31
4080d7b0:	1980120e 	bge	r3,r6,4080d7fc <__floatunsidf+0x78>
4080d7b4:	00c104c4 	movi	r3,1043
4080d7b8:	1907c83a 	sub	r3,r3,r4
4080d7bc:	80ca983a 	sll	r5,r16,r3
4080d7c0:	00800434 	movhi	r2,16
4080d7c4:	10bfffc4 	addi	r2,r2,-1
4080d7c8:	2101ffcc 	andi	r4,r4,2047
4080d7cc:	0021883a 	mov	r16,zero
4080d7d0:	288a703a 	and	r5,r5,r2
4080d7d4:	2008953a 	slli	r4,r4,20
4080d7d8:	00c00434 	movhi	r3,16
4080d7dc:	18ffffc4 	addi	r3,r3,-1
4080d7e0:	28c6703a 	and	r3,r5,r3
4080d7e4:	8005883a 	mov	r2,r16
4080d7e8:	1906b03a 	or	r3,r3,r4
4080d7ec:	dfc00117 	ldw	ra,4(sp)
4080d7f0:	dc000017 	ldw	r16,0(sp)
4080d7f4:	dec00204 	addi	sp,sp,8
4080d7f8:	f800283a 	ret
4080d7fc:	00c002c4 	movi	r3,11
4080d800:	188bc83a 	sub	r5,r3,r2
4080d804:	814ad83a 	srl	r5,r16,r5
4080d808:	00c00434 	movhi	r3,16
4080d80c:	18ffffc4 	addi	r3,r3,-1
4080d810:	81a0983a 	sll	r16,r16,r6
4080d814:	2101ffcc 	andi	r4,r4,2047
4080d818:	28ca703a 	and	r5,r5,r3
4080d81c:	003fed06 	br	4080d7d4 <__alt_mem_onchip_flash_0_data+0xff7cd7d4>
4080d820:	0009883a 	mov	r4,zero
4080d824:	000b883a 	mov	r5,zero
4080d828:	003fea06 	br	4080d7d4 <__alt_mem_onchip_flash_0_data+0xff7cd7d4>

4080d82c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080d82c:	defffe04 	addi	sp,sp,-8
4080d830:	dfc00115 	stw	ra,4(sp)
4080d834:	df000015 	stw	fp,0(sp)
4080d838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080d83c:	d0a01a17 	ldw	r2,-32664(gp)
4080d840:	10000326 	beq	r2,zero,4080d850 <alt_get_errno+0x24>
4080d844:	d0a01a17 	ldw	r2,-32664(gp)
4080d848:	103ee83a 	callr	r2
4080d84c:	00000106 	br	4080d854 <alt_get_errno+0x28>
4080d850:	d0a03204 	addi	r2,gp,-32568
}
4080d854:	e037883a 	mov	sp,fp
4080d858:	dfc00117 	ldw	ra,4(sp)
4080d85c:	df000017 	ldw	fp,0(sp)
4080d860:	dec00204 	addi	sp,sp,8
4080d864:	f800283a 	ret

4080d868 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
4080d868:	defffb04 	addi	sp,sp,-20
4080d86c:	dfc00415 	stw	ra,16(sp)
4080d870:	df000315 	stw	fp,12(sp)
4080d874:	df000304 	addi	fp,sp,12
4080d878:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
4080d87c:	e0bfff17 	ldw	r2,-4(fp)
4080d880:	10000616 	blt	r2,zero,4080d89c <close+0x34>
4080d884:	e0bfff17 	ldw	r2,-4(fp)
4080d888:	10c00324 	muli	r3,r2,12
4080d88c:	00902074 	movhi	r2,16513
4080d890:	1089b604 	addi	r2,r2,9944
4080d894:	1885883a 	add	r2,r3,r2
4080d898:	00000106 	br	4080d8a0 <close+0x38>
4080d89c:	0005883a 	mov	r2,zero
4080d8a0:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
4080d8a4:	e0bffd17 	ldw	r2,-12(fp)
4080d8a8:	10001926 	beq	r2,zero,4080d910 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
4080d8ac:	e0bffd17 	ldw	r2,-12(fp)
4080d8b0:	10800017 	ldw	r2,0(r2)
4080d8b4:	10800417 	ldw	r2,16(r2)
4080d8b8:	10000626 	beq	r2,zero,4080d8d4 <close+0x6c>
4080d8bc:	e0bffd17 	ldw	r2,-12(fp)
4080d8c0:	10800017 	ldw	r2,0(r2)
4080d8c4:	10800417 	ldw	r2,16(r2)
4080d8c8:	e13ffd17 	ldw	r4,-12(fp)
4080d8cc:	103ee83a 	callr	r2
4080d8d0:	00000106 	br	4080d8d8 <close+0x70>
4080d8d4:	0005883a 	mov	r2,zero
4080d8d8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
4080d8dc:	e13fff17 	ldw	r4,-4(fp)
4080d8e0:	080de3c0 	call	4080de3c <alt_release_fd>
    if (rval < 0)
4080d8e4:	e0bffe17 	ldw	r2,-8(fp)
4080d8e8:	1000070e 	bge	r2,zero,4080d908 <close+0xa0>
    {
      ALT_ERRNO = -rval;
4080d8ec:	080d82c0 	call	4080d82c <alt_get_errno>
4080d8f0:	1007883a 	mov	r3,r2
4080d8f4:	e0bffe17 	ldw	r2,-8(fp)
4080d8f8:	0085c83a 	sub	r2,zero,r2
4080d8fc:	18800015 	stw	r2,0(r3)
      return -1;
4080d900:	00bfffc4 	movi	r2,-1
4080d904:	00000706 	br	4080d924 <close+0xbc>
    }
    return 0;
4080d908:	0005883a 	mov	r2,zero
4080d90c:	00000506 	br	4080d924 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
4080d910:	080d82c0 	call	4080d82c <alt_get_errno>
4080d914:	1007883a 	mov	r3,r2
4080d918:	00801444 	movi	r2,81
4080d91c:	18800015 	stw	r2,0(r3)
    return -1;
4080d920:	00bfffc4 	movi	r2,-1
  }
}
4080d924:	e037883a 	mov	sp,fp
4080d928:	dfc00117 	ldw	ra,4(sp)
4080d92c:	df000017 	ldw	fp,0(sp)
4080d930:	dec00204 	addi	sp,sp,8
4080d934:	f800283a 	ret

4080d938 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
4080d938:	defffc04 	addi	sp,sp,-16
4080d93c:	df000315 	stw	fp,12(sp)
4080d940:	df000304 	addi	fp,sp,12
4080d944:	e13ffd15 	stw	r4,-12(fp)
4080d948:	e17ffe15 	stw	r5,-8(fp)
4080d94c:	e1bfff15 	stw	r6,-4(fp)
  return len;
4080d950:	e0bfff17 	ldw	r2,-4(fp)
}
4080d954:	e037883a 	mov	sp,fp
4080d958:	df000017 	ldw	fp,0(sp)
4080d95c:	dec00104 	addi	sp,sp,4
4080d960:	f800283a 	ret

4080d964 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080d964:	defffe04 	addi	sp,sp,-8
4080d968:	dfc00115 	stw	ra,4(sp)
4080d96c:	df000015 	stw	fp,0(sp)
4080d970:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080d974:	d0a01a17 	ldw	r2,-32664(gp)
4080d978:	10000326 	beq	r2,zero,4080d988 <alt_get_errno+0x24>
4080d97c:	d0a01a17 	ldw	r2,-32664(gp)
4080d980:	103ee83a 	callr	r2
4080d984:	00000106 	br	4080d98c <alt_get_errno+0x28>
4080d988:	d0a03204 	addi	r2,gp,-32568
}
4080d98c:	e037883a 	mov	sp,fp
4080d990:	dfc00117 	ldw	ra,4(sp)
4080d994:	df000017 	ldw	fp,0(sp)
4080d998:	dec00204 	addi	sp,sp,8
4080d99c:	f800283a 	ret

4080d9a0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
4080d9a0:	defffb04 	addi	sp,sp,-20
4080d9a4:	dfc00415 	stw	ra,16(sp)
4080d9a8:	df000315 	stw	fp,12(sp)
4080d9ac:	df000304 	addi	fp,sp,12
4080d9b0:	e13ffe15 	stw	r4,-8(fp)
4080d9b4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4080d9b8:	e0bffe17 	ldw	r2,-8(fp)
4080d9bc:	10000616 	blt	r2,zero,4080d9d8 <fstat+0x38>
4080d9c0:	e0bffe17 	ldw	r2,-8(fp)
4080d9c4:	10c00324 	muli	r3,r2,12
4080d9c8:	00902074 	movhi	r2,16513
4080d9cc:	1089b604 	addi	r2,r2,9944
4080d9d0:	1885883a 	add	r2,r3,r2
4080d9d4:	00000106 	br	4080d9dc <fstat+0x3c>
4080d9d8:	0005883a 	mov	r2,zero
4080d9dc:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
4080d9e0:	e0bffd17 	ldw	r2,-12(fp)
4080d9e4:	10001026 	beq	r2,zero,4080da28 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
4080d9e8:	e0bffd17 	ldw	r2,-12(fp)
4080d9ec:	10800017 	ldw	r2,0(r2)
4080d9f0:	10800817 	ldw	r2,32(r2)
4080d9f4:	10000726 	beq	r2,zero,4080da14 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
4080d9f8:	e0bffd17 	ldw	r2,-12(fp)
4080d9fc:	10800017 	ldw	r2,0(r2)
4080da00:	10800817 	ldw	r2,32(r2)
4080da04:	e17fff17 	ldw	r5,-4(fp)
4080da08:	e13ffd17 	ldw	r4,-12(fp)
4080da0c:	103ee83a 	callr	r2
4080da10:	00000a06 	br	4080da3c <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
4080da14:	e0bfff17 	ldw	r2,-4(fp)
4080da18:	00c80004 	movi	r3,8192
4080da1c:	10c00115 	stw	r3,4(r2)
      return 0;
4080da20:	0005883a 	mov	r2,zero
4080da24:	00000506 	br	4080da3c <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4080da28:	080d9640 	call	4080d964 <alt_get_errno>
4080da2c:	1007883a 	mov	r3,r2
4080da30:	00801444 	movi	r2,81
4080da34:	18800015 	stw	r2,0(r3)
    return -1;
4080da38:	00bfffc4 	movi	r2,-1
  }
}
4080da3c:	e037883a 	mov	sp,fp
4080da40:	dfc00117 	ldw	ra,4(sp)
4080da44:	df000017 	ldw	fp,0(sp)
4080da48:	dec00204 	addi	sp,sp,8
4080da4c:	f800283a 	ret

4080da50 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080da50:	defffe04 	addi	sp,sp,-8
4080da54:	dfc00115 	stw	ra,4(sp)
4080da58:	df000015 	stw	fp,0(sp)
4080da5c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080da60:	d0a01a17 	ldw	r2,-32664(gp)
4080da64:	10000326 	beq	r2,zero,4080da74 <alt_get_errno+0x24>
4080da68:	d0a01a17 	ldw	r2,-32664(gp)
4080da6c:	103ee83a 	callr	r2
4080da70:	00000106 	br	4080da78 <alt_get_errno+0x28>
4080da74:	d0a03204 	addi	r2,gp,-32568
}
4080da78:	e037883a 	mov	sp,fp
4080da7c:	dfc00117 	ldw	ra,4(sp)
4080da80:	df000017 	ldw	fp,0(sp)
4080da84:	dec00204 	addi	sp,sp,8
4080da88:	f800283a 	ret

4080da8c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
4080da8c:	deffed04 	addi	sp,sp,-76
4080da90:	dfc01215 	stw	ra,72(sp)
4080da94:	df001115 	stw	fp,68(sp)
4080da98:	df001104 	addi	fp,sp,68
4080da9c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4080daa0:	e0bfff17 	ldw	r2,-4(fp)
4080daa4:	10000616 	blt	r2,zero,4080dac0 <isatty+0x34>
4080daa8:	e0bfff17 	ldw	r2,-4(fp)
4080daac:	10c00324 	muli	r3,r2,12
4080dab0:	00902074 	movhi	r2,16513
4080dab4:	1089b604 	addi	r2,r2,9944
4080dab8:	1885883a 	add	r2,r3,r2
4080dabc:	00000106 	br	4080dac4 <isatty+0x38>
4080dac0:	0005883a 	mov	r2,zero
4080dac4:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
4080dac8:	e0bfef17 	ldw	r2,-68(fp)
4080dacc:	10000e26 	beq	r2,zero,4080db08 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
4080dad0:	e0bfef17 	ldw	r2,-68(fp)
4080dad4:	10800017 	ldw	r2,0(r2)
4080dad8:	10800817 	ldw	r2,32(r2)
4080dadc:	1000021e 	bne	r2,zero,4080dae8 <isatty+0x5c>
    {
      return 1;
4080dae0:	00800044 	movi	r2,1
4080dae4:	00000d06 	br	4080db1c <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
4080dae8:	e0bff004 	addi	r2,fp,-64
4080daec:	100b883a 	mov	r5,r2
4080daf0:	e13fff17 	ldw	r4,-4(fp)
4080daf4:	080d9a00 	call	4080d9a0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
4080daf8:	e0bff117 	ldw	r2,-60(fp)
4080dafc:	10880020 	cmpeqi	r2,r2,8192
4080db00:	10803fcc 	andi	r2,r2,255
4080db04:	00000506 	br	4080db1c <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
4080db08:	080da500 	call	4080da50 <alt_get_errno>
4080db0c:	1007883a 	mov	r3,r2
4080db10:	00801444 	movi	r2,81
4080db14:	18800015 	stw	r2,0(r3)
    return 0;
4080db18:	0005883a 	mov	r2,zero
  }
}
4080db1c:	e037883a 	mov	sp,fp
4080db20:	dfc00117 	ldw	ra,4(sp)
4080db24:	df000017 	ldw	fp,0(sp)
4080db28:	dec00204 	addi	sp,sp,8
4080db2c:	f800283a 	ret

4080db30 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080db30:	defffe04 	addi	sp,sp,-8
4080db34:	dfc00115 	stw	ra,4(sp)
4080db38:	df000015 	stw	fp,0(sp)
4080db3c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080db40:	d0a01a17 	ldw	r2,-32664(gp)
4080db44:	10000326 	beq	r2,zero,4080db54 <alt_get_errno+0x24>
4080db48:	d0a01a17 	ldw	r2,-32664(gp)
4080db4c:	103ee83a 	callr	r2
4080db50:	00000106 	br	4080db58 <alt_get_errno+0x28>
4080db54:	d0a03204 	addi	r2,gp,-32568
}
4080db58:	e037883a 	mov	sp,fp
4080db5c:	dfc00117 	ldw	ra,4(sp)
4080db60:	df000017 	ldw	fp,0(sp)
4080db64:	dec00204 	addi	sp,sp,8
4080db68:	f800283a 	ret

4080db6c <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
4080db6c:	defff904 	addi	sp,sp,-28
4080db70:	dfc00615 	stw	ra,24(sp)
4080db74:	df000515 	stw	fp,20(sp)
4080db78:	df000504 	addi	fp,sp,20
4080db7c:	e13ffd15 	stw	r4,-12(fp)
4080db80:	e17ffe15 	stw	r5,-8(fp)
4080db84:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
4080db88:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4080db8c:	e0bffd17 	ldw	r2,-12(fp)
4080db90:	10000616 	blt	r2,zero,4080dbac <lseek+0x40>
4080db94:	e0bffd17 	ldw	r2,-12(fp)
4080db98:	10c00324 	muli	r3,r2,12
4080db9c:	00902074 	movhi	r2,16513
4080dba0:	1089b604 	addi	r2,r2,9944
4080dba4:	1885883a 	add	r2,r3,r2
4080dba8:	00000106 	br	4080dbb0 <lseek+0x44>
4080dbac:	0005883a 	mov	r2,zero
4080dbb0:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
4080dbb4:	e0bffc17 	ldw	r2,-16(fp)
4080dbb8:	10001026 	beq	r2,zero,4080dbfc <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
4080dbbc:	e0bffc17 	ldw	r2,-16(fp)
4080dbc0:	10800017 	ldw	r2,0(r2)
4080dbc4:	10800717 	ldw	r2,28(r2)
4080dbc8:	10000926 	beq	r2,zero,4080dbf0 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
4080dbcc:	e0bffc17 	ldw	r2,-16(fp)
4080dbd0:	10800017 	ldw	r2,0(r2)
4080dbd4:	10800717 	ldw	r2,28(r2)
4080dbd8:	e1bfff17 	ldw	r6,-4(fp)
4080dbdc:	e17ffe17 	ldw	r5,-8(fp)
4080dbe0:	e13ffc17 	ldw	r4,-16(fp)
4080dbe4:	103ee83a 	callr	r2
4080dbe8:	e0bffb15 	stw	r2,-20(fp)
4080dbec:	00000506 	br	4080dc04 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
4080dbf0:	00bfde84 	movi	r2,-134
4080dbf4:	e0bffb15 	stw	r2,-20(fp)
4080dbf8:	00000206 	br	4080dc04 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
4080dbfc:	00bfebc4 	movi	r2,-81
4080dc00:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
4080dc04:	e0bffb17 	ldw	r2,-20(fp)
4080dc08:	1000070e 	bge	r2,zero,4080dc28 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
4080dc0c:	080db300 	call	4080db30 <alt_get_errno>
4080dc10:	1007883a 	mov	r3,r2
4080dc14:	e0bffb17 	ldw	r2,-20(fp)
4080dc18:	0085c83a 	sub	r2,zero,r2
4080dc1c:	18800015 	stw	r2,0(r3)
    rc = -1;
4080dc20:	00bfffc4 	movi	r2,-1
4080dc24:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
4080dc28:	e0bffb17 	ldw	r2,-20(fp)
}
4080dc2c:	e037883a 	mov	sp,fp
4080dc30:	dfc00117 	ldw	ra,4(sp)
4080dc34:	df000017 	ldw	fp,0(sp)
4080dc38:	dec00204 	addi	sp,sp,8
4080dc3c:	f800283a 	ret

4080dc40 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
4080dc40:	defffd04 	addi	sp,sp,-12
4080dc44:	dfc00215 	stw	ra,8(sp)
4080dc48:	df000115 	stw	fp,4(sp)
4080dc4c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
4080dc50:	0009883a 	mov	r4,zero
4080dc54:	080e0e80 	call	4080e0e8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
4080dc58:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
4080dc5c:	080e1200 	call	4080e120 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
4080dc60:	01902074 	movhi	r6,16513
4080dc64:	31871a04 	addi	r6,r6,7272
4080dc68:	01502074 	movhi	r5,16513
4080dc6c:	29471a04 	addi	r5,r5,7272
4080dc70:	01102074 	movhi	r4,16513
4080dc74:	21071a04 	addi	r4,r4,7272
4080dc78:	0810de00 	call	40810de0 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
4080dc7c:	08109000 	call	40810900 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
4080dc80:	01102074 	movhi	r4,16513
4080dc84:	21025804 	addi	r4,r4,2400
4080dc88:	08115500 	call	40811550 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
4080dc8c:	d0a03317 	ldw	r2,-32564(gp)
4080dc90:	d0e03417 	ldw	r3,-32560(gp)
4080dc94:	d1203517 	ldw	r4,-32556(gp)
4080dc98:	200d883a 	mov	r6,r4
4080dc9c:	180b883a 	mov	r5,r3
4080dca0:	1009883a 	mov	r4,r2
4080dca4:	0800c9c0 	call	40800c9c <main>
4080dca8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
4080dcac:	01000044 	movi	r4,1
4080dcb0:	080d8680 	call	4080d868 <close>
  exit (result);
4080dcb4:	e13fff17 	ldw	r4,-4(fp)
4080dcb8:	08115640 	call	40811564 <exit>

4080dcbc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
4080dcbc:	defffe04 	addi	sp,sp,-8
4080dcc0:	df000115 	stw	fp,4(sp)
4080dcc4:	df000104 	addi	fp,sp,4
4080dcc8:	e13fff15 	stw	r4,-4(fp)
}
4080dccc:	0001883a 	nop
4080dcd0:	e037883a 	mov	sp,fp
4080dcd4:	df000017 	ldw	fp,0(sp)
4080dcd8:	dec00104 	addi	sp,sp,4
4080dcdc:	f800283a 	ret

4080dce0 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
4080dce0:	defffe04 	addi	sp,sp,-8
4080dce4:	df000115 	stw	fp,4(sp)
4080dce8:	df000104 	addi	fp,sp,4
4080dcec:	e13fff15 	stw	r4,-4(fp)
}
4080dcf0:	0001883a 	nop
4080dcf4:	e037883a 	mov	sp,fp
4080dcf8:	df000017 	ldw	fp,0(sp)
4080dcfc:	dec00104 	addi	sp,sp,4
4080dd00:	f800283a 	ret

4080dd04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080dd04:	defffe04 	addi	sp,sp,-8
4080dd08:	dfc00115 	stw	ra,4(sp)
4080dd0c:	df000015 	stw	fp,0(sp)
4080dd10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080dd14:	d0a01a17 	ldw	r2,-32664(gp)
4080dd18:	10000326 	beq	r2,zero,4080dd28 <alt_get_errno+0x24>
4080dd1c:	d0a01a17 	ldw	r2,-32664(gp)
4080dd20:	103ee83a 	callr	r2
4080dd24:	00000106 	br	4080dd2c <alt_get_errno+0x28>
4080dd28:	d0a03204 	addi	r2,gp,-32568
}
4080dd2c:	e037883a 	mov	sp,fp
4080dd30:	dfc00117 	ldw	ra,4(sp)
4080dd34:	df000017 	ldw	fp,0(sp)
4080dd38:	dec00204 	addi	sp,sp,8
4080dd3c:	f800283a 	ret

4080dd40 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
4080dd40:	defff904 	addi	sp,sp,-28
4080dd44:	dfc00615 	stw	ra,24(sp)
4080dd48:	df000515 	stw	fp,20(sp)
4080dd4c:	df000504 	addi	fp,sp,20
4080dd50:	e13ffd15 	stw	r4,-12(fp)
4080dd54:	e17ffe15 	stw	r5,-8(fp)
4080dd58:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4080dd5c:	e0bffd17 	ldw	r2,-12(fp)
4080dd60:	10000616 	blt	r2,zero,4080dd7c <read+0x3c>
4080dd64:	e0bffd17 	ldw	r2,-12(fp)
4080dd68:	10c00324 	muli	r3,r2,12
4080dd6c:	00902074 	movhi	r2,16513
4080dd70:	1089b604 	addi	r2,r2,9944
4080dd74:	1885883a 	add	r2,r3,r2
4080dd78:	00000106 	br	4080dd80 <read+0x40>
4080dd7c:	0005883a 	mov	r2,zero
4080dd80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
4080dd84:	e0bffb17 	ldw	r2,-20(fp)
4080dd88:	10002226 	beq	r2,zero,4080de14 <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
4080dd8c:	e0bffb17 	ldw	r2,-20(fp)
4080dd90:	10800217 	ldw	r2,8(r2)
4080dd94:	108000cc 	andi	r2,r2,3
4080dd98:	10800060 	cmpeqi	r2,r2,1
4080dd9c:	1000181e 	bne	r2,zero,4080de00 <read+0xc0>
        (fd->dev->read))
4080dda0:	e0bffb17 	ldw	r2,-20(fp)
4080dda4:	10800017 	ldw	r2,0(r2)
4080dda8:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
4080ddac:	10001426 	beq	r2,zero,4080de00 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
4080ddb0:	e0bffb17 	ldw	r2,-20(fp)
4080ddb4:	10800017 	ldw	r2,0(r2)
4080ddb8:	10800517 	ldw	r2,20(r2)
4080ddbc:	e0ffff17 	ldw	r3,-4(fp)
4080ddc0:	180d883a 	mov	r6,r3
4080ddc4:	e17ffe17 	ldw	r5,-8(fp)
4080ddc8:	e13ffb17 	ldw	r4,-20(fp)
4080ddcc:	103ee83a 	callr	r2
4080ddd0:	e0bffc15 	stw	r2,-16(fp)
4080ddd4:	e0bffc17 	ldw	r2,-16(fp)
4080ddd8:	1000070e 	bge	r2,zero,4080ddf8 <read+0xb8>
        {
          ALT_ERRNO = -rval;
4080dddc:	080dd040 	call	4080dd04 <alt_get_errno>
4080dde0:	1007883a 	mov	r3,r2
4080dde4:	e0bffc17 	ldw	r2,-16(fp)
4080dde8:	0085c83a 	sub	r2,zero,r2
4080ddec:	18800015 	stw	r2,0(r3)
          return -1;
4080ddf0:	00bfffc4 	movi	r2,-1
4080ddf4:	00000c06 	br	4080de28 <read+0xe8>
        }
        return rval;
4080ddf8:	e0bffc17 	ldw	r2,-16(fp)
4080ddfc:	00000a06 	br	4080de28 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
4080de00:	080dd040 	call	4080dd04 <alt_get_errno>
4080de04:	1007883a 	mov	r3,r2
4080de08:	00800344 	movi	r2,13
4080de0c:	18800015 	stw	r2,0(r3)
4080de10:	00000406 	br	4080de24 <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
4080de14:	080dd040 	call	4080dd04 <alt_get_errno>
4080de18:	1007883a 	mov	r3,r2
4080de1c:	00801444 	movi	r2,81
4080de20:	18800015 	stw	r2,0(r3)
  }
  return -1;
4080de24:	00bfffc4 	movi	r2,-1
}
4080de28:	e037883a 	mov	sp,fp
4080de2c:	dfc00117 	ldw	ra,4(sp)
4080de30:	df000017 	ldw	fp,0(sp)
4080de34:	dec00204 	addi	sp,sp,8
4080de38:	f800283a 	ret

4080de3c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
4080de3c:	defffe04 	addi	sp,sp,-8
4080de40:	df000115 	stw	fp,4(sp)
4080de44:	df000104 	addi	fp,sp,4
4080de48:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
4080de4c:	e0bfff17 	ldw	r2,-4(fp)
4080de50:	108000d0 	cmplti	r2,r2,3
4080de54:	10000d1e 	bne	r2,zero,4080de8c <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
4080de58:	00902074 	movhi	r2,16513
4080de5c:	1089b604 	addi	r2,r2,9944
4080de60:	e0ffff17 	ldw	r3,-4(fp)
4080de64:	18c00324 	muli	r3,r3,12
4080de68:	10c5883a 	add	r2,r2,r3
4080de6c:	10800204 	addi	r2,r2,8
4080de70:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
4080de74:	00902074 	movhi	r2,16513
4080de78:	1089b604 	addi	r2,r2,9944
4080de7c:	e0ffff17 	ldw	r3,-4(fp)
4080de80:	18c00324 	muli	r3,r3,12
4080de84:	10c5883a 	add	r2,r2,r3
4080de88:	10000015 	stw	zero,0(r2)
  }
}
4080de8c:	0001883a 	nop
4080de90:	e037883a 	mov	sp,fp
4080de94:	df000017 	ldw	fp,0(sp)
4080de98:	dec00104 	addi	sp,sp,4
4080de9c:	f800283a 	ret

4080dea0 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
4080dea0:	defff904 	addi	sp,sp,-28
4080dea4:	df000615 	stw	fp,24(sp)
4080dea8:	df000604 	addi	fp,sp,24
4080deac:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080deb0:	0005303a 	rdctl	r2,status
4080deb4:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080deb8:	e0fffe17 	ldw	r3,-8(fp)
4080debc:	00bfff84 	movi	r2,-2
4080dec0:	1884703a 	and	r2,r3,r2
4080dec4:	1001703a 	wrctl	status,r2
  
  return context;
4080dec8:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
4080decc:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
4080ded0:	d0a01b17 	ldw	r2,-32660(gp)
4080ded4:	10c000c4 	addi	r3,r2,3
4080ded8:	00bfff04 	movi	r2,-4
4080dedc:	1884703a 	and	r2,r3,r2
4080dee0:	d0a01b15 	stw	r2,-32660(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
4080dee4:	d0e01b17 	ldw	r3,-32660(gp)
4080dee8:	e0bfff17 	ldw	r2,-4(fp)
4080deec:	1887883a 	add	r3,r3,r2
4080def0:	00904034 	movhi	r2,16640
4080def4:	10800004 	addi	r2,r2,0
4080def8:	10c0062e 	bgeu	r2,r3,4080df14 <sbrk+0x74>
4080defc:	e0bffb17 	ldw	r2,-20(fp)
4080df00:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080df04:	e0bffa17 	ldw	r2,-24(fp)
4080df08:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
4080df0c:	00bfffc4 	movi	r2,-1
4080df10:	00000b06 	br	4080df40 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
4080df14:	d0a01b17 	ldw	r2,-32660(gp)
4080df18:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
4080df1c:	d0e01b17 	ldw	r3,-32660(gp)
4080df20:	e0bfff17 	ldw	r2,-4(fp)
4080df24:	1885883a 	add	r2,r3,r2
4080df28:	d0a01b15 	stw	r2,-32660(gp)
4080df2c:	e0bffb17 	ldw	r2,-20(fp)
4080df30:	e0bffc15 	stw	r2,-16(fp)
4080df34:	e0bffc17 	ldw	r2,-16(fp)
4080df38:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
4080df3c:	e0bffd17 	ldw	r2,-12(fp)
} 
4080df40:	e037883a 	mov	sp,fp
4080df44:	df000017 	ldw	fp,0(sp)
4080df48:	dec00104 	addi	sp,sp,4
4080df4c:	f800283a 	ret

4080df50 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
4080df50:	defffd04 	addi	sp,sp,-12
4080df54:	dfc00215 	stw	ra,8(sp)
4080df58:	df000115 	stw	fp,4(sp)
4080df5c:	df000104 	addi	fp,sp,4
4080df60:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
4080df64:	e13fff17 	ldw	r4,-4(fp)
4080df68:	08106500 	call	40810650 <alt_busy_sleep>
}
4080df6c:	e037883a 	mov	sp,fp
4080df70:	dfc00117 	ldw	ra,4(sp)
4080df74:	df000017 	ldw	fp,0(sp)
4080df78:	dec00204 	addi	sp,sp,8
4080df7c:	f800283a 	ret

4080df80 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080df80:	defffe04 	addi	sp,sp,-8
4080df84:	dfc00115 	stw	ra,4(sp)
4080df88:	df000015 	stw	fp,0(sp)
4080df8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080df90:	d0a01a17 	ldw	r2,-32664(gp)
4080df94:	10000326 	beq	r2,zero,4080dfa4 <alt_get_errno+0x24>
4080df98:	d0a01a17 	ldw	r2,-32664(gp)
4080df9c:	103ee83a 	callr	r2
4080dfa0:	00000106 	br	4080dfa8 <alt_get_errno+0x28>
4080dfa4:	d0a03204 	addi	r2,gp,-32568
}
4080dfa8:	e037883a 	mov	sp,fp
4080dfac:	dfc00117 	ldw	ra,4(sp)
4080dfb0:	df000017 	ldw	fp,0(sp)
4080dfb4:	dec00204 	addi	sp,sp,8
4080dfb8:	f800283a 	ret

4080dfbc <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
4080dfbc:	defff904 	addi	sp,sp,-28
4080dfc0:	dfc00615 	stw	ra,24(sp)
4080dfc4:	df000515 	stw	fp,20(sp)
4080dfc8:	df000504 	addi	fp,sp,20
4080dfcc:	e13ffd15 	stw	r4,-12(fp)
4080dfd0:	e17ffe15 	stw	r5,-8(fp)
4080dfd4:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
4080dfd8:	e0bffd17 	ldw	r2,-12(fp)
4080dfdc:	10000616 	blt	r2,zero,4080dff8 <write+0x3c>
4080dfe0:	e0bffd17 	ldw	r2,-12(fp)
4080dfe4:	10c00324 	muli	r3,r2,12
4080dfe8:	00902074 	movhi	r2,16513
4080dfec:	1089b604 	addi	r2,r2,9944
4080dff0:	1885883a 	add	r2,r3,r2
4080dff4:	00000106 	br	4080dffc <write+0x40>
4080dff8:	0005883a 	mov	r2,zero
4080dffc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
4080e000:	e0bffb17 	ldw	r2,-20(fp)
4080e004:	10002126 	beq	r2,zero,4080e08c <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
4080e008:	e0bffb17 	ldw	r2,-20(fp)
4080e00c:	10800217 	ldw	r2,8(r2)
4080e010:	108000cc 	andi	r2,r2,3
4080e014:	10001826 	beq	r2,zero,4080e078 <write+0xbc>
4080e018:	e0bffb17 	ldw	r2,-20(fp)
4080e01c:	10800017 	ldw	r2,0(r2)
4080e020:	10800617 	ldw	r2,24(r2)
4080e024:	10001426 	beq	r2,zero,4080e078 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
4080e028:	e0bffb17 	ldw	r2,-20(fp)
4080e02c:	10800017 	ldw	r2,0(r2)
4080e030:	10800617 	ldw	r2,24(r2)
4080e034:	e0ffff17 	ldw	r3,-4(fp)
4080e038:	180d883a 	mov	r6,r3
4080e03c:	e17ffe17 	ldw	r5,-8(fp)
4080e040:	e13ffb17 	ldw	r4,-20(fp)
4080e044:	103ee83a 	callr	r2
4080e048:	e0bffc15 	stw	r2,-16(fp)
4080e04c:	e0bffc17 	ldw	r2,-16(fp)
4080e050:	1000070e 	bge	r2,zero,4080e070 <write+0xb4>
      {
        ALT_ERRNO = -rval;
4080e054:	080df800 	call	4080df80 <alt_get_errno>
4080e058:	1007883a 	mov	r3,r2
4080e05c:	e0bffc17 	ldw	r2,-16(fp)
4080e060:	0085c83a 	sub	r2,zero,r2
4080e064:	18800015 	stw	r2,0(r3)
        return -1;
4080e068:	00bfffc4 	movi	r2,-1
4080e06c:	00000c06 	br	4080e0a0 <write+0xe4>
      }
      return rval;
4080e070:	e0bffc17 	ldw	r2,-16(fp)
4080e074:	00000a06 	br	4080e0a0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
4080e078:	080df800 	call	4080df80 <alt_get_errno>
4080e07c:	1007883a 	mov	r3,r2
4080e080:	00800344 	movi	r2,13
4080e084:	18800015 	stw	r2,0(r3)
4080e088:	00000406 	br	4080e09c <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
4080e08c:	080df800 	call	4080df80 <alt_get_errno>
4080e090:	1007883a 	mov	r3,r2
4080e094:	00801444 	movi	r2,81
4080e098:	18800015 	stw	r2,0(r3)
  }
  return -1;
4080e09c:	00bfffc4 	movi	r2,-1
}
4080e0a0:	e037883a 	mov	sp,fp
4080e0a4:	dfc00117 	ldw	ra,4(sp)
4080e0a8:	df000017 	ldw	fp,0(sp)
4080e0ac:	dec00204 	addi	sp,sp,8
4080e0b0:	f800283a 	ret

4080e0b4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
4080e0b4:	defffd04 	addi	sp,sp,-12
4080e0b8:	dfc00215 	stw	ra,8(sp)
4080e0bc:	df000115 	stw	fp,4(sp)
4080e0c0:	df000104 	addi	fp,sp,4
4080e0c4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
4080e0c8:	d1601704 	addi	r5,gp,-32676
4080e0cc:	e13fff17 	ldw	r4,-4(fp)
4080e0d0:	081085c0 	call	4081085c <alt_dev_llist_insert>
}
4080e0d4:	e037883a 	mov	sp,fp
4080e0d8:	dfc00117 	ldw	ra,4(sp)
4080e0dc:	df000017 	ldw	fp,0(sp)
4080e0e0:	dec00204 	addi	sp,sp,8
4080e0e4:	f800283a 	ret

4080e0e8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
4080e0e8:	defffd04 	addi	sp,sp,-12
4080e0ec:	dfc00215 	stw	ra,8(sp)
4080e0f0:	df000115 	stw	fp,4(sp)
4080e0f4:	df000104 	addi	fp,sp,4
4080e0f8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_0, nios2_0);
4080e0fc:	08112540 	call	40811254 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
4080e100:	00800044 	movi	r2,1
4080e104:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
4080e108:	0001883a 	nop
4080e10c:	e037883a 	mov	sp,fp
4080e110:	dfc00117 	ldw	ra,4(sp)
4080e114:	df000017 	ldw	fp,0(sp)
4080e118:	dec00204 	addi	sp,sp,8
4080e11c:	f800283a 	ret

4080e120 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
4080e120:	defffe04 	addi	sp,sp,-8
4080e124:	dfc00115 	stw	ra,4(sp)
4080e128:	df000015 	stw	fp,0(sp)
4080e12c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
4080e130:	01c0fa04 	movi	r7,1000
4080e134:	01800044 	movi	r6,1
4080e138:	000b883a 	mov	r5,zero
4080e13c:	01104234 	movhi	r4,16648
4080e140:	21040804 	addi	r4,r4,4128
4080e144:	080ec900 	call	4080ec90 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_TIMER_INIT ( TIMER_1, timer_1);
    ALTERA_AVALON_TIMER_INIT ( TIMER_2, timer_2);
    ALTERA_AVALON_JTAG_UART_INIT ( JTAGUART_0, jtaguart_0);
4080e148:	000d883a 	mov	r6,zero
4080e14c:	000b883a 	mov	r5,zero
4080e150:	01102074 	movhi	r4,16513
4080e154:	210a2004 	addi	r4,r4,10368
4080e158:	080e3140 	call	4080e314 <altera_avalon_jtag_uart_init>
4080e15c:	01102074 	movhi	r4,16513
4080e160:	210a1604 	addi	r4,r4,10328
4080e164:	080e0b40 	call	4080e0b4 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
4080e168:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART_0, uart_0);
4080e16c:	01800104 	movi	r6,4
4080e170:	000b883a 	mov	r5,zero
4080e174:	01102074 	movhi	r4,16513
4080e178:	210e3804 	addi	r4,r4,14560
4080e17c:	080ee1c0 	call	4080ee1c <altera_avalon_uart_init>
4080e180:	01102074 	movhi	r4,16513
4080e184:	210e2e04 	addi	r4,r4,14520
4080e188:	080e0b40 	call	4080e0b4 <alt_dev_reg>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH_0, onchip_flash_0);
4080e18c:	01102074 	movhi	r4,16513
4080e190:	210e5f04 	addi	r4,r4,14716
4080e194:	080fe980 	call	4080fe98 <altera_onchip_flash_init>
}
4080e198:	0001883a 	nop
4080e19c:	e037883a 	mov	sp,fp
4080e1a0:	dfc00117 	ldw	ra,4(sp)
4080e1a4:	df000017 	ldw	fp,0(sp)
4080e1a8:	dec00204 	addi	sp,sp,8
4080e1ac:	f800283a 	ret

4080e1b0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
4080e1b0:	defffa04 	addi	sp,sp,-24
4080e1b4:	dfc00515 	stw	ra,20(sp)
4080e1b8:	df000415 	stw	fp,16(sp)
4080e1bc:	df000404 	addi	fp,sp,16
4080e1c0:	e13ffd15 	stw	r4,-12(fp)
4080e1c4:	e17ffe15 	stw	r5,-8(fp)
4080e1c8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4080e1cc:	e0bffd17 	ldw	r2,-12(fp)
4080e1d0:	10800017 	ldw	r2,0(r2)
4080e1d4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
4080e1d8:	e0bffc17 	ldw	r2,-16(fp)
4080e1dc:	10c00a04 	addi	r3,r2,40
4080e1e0:	e0bffd17 	ldw	r2,-12(fp)
4080e1e4:	10800217 	ldw	r2,8(r2)
4080e1e8:	100f883a 	mov	r7,r2
4080e1ec:	e1bfff17 	ldw	r6,-4(fp)
4080e1f0:	e17ffe17 	ldw	r5,-8(fp)
4080e1f4:	1809883a 	mov	r4,r3
4080e1f8:	080e7d80 	call	4080e7d8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
4080e1fc:	e037883a 	mov	sp,fp
4080e200:	dfc00117 	ldw	ra,4(sp)
4080e204:	df000017 	ldw	fp,0(sp)
4080e208:	dec00204 	addi	sp,sp,8
4080e20c:	f800283a 	ret

4080e210 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
4080e210:	defffa04 	addi	sp,sp,-24
4080e214:	dfc00515 	stw	ra,20(sp)
4080e218:	df000415 	stw	fp,16(sp)
4080e21c:	df000404 	addi	fp,sp,16
4080e220:	e13ffd15 	stw	r4,-12(fp)
4080e224:	e17ffe15 	stw	r5,-8(fp)
4080e228:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4080e22c:	e0bffd17 	ldw	r2,-12(fp)
4080e230:	10800017 	ldw	r2,0(r2)
4080e234:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
4080e238:	e0bffc17 	ldw	r2,-16(fp)
4080e23c:	10c00a04 	addi	r3,r2,40
4080e240:	e0bffd17 	ldw	r2,-12(fp)
4080e244:	10800217 	ldw	r2,8(r2)
4080e248:	100f883a 	mov	r7,r2
4080e24c:	e1bfff17 	ldw	r6,-4(fp)
4080e250:	e17ffe17 	ldw	r5,-8(fp)
4080e254:	1809883a 	mov	r4,r3
4080e258:	080e9f40 	call	4080e9f4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
4080e25c:	e037883a 	mov	sp,fp
4080e260:	dfc00117 	ldw	ra,4(sp)
4080e264:	df000017 	ldw	fp,0(sp)
4080e268:	dec00204 	addi	sp,sp,8
4080e26c:	f800283a 	ret

4080e270 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
4080e270:	defffc04 	addi	sp,sp,-16
4080e274:	dfc00315 	stw	ra,12(sp)
4080e278:	df000215 	stw	fp,8(sp)
4080e27c:	df000204 	addi	fp,sp,8
4080e280:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
4080e284:	e0bfff17 	ldw	r2,-4(fp)
4080e288:	10800017 	ldw	r2,0(r2)
4080e28c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
4080e290:	e0bffe17 	ldw	r2,-8(fp)
4080e294:	10c00a04 	addi	r3,r2,40
4080e298:	e0bfff17 	ldw	r2,-4(fp)
4080e29c:	10800217 	ldw	r2,8(r2)
4080e2a0:	100b883a 	mov	r5,r2
4080e2a4:	1809883a 	mov	r4,r3
4080e2a8:	080e6800 	call	4080e680 <altera_avalon_jtag_uart_close>
}
4080e2ac:	e037883a 	mov	sp,fp
4080e2b0:	dfc00117 	ldw	ra,4(sp)
4080e2b4:	df000017 	ldw	fp,0(sp)
4080e2b8:	dec00204 	addi	sp,sp,8
4080e2bc:	f800283a 	ret

4080e2c0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
4080e2c0:	defffa04 	addi	sp,sp,-24
4080e2c4:	dfc00515 	stw	ra,20(sp)
4080e2c8:	df000415 	stw	fp,16(sp)
4080e2cc:	df000404 	addi	fp,sp,16
4080e2d0:	e13ffd15 	stw	r4,-12(fp)
4080e2d4:	e17ffe15 	stw	r5,-8(fp)
4080e2d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
4080e2dc:	e0bffd17 	ldw	r2,-12(fp)
4080e2e0:	10800017 	ldw	r2,0(r2)
4080e2e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
4080e2e8:	e0bffc17 	ldw	r2,-16(fp)
4080e2ec:	10800a04 	addi	r2,r2,40
4080e2f0:	e1bfff17 	ldw	r6,-4(fp)
4080e2f4:	e17ffe17 	ldw	r5,-8(fp)
4080e2f8:	1009883a 	mov	r4,r2
4080e2fc:	080e6e80 	call	4080e6e8 <altera_avalon_jtag_uart_ioctl>
}
4080e300:	e037883a 	mov	sp,fp
4080e304:	dfc00117 	ldw	ra,4(sp)
4080e308:	df000017 	ldw	fp,0(sp)
4080e30c:	dec00204 	addi	sp,sp,8
4080e310:	f800283a 	ret

4080e314 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
4080e314:	defffa04 	addi	sp,sp,-24
4080e318:	dfc00515 	stw	ra,20(sp)
4080e31c:	df000415 	stw	fp,16(sp)
4080e320:	df000404 	addi	fp,sp,16
4080e324:	e13ffd15 	stw	r4,-12(fp)
4080e328:	e17ffe15 	stw	r5,-8(fp)
4080e32c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4080e330:	e0bffd17 	ldw	r2,-12(fp)
4080e334:	00c00044 	movi	r3,1
4080e338:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
4080e33c:	e0bffd17 	ldw	r2,-12(fp)
4080e340:	10800017 	ldw	r2,0(r2)
4080e344:	10800104 	addi	r2,r2,4
4080e348:	1007883a 	mov	r3,r2
4080e34c:	e0bffd17 	ldw	r2,-12(fp)
4080e350:	10800817 	ldw	r2,32(r2)
4080e354:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
4080e358:	e0bffe17 	ldw	r2,-8(fp)
4080e35c:	e0ffff17 	ldw	r3,-4(fp)
4080e360:	d8000015 	stw	zero,0(sp)
4080e364:	e1fffd17 	ldw	r7,-12(fp)
4080e368:	01902074 	movhi	r6,16513
4080e36c:	31b8f504 	addi	r6,r6,-7212
4080e370:	180b883a 	mov	r5,r3
4080e374:	1009883a 	mov	r4,r2
4080e378:	0810a7c0 	call	40810a7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
4080e37c:	e0bffd17 	ldw	r2,-12(fp)
4080e380:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
4080e384:	e0bffd17 	ldw	r2,-12(fp)
4080e388:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
4080e38c:	d0e03717 	ldw	r3,-32548(gp)
4080e390:	e1fffd17 	ldw	r7,-12(fp)
4080e394:	01902074 	movhi	r6,16513
4080e398:	31b97804 	addi	r6,r6,-6688
4080e39c:	180b883a 	mov	r5,r3
4080e3a0:	1009883a 	mov	r4,r2
4080e3a4:	08105240 	call	40810524 <alt_alarm_start>
4080e3a8:	1000040e 	bge	r2,zero,4080e3bc <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
4080e3ac:	e0fffd17 	ldw	r3,-12(fp)
4080e3b0:	00a00034 	movhi	r2,32768
4080e3b4:	10bfffc4 	addi	r2,r2,-1
4080e3b8:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
4080e3bc:	0001883a 	nop
4080e3c0:	e037883a 	mov	sp,fp
4080e3c4:	dfc00117 	ldw	ra,4(sp)
4080e3c8:	df000017 	ldw	fp,0(sp)
4080e3cc:	dec00204 	addi	sp,sp,8
4080e3d0:	f800283a 	ret

4080e3d4 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
4080e3d4:	defff804 	addi	sp,sp,-32
4080e3d8:	df000715 	stw	fp,28(sp)
4080e3dc:	df000704 	addi	fp,sp,28
4080e3e0:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
4080e3e4:	e0bfff17 	ldw	r2,-4(fp)
4080e3e8:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
4080e3ec:	e0bffb17 	ldw	r2,-20(fp)
4080e3f0:	10800017 	ldw	r2,0(r2)
4080e3f4:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4080e3f8:	e0bffc17 	ldw	r2,-16(fp)
4080e3fc:	10800104 	addi	r2,r2,4
4080e400:	10800037 	ldwio	r2,0(r2)
4080e404:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
4080e408:	e0bffd17 	ldw	r2,-12(fp)
4080e40c:	1080c00c 	andi	r2,r2,768
4080e410:	10006d26 	beq	r2,zero,4080e5c8 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
4080e414:	e0bffd17 	ldw	r2,-12(fp)
4080e418:	1080400c 	andi	r2,r2,256
4080e41c:	10003526 	beq	r2,zero,4080e4f4 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
4080e420:	00800074 	movhi	r2,1
4080e424:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4080e428:	e0bffb17 	ldw	r2,-20(fp)
4080e42c:	10800a17 	ldw	r2,40(r2)
4080e430:	10800044 	addi	r2,r2,1
4080e434:	1081ffcc 	andi	r2,r2,2047
4080e438:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
4080e43c:	e0bffb17 	ldw	r2,-20(fp)
4080e440:	10c00b17 	ldw	r3,44(r2)
4080e444:	e0bffe17 	ldw	r2,-8(fp)
4080e448:	18801526 	beq	r3,r2,4080e4a0 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
4080e44c:	e0bffc17 	ldw	r2,-16(fp)
4080e450:	10800037 	ldwio	r2,0(r2)
4080e454:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
4080e458:	e0bff917 	ldw	r2,-28(fp)
4080e45c:	10a0000c 	andi	r2,r2,32768
4080e460:	10001126 	beq	r2,zero,4080e4a8 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
4080e464:	e0bffb17 	ldw	r2,-20(fp)
4080e468:	10800a17 	ldw	r2,40(r2)
4080e46c:	e0fff917 	ldw	r3,-28(fp)
4080e470:	1809883a 	mov	r4,r3
4080e474:	e0fffb17 	ldw	r3,-20(fp)
4080e478:	1885883a 	add	r2,r3,r2
4080e47c:	10800e04 	addi	r2,r2,56
4080e480:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4080e484:	e0bffb17 	ldw	r2,-20(fp)
4080e488:	10800a17 	ldw	r2,40(r2)
4080e48c:	10800044 	addi	r2,r2,1
4080e490:	10c1ffcc 	andi	r3,r2,2047
4080e494:	e0bffb17 	ldw	r2,-20(fp)
4080e498:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
4080e49c:	003fe206 	br	4080e428 <__alt_mem_onchip_flash_0_data+0xff7ce428>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
4080e4a0:	0001883a 	nop
4080e4a4:	00000106 	br	4080e4ac <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
4080e4a8:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
4080e4ac:	e0bff917 	ldw	r2,-28(fp)
4080e4b0:	10bfffec 	andhi	r2,r2,65535
4080e4b4:	10000f26 	beq	r2,zero,4080e4f4 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4080e4b8:	e0bffb17 	ldw	r2,-20(fp)
4080e4bc:	10c00817 	ldw	r3,32(r2)
4080e4c0:	00bfff84 	movi	r2,-2
4080e4c4:	1886703a 	and	r3,r3,r2
4080e4c8:	e0bffb17 	ldw	r2,-20(fp)
4080e4cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
4080e4d0:	e0bffc17 	ldw	r2,-16(fp)
4080e4d4:	10800104 	addi	r2,r2,4
4080e4d8:	1007883a 	mov	r3,r2
4080e4dc:	e0bffb17 	ldw	r2,-20(fp)
4080e4e0:	10800817 	ldw	r2,32(r2)
4080e4e4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4080e4e8:	e0bffc17 	ldw	r2,-16(fp)
4080e4ec:	10800104 	addi	r2,r2,4
4080e4f0:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
4080e4f4:	e0bffd17 	ldw	r2,-12(fp)
4080e4f8:	1080800c 	andi	r2,r2,512
4080e4fc:	103fbe26 	beq	r2,zero,4080e3f8 <__alt_mem_onchip_flash_0_data+0xff7ce3f8>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
4080e500:	e0bffd17 	ldw	r2,-12(fp)
4080e504:	1004d43a 	srli	r2,r2,16
4080e508:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
4080e50c:	00001406 	br	4080e560 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
4080e510:	e0bffc17 	ldw	r2,-16(fp)
4080e514:	e0fffb17 	ldw	r3,-20(fp)
4080e518:	18c00d17 	ldw	r3,52(r3)
4080e51c:	e13ffb17 	ldw	r4,-20(fp)
4080e520:	20c7883a 	add	r3,r4,r3
4080e524:	18c20e04 	addi	r3,r3,2104
4080e528:	18c00003 	ldbu	r3,0(r3)
4080e52c:	18c03fcc 	andi	r3,r3,255
4080e530:	18c0201c 	xori	r3,r3,128
4080e534:	18ffe004 	addi	r3,r3,-128
4080e538:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4080e53c:	e0bffb17 	ldw	r2,-20(fp)
4080e540:	10800d17 	ldw	r2,52(r2)
4080e544:	10800044 	addi	r2,r2,1
4080e548:	10c1ffcc 	andi	r3,r2,2047
4080e54c:	e0bffb17 	ldw	r2,-20(fp)
4080e550:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
4080e554:	e0bffa17 	ldw	r2,-24(fp)
4080e558:	10bfffc4 	addi	r2,r2,-1
4080e55c:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
4080e560:	e0bffa17 	ldw	r2,-24(fp)
4080e564:	10000526 	beq	r2,zero,4080e57c <altera_avalon_jtag_uart_irq+0x1a8>
4080e568:	e0bffb17 	ldw	r2,-20(fp)
4080e56c:	10c00d17 	ldw	r3,52(r2)
4080e570:	e0bffb17 	ldw	r2,-20(fp)
4080e574:	10800c17 	ldw	r2,48(r2)
4080e578:	18bfe51e 	bne	r3,r2,4080e510 <__alt_mem_onchip_flash_0_data+0xff7ce510>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
4080e57c:	e0bffa17 	ldw	r2,-24(fp)
4080e580:	103f9d26 	beq	r2,zero,4080e3f8 <__alt_mem_onchip_flash_0_data+0xff7ce3f8>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4080e584:	e0bffb17 	ldw	r2,-20(fp)
4080e588:	10c00817 	ldw	r3,32(r2)
4080e58c:	00bfff44 	movi	r2,-3
4080e590:	1886703a 	and	r3,r3,r2
4080e594:	e0bffb17 	ldw	r2,-20(fp)
4080e598:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4080e59c:	e0bffb17 	ldw	r2,-20(fp)
4080e5a0:	10800017 	ldw	r2,0(r2)
4080e5a4:	10800104 	addi	r2,r2,4
4080e5a8:	1007883a 	mov	r3,r2
4080e5ac:	e0bffb17 	ldw	r2,-20(fp)
4080e5b0:	10800817 	ldw	r2,32(r2)
4080e5b4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
4080e5b8:	e0bffc17 	ldw	r2,-16(fp)
4080e5bc:	10800104 	addi	r2,r2,4
4080e5c0:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
4080e5c4:	003f8c06 	br	4080e3f8 <__alt_mem_onchip_flash_0_data+0xff7ce3f8>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
4080e5c8:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
4080e5cc:	0001883a 	nop
4080e5d0:	e037883a 	mov	sp,fp
4080e5d4:	df000017 	ldw	fp,0(sp)
4080e5d8:	dec00104 	addi	sp,sp,4
4080e5dc:	f800283a 	ret

4080e5e0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
4080e5e0:	defff804 	addi	sp,sp,-32
4080e5e4:	df000715 	stw	fp,28(sp)
4080e5e8:	df000704 	addi	fp,sp,28
4080e5ec:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
4080e5f0:	e0bffb17 	ldw	r2,-20(fp)
4080e5f4:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
4080e5f8:	e0bff917 	ldw	r2,-28(fp)
4080e5fc:	10800017 	ldw	r2,0(r2)
4080e600:	10800104 	addi	r2,r2,4
4080e604:	10800037 	ldwio	r2,0(r2)
4080e608:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
4080e60c:	e0bffa17 	ldw	r2,-24(fp)
4080e610:	1081000c 	andi	r2,r2,1024
4080e614:	10000b26 	beq	r2,zero,4080e644 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
4080e618:	e0bff917 	ldw	r2,-28(fp)
4080e61c:	10800017 	ldw	r2,0(r2)
4080e620:	10800104 	addi	r2,r2,4
4080e624:	1007883a 	mov	r3,r2
4080e628:	e0bff917 	ldw	r2,-28(fp)
4080e62c:	10800817 	ldw	r2,32(r2)
4080e630:	10810014 	ori	r2,r2,1024
4080e634:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
4080e638:	e0bff917 	ldw	r2,-28(fp)
4080e63c:	10000915 	stw	zero,36(r2)
4080e640:	00000a06 	br	4080e66c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
4080e644:	e0bff917 	ldw	r2,-28(fp)
4080e648:	10c00917 	ldw	r3,36(r2)
4080e64c:	00a00034 	movhi	r2,32768
4080e650:	10bfff04 	addi	r2,r2,-4
4080e654:	10c00536 	bltu	r2,r3,4080e66c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
4080e658:	e0bff917 	ldw	r2,-28(fp)
4080e65c:	10800917 	ldw	r2,36(r2)
4080e660:	10c00044 	addi	r3,r2,1
4080e664:	e0bff917 	ldw	r2,-28(fp)
4080e668:	10c00915 	stw	r3,36(r2)
4080e66c:	d0a03717 	ldw	r2,-32548(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
4080e670:	e037883a 	mov	sp,fp
4080e674:	df000017 	ldw	fp,0(sp)
4080e678:	dec00104 	addi	sp,sp,4
4080e67c:	f800283a 	ret

4080e680 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
4080e680:	defffd04 	addi	sp,sp,-12
4080e684:	df000215 	stw	fp,8(sp)
4080e688:	df000204 	addi	fp,sp,8
4080e68c:	e13ffe15 	stw	r4,-8(fp)
4080e690:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
4080e694:	00000506 	br	4080e6ac <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
4080e698:	e0bfff17 	ldw	r2,-4(fp)
4080e69c:	1090000c 	andi	r2,r2,16384
4080e6a0:	10000226 	beq	r2,zero,4080e6ac <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
4080e6a4:	00bffd44 	movi	r2,-11
4080e6a8:	00000b06 	br	4080e6d8 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
4080e6ac:	e0bffe17 	ldw	r2,-8(fp)
4080e6b0:	10c00d17 	ldw	r3,52(r2)
4080e6b4:	e0bffe17 	ldw	r2,-8(fp)
4080e6b8:	10800c17 	ldw	r2,48(r2)
4080e6bc:	18800526 	beq	r3,r2,4080e6d4 <altera_avalon_jtag_uart_close+0x54>
4080e6c0:	e0bffe17 	ldw	r2,-8(fp)
4080e6c4:	10c00917 	ldw	r3,36(r2)
4080e6c8:	e0bffe17 	ldw	r2,-8(fp)
4080e6cc:	10800117 	ldw	r2,4(r2)
4080e6d0:	18bff136 	bltu	r3,r2,4080e698 <__alt_mem_onchip_flash_0_data+0xff7ce698>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
4080e6d4:	0005883a 	mov	r2,zero
}
4080e6d8:	e037883a 	mov	sp,fp
4080e6dc:	df000017 	ldw	fp,0(sp)
4080e6e0:	dec00104 	addi	sp,sp,4
4080e6e4:	f800283a 	ret

4080e6e8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
4080e6e8:	defffa04 	addi	sp,sp,-24
4080e6ec:	df000515 	stw	fp,20(sp)
4080e6f0:	df000504 	addi	fp,sp,20
4080e6f4:	e13ffd15 	stw	r4,-12(fp)
4080e6f8:	e17ffe15 	stw	r5,-8(fp)
4080e6fc:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
4080e700:	00bff9c4 	movi	r2,-25
4080e704:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
4080e708:	e0bffe17 	ldw	r2,-8(fp)
4080e70c:	10da8060 	cmpeqi	r3,r2,27137
4080e710:	1800031e 	bne	r3,zero,4080e720 <altera_avalon_jtag_uart_ioctl+0x38>
4080e714:	109a80a0 	cmpeqi	r2,r2,27138
4080e718:	1000181e 	bne	r2,zero,4080e77c <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
4080e71c:	00002906 	br	4080e7c4 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
4080e720:	e0bffd17 	ldw	r2,-12(fp)
4080e724:	10c00117 	ldw	r3,4(r2)
4080e728:	00a00034 	movhi	r2,32768
4080e72c:	10bfffc4 	addi	r2,r2,-1
4080e730:	18802126 	beq	r3,r2,4080e7b8 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
4080e734:	e0bfff17 	ldw	r2,-4(fp)
4080e738:	10800017 	ldw	r2,0(r2)
4080e73c:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
4080e740:	e0bffc17 	ldw	r2,-16(fp)
4080e744:	10800090 	cmplti	r2,r2,2
4080e748:	1000061e 	bne	r2,zero,4080e764 <altera_avalon_jtag_uart_ioctl+0x7c>
4080e74c:	e0fffc17 	ldw	r3,-16(fp)
4080e750:	00a00034 	movhi	r2,32768
4080e754:	10bfffc4 	addi	r2,r2,-1
4080e758:	18800226 	beq	r3,r2,4080e764 <altera_avalon_jtag_uart_ioctl+0x7c>
4080e75c:	e0bffc17 	ldw	r2,-16(fp)
4080e760:	00000206 	br	4080e76c <altera_avalon_jtag_uart_ioctl+0x84>
4080e764:	00a00034 	movhi	r2,32768
4080e768:	10bfff84 	addi	r2,r2,-2
4080e76c:	e0fffd17 	ldw	r3,-12(fp)
4080e770:	18800115 	stw	r2,4(r3)
      rc = 0;
4080e774:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
4080e778:	00000f06 	br	4080e7b8 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
4080e77c:	e0bffd17 	ldw	r2,-12(fp)
4080e780:	10c00117 	ldw	r3,4(r2)
4080e784:	00a00034 	movhi	r2,32768
4080e788:	10bfffc4 	addi	r2,r2,-1
4080e78c:	18800c26 	beq	r3,r2,4080e7c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
4080e790:	e0bffd17 	ldw	r2,-12(fp)
4080e794:	10c00917 	ldw	r3,36(r2)
4080e798:	e0bffd17 	ldw	r2,-12(fp)
4080e79c:	10800117 	ldw	r2,4(r2)
4080e7a0:	1885803a 	cmpltu	r2,r3,r2
4080e7a4:	10c03fcc 	andi	r3,r2,255
4080e7a8:	e0bfff17 	ldw	r2,-4(fp)
4080e7ac:	10c00015 	stw	r3,0(r2)
      rc = 0;
4080e7b0:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
4080e7b4:	00000206 	br	4080e7c0 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
4080e7b8:	0001883a 	nop
4080e7bc:	00000106 	br	4080e7c4 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
4080e7c0:	0001883a 	nop

  default:
    break;
  }

  return rc;
4080e7c4:	e0bffb17 	ldw	r2,-20(fp)
}
4080e7c8:	e037883a 	mov	sp,fp
4080e7cc:	df000017 	ldw	fp,0(sp)
4080e7d0:	dec00104 	addi	sp,sp,4
4080e7d4:	f800283a 	ret

4080e7d8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
4080e7d8:	defff304 	addi	sp,sp,-52
4080e7dc:	dfc00c15 	stw	ra,48(sp)
4080e7e0:	df000b15 	stw	fp,44(sp)
4080e7e4:	df000b04 	addi	fp,sp,44
4080e7e8:	e13ffc15 	stw	r4,-16(fp)
4080e7ec:	e17ffd15 	stw	r5,-12(fp)
4080e7f0:	e1bffe15 	stw	r6,-8(fp)
4080e7f4:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
4080e7f8:	e0bffd17 	ldw	r2,-12(fp)
4080e7fc:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
4080e800:	00004706 	br	4080e920 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
4080e804:	e0bffc17 	ldw	r2,-16(fp)
4080e808:	10800a17 	ldw	r2,40(r2)
4080e80c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
4080e810:	e0bffc17 	ldw	r2,-16(fp)
4080e814:	10800b17 	ldw	r2,44(r2)
4080e818:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
4080e81c:	e0fff717 	ldw	r3,-36(fp)
4080e820:	e0bff817 	ldw	r2,-32(fp)
4080e824:	18800536 	bltu	r3,r2,4080e83c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
4080e828:	e0fff717 	ldw	r3,-36(fp)
4080e82c:	e0bff817 	ldw	r2,-32(fp)
4080e830:	1885c83a 	sub	r2,r3,r2
4080e834:	e0bff615 	stw	r2,-40(fp)
4080e838:	00000406 	br	4080e84c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
4080e83c:	00c20004 	movi	r3,2048
4080e840:	e0bff817 	ldw	r2,-32(fp)
4080e844:	1885c83a 	sub	r2,r3,r2
4080e848:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
4080e84c:	e0bff617 	ldw	r2,-40(fp)
4080e850:	10001e26 	beq	r2,zero,4080e8cc <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
4080e854:	e0fffe17 	ldw	r3,-8(fp)
4080e858:	e0bff617 	ldw	r2,-40(fp)
4080e85c:	1880022e 	bgeu	r3,r2,4080e868 <altera_avalon_jtag_uart_read+0x90>
        n = space;
4080e860:	e0bffe17 	ldw	r2,-8(fp)
4080e864:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
4080e868:	e0bffc17 	ldw	r2,-16(fp)
4080e86c:	10c00e04 	addi	r3,r2,56
4080e870:	e0bff817 	ldw	r2,-32(fp)
4080e874:	1885883a 	add	r2,r3,r2
4080e878:	e1bff617 	ldw	r6,-40(fp)
4080e87c:	100b883a 	mov	r5,r2
4080e880:	e13ff517 	ldw	r4,-44(fp)
4080e884:	0806b640 	call	40806b64 <memcpy>
      ptr   += n;
4080e888:	e0fff517 	ldw	r3,-44(fp)
4080e88c:	e0bff617 	ldw	r2,-40(fp)
4080e890:	1885883a 	add	r2,r3,r2
4080e894:	e0bff515 	stw	r2,-44(fp)
      space -= n;
4080e898:	e0fffe17 	ldw	r3,-8(fp)
4080e89c:	e0bff617 	ldw	r2,-40(fp)
4080e8a0:	1885c83a 	sub	r2,r3,r2
4080e8a4:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4080e8a8:	e0fff817 	ldw	r3,-32(fp)
4080e8ac:	e0bff617 	ldw	r2,-40(fp)
4080e8b0:	1885883a 	add	r2,r3,r2
4080e8b4:	10c1ffcc 	andi	r3,r2,2047
4080e8b8:	e0bffc17 	ldw	r2,-16(fp)
4080e8bc:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
4080e8c0:	e0bffe17 	ldw	r2,-8(fp)
4080e8c4:	00bfcf16 	blt	zero,r2,4080e804 <__alt_mem_onchip_flash_0_data+0xff7ce804>
4080e8c8:	00000106 	br	4080e8d0 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
4080e8cc:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
4080e8d0:	e0fff517 	ldw	r3,-44(fp)
4080e8d4:	e0bffd17 	ldw	r2,-12(fp)
4080e8d8:	1880141e 	bne	r3,r2,4080e92c <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
4080e8dc:	e0bfff17 	ldw	r2,-4(fp)
4080e8e0:	1090000c 	andi	r2,r2,16384
4080e8e4:	1000131e 	bne	r2,zero,4080e934 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
4080e8e8:	0001883a 	nop
4080e8ec:	e0bffc17 	ldw	r2,-16(fp)
4080e8f0:	10c00a17 	ldw	r3,40(r2)
4080e8f4:	e0bff717 	ldw	r2,-36(fp)
4080e8f8:	1880051e 	bne	r3,r2,4080e910 <altera_avalon_jtag_uart_read+0x138>
4080e8fc:	e0bffc17 	ldw	r2,-16(fp)
4080e900:	10c00917 	ldw	r3,36(r2)
4080e904:	e0bffc17 	ldw	r2,-16(fp)
4080e908:	10800117 	ldw	r2,4(r2)
4080e90c:	18bff736 	bltu	r3,r2,4080e8ec <__alt_mem_onchip_flash_0_data+0xff7ce8ec>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
4080e910:	e0bffc17 	ldw	r2,-16(fp)
4080e914:	10c00a17 	ldw	r3,40(r2)
4080e918:	e0bff717 	ldw	r2,-36(fp)
4080e91c:	18800726 	beq	r3,r2,4080e93c <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
4080e920:	e0bffe17 	ldw	r2,-8(fp)
4080e924:	00bfb716 	blt	zero,r2,4080e804 <__alt_mem_onchip_flash_0_data+0xff7ce804>
4080e928:	00000506 	br	4080e940 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
4080e92c:	0001883a 	nop
4080e930:	00000306 	br	4080e940 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
4080e934:	0001883a 	nop
4080e938:	00000106 	br	4080e940 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
4080e93c:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
4080e940:	e0fff517 	ldw	r3,-44(fp)
4080e944:	e0bffd17 	ldw	r2,-12(fp)
4080e948:	18801826 	beq	r3,r2,4080e9ac <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080e94c:	0005303a 	rdctl	r2,status
4080e950:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080e954:	e0fffb17 	ldw	r3,-20(fp)
4080e958:	00bfff84 	movi	r2,-2
4080e95c:	1884703a 	and	r2,r3,r2
4080e960:	1001703a 	wrctl	status,r2
  
  return context;
4080e964:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
4080e968:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
4080e96c:	e0bffc17 	ldw	r2,-16(fp)
4080e970:	10800817 	ldw	r2,32(r2)
4080e974:	10c00054 	ori	r3,r2,1
4080e978:	e0bffc17 	ldw	r2,-16(fp)
4080e97c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4080e980:	e0bffc17 	ldw	r2,-16(fp)
4080e984:	10800017 	ldw	r2,0(r2)
4080e988:	10800104 	addi	r2,r2,4
4080e98c:	1007883a 	mov	r3,r2
4080e990:	e0bffc17 	ldw	r2,-16(fp)
4080e994:	10800817 	ldw	r2,32(r2)
4080e998:	18800035 	stwio	r2,0(r3)
4080e99c:	e0bffa17 	ldw	r2,-24(fp)
4080e9a0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080e9a4:	e0bff917 	ldw	r2,-28(fp)
4080e9a8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
4080e9ac:	e0fff517 	ldw	r3,-44(fp)
4080e9b0:	e0bffd17 	ldw	r2,-12(fp)
4080e9b4:	18800426 	beq	r3,r2,4080e9c8 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
4080e9b8:	e0fff517 	ldw	r3,-44(fp)
4080e9bc:	e0bffd17 	ldw	r2,-12(fp)
4080e9c0:	1885c83a 	sub	r2,r3,r2
4080e9c4:	00000606 	br	4080e9e0 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
4080e9c8:	e0bfff17 	ldw	r2,-4(fp)
4080e9cc:	1090000c 	andi	r2,r2,16384
4080e9d0:	10000226 	beq	r2,zero,4080e9dc <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
4080e9d4:	00bffd44 	movi	r2,-11
4080e9d8:	00000106 	br	4080e9e0 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
4080e9dc:	00bffec4 	movi	r2,-5
}
4080e9e0:	e037883a 	mov	sp,fp
4080e9e4:	dfc00117 	ldw	ra,4(sp)
4080e9e8:	df000017 	ldw	fp,0(sp)
4080e9ec:	dec00204 	addi	sp,sp,8
4080e9f0:	f800283a 	ret

4080e9f4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
4080e9f4:	defff304 	addi	sp,sp,-52
4080e9f8:	dfc00c15 	stw	ra,48(sp)
4080e9fc:	df000b15 	stw	fp,44(sp)
4080ea00:	df000b04 	addi	fp,sp,44
4080ea04:	e13ffc15 	stw	r4,-16(fp)
4080ea08:	e17ffd15 	stw	r5,-12(fp)
4080ea0c:	e1bffe15 	stw	r6,-8(fp)
4080ea10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
4080ea14:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
4080ea18:	e0bffd17 	ldw	r2,-12(fp)
4080ea1c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
4080ea20:	00003706 	br	4080eb00 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
4080ea24:	e0bffc17 	ldw	r2,-16(fp)
4080ea28:	10800c17 	ldw	r2,48(r2)
4080ea2c:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
4080ea30:	e0bffc17 	ldw	r2,-16(fp)
4080ea34:	10800d17 	ldw	r2,52(r2)
4080ea38:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
4080ea3c:	e0fff917 	ldw	r3,-28(fp)
4080ea40:	e0bff517 	ldw	r2,-44(fp)
4080ea44:	1880062e 	bgeu	r3,r2,4080ea60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
4080ea48:	e0fff517 	ldw	r3,-44(fp)
4080ea4c:	e0bff917 	ldw	r2,-28(fp)
4080ea50:	1885c83a 	sub	r2,r3,r2
4080ea54:	10bfffc4 	addi	r2,r2,-1
4080ea58:	e0bff615 	stw	r2,-40(fp)
4080ea5c:	00000b06 	br	4080ea8c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
4080ea60:	e0bff517 	ldw	r2,-44(fp)
4080ea64:	10000526 	beq	r2,zero,4080ea7c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
4080ea68:	00c20004 	movi	r3,2048
4080ea6c:	e0bff917 	ldw	r2,-28(fp)
4080ea70:	1885c83a 	sub	r2,r3,r2
4080ea74:	e0bff615 	stw	r2,-40(fp)
4080ea78:	00000406 	br	4080ea8c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
4080ea7c:	00c1ffc4 	movi	r3,2047
4080ea80:	e0bff917 	ldw	r2,-28(fp)
4080ea84:	1885c83a 	sub	r2,r3,r2
4080ea88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
4080ea8c:	e0bff617 	ldw	r2,-40(fp)
4080ea90:	10001e26 	beq	r2,zero,4080eb0c <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
4080ea94:	e0fffe17 	ldw	r3,-8(fp)
4080ea98:	e0bff617 	ldw	r2,-40(fp)
4080ea9c:	1880022e 	bgeu	r3,r2,4080eaa8 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
4080eaa0:	e0bffe17 	ldw	r2,-8(fp)
4080eaa4:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
4080eaa8:	e0bffc17 	ldw	r2,-16(fp)
4080eaac:	10c20e04 	addi	r3,r2,2104
4080eab0:	e0bff917 	ldw	r2,-28(fp)
4080eab4:	1885883a 	add	r2,r3,r2
4080eab8:	e1bff617 	ldw	r6,-40(fp)
4080eabc:	e17ffd17 	ldw	r5,-12(fp)
4080eac0:	1009883a 	mov	r4,r2
4080eac4:	0806b640 	call	40806b64 <memcpy>
      ptr   += n;
4080eac8:	e0fffd17 	ldw	r3,-12(fp)
4080eacc:	e0bff617 	ldw	r2,-40(fp)
4080ead0:	1885883a 	add	r2,r3,r2
4080ead4:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
4080ead8:	e0fffe17 	ldw	r3,-8(fp)
4080eadc:	e0bff617 	ldw	r2,-40(fp)
4080eae0:	1885c83a 	sub	r2,r3,r2
4080eae4:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
4080eae8:	e0fff917 	ldw	r3,-28(fp)
4080eaec:	e0bff617 	ldw	r2,-40(fp)
4080eaf0:	1885883a 	add	r2,r3,r2
4080eaf4:	10c1ffcc 	andi	r3,r2,2047
4080eaf8:	e0bffc17 	ldw	r2,-16(fp)
4080eafc:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
4080eb00:	e0bffe17 	ldw	r2,-8(fp)
4080eb04:	00bfc716 	blt	zero,r2,4080ea24 <__alt_mem_onchip_flash_0_data+0xff7cea24>
4080eb08:	00000106 	br	4080eb10 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
4080eb0c:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080eb10:	0005303a 	rdctl	r2,status
4080eb14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080eb18:	e0fffb17 	ldw	r3,-20(fp)
4080eb1c:	00bfff84 	movi	r2,-2
4080eb20:	1884703a 	and	r2,r3,r2
4080eb24:	1001703a 	wrctl	status,r2
  
  return context;
4080eb28:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
4080eb2c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
4080eb30:	e0bffc17 	ldw	r2,-16(fp)
4080eb34:	10800817 	ldw	r2,32(r2)
4080eb38:	10c00094 	ori	r3,r2,2
4080eb3c:	e0bffc17 	ldw	r2,-16(fp)
4080eb40:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
4080eb44:	e0bffc17 	ldw	r2,-16(fp)
4080eb48:	10800017 	ldw	r2,0(r2)
4080eb4c:	10800104 	addi	r2,r2,4
4080eb50:	1007883a 	mov	r3,r2
4080eb54:	e0bffc17 	ldw	r2,-16(fp)
4080eb58:	10800817 	ldw	r2,32(r2)
4080eb5c:	18800035 	stwio	r2,0(r3)
4080eb60:	e0bffa17 	ldw	r2,-24(fp)
4080eb64:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080eb68:	e0bff817 	ldw	r2,-32(fp)
4080eb6c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
4080eb70:	e0bffe17 	ldw	r2,-8(fp)
4080eb74:	0080100e 	bge	zero,r2,4080ebb8 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
4080eb78:	e0bfff17 	ldw	r2,-4(fp)
4080eb7c:	1090000c 	andi	r2,r2,16384
4080eb80:	1000101e 	bne	r2,zero,4080ebc4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
4080eb84:	0001883a 	nop
4080eb88:	e0bffc17 	ldw	r2,-16(fp)
4080eb8c:	10c00d17 	ldw	r3,52(r2)
4080eb90:	e0bff517 	ldw	r2,-44(fp)
4080eb94:	1880051e 	bne	r3,r2,4080ebac <altera_avalon_jtag_uart_write+0x1b8>
4080eb98:	e0bffc17 	ldw	r2,-16(fp)
4080eb9c:	10c00917 	ldw	r3,36(r2)
4080eba0:	e0bffc17 	ldw	r2,-16(fp)
4080eba4:	10800117 	ldw	r2,4(r2)
4080eba8:	18bff736 	bltu	r3,r2,4080eb88 <__alt_mem_onchip_flash_0_data+0xff7ceb88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
4080ebac:	e0bffc17 	ldw	r2,-16(fp)
4080ebb0:	10800917 	ldw	r2,36(r2)
4080ebb4:	1000051e 	bne	r2,zero,4080ebcc <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
4080ebb8:	e0bffe17 	ldw	r2,-8(fp)
4080ebbc:	00bfd016 	blt	zero,r2,4080eb00 <__alt_mem_onchip_flash_0_data+0xff7ceb00>
4080ebc0:	00000306 	br	4080ebd0 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
4080ebc4:	0001883a 	nop
4080ebc8:	00000106 	br	4080ebd0 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
4080ebcc:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
4080ebd0:	e0fffd17 	ldw	r3,-12(fp)
4080ebd4:	e0bff717 	ldw	r2,-36(fp)
4080ebd8:	18800426 	beq	r3,r2,4080ebec <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
4080ebdc:	e0fffd17 	ldw	r3,-12(fp)
4080ebe0:	e0bff717 	ldw	r2,-36(fp)
4080ebe4:	1885c83a 	sub	r2,r3,r2
4080ebe8:	00000606 	br	4080ec04 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
4080ebec:	e0bfff17 	ldw	r2,-4(fp)
4080ebf0:	1090000c 	andi	r2,r2,16384
4080ebf4:	10000226 	beq	r2,zero,4080ec00 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
4080ebf8:	00bffd44 	movi	r2,-11
4080ebfc:	00000106 	br	4080ec04 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
4080ec00:	00bffec4 	movi	r2,-5
}
4080ec04:	e037883a 	mov	sp,fp
4080ec08:	dfc00117 	ldw	ra,4(sp)
4080ec0c:	df000017 	ldw	fp,0(sp)
4080ec10:	dec00204 	addi	sp,sp,8
4080ec14:	f800283a 	ret

4080ec18 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
4080ec18:	defffa04 	addi	sp,sp,-24
4080ec1c:	dfc00515 	stw	ra,20(sp)
4080ec20:	df000415 	stw	fp,16(sp)
4080ec24:	df000404 	addi	fp,sp,16
4080ec28:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
4080ec2c:	0007883a 	mov	r3,zero
4080ec30:	e0bfff17 	ldw	r2,-4(fp)
4080ec34:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
4080ec38:	e0bfff17 	ldw	r2,-4(fp)
4080ec3c:	10800104 	addi	r2,r2,4
4080ec40:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080ec44:	0005303a 	rdctl	r2,status
4080ec48:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080ec4c:	e0fffd17 	ldw	r3,-12(fp)
4080ec50:	00bfff84 	movi	r2,-2
4080ec54:	1884703a 	and	r2,r3,r2
4080ec58:	1001703a 	wrctl	status,r2
  
  return context;
4080ec5c:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
4080ec60:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
4080ec64:	081114c0 	call	4081114c <alt_tick>
4080ec68:	e0bffc17 	ldw	r2,-16(fp)
4080ec6c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080ec70:	e0bffe17 	ldw	r2,-8(fp)
4080ec74:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
4080ec78:	0001883a 	nop
4080ec7c:	e037883a 	mov	sp,fp
4080ec80:	dfc00117 	ldw	ra,4(sp)
4080ec84:	df000017 	ldw	fp,0(sp)
4080ec88:	dec00204 	addi	sp,sp,8
4080ec8c:	f800283a 	ret

4080ec90 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
4080ec90:	defff804 	addi	sp,sp,-32
4080ec94:	dfc00715 	stw	ra,28(sp)
4080ec98:	df000615 	stw	fp,24(sp)
4080ec9c:	df000604 	addi	fp,sp,24
4080eca0:	e13ffc15 	stw	r4,-16(fp)
4080eca4:	e17ffd15 	stw	r5,-12(fp)
4080eca8:	e1bffe15 	stw	r6,-8(fp)
4080ecac:	e1ffff15 	stw	r7,-4(fp)
4080ecb0:	e0bfff17 	ldw	r2,-4(fp)
4080ecb4:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
4080ecb8:	d0a03717 	ldw	r2,-32548(gp)
4080ecbc:	1000021e 	bne	r2,zero,4080ecc8 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
4080ecc0:	e0bffb17 	ldw	r2,-20(fp)
4080ecc4:	d0a03715 	stw	r2,-32548(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
4080ecc8:	e0bffc17 	ldw	r2,-16(fp)
4080eccc:	10800104 	addi	r2,r2,4
4080ecd0:	00c001c4 	movi	r3,7
4080ecd4:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
4080ecd8:	d8000015 	stw	zero,0(sp)
4080ecdc:	e1fffc17 	ldw	r7,-16(fp)
4080ece0:	01902074 	movhi	r6,16513
4080ece4:	31bb0604 	addi	r6,r6,-5096
4080ece8:	e17ffe17 	ldw	r5,-8(fp)
4080ecec:	e13ffd17 	ldw	r4,-12(fp)
4080ecf0:	0810a7c0 	call	40810a7c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
4080ecf4:	0001883a 	nop
4080ecf8:	e037883a 	mov	sp,fp
4080ecfc:	dfc00117 	ldw	ra,4(sp)
4080ed00:	df000017 	ldw	fp,0(sp)
4080ed04:	dec00204 	addi	sp,sp,8
4080ed08:	f800283a 	ret

4080ed0c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
4080ed0c:	defffa04 	addi	sp,sp,-24
4080ed10:	dfc00515 	stw	ra,20(sp)
4080ed14:	df000415 	stw	fp,16(sp)
4080ed18:	df000404 	addi	fp,sp,16
4080ed1c:	e13ffd15 	stw	r4,-12(fp)
4080ed20:	e17ffe15 	stw	r5,-8(fp)
4080ed24:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
4080ed28:	e0bffd17 	ldw	r2,-12(fp)
4080ed2c:	10800017 	ldw	r2,0(r2)
4080ed30:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
4080ed34:	e0bffc17 	ldw	r2,-16(fp)
4080ed38:	10c00a04 	addi	r3,r2,40
4080ed3c:	e0bffd17 	ldw	r2,-12(fp)
4080ed40:	10800217 	ldw	r2,8(r2)
4080ed44:	100f883a 	mov	r7,r2
4080ed48:	e1bfff17 	ldw	r6,-4(fp)
4080ed4c:	e17ffe17 	ldw	r5,-8(fp)
4080ed50:	1809883a 	mov	r4,r3
4080ed54:	080f2200 	call	4080f220 <altera_avalon_uart_read>
      fd->fd_flags);
}
4080ed58:	e037883a 	mov	sp,fp
4080ed5c:	dfc00117 	ldw	ra,4(sp)
4080ed60:	df000017 	ldw	fp,0(sp)
4080ed64:	dec00204 	addi	sp,sp,8
4080ed68:	f800283a 	ret

4080ed6c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
4080ed6c:	defffa04 	addi	sp,sp,-24
4080ed70:	dfc00515 	stw	ra,20(sp)
4080ed74:	df000415 	stw	fp,16(sp)
4080ed78:	df000404 	addi	fp,sp,16
4080ed7c:	e13ffd15 	stw	r4,-12(fp)
4080ed80:	e17ffe15 	stw	r5,-8(fp)
4080ed84:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
4080ed88:	e0bffd17 	ldw	r2,-12(fp)
4080ed8c:	10800017 	ldw	r2,0(r2)
4080ed90:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
4080ed94:	e0bffc17 	ldw	r2,-16(fp)
4080ed98:	10c00a04 	addi	r3,r2,40
4080ed9c:	e0bffd17 	ldw	r2,-12(fp)
4080eda0:	10800217 	ldw	r2,8(r2)
4080eda4:	100f883a 	mov	r7,r2
4080eda8:	e1bfff17 	ldw	r6,-4(fp)
4080edac:	e17ffe17 	ldw	r5,-8(fp)
4080edb0:	1809883a 	mov	r4,r3
4080edb4:	080f4380 	call	4080f438 <altera_avalon_uart_write>
      fd->fd_flags);
}
4080edb8:	e037883a 	mov	sp,fp
4080edbc:	dfc00117 	ldw	ra,4(sp)
4080edc0:	df000017 	ldw	fp,0(sp)
4080edc4:	dec00204 	addi	sp,sp,8
4080edc8:	f800283a 	ret

4080edcc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
4080edcc:	defffc04 	addi	sp,sp,-16
4080edd0:	dfc00315 	stw	ra,12(sp)
4080edd4:	df000215 	stw	fp,8(sp)
4080edd8:	df000204 	addi	fp,sp,8
4080eddc:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
4080ede0:	e0bfff17 	ldw	r2,-4(fp)
4080ede4:	10800017 	ldw	r2,0(r2)
4080ede8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
4080edec:	e0bffe17 	ldw	r2,-8(fp)
4080edf0:	10c00a04 	addi	r3,r2,40
4080edf4:	e0bfff17 	ldw	r2,-4(fp)
4080edf8:	10800217 	ldw	r2,8(r2)
4080edfc:	100b883a 	mov	r5,r2
4080ee00:	1809883a 	mov	r4,r3
4080ee04:	080f1900 	call	4080f190 <altera_avalon_uart_close>
}
4080ee08:	e037883a 	mov	sp,fp
4080ee0c:	dfc00117 	ldw	ra,4(sp)
4080ee10:	df000017 	ldw	fp,0(sp)
4080ee14:	dec00204 	addi	sp,sp,8
4080ee18:	f800283a 	ret

4080ee1c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
4080ee1c:	defff804 	addi	sp,sp,-32
4080ee20:	dfc00715 	stw	ra,28(sp)
4080ee24:	df000615 	stw	fp,24(sp)
4080ee28:	df000604 	addi	fp,sp,24
4080ee2c:	e13ffd15 	stw	r4,-12(fp)
4080ee30:	e17ffe15 	stw	r5,-8(fp)
4080ee34:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
4080ee38:	e0bffd17 	ldw	r2,-12(fp)
4080ee3c:	10800017 	ldw	r2,0(r2)
4080ee40:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
4080ee44:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
4080ee48:	1000041e 	bne	r2,zero,4080ee5c <altera_avalon_uart_init+0x40>
4080ee4c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
4080ee50:	1000021e 	bne	r2,zero,4080ee5c <altera_avalon_uart_init+0x40>
4080ee54:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
4080ee58:	10000226 	beq	r2,zero,4080ee64 <altera_avalon_uart_init+0x48>
4080ee5c:	00800044 	movi	r2,1
4080ee60:	00000106 	br	4080ee68 <altera_avalon_uart_init+0x4c>
4080ee64:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
4080ee68:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
4080ee6c:	e0bffc17 	ldw	r2,-16(fp)
4080ee70:	10000f1e 	bne	r2,zero,4080eeb0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
4080ee74:	e0bffd17 	ldw	r2,-12(fp)
4080ee78:	00c32004 	movi	r3,3200
4080ee7c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
4080ee80:	e0bffb17 	ldw	r2,-20(fp)
4080ee84:	10800304 	addi	r2,r2,12
4080ee88:	e0fffd17 	ldw	r3,-12(fp)
4080ee8c:	18c00117 	ldw	r3,4(r3)
4080ee90:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
4080ee94:	d8000015 	stw	zero,0(sp)
4080ee98:	e1fffd17 	ldw	r7,-12(fp)
4080ee9c:	01902074 	movhi	r6,16513
4080eea0:	31bbb204 	addi	r6,r6,-4408
4080eea4:	e17fff17 	ldw	r5,-4(fp)
4080eea8:	e13ffe17 	ldw	r4,-8(fp)
4080eeac:	0810a7c0 	call	40810a7c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
4080eeb0:	0001883a 	nop
4080eeb4:	e037883a 	mov	sp,fp
4080eeb8:	dfc00117 	ldw	ra,4(sp)
4080eebc:	df000017 	ldw	fp,0(sp)
4080eec0:	dec00204 	addi	sp,sp,8
4080eec4:	f800283a 	ret

4080eec8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
4080eec8:	defffa04 	addi	sp,sp,-24
4080eecc:	dfc00515 	stw	ra,20(sp)
4080eed0:	df000415 	stw	fp,16(sp)
4080eed4:	df000404 	addi	fp,sp,16
4080eed8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
4080eedc:	e0bfff17 	ldw	r2,-4(fp)
4080eee0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
4080eee4:	e0bffc17 	ldw	r2,-16(fp)
4080eee8:	10800017 	ldw	r2,0(r2)
4080eeec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
4080eef0:	e0bffd17 	ldw	r2,-12(fp)
4080eef4:	10800204 	addi	r2,r2,8
4080eef8:	10800037 	ldwio	r2,0(r2)
4080eefc:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
4080ef00:	e0bffd17 	ldw	r2,-12(fp)
4080ef04:	10800204 	addi	r2,r2,8
4080ef08:	0007883a 	mov	r3,zero
4080ef0c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
4080ef10:	e0bffd17 	ldw	r2,-12(fp)
4080ef14:	10800204 	addi	r2,r2,8
4080ef18:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
4080ef1c:	e0bffe17 	ldw	r2,-8(fp)
4080ef20:	1080200c 	andi	r2,r2,128
4080ef24:	10000326 	beq	r2,zero,4080ef34 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
4080ef28:	e17ffe17 	ldw	r5,-8(fp)
4080ef2c:	e13ffc17 	ldw	r4,-16(fp)
4080ef30:	080ef640 	call	4080ef64 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
4080ef34:	e0bffe17 	ldw	r2,-8(fp)
4080ef38:	1081100c 	andi	r2,r2,1088
4080ef3c:	10000326 	beq	r2,zero,4080ef4c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
4080ef40:	e17ffe17 	ldw	r5,-8(fp)
4080ef44:	e13ffc17 	ldw	r4,-16(fp)
4080ef48:	080f0480 	call	4080f048 <altera_avalon_uart_txirq>
  }
  

}
4080ef4c:	0001883a 	nop
4080ef50:	e037883a 	mov	sp,fp
4080ef54:	dfc00117 	ldw	ra,4(sp)
4080ef58:	df000017 	ldw	fp,0(sp)
4080ef5c:	dec00204 	addi	sp,sp,8
4080ef60:	f800283a 	ret

4080ef64 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
4080ef64:	defffc04 	addi	sp,sp,-16
4080ef68:	df000315 	stw	fp,12(sp)
4080ef6c:	df000304 	addi	fp,sp,12
4080ef70:	e13ffe15 	stw	r4,-8(fp)
4080ef74:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
4080ef78:	e0bfff17 	ldw	r2,-4(fp)
4080ef7c:	108000cc 	andi	r2,r2,3
4080ef80:	10002c1e 	bne	r2,zero,4080f034 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
4080ef84:	e0bffe17 	ldw	r2,-8(fp)
4080ef88:	10800317 	ldw	r2,12(r2)
4080ef8c:	e0bffe17 	ldw	r2,-8(fp)
4080ef90:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
4080ef94:	e0bffe17 	ldw	r2,-8(fp)
4080ef98:	10800317 	ldw	r2,12(r2)
4080ef9c:	10800044 	addi	r2,r2,1
4080efa0:	10800fcc 	andi	r2,r2,63
4080efa4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
4080efa8:	e0bffe17 	ldw	r2,-8(fp)
4080efac:	10800317 	ldw	r2,12(r2)
4080efb0:	e0fffe17 	ldw	r3,-8(fp)
4080efb4:	18c00017 	ldw	r3,0(r3)
4080efb8:	18c00037 	ldwio	r3,0(r3)
4080efbc:	1809883a 	mov	r4,r3
4080efc0:	e0fffe17 	ldw	r3,-8(fp)
4080efc4:	1885883a 	add	r2,r3,r2
4080efc8:	10800704 	addi	r2,r2,28
4080efcc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
4080efd0:	e0bffe17 	ldw	r2,-8(fp)
4080efd4:	e0fffd17 	ldw	r3,-12(fp)
4080efd8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
4080efdc:	e0bffe17 	ldw	r2,-8(fp)
4080efe0:	10800317 	ldw	r2,12(r2)
4080efe4:	10800044 	addi	r2,r2,1
4080efe8:	10800fcc 	andi	r2,r2,63
4080efec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
4080eff0:	e0bffe17 	ldw	r2,-8(fp)
4080eff4:	10c00217 	ldw	r3,8(r2)
4080eff8:	e0bffd17 	ldw	r2,-12(fp)
4080effc:	18800e1e 	bne	r3,r2,4080f038 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
4080f000:	e0bffe17 	ldw	r2,-8(fp)
4080f004:	10c00117 	ldw	r3,4(r2)
4080f008:	00bfdfc4 	movi	r2,-129
4080f00c:	1886703a 	and	r3,r3,r2
4080f010:	e0bffe17 	ldw	r2,-8(fp)
4080f014:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
4080f018:	e0bffe17 	ldw	r2,-8(fp)
4080f01c:	10800017 	ldw	r2,0(r2)
4080f020:	10800304 	addi	r2,r2,12
4080f024:	e0fffe17 	ldw	r3,-8(fp)
4080f028:	18c00117 	ldw	r3,4(r3)
4080f02c:	10c00035 	stwio	r3,0(r2)
4080f030:	00000106 	br	4080f038 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
4080f034:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
4080f038:	e037883a 	mov	sp,fp
4080f03c:	df000017 	ldw	fp,0(sp)
4080f040:	dec00104 	addi	sp,sp,4
4080f044:	f800283a 	ret

4080f048 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
4080f048:	defffb04 	addi	sp,sp,-20
4080f04c:	df000415 	stw	fp,16(sp)
4080f050:	df000404 	addi	fp,sp,16
4080f054:	e13ffc15 	stw	r4,-16(fp)
4080f058:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
4080f05c:	e0bffc17 	ldw	r2,-16(fp)
4080f060:	10c00417 	ldw	r3,16(r2)
4080f064:	e0bffc17 	ldw	r2,-16(fp)
4080f068:	10800517 	ldw	r2,20(r2)
4080f06c:	18803226 	beq	r3,r2,4080f138 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
4080f070:	e0bffc17 	ldw	r2,-16(fp)
4080f074:	10800617 	ldw	r2,24(r2)
4080f078:	1080008c 	andi	r2,r2,2
4080f07c:	10000326 	beq	r2,zero,4080f08c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
4080f080:	e0bffd17 	ldw	r2,-12(fp)
4080f084:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
4080f088:	10001d26 	beq	r2,zero,4080f100 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
4080f08c:	e0bffc17 	ldw	r2,-16(fp)
4080f090:	10800417 	ldw	r2,16(r2)
4080f094:	e0bffc17 	ldw	r2,-16(fp)
4080f098:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
4080f09c:	e0bffc17 	ldw	r2,-16(fp)
4080f0a0:	10800017 	ldw	r2,0(r2)
4080f0a4:	10800104 	addi	r2,r2,4
4080f0a8:	e0fffc17 	ldw	r3,-16(fp)
4080f0ac:	18c00417 	ldw	r3,16(r3)
4080f0b0:	e13ffc17 	ldw	r4,-16(fp)
4080f0b4:	20c7883a 	add	r3,r4,r3
4080f0b8:	18c01704 	addi	r3,r3,92
4080f0bc:	18c00003 	ldbu	r3,0(r3)
4080f0c0:	18c03fcc 	andi	r3,r3,255
4080f0c4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
4080f0c8:	e0bffc17 	ldw	r2,-16(fp)
4080f0cc:	10800417 	ldw	r2,16(r2)
4080f0d0:	10800044 	addi	r2,r2,1
4080f0d4:	e0fffc17 	ldw	r3,-16(fp)
4080f0d8:	18800415 	stw	r2,16(r3)
4080f0dc:	10c00fcc 	andi	r3,r2,63
4080f0e0:	e0bffc17 	ldw	r2,-16(fp)
4080f0e4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
4080f0e8:	e0bffc17 	ldw	r2,-16(fp)
4080f0ec:	10800117 	ldw	r2,4(r2)
4080f0f0:	10c01014 	ori	r3,r2,64
4080f0f4:	e0bffc17 	ldw	r2,-16(fp)
4080f0f8:	10c00115 	stw	r3,4(r2)
4080f0fc:	00000e06 	br	4080f138 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
4080f100:	e0bffc17 	ldw	r2,-16(fp)
4080f104:	10800017 	ldw	r2,0(r2)
4080f108:	10800204 	addi	r2,r2,8
4080f10c:	10800037 	ldwio	r2,0(r2)
4080f110:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
4080f114:	e0bffd17 	ldw	r2,-12(fp)
4080f118:	1082000c 	andi	r2,r2,2048
4080f11c:	1000061e 	bne	r2,zero,4080f138 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
4080f120:	e0bffc17 	ldw	r2,-16(fp)
4080f124:	10c00117 	ldw	r3,4(r2)
4080f128:	00bfefc4 	movi	r2,-65
4080f12c:	1886703a 	and	r3,r3,r2
4080f130:	e0bffc17 	ldw	r2,-16(fp)
4080f134:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
4080f138:	e0bffc17 	ldw	r2,-16(fp)
4080f13c:	10c00417 	ldw	r3,16(r2)
4080f140:	e0bffc17 	ldw	r2,-16(fp)
4080f144:	10800517 	ldw	r2,20(r2)
4080f148:	1880061e 	bne	r3,r2,4080f164 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
4080f14c:	e0bffc17 	ldw	r2,-16(fp)
4080f150:	10c00117 	ldw	r3,4(r2)
4080f154:	00beefc4 	movi	r2,-1089
4080f158:	1886703a 	and	r3,r3,r2
4080f15c:	e0bffc17 	ldw	r2,-16(fp)
4080f160:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
4080f164:	e0bffc17 	ldw	r2,-16(fp)
4080f168:	10800017 	ldw	r2,0(r2)
4080f16c:	10800304 	addi	r2,r2,12
4080f170:	e0fffc17 	ldw	r3,-16(fp)
4080f174:	18c00117 	ldw	r3,4(r3)
4080f178:	10c00035 	stwio	r3,0(r2)
}
4080f17c:	0001883a 	nop
4080f180:	e037883a 	mov	sp,fp
4080f184:	df000017 	ldw	fp,0(sp)
4080f188:	dec00104 	addi	sp,sp,4
4080f18c:	f800283a 	ret

4080f190 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
4080f190:	defffd04 	addi	sp,sp,-12
4080f194:	df000215 	stw	fp,8(sp)
4080f198:	df000204 	addi	fp,sp,8
4080f19c:	e13ffe15 	stw	r4,-8(fp)
4080f1a0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
4080f1a4:	00000506 	br	4080f1bc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
4080f1a8:	e0bfff17 	ldw	r2,-4(fp)
4080f1ac:	1090000c 	andi	r2,r2,16384
4080f1b0:	10000226 	beq	r2,zero,4080f1bc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
4080f1b4:	00bffd44 	movi	r2,-11
4080f1b8:	00000606 	br	4080f1d4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
4080f1bc:	e0bffe17 	ldw	r2,-8(fp)
4080f1c0:	10c00417 	ldw	r3,16(r2)
4080f1c4:	e0bffe17 	ldw	r2,-8(fp)
4080f1c8:	10800517 	ldw	r2,20(r2)
4080f1cc:	18bff61e 	bne	r3,r2,4080f1a8 <__alt_mem_onchip_flash_0_data+0xff7cf1a8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
4080f1d0:	0005883a 	mov	r2,zero
}
4080f1d4:	e037883a 	mov	sp,fp
4080f1d8:	df000017 	ldw	fp,0(sp)
4080f1dc:	dec00104 	addi	sp,sp,4
4080f1e0:	f800283a 	ret

4080f1e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080f1e4:	defffe04 	addi	sp,sp,-8
4080f1e8:	dfc00115 	stw	ra,4(sp)
4080f1ec:	df000015 	stw	fp,0(sp)
4080f1f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080f1f4:	d0a01a17 	ldw	r2,-32664(gp)
4080f1f8:	10000326 	beq	r2,zero,4080f208 <alt_get_errno+0x24>
4080f1fc:	d0a01a17 	ldw	r2,-32664(gp)
4080f200:	103ee83a 	callr	r2
4080f204:	00000106 	br	4080f20c <alt_get_errno+0x28>
4080f208:	d0a03204 	addi	r2,gp,-32568
}
4080f20c:	e037883a 	mov	sp,fp
4080f210:	dfc00117 	ldw	ra,4(sp)
4080f214:	df000017 	ldw	fp,0(sp)
4080f218:	dec00204 	addi	sp,sp,8
4080f21c:	f800283a 	ret

4080f220 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
4080f220:	defff204 	addi	sp,sp,-56
4080f224:	dfc00d15 	stw	ra,52(sp)
4080f228:	df000c15 	stw	fp,48(sp)
4080f22c:	df000c04 	addi	fp,sp,48
4080f230:	e13ffc15 	stw	r4,-16(fp)
4080f234:	e17ffd15 	stw	r5,-12(fp)
4080f238:	e1bffe15 	stw	r6,-8(fp)
4080f23c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
4080f240:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
4080f244:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
4080f248:	e0bfff17 	ldw	r2,-4(fp)
4080f24c:	1090000c 	andi	r2,r2,16384
4080f250:	1005003a 	cmpeq	r2,r2,zero
4080f254:	10803fcc 	andi	r2,r2,255
4080f258:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
4080f25c:	00001306 	br	4080f2ac <altera_avalon_uart_read+0x8c>
    {
      count++;
4080f260:	e0bff517 	ldw	r2,-44(fp)
4080f264:	10800044 	addi	r2,r2,1
4080f268:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
4080f26c:	e0bffd17 	ldw	r2,-12(fp)
4080f270:	10c00044 	addi	r3,r2,1
4080f274:	e0fffd15 	stw	r3,-12(fp)
4080f278:	e0fffc17 	ldw	r3,-16(fp)
4080f27c:	18c00217 	ldw	r3,8(r3)
4080f280:	e13ffc17 	ldw	r4,-16(fp)
4080f284:	20c7883a 	add	r3,r4,r3
4080f288:	18c00704 	addi	r3,r3,28
4080f28c:	18c00003 	ldbu	r3,0(r3)
4080f290:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
4080f294:	e0bffc17 	ldw	r2,-16(fp)
4080f298:	10800217 	ldw	r2,8(r2)
4080f29c:	10800044 	addi	r2,r2,1
4080f2a0:	10c00fcc 	andi	r3,r2,63
4080f2a4:	e0bffc17 	ldw	r2,-16(fp)
4080f2a8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
4080f2ac:	e0fff517 	ldw	r3,-44(fp)
4080f2b0:	e0bffe17 	ldw	r2,-8(fp)
4080f2b4:	1880050e 	bge	r3,r2,4080f2cc <altera_avalon_uart_read+0xac>
4080f2b8:	e0bffc17 	ldw	r2,-16(fp)
4080f2bc:	10c00217 	ldw	r3,8(r2)
4080f2c0:	e0bffc17 	ldw	r2,-16(fp)
4080f2c4:	10800317 	ldw	r2,12(r2)
4080f2c8:	18bfe51e 	bne	r3,r2,4080f260 <__alt_mem_onchip_flash_0_data+0xff7cf260>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
4080f2cc:	e0bff517 	ldw	r2,-44(fp)
4080f2d0:	1000251e 	bne	r2,zero,4080f368 <altera_avalon_uart_read+0x148>
4080f2d4:	e0bffc17 	ldw	r2,-16(fp)
4080f2d8:	10c00217 	ldw	r3,8(r2)
4080f2dc:	e0bffc17 	ldw	r2,-16(fp)
4080f2e0:	10800317 	ldw	r2,12(r2)
4080f2e4:	1880201e 	bne	r3,r2,4080f368 <altera_avalon_uart_read+0x148>
    {
      if (!block)
4080f2e8:	e0bff617 	ldw	r2,-40(fp)
4080f2ec:	1000071e 	bne	r2,zero,4080f30c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
4080f2f0:	080f1e40 	call	4080f1e4 <alt_get_errno>
4080f2f4:	1007883a 	mov	r3,r2
4080f2f8:	008002c4 	movi	r2,11
4080f2fc:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
4080f300:	00800044 	movi	r2,1
4080f304:	e0bff405 	stb	r2,-48(fp)
        break;
4080f308:	00001b06 	br	4080f378 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080f30c:	0005303a 	rdctl	r2,status
4080f310:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080f314:	e0fff917 	ldw	r3,-28(fp)
4080f318:	00bfff84 	movi	r2,-2
4080f31c:	1884703a 	and	r2,r3,r2
4080f320:	1001703a 	wrctl	status,r2
  
  return context;
4080f324:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
4080f328:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
4080f32c:	e0bffc17 	ldw	r2,-16(fp)
4080f330:	10800117 	ldw	r2,4(r2)
4080f334:	10c02014 	ori	r3,r2,128
4080f338:	e0bffc17 	ldw	r2,-16(fp)
4080f33c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
4080f340:	e0bffc17 	ldw	r2,-16(fp)
4080f344:	10800017 	ldw	r2,0(r2)
4080f348:	10800304 	addi	r2,r2,12
4080f34c:	e0fffc17 	ldw	r3,-16(fp)
4080f350:	18c00117 	ldw	r3,4(r3)
4080f354:	10c00035 	stwio	r3,0(r2)
4080f358:	e0bff817 	ldw	r2,-32(fp)
4080f35c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080f360:	e0bffa17 	ldw	r2,-24(fp)
4080f364:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
4080f368:	e0bff517 	ldw	r2,-44(fp)
4080f36c:	1000021e 	bne	r2,zero,4080f378 <altera_avalon_uart_read+0x158>
4080f370:	e0bffe17 	ldw	r2,-8(fp)
4080f374:	103fcd1e 	bne	r2,zero,4080f2ac <__alt_mem_onchip_flash_0_data+0xff7cf2ac>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080f378:	0005303a 	rdctl	r2,status
4080f37c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080f380:	e0fffb17 	ldw	r3,-20(fp)
4080f384:	00bfff84 	movi	r2,-2
4080f388:	1884703a 	and	r2,r3,r2
4080f38c:	1001703a 	wrctl	status,r2
  
  return context;
4080f390:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
4080f394:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
4080f398:	e0bffc17 	ldw	r2,-16(fp)
4080f39c:	10800117 	ldw	r2,4(r2)
4080f3a0:	10c02014 	ori	r3,r2,128
4080f3a4:	e0bffc17 	ldw	r2,-16(fp)
4080f3a8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
4080f3ac:	e0bffc17 	ldw	r2,-16(fp)
4080f3b0:	10800017 	ldw	r2,0(r2)
4080f3b4:	10800304 	addi	r2,r2,12
4080f3b8:	e0fffc17 	ldw	r3,-16(fp)
4080f3bc:	18c00117 	ldw	r3,4(r3)
4080f3c0:	10c00035 	stwio	r3,0(r2)
4080f3c4:	e0bff817 	ldw	r2,-32(fp)
4080f3c8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080f3cc:	e0bff717 	ldw	r2,-36(fp)
4080f3d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
4080f3d4:	e0bff403 	ldbu	r2,-48(fp)
4080f3d8:	10000226 	beq	r2,zero,4080f3e4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
4080f3dc:	00bffd44 	movi	r2,-11
4080f3e0:	00000106 	br	4080f3e8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
4080f3e4:	e0bff517 	ldw	r2,-44(fp)
  }
}
4080f3e8:	e037883a 	mov	sp,fp
4080f3ec:	dfc00117 	ldw	ra,4(sp)
4080f3f0:	df000017 	ldw	fp,0(sp)
4080f3f4:	dec00204 	addi	sp,sp,8
4080f3f8:	f800283a 	ret

4080f3fc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
4080f3fc:	defffe04 	addi	sp,sp,-8
4080f400:	dfc00115 	stw	ra,4(sp)
4080f404:	df000015 	stw	fp,0(sp)
4080f408:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
4080f40c:	d0a01a17 	ldw	r2,-32664(gp)
4080f410:	10000326 	beq	r2,zero,4080f420 <alt_get_errno+0x24>
4080f414:	d0a01a17 	ldw	r2,-32664(gp)
4080f418:	103ee83a 	callr	r2
4080f41c:	00000106 	br	4080f424 <alt_get_errno+0x28>
4080f420:	d0a03204 	addi	r2,gp,-32568
}
4080f424:	e037883a 	mov	sp,fp
4080f428:	dfc00117 	ldw	ra,4(sp)
4080f42c:	df000017 	ldw	fp,0(sp)
4080f430:	dec00204 	addi	sp,sp,8
4080f434:	f800283a 	ret

4080f438 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
4080f438:	defff204 	addi	sp,sp,-56
4080f43c:	dfc00d15 	stw	ra,52(sp)
4080f440:	df000c15 	stw	fp,48(sp)
4080f444:	df000c04 	addi	fp,sp,48
4080f448:	e13ffc15 	stw	r4,-16(fp)
4080f44c:	e17ffd15 	stw	r5,-12(fp)
4080f450:	e1bffe15 	stw	r6,-8(fp)
4080f454:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
4080f458:	e0bffe17 	ldw	r2,-8(fp)
4080f45c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
4080f460:	e0bfff17 	ldw	r2,-4(fp)
4080f464:	1090000c 	andi	r2,r2,16384
4080f468:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
4080f46c:	00003c06 	br	4080f560 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
4080f470:	e0bffc17 	ldw	r2,-16(fp)
4080f474:	10800517 	ldw	r2,20(r2)
4080f478:	10800044 	addi	r2,r2,1
4080f47c:	10800fcc 	andi	r2,r2,63
4080f480:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
4080f484:	e0bffc17 	ldw	r2,-16(fp)
4080f488:	10c00417 	ldw	r3,16(r2)
4080f48c:	e0bff717 	ldw	r2,-36(fp)
4080f490:	1880221e 	bne	r3,r2,4080f51c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
4080f494:	e0bff517 	ldw	r2,-44(fp)
4080f498:	10000526 	beq	r2,zero,4080f4b0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
4080f49c:	080f3fc0 	call	4080f3fc <alt_get_errno>
4080f4a0:	1007883a 	mov	r3,r2
4080f4a4:	008002c4 	movi	r2,11
4080f4a8:	18800015 	stw	r2,0(r3)
        break;
4080f4ac:	00002e06 	br	4080f568 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080f4b0:	0005303a 	rdctl	r2,status
4080f4b4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080f4b8:	e0fff917 	ldw	r3,-28(fp)
4080f4bc:	00bfff84 	movi	r2,-2
4080f4c0:	1884703a 	and	r2,r3,r2
4080f4c4:	1001703a 	wrctl	status,r2
  
  return context;
4080f4c8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
4080f4cc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
4080f4d0:	e0bffc17 	ldw	r2,-16(fp)
4080f4d4:	10800117 	ldw	r2,4(r2)
4080f4d8:	10c11014 	ori	r3,r2,1088
4080f4dc:	e0bffc17 	ldw	r2,-16(fp)
4080f4e0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
4080f4e4:	e0bffc17 	ldw	r2,-16(fp)
4080f4e8:	10800017 	ldw	r2,0(r2)
4080f4ec:	10800304 	addi	r2,r2,12
4080f4f0:	e0fffc17 	ldw	r3,-16(fp)
4080f4f4:	18c00117 	ldw	r3,4(r3)
4080f4f8:	10c00035 	stwio	r3,0(r2)
4080f4fc:	e0bff817 	ldw	r2,-32(fp)
4080f500:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080f504:	e0bff617 	ldw	r2,-40(fp)
4080f508:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
4080f50c:	e0bffc17 	ldw	r2,-16(fp)
4080f510:	10c00417 	ldw	r3,16(r2)
4080f514:	e0bff717 	ldw	r2,-36(fp)
4080f518:	18bffc26 	beq	r3,r2,4080f50c <__alt_mem_onchip_flash_0_data+0xff7cf50c>
      }
    }

    count--;
4080f51c:	e0bff417 	ldw	r2,-48(fp)
4080f520:	10bfffc4 	addi	r2,r2,-1
4080f524:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
4080f528:	e0bffc17 	ldw	r2,-16(fp)
4080f52c:	10c00517 	ldw	r3,20(r2)
4080f530:	e0bffd17 	ldw	r2,-12(fp)
4080f534:	11000044 	addi	r4,r2,1
4080f538:	e13ffd15 	stw	r4,-12(fp)
4080f53c:	10800003 	ldbu	r2,0(r2)
4080f540:	1009883a 	mov	r4,r2
4080f544:	e0bffc17 	ldw	r2,-16(fp)
4080f548:	10c5883a 	add	r2,r2,r3
4080f54c:	10801704 	addi	r2,r2,92
4080f550:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
4080f554:	e0bffc17 	ldw	r2,-16(fp)
4080f558:	e0fff717 	ldw	r3,-36(fp)
4080f55c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
4080f560:	e0bff417 	ldw	r2,-48(fp)
4080f564:	103fc21e 	bne	r2,zero,4080f470 <__alt_mem_onchip_flash_0_data+0xff7cf470>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4080f568:	0005303a 	rdctl	r2,status
4080f56c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
4080f570:	e0fffb17 	ldw	r3,-20(fp)
4080f574:	00bfff84 	movi	r2,-2
4080f578:	1884703a 	and	r2,r3,r2
4080f57c:	1001703a 	wrctl	status,r2
  
  return context;
4080f580:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
4080f584:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
4080f588:	e0bffc17 	ldw	r2,-16(fp)
4080f58c:	10800117 	ldw	r2,4(r2)
4080f590:	10c11014 	ori	r3,r2,1088
4080f594:	e0bffc17 	ldw	r2,-16(fp)
4080f598:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
4080f59c:	e0bffc17 	ldw	r2,-16(fp)
4080f5a0:	10800017 	ldw	r2,0(r2)
4080f5a4:	10800304 	addi	r2,r2,12
4080f5a8:	e0fffc17 	ldw	r3,-16(fp)
4080f5ac:	18c00117 	ldw	r3,4(r3)
4080f5b0:	10c00035 	stwio	r3,0(r2)
4080f5b4:	e0bff817 	ldw	r2,-32(fp)
4080f5b8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
4080f5bc:	e0bffa17 	ldw	r2,-24(fp)
4080f5c0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
4080f5c4:	e0fffe17 	ldw	r3,-8(fp)
4080f5c8:	e0bff417 	ldw	r2,-48(fp)
4080f5cc:	1885c83a 	sub	r2,r3,r2
}
4080f5d0:	e037883a 	mov	sp,fp
4080f5d4:	dfc00117 	ldw	ra,4(sp)
4080f5d8:	df000017 	ldw	fp,0(sp)
4080f5dc:	dec00204 	addi	sp,sp,8
4080f5e0:	f800283a 	ret

4080f5e4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
4080f5e4:	defffd04 	addi	sp,sp,-12
4080f5e8:	dfc00215 	stw	ra,8(sp)
4080f5ec:	df000115 	stw	fp,4(sp)
4080f5f0:	df000104 	addi	fp,sp,4
4080f5f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
4080f5f8:	d1601e04 	addi	r5,gp,-32648
4080f5fc:	e13fff17 	ldw	r4,-4(fp)
4080f600:	081085c0 	call	4081085c <alt_dev_llist_insert>
}
4080f604:	e037883a 	mov	sp,fp
4080f608:	dfc00117 	ldw	ra,4(sp)
4080f60c:	df000017 	ldw	fp,0(sp)
4080f610:	dec00204 	addi	sp,sp,8
4080f614:	f800283a 	ret

4080f618 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
4080f618:	defff704 	addi	sp,sp,-36
4080f61c:	dfc00815 	stw	ra,32(sp)
4080f620:	df000715 	stw	fp,28(sp)
4080f624:	df000704 	addi	fp,sp,28
4080f628:	e13ffc15 	stw	r4,-16(fp)
4080f62c:	e17ffd15 	stw	r5,-12(fp)
4080f630:	e1bffe15 	stw	r6,-8(fp)
4080f634:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
4080f638:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
4080f63c:	e0bffc17 	ldw	r2,-16(fp)
4080f640:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
4080f644:	e0bffa17 	ldw	r2,-24(fp)
4080f648:	10800b17 	ldw	r2,44(r2)
4080f64c:	e0fffd17 	ldw	r3,-12(fp)
4080f650:	1880060e 	bge	r3,r2,4080f66c <alt_onchip_flash_read+0x54>
4080f654:	e0fffd17 	ldw	r3,-12(fp)
4080f658:	e0bfff17 	ldw	r2,-4(fp)
4080f65c:	1885883a 	add	r2,r3,r2
4080f660:	e0fffa17 	ldw	r3,-24(fp)
4080f664:	18c00b17 	ldw	r3,44(r3)
4080f668:	1880020e 	bge	r3,r2,4080f674 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
4080f66c:	00bffc84 	movi	r2,-14
4080f670:	00001706 	br	4080f6d0 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
4080f674:	e0bffa17 	ldw	r2,-24(fp)
4080f678:	10c00a17 	ldw	r3,40(r2)
4080f67c:	e0bffd17 	ldw	r2,-12(fp)
4080f680:	1885883a 	add	r2,r3,r2
4080f684:	e0ffff17 	ldw	r3,-4(fp)
4080f688:	180d883a 	mov	r6,r3
4080f68c:	100b883a 	mov	r5,r2
4080f690:	e13ffe17 	ldw	r4,-8(fp)
4080f694:	0806b640 	call	40806b64 <memcpy>

    if (NULL != flash->csr_base) {
4080f698:	e0bffa17 	ldw	r2,-24(fp)
4080f69c:	10802f17 	ldw	r2,188(r2)
4080f6a0:	10000a26 	beq	r2,zero,4080f6cc <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
4080f6a4:	e0bffa17 	ldw	r2,-24(fp)
4080f6a8:	10802f17 	ldw	r2,188(r2)
4080f6ac:	10800037 	ldwio	r2,0(r2)
4080f6b0:	1080010c 	andi	r2,r2,4
4080f6b4:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
4080f6b8:	e0bffb17 	ldw	r2,-20(fp)
4080f6bc:	10800120 	cmpeqi	r2,r2,4
4080f6c0:	1000021e 	bne	r2,zero,4080f6cc <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
4080f6c4:	00bffec4 	movi	r2,-5
4080f6c8:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
4080f6cc:	e0bff917 	ldw	r2,-28(fp)
}
4080f6d0:	e037883a 	mov	sp,fp
4080f6d4:	dfc00117 	ldw	ra,4(sp)
4080f6d8:	df000017 	ldw	fp,0(sp)
4080f6dc:	dec00204 	addi	sp,sp,8
4080f6e0:	f800283a 	ret

4080f6e4 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
4080f6e4:	defffa04 	addi	sp,sp,-24
4080f6e8:	df000515 	stw	fp,20(sp)
4080f6ec:	df000504 	addi	fp,sp,20
4080f6f0:	e13ffd15 	stw	r4,-12(fp)
4080f6f4:	e17ffe15 	stw	r5,-8(fp)
4080f6f8:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
4080f6fc:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
4080f700:	e0bffd17 	ldw	r2,-12(fp)
4080f704:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
4080f708:	e0bfff17 	ldw	r2,-4(fp)
4080f70c:	10000426 	beq	r2,zero,4080f720 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
4080f710:	e0bffc17 	ldw	r2,-16(fp)
4080f714:	10c00c17 	ldw	r3,48(r2)
4080f718:	e0bfff17 	ldw	r2,-4(fp)
4080f71c:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
4080f720:	e0bffc17 	ldw	r2,-16(fp)
4080f724:	10800c17 	ldw	r2,48(r2)
4080f728:	1000031e 	bne	r2,zero,4080f738 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
4080f72c:	00bffd04 	movi	r2,-12
4080f730:	e0bffb15 	stw	r2,-20(fp)
4080f734:	00000d06 	br	4080f76c <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
4080f738:	e0bffc17 	ldw	r2,-16(fp)
4080f73c:	10800c17 	ldw	r2,48(r2)
4080f740:	10800250 	cmplti	r2,r2,9
4080f744:	1000031e 	bne	r2,zero,4080f754 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
4080f748:	00bffc84 	movi	r2,-14
4080f74c:	e0bffb15 	stw	r2,-20(fp)
4080f750:	00000606 	br	4080f76c <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
4080f754:	e0bffe17 	ldw	r2,-8(fp)
4080f758:	10000426 	beq	r2,zero,4080f76c <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
4080f75c:	e0bffc17 	ldw	r2,-16(fp)
4080f760:	10c00d04 	addi	r3,r2,52
4080f764:	e0bffe17 	ldw	r2,-8(fp)
4080f768:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
4080f76c:	e0bffb17 	ldw	r2,-20(fp)
}
4080f770:	e037883a 	mov	sp,fp
4080f774:	df000017 	ldw	fp,0(sp)
4080f778:	dec00104 	addi	sp,sp,4
4080f77c:	f800283a 	ret

4080f780 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
4080f780:	defff904 	addi	sp,sp,-28
4080f784:	dfc00615 	stw	ra,24(sp)
4080f788:	df000515 	stw	fp,20(sp)
4080f78c:	df000504 	addi	fp,sp,20
4080f790:	e13ffe15 	stw	r4,-8(fp)
4080f794:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
4080f798:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
4080f79c:	e0bffe17 	ldw	r2,-8(fp)
4080f7a0:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
4080f7a4:	e0bffc17 	ldw	r2,-16(fp)
4080f7a8:	10800b17 	ldw	r2,44(r2)
4080f7ac:	e0ffff17 	ldw	r3,-4(fp)
4080f7b0:	18800216 	blt	r3,r2,4080f7bc <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
4080f7b4:	00bffc84 	movi	r2,-14
4080f7b8:	00004606 	br	4080f8d4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
4080f7bc:	e0bffc17 	ldw	r2,-16(fp)
4080f7c0:	10802f17 	ldw	r2,188(r2)
4080f7c4:	10000326 	beq	r2,zero,4080f7d4 <alt_onchip_flash_erase_block+0x54>
4080f7c8:	e0bffc17 	ldw	r2,-16(fp)
4080f7cc:	10802e17 	ldw	r2,184(r2)
4080f7d0:	10000226 	beq	r2,zero,4080f7dc <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
4080f7d4:	00bffb44 	movi	r2,-19
4080f7d8:	00003e06 	br	4080f8d4 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
4080f7dc:	e0bffc17 	ldw	r2,-16(fp)
4080f7e0:	10803f17 	ldw	r2,252(r2)
4080f7e4:	10ffffc4 	addi	r3,r2,-1
4080f7e8:	e0bfff17 	ldw	r2,-4(fp)
4080f7ec:	1884703a 	and	r2,r3,r2
4080f7f0:	10000226 	beq	r2,zero,4080f7fc <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
4080f7f4:	00bffa84 	movi	r2,-22
4080f7f8:	00003606 	br	4080f8d4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
4080f7fc:	e13ffc17 	ldw	r4,-16(fp)
4080f800:	08103740 	call	40810374 <alt_onchip_flash_poll_for_status_to_go_idle>
4080f804:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
4080f808:	e0bffb17 	ldw	r2,-20(fp)
4080f80c:	10000226 	beq	r2,zero,4080f818 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
4080f810:	e0bffb17 	ldw	r2,-20(fp)
4080f814:	00002f06 	br	4080f8d4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
4080f818:	e0bffc17 	ldw	r2,-16(fp)
4080f81c:	10802f17 	ldw	r2,188(r2)
4080f820:	10c00104 	addi	r3,r2,4
4080f824:	e0bffc17 	ldw	r2,-16(fp)
4080f828:	10802f17 	ldw	r2,188(r2)
4080f82c:	10800104 	addi	r2,r2,4
4080f830:	10800037 	ldwio	r2,0(r2)
4080f834:	113c002c 	andhi	r4,r2,61440
4080f838:	00802034 	movhi	r2,128
4080f83c:	10bfffc4 	addi	r2,r2,-1
4080f840:	2084b03a 	or	r2,r4,r2
4080f844:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
4080f848:	e0bfff17 	ldw	r2,-4(fp)
4080f84c:	1000010e 	bge	r2,zero,4080f854 <alt_onchip_flash_erase_block+0xd4>
4080f850:	108000c4 	addi	r2,r2,3
4080f854:	1005d0ba 	srai	r2,r2,2
4080f858:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
4080f85c:	e0bffc17 	ldw	r2,-16(fp)
4080f860:	10802f17 	ldw	r2,188(r2)
4080f864:	10800104 	addi	r2,r2,4
4080f868:	e0fffc17 	ldw	r3,-16(fp)
4080f86c:	18c02f17 	ldw	r3,188(r3)
4080f870:	18c00104 	addi	r3,r3,4
4080f874:	18c00037 	ldwio	r3,0(r3)
4080f878:	193c002c 	andhi	r4,r3,61440
4080f87c:	e0fffd17 	ldw	r3,-12(fp)
4080f880:	18c01c34 	orhi	r3,r3,112
4080f884:	20c6b03a 	or	r3,r4,r3
4080f888:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
4080f88c:	e13ffc17 	ldw	r4,-16(fp)
4080f890:	08103740 	call	40810374 <alt_onchip_flash_poll_for_status_to_go_idle>
4080f894:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
4080f898:	e13ffc17 	ldw	r4,-16(fp)
4080f89c:	08104040 	call	40810404 <alt_onchip_flash_poll_for_status_erase_passed>
4080f8a0:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
4080f8a4:	e0bffc17 	ldw	r2,-16(fp)
4080f8a8:	10802f17 	ldw	r2,188(r2)
4080f8ac:	10c00104 	addi	r3,r2,4
4080f8b0:	e0bffc17 	ldw	r2,-16(fp)
4080f8b4:	10802f17 	ldw	r2,188(r2)
4080f8b8:	10800104 	addi	r2,r2,4
4080f8bc:	11000037 	ldwio	r4,0(r2)
4080f8c0:	00840034 	movhi	r2,4096
4080f8c4:	10bfffc4 	addi	r2,r2,-1
4080f8c8:	2084b03a 	or	r2,r4,r2
4080f8cc:	18800035 	stwio	r2,0(r3)

    return ret_code;
4080f8d0:	e0bffb17 	ldw	r2,-20(fp)
}
4080f8d4:	e037883a 	mov	sp,fp
4080f8d8:	dfc00117 	ldw	ra,4(sp)
4080f8dc:	df000017 	ldw	fp,0(sp)
4080f8e0:	dec00204 	addi	sp,sp,8
4080f8e4:	f800283a 	ret

4080f8e8 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
4080f8e8:	defff204 	addi	sp,sp,-56
4080f8ec:	dfc00d15 	stw	ra,52(sp)
4080f8f0:	df000c15 	stw	fp,48(sp)
4080f8f4:	df000c04 	addi	fp,sp,48
4080f8f8:	e13ffc15 	stw	r4,-16(fp)
4080f8fc:	e17ffd15 	stw	r5,-12(fp)
4080f900:	e1bffe15 	stw	r6,-8(fp)
4080f904:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
4080f908:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
4080f90c:	e0bffc17 	ldw	r2,-16(fp)
4080f910:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
4080f914:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
4080f918:	e0bffe17 	ldw	r2,-8(fp)
4080f91c:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
4080f920:	e0bff817 	ldw	r2,-32(fp)
4080f924:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
4080f928:	e0fffd17 	ldw	r3,-12(fp)
4080f92c:	18800a0e 	bge	r3,r2,4080f958 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
4080f930:	e0bff817 	ldw	r2,-32(fp)
4080f934:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
4080f938:	e0fffe17 	ldw	r3,-8(fp)
4080f93c:	1880060e 	bge	r3,r2,4080f958 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
4080f940:	e0bff817 	ldw	r2,-32(fp)
4080f944:	10c00b17 	ldw	r3,44(r2)
4080f948:	e0bffe17 	ldw	r2,-8(fp)
4080f94c:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
4080f950:	e0800217 	ldw	r2,8(fp)
4080f954:	1880020e 	bge	r3,r2,4080f960 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
4080f958:	00bffc84 	movi	r2,-14
4080f95c:	00009306 	br	4080fbac <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
4080f960:	e0bff817 	ldw	r2,-32(fp)
4080f964:	10802f17 	ldw	r2,188(r2)
4080f968:	10000326 	beq	r2,zero,4080f978 <alt_onchip_flash_write_block+0x90>
4080f96c:	e0bff817 	ldw	r2,-32(fp)
4080f970:	10802e17 	ldw	r2,184(r2)
4080f974:	10000226 	beq	r2,zero,4080f980 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
4080f978:	00bffb44 	movi	r2,-19
4080f97c:	00008b06 	br	4080fbac <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
4080f980:	e13ff817 	ldw	r4,-32(fp)
4080f984:	08103740 	call	40810374 <alt_onchip_flash_poll_for_status_to_go_idle>
4080f988:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
4080f98c:	e0bff417 	ldw	r2,-48(fp)
4080f990:	10000226 	beq	r2,zero,4080f99c <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
4080f994:	e0bff417 	ldw	r2,-48(fp)
4080f998:	00008406 	br	4080fbac <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
4080f99c:	e0bff817 	ldw	r2,-32(fp)
4080f9a0:	10802f17 	ldw	r2,188(r2)
4080f9a4:	10c00104 	addi	r3,r2,4
4080f9a8:	e0bff817 	ldw	r2,-32(fp)
4080f9ac:	10802f17 	ldw	r2,188(r2)
4080f9b0:	10800104 	addi	r2,r2,4
4080f9b4:	10800037 	ldwio	r2,0(r2)
4080f9b8:	113c002c 	andhi	r4,r2,61440
4080f9bc:	00802034 	movhi	r2,128
4080f9c0:	10bfffc4 	addi	r2,r2,-1
4080f9c4:	2084b03a 	or	r2,r4,r2
4080f9c8:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
4080f9cc:	00006506 	br	4080fb64 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
4080f9d0:	00bfffc4 	movi	r2,-1
4080f9d4:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
4080f9d8:	e0bff617 	ldw	r2,-40(fp)
4080f9dc:	108000cc 	andi	r2,r2,3
4080f9e0:	10001e1e 	bne	r2,zero,4080fa5c <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
4080f9e4:	e0bff617 	ldw	r2,-40(fp)
4080f9e8:	10c00104 	addi	r3,r2,4
4080f9ec:	00bfff04 	movi	r2,-4
4080f9f0:	1884703a 	and	r2,r3,r2
4080f9f4:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
4080f9f8:	e0fff717 	ldw	r3,-36(fp)
4080f9fc:	e0bff617 	ldw	r2,-40(fp)
4080fa00:	1885c83a 	sub	r2,r3,r2
4080fa04:	e0c00217 	ldw	r3,8(fp)
4080fa08:	1880010e 	bge	r3,r2,4080fa10 <alt_onchip_flash_write_block+0x128>
4080fa0c:	1805883a 	mov	r2,r3
4080fa10:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
4080fa14:	e0bff517 	ldw	r2,-44(fp)
4080fa18:	e0ffff17 	ldw	r3,-4(fp)
4080fa1c:	1887883a 	add	r3,r3,r2
4080fa20:	e13ff917 	ldw	r4,-28(fp)
4080fa24:	e0bffb04 	addi	r2,fp,-20
4080fa28:	200d883a 	mov	r6,r4
4080fa2c:	180b883a 	mov	r5,r3
4080fa30:	1009883a 	mov	r4,r2
4080fa34:	0806b640 	call	40806b64 <memcpy>
            buffer_offset += length_of_current_write;
4080fa38:	e0fff517 	ldw	r3,-44(fp)
4080fa3c:	e0bff917 	ldw	r2,-28(fp)
4080fa40:	1885883a 	add	r2,r3,r2
4080fa44:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
4080fa48:	e0c00217 	ldw	r3,8(fp)
4080fa4c:	e0bff917 	ldw	r2,-28(fp)
4080fa50:	1885c83a 	sub	r2,r3,r2
4080fa54:	e0800215 	stw	r2,8(fp)
4080fa58:	00003006 	br	4080fb1c <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
4080fa5c:	e0bff617 	ldw	r2,-40(fp)
4080fa60:	108000cc 	andi	r2,r2,3
4080fa64:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
4080fa68:	e0fff617 	ldw	r3,-40(fp)
4080fa6c:	e0bffa17 	ldw	r2,-24(fp)
4080fa70:	1885c83a 	sub	r2,r3,r2
4080fa74:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
4080fa78:	e0bff617 	ldw	r2,-40(fp)
4080fa7c:	10c00104 	addi	r3,r2,4
4080fa80:	00bfff04 	movi	r2,-4
4080fa84:	1884703a 	and	r2,r3,r2
4080fa88:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
4080fa8c:	e0fff717 	ldw	r3,-36(fp)
4080fa90:	e0bff617 	ldw	r2,-40(fp)
4080fa94:	1889c83a 	sub	r4,r3,r2
4080fa98:	e0c00217 	ldw	r3,8(fp)
4080fa9c:	e0bffa17 	ldw	r2,-24(fp)
4080faa0:	1887883a 	add	r3,r3,r2
4080faa4:	2005883a 	mov	r2,r4
4080faa8:	1880010e 	bge	r3,r2,4080fab0 <alt_onchip_flash_write_block+0x1c8>
4080faac:	1805883a 	mov	r2,r3
4080fab0:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
4080fab4:	e0fffb04 	addi	r3,fp,-20
4080fab8:	e0bffa17 	ldw	r2,-24(fp)
4080fabc:	1885883a 	add	r2,r3,r2
4080fac0:	100f883a 	mov	r7,r2
4080fac4:	e0bff517 	ldw	r2,-44(fp)
4080fac8:	e0ffff17 	ldw	r3,-4(fp)
4080facc:	1889883a 	add	r4,r3,r2
4080fad0:	e0fff917 	ldw	r3,-28(fp)
4080fad4:	e0bffa17 	ldw	r2,-24(fp)
4080fad8:	1885c83a 	sub	r2,r3,r2
4080fadc:	100d883a 	mov	r6,r2
4080fae0:	200b883a 	mov	r5,r4
4080fae4:	3809883a 	mov	r4,r7
4080fae8:	0806b640 	call	40806b64 <memcpy>
            buffer_offset += length_of_current_write - padding;
4080faec:	e0fff917 	ldw	r3,-28(fp)
4080faf0:	e0bffa17 	ldw	r2,-24(fp)
4080faf4:	1885c83a 	sub	r2,r3,r2
4080faf8:	e0fff517 	ldw	r3,-44(fp)
4080fafc:	1885883a 	add	r2,r3,r2
4080fb00:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
4080fb04:	e0fff917 	ldw	r3,-28(fp)
4080fb08:	e0bffa17 	ldw	r2,-24(fp)
4080fb0c:	1885c83a 	sub	r2,r3,r2
4080fb10:	e0c00217 	ldw	r3,8(fp)
4080fb14:	1885c83a 	sub	r2,r3,r2
4080fb18:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
4080fb1c:	e0bff817 	ldw	r2,-32(fp)
4080fb20:	10c00a17 	ldw	r3,40(r2)
4080fb24:	e0bff617 	ldw	r2,-40(fp)
4080fb28:	1885883a 	add	r2,r3,r2
4080fb2c:	e0fffb17 	ldw	r3,-20(fp)
4080fb30:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
4080fb34:	e13ff817 	ldw	r4,-32(fp)
4080fb38:	08103740 	call	40810374 <alt_onchip_flash_poll_for_status_to_go_idle>
4080fb3c:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
4080fb40:	e0bff417 	ldw	r2,-48(fp)
4080fb44:	10000a1e 	bne	r2,zero,4080fb70 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
4080fb48:	e13ff817 	ldw	r4,-32(fp)
4080fb4c:	08104940 	call	40810494 <alt_onchip_flash_poll_for_status_write_passed>
4080fb50:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
4080fb54:	e0bff417 	ldw	r2,-48(fp)
4080fb58:	1000071e 	bne	r2,zero,4080fb78 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
4080fb5c:	e0bff717 	ldw	r2,-36(fp)
4080fb60:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
4080fb64:	e0800217 	ldw	r2,8(fp)
4080fb68:	103f991e 	bne	r2,zero,4080f9d0 <__alt_mem_onchip_flash_0_data+0xff7cf9d0>
4080fb6c:	00000306 	br	4080fb7c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
4080fb70:	0001883a 	nop
4080fb74:	00000106 	br	4080fb7c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
4080fb78:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
4080fb7c:	e0bff817 	ldw	r2,-32(fp)
4080fb80:	10802f17 	ldw	r2,188(r2)
4080fb84:	10c00104 	addi	r3,r2,4
4080fb88:	e0bff817 	ldw	r2,-32(fp)
4080fb8c:	10802f17 	ldw	r2,188(r2)
4080fb90:	10800104 	addi	r2,r2,4
4080fb94:	11000037 	ldwio	r4,0(r2)
4080fb98:	00840034 	movhi	r2,4096
4080fb9c:	10bfffc4 	addi	r2,r2,-1
4080fba0:	2084b03a 	or	r2,r4,r2
4080fba4:	18800035 	stwio	r2,0(r3)

    return ret_code;
4080fba8:	e0bff417 	ldw	r2,-48(fp)
}
4080fbac:	e037883a 	mov	sp,fp
4080fbb0:	dfc00117 	ldw	ra,4(sp)
4080fbb4:	df000017 	ldw	fp,0(sp)
4080fbb8:	dec00204 	addi	sp,sp,8
4080fbbc:	f800283a 	ret

4080fbc0 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
4080fbc0:	defff104 	addi	sp,sp,-60
4080fbc4:	dfc00e15 	stw	ra,56(sp)
4080fbc8:	df000d15 	stw	fp,52(sp)
4080fbcc:	df000d04 	addi	fp,sp,52
4080fbd0:	e13ffc15 	stw	r4,-16(fp)
4080fbd4:	e17ffd15 	stw	r5,-12(fp)
4080fbd8:	e1bffe15 	stw	r6,-8(fp)
4080fbdc:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
4080fbe0:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
4080fbe4:	e0bfff17 	ldw	r2,-4(fp)
4080fbe8:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
4080fbec:	e0bffd17 	ldw	r2,-12(fp)
4080fbf0:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
4080fbf4:	e0bffc17 	ldw	r2,-16(fp)
4080fbf8:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
4080fbfc:	e0bffa17 	ldw	r2,-24(fp)
4080fc00:	10800b17 	ldw	r2,44(r2)
4080fc04:	e0fffd17 	ldw	r3,-12(fp)
4080fc08:	1880060e 	bge	r3,r2,4080fc24 <alt_onchip_flash_write+0x64>
4080fc0c:	e0bffa17 	ldw	r2,-24(fp)
4080fc10:	10c00b17 	ldw	r3,44(r2)
4080fc14:	e0bffd17 	ldw	r2,-12(fp)
4080fc18:	1887c83a 	sub	r3,r3,r2
4080fc1c:	e0bfff17 	ldw	r2,-4(fp)
4080fc20:	1880020e 	bge	r3,r2,4080fc2c <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
4080fc24:	00bffc84 	movi	r2,-14
4080fc28:	00009606 	br	4080fe84 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
4080fc2c:	e03ff515 	stw	zero,-44(fp)
4080fc30:	00008706 	br	4080fe50 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
4080fc34:	e0fffa17 	ldw	r3,-24(fp)
4080fc38:	e0bff517 	ldw	r2,-44(fp)
4080fc3c:	1004913a 	slli	r2,r2,4
4080fc40:	1885883a 	add	r2,r3,r2
4080fc44:	10800d04 	addi	r2,r2,52
4080fc48:	10800017 	ldw	r2,0(r2)
4080fc4c:	e0fffd17 	ldw	r3,-12(fp)
4080fc50:	18807c16 	blt	r3,r2,4080fe44 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
4080fc54:	e0fffa17 	ldw	r3,-24(fp)
4080fc58:	e0bff517 	ldw	r2,-44(fp)
4080fc5c:	1004913a 	slli	r2,r2,4
4080fc60:	1885883a 	add	r2,r3,r2
4080fc64:	10800d04 	addi	r2,r2,52
4080fc68:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
4080fc6c:	e13ffa17 	ldw	r4,-24(fp)
4080fc70:	e0bff517 	ldw	r2,-44(fp)
4080fc74:	1004913a 	slli	r2,r2,4
4080fc78:	2085883a 	add	r2,r4,r2
4080fc7c:	10800e04 	addi	r2,r2,56
4080fc80:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
4080fc84:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
4080fc88:	e0fffd17 	ldw	r3,-12(fp)
4080fc8c:	18806d0e 	bge	r3,r2,4080fe44 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
4080fc90:	e0fffa17 	ldw	r3,-24(fp)
4080fc94:	e0bff517 	ldw	r2,-44(fp)
4080fc98:	1004913a 	slli	r2,r2,4
4080fc9c:	1885883a 	add	r2,r3,r2
4080fca0:	10800d04 	addi	r2,r2,52
4080fca4:	10800017 	ldw	r2,0(r2)
4080fca8:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
4080fcac:	e03ff615 	stw	zero,-40(fp)
4080fcb0:	00005c06 	br	4080fe24 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
4080fcb4:	e0fffd17 	ldw	r3,-12(fp)
4080fcb8:	e0bff717 	ldw	r2,-36(fp)
4080fcbc:	18804d16 	blt	r3,r2,4080fdf4 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
4080fcc0:	e0fffa17 	ldw	r3,-24(fp)
4080fcc4:	e0bff517 	ldw	r2,-44(fp)
4080fcc8:	10800104 	addi	r2,r2,4
4080fccc:	1004913a 	slli	r2,r2,4
4080fcd0:	1885883a 	add	r2,r3,r2
4080fcd4:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
4080fcd8:	e0bff717 	ldw	r2,-36(fp)
4080fcdc:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
4080fce0:	e0fffd17 	ldw	r3,-12(fp)
4080fce4:	1880430e 	bge	r3,r2,4080fdf4 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
4080fce8:	e0fffa17 	ldw	r3,-24(fp)
4080fcec:	e0bff517 	ldw	r2,-44(fp)
4080fcf0:	10800104 	addi	r2,r2,4
4080fcf4:	1004913a 	slli	r2,r2,4
4080fcf8:	1885883a 	add	r2,r3,r2
4080fcfc:	10c00017 	ldw	r3,0(r2)
4080fd00:	e0bff717 	ldw	r2,-36(fp)
4080fd04:	1887883a 	add	r3,r3,r2
4080fd08:	e0bffd17 	ldw	r2,-12(fp)
4080fd0c:	1885c83a 	sub	r2,r3,r2
4080fd10:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
4080fd14:	e0fffb17 	ldw	r3,-20(fp)
4080fd18:	e0bfff17 	ldw	r2,-4(fp)
4080fd1c:	1880010e 	bge	r3,r2,4080fd24 <alt_onchip_flash_write+0x164>
4080fd20:	1805883a 	mov	r2,r3
4080fd24:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
4080fd28:	e0bffa17 	ldw	r2,-24(fp)
4080fd2c:	10c00a17 	ldw	r3,40(r2)
4080fd30:	e0bffd17 	ldw	r2,-12(fp)
4080fd34:	1885883a 	add	r2,r3,r2
4080fd38:	e0fffb17 	ldw	r3,-20(fp)
4080fd3c:	180d883a 	mov	r6,r3
4080fd40:	100b883a 	mov	r5,r2
4080fd44:	e13ffe17 	ldw	r4,-8(fp)
4080fd48:	081159c0 	call	4081159c <memcmp>
4080fd4c:	10001326 	beq	r2,zero,4080fd9c <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
4080fd50:	e0bffa17 	ldw	r2,-24(fp)
4080fd54:	10800817 	ldw	r2,32(r2)
4080fd58:	e0fffa17 	ldw	r3,-24(fp)
4080fd5c:	e17ff717 	ldw	r5,-36(fp)
4080fd60:	1809883a 	mov	r4,r3
4080fd64:	103ee83a 	callr	r2
4080fd68:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
4080fd6c:	e0bff417 	ldw	r2,-48(fp)
4080fd70:	10000a1e 	bne	r2,zero,4080fd9c <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
4080fd74:	e0bffa17 	ldw	r2,-24(fp)
4080fd78:	10800917 	ldw	r2,36(r2)
4080fd7c:	e13ffa17 	ldw	r4,-24(fp)
4080fd80:	e0fffb17 	ldw	r3,-20(fp)
4080fd84:	d8c00015 	stw	r3,0(sp)
4080fd88:	e1fffe17 	ldw	r7,-8(fp)
4080fd8c:	e1bffd17 	ldw	r6,-12(fp)
4080fd90:	e17ff717 	ldw	r5,-36(fp)
4080fd94:	103ee83a 	callr	r2
4080fd98:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
4080fd9c:	e0ffff17 	ldw	r3,-4(fp)
4080fda0:	e0bffb17 	ldw	r2,-20(fp)
4080fda4:	18802e26 	beq	r3,r2,4080fe60 <alt_onchip_flash_write+0x2a0>
4080fda8:	e0bff417 	ldw	r2,-48(fp)
4080fdac:	10002c1e 	bne	r2,zero,4080fe60 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
4080fdb0:	e0ffff17 	ldw	r3,-4(fp)
4080fdb4:	e0bffb17 	ldw	r2,-20(fp)
4080fdb8:	1885c83a 	sub	r2,r3,r2
4080fdbc:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
4080fdc0:	e0fffa17 	ldw	r3,-24(fp)
4080fdc4:	e0bff517 	ldw	r2,-44(fp)
4080fdc8:	10800104 	addi	r2,r2,4
4080fdcc:	1004913a 	slli	r2,r2,4
4080fdd0:	1885883a 	add	r2,r3,r2
4080fdd4:	10c00017 	ldw	r3,0(r2)
4080fdd8:	e0bff717 	ldw	r2,-36(fp)
4080fddc:	1885883a 	add	r2,r3,r2
4080fde0:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
4080fde4:	e0bffb17 	ldw	r2,-20(fp)
4080fde8:	e0fffe17 	ldw	r3,-8(fp)
4080fdec:	1885883a 	add	r2,r3,r2
4080fdf0:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
4080fdf4:	e0fffa17 	ldw	r3,-24(fp)
4080fdf8:	e0bff517 	ldw	r2,-44(fp)
4080fdfc:	10800104 	addi	r2,r2,4
4080fe00:	1004913a 	slli	r2,r2,4
4080fe04:	1885883a 	add	r2,r3,r2
4080fe08:	10800017 	ldw	r2,0(r2)
4080fe0c:	e0fff717 	ldw	r3,-36(fp)
4080fe10:	1885883a 	add	r2,r3,r2
4080fe14:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
4080fe18:	e0bff617 	ldw	r2,-40(fp)
4080fe1c:	10800044 	addi	r2,r2,1
4080fe20:	e0bff615 	stw	r2,-40(fp)
4080fe24:	e0fffa17 	ldw	r3,-24(fp)
4080fe28:	e0bff517 	ldw	r2,-44(fp)
4080fe2c:	1004913a 	slli	r2,r2,4
4080fe30:	1885883a 	add	r2,r3,r2
4080fe34:	10800f04 	addi	r2,r2,60
4080fe38:	10800017 	ldw	r2,0(r2)
4080fe3c:	e0fff617 	ldw	r3,-40(fp)
4080fe40:	18bf9c16 	blt	r3,r2,4080fcb4 <__alt_mem_onchip_flash_0_data+0xff7cfcb4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
4080fe44:	e0bff517 	ldw	r2,-44(fp)
4080fe48:	10800044 	addi	r2,r2,1
4080fe4c:	e0bff515 	stw	r2,-44(fp)
4080fe50:	e0bffa17 	ldw	r2,-24(fp)
4080fe54:	10800c17 	ldw	r2,48(r2)
4080fe58:	e0fff517 	ldw	r3,-44(fp)
4080fe5c:	18bf7516 	blt	r3,r2,4080fc34 <__alt_mem_onchip_flash_0_data+0xff7cfc34>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
4080fe60:	e0bffa17 	ldw	r2,-24(fp)
4080fe64:	10c00a17 	ldw	r3,40(r2)
4080fe68:	e0bff917 	ldw	r2,-28(fp)
4080fe6c:	1885883a 	add	r2,r3,r2
4080fe70:	e0fff817 	ldw	r3,-32(fp)
4080fe74:	180b883a 	mov	r5,r3
4080fe78:	1009883a 	mov	r4,r2
4080fe7c:	08107a80 	call	408107a8 <alt_dcache_flush>
    return ret_code;
4080fe80:	e0bff417 	ldw	r2,-48(fp)
}
4080fe84:	e037883a 	mov	sp,fp
4080fe88:	dfc00117 	ldw	ra,4(sp)
4080fe8c:	df000017 	ldw	fp,0(sp)
4080fe90:	dec00204 	addi	sp,sp,8
4080fe94:	f800283a 	ret

4080fe98 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
4080fe98:	defff504 	addi	sp,sp,-44
4080fe9c:	dfc00a15 	stw	ra,40(sp)
4080fea0:	df000915 	stw	fp,36(sp)
4080fea4:	dc000815 	stw	r16,32(sp)
4080fea8:	df000904 	addi	fp,sp,36
4080feac:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
4080feb0:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
4080feb4:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
4080feb8:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
4080febc:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
4080fec0:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
4080fec4:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
4080fec8:	e0bffe17 	ldw	r2,-8(fp)
4080fecc:	10800d04 	addi	r2,r2,52
4080fed0:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
4080fed4:	e0bffe17 	ldw	r2,-8(fp)
4080fed8:	10802f17 	ldw	r2,188(r2)
4080fedc:	10001926 	beq	r2,zero,4080ff44 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
4080fee0:	e0bffe17 	ldw	r2,-8(fp)
4080fee4:	10802f17 	ldw	r2,188(r2)
4080fee8:	10800037 	ldwio	r2,0(r2)
4080feec:	1080080c 	andi	r2,r2,32
4080fef0:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
4080fef4:	e0bffe17 	ldw	r2,-8(fp)
4080fef8:	10802f17 	ldw	r2,188(r2)
4080fefc:	10800037 	ldwio	r2,0(r2)
4080ff00:	1080100c 	andi	r2,r2,64
4080ff04:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
4080ff08:	e0bffe17 	ldw	r2,-8(fp)
4080ff0c:	10802f17 	ldw	r2,188(r2)
4080ff10:	10800037 	ldwio	r2,0(r2)
4080ff14:	1080200c 	andi	r2,r2,128
4080ff18:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
4080ff1c:	e0bffe17 	ldw	r2,-8(fp)
4080ff20:	10802f17 	ldw	r2,188(r2)
4080ff24:	10800037 	ldwio	r2,0(r2)
4080ff28:	1080400c 	andi	r2,r2,256
4080ff2c:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
4080ff30:	e0bffe17 	ldw	r2,-8(fp)
4080ff34:	10802f17 	ldw	r2,188(r2)
4080ff38:	10800037 	ldwio	r2,0(r2)
4080ff3c:	1080800c 	andi	r2,r2,512
4080ff40:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
4080ff44:	e0bffe17 	ldw	r2,-8(fp)
4080ff48:	10803017 	ldw	r2,192(r2)
4080ff4c:	10800058 	cmpnei	r2,r2,1
4080ff50:	10002f1e 	bne	r2,zero,40810010 <altera_onchip_flash_init+0x178>
4080ff54:	e0bff817 	ldw	r2,-32(fp)
4080ff58:	10800820 	cmpeqi	r2,r2,32
4080ff5c:	10002c1e 	bne	r2,zero,40810010 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
4080ff60:	e0bff717 	ldw	r2,-36(fp)
4080ff64:	1004913a 	slli	r2,r2,4
4080ff68:	e0fffd17 	ldw	r3,-12(fp)
4080ff6c:	1885883a 	add	r2,r3,r2
4080ff70:	e0fffe17 	ldw	r3,-8(fp)
4080ff74:	18c03117 	ldw	r3,196(r3)
4080ff78:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
4080ff7c:	e0bff717 	ldw	r2,-36(fp)
4080ff80:	1004913a 	slli	r2,r2,4
4080ff84:	e0fffd17 	ldw	r3,-12(fp)
4080ff88:	1885883a 	add	r2,r3,r2
4080ff8c:	e0fffe17 	ldw	r3,-8(fp)
4080ff90:	19003217 	ldw	r4,200(r3)
4080ff94:	e0fffe17 	ldw	r3,-8(fp)
4080ff98:	18c03117 	ldw	r3,196(r3)
4080ff9c:	20c7c83a 	sub	r3,r4,r3
4080ffa0:	18c00044 	addi	r3,r3,1
4080ffa4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
4080ffa8:	e0bff717 	ldw	r2,-36(fp)
4080ffac:	1004913a 	slli	r2,r2,4
4080ffb0:	e0fffd17 	ldw	r3,-12(fp)
4080ffb4:	18a1883a 	add	r16,r3,r2
4080ffb8:	e0fffe17 	ldw	r3,-8(fp)
4080ffbc:	e0bff717 	ldw	r2,-36(fp)
4080ffc0:	1004913a 	slli	r2,r2,4
4080ffc4:	1885883a 	add	r2,r3,r2
4080ffc8:	10800e04 	addi	r2,r2,56
4080ffcc:	10c00017 	ldw	r3,0(r2)
4080ffd0:	e0bffe17 	ldw	r2,-8(fp)
4080ffd4:	10803f17 	ldw	r2,252(r2)
4080ffd8:	100b883a 	mov	r5,r2
4080ffdc:	1809883a 	mov	r4,r3
4080ffe0:	080b0740 	call	4080b074 <__divsi3>
4080ffe4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
4080ffe8:	e0bff717 	ldw	r2,-36(fp)
4080ffec:	1004913a 	slli	r2,r2,4
4080fff0:	e0fffd17 	ldw	r3,-12(fp)
4080fff4:	1885883a 	add	r2,r3,r2
4080fff8:	e0fffe17 	ldw	r3,-8(fp)
4080fffc:	18c03f17 	ldw	r3,252(r3)
40810000:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
40810004:	e0bff717 	ldw	r2,-36(fp)
40810008:	10800044 	addi	r2,r2,1
4081000c:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
40810010:	e0bffe17 	ldw	r2,-8(fp)
40810014:	10803317 	ldw	r2,204(r2)
40810018:	10800058 	cmpnei	r2,r2,1
4081001c:	10002f1e 	bne	r2,zero,408100dc <altera_onchip_flash_init+0x244>
40810020:	e0bff917 	ldw	r2,-28(fp)
40810024:	10801020 	cmpeqi	r2,r2,64
40810028:	10002c1e 	bne	r2,zero,408100dc <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
4081002c:	e0bff717 	ldw	r2,-36(fp)
40810030:	1004913a 	slli	r2,r2,4
40810034:	e0fffd17 	ldw	r3,-12(fp)
40810038:	1885883a 	add	r2,r3,r2
4081003c:	e0fffe17 	ldw	r3,-8(fp)
40810040:	18c03417 	ldw	r3,208(r3)
40810044:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
40810048:	e0bff717 	ldw	r2,-36(fp)
4081004c:	1004913a 	slli	r2,r2,4
40810050:	e0fffd17 	ldw	r3,-12(fp)
40810054:	1885883a 	add	r2,r3,r2
40810058:	e0fffe17 	ldw	r3,-8(fp)
4081005c:	19003517 	ldw	r4,212(r3)
40810060:	e0fffe17 	ldw	r3,-8(fp)
40810064:	18c03417 	ldw	r3,208(r3)
40810068:	20c7c83a 	sub	r3,r4,r3
4081006c:	18c00044 	addi	r3,r3,1
40810070:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
40810074:	e0bff717 	ldw	r2,-36(fp)
40810078:	1004913a 	slli	r2,r2,4
4081007c:	e0fffd17 	ldw	r3,-12(fp)
40810080:	18a1883a 	add	r16,r3,r2
40810084:	e0fffe17 	ldw	r3,-8(fp)
40810088:	e0bff717 	ldw	r2,-36(fp)
4081008c:	1004913a 	slli	r2,r2,4
40810090:	1885883a 	add	r2,r3,r2
40810094:	10800e04 	addi	r2,r2,56
40810098:	10c00017 	ldw	r3,0(r2)
4081009c:	e0bffe17 	ldw	r2,-8(fp)
408100a0:	10803f17 	ldw	r2,252(r2)
408100a4:	100b883a 	mov	r5,r2
408100a8:	1809883a 	mov	r4,r3
408100ac:	080b0740 	call	4080b074 <__divsi3>
408100b0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
408100b4:	e0bff717 	ldw	r2,-36(fp)
408100b8:	1004913a 	slli	r2,r2,4
408100bc:	e0fffd17 	ldw	r3,-12(fp)
408100c0:	1885883a 	add	r2,r3,r2
408100c4:	e0fffe17 	ldw	r3,-8(fp)
408100c8:	18c03f17 	ldw	r3,252(r3)
408100cc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
408100d0:	e0bff717 	ldw	r2,-36(fp)
408100d4:	10800044 	addi	r2,r2,1
408100d8:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
408100dc:	e0bffe17 	ldw	r2,-8(fp)
408100e0:	10803617 	ldw	r2,216(r2)
408100e4:	10800058 	cmpnei	r2,r2,1
408100e8:	10002f1e 	bne	r2,zero,408101a8 <altera_onchip_flash_init+0x310>
408100ec:	e0bffa17 	ldw	r2,-24(fp)
408100f0:	10802020 	cmpeqi	r2,r2,128
408100f4:	10002c1e 	bne	r2,zero,408101a8 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
408100f8:	e0bff717 	ldw	r2,-36(fp)
408100fc:	1004913a 	slli	r2,r2,4
40810100:	e0fffd17 	ldw	r3,-12(fp)
40810104:	1885883a 	add	r2,r3,r2
40810108:	e0fffe17 	ldw	r3,-8(fp)
4081010c:	18c03717 	ldw	r3,220(r3)
40810110:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
40810114:	e0bff717 	ldw	r2,-36(fp)
40810118:	1004913a 	slli	r2,r2,4
4081011c:	e0fffd17 	ldw	r3,-12(fp)
40810120:	1885883a 	add	r2,r3,r2
40810124:	e0fffe17 	ldw	r3,-8(fp)
40810128:	19003817 	ldw	r4,224(r3)
4081012c:	e0fffe17 	ldw	r3,-8(fp)
40810130:	18c03717 	ldw	r3,220(r3)
40810134:	20c7c83a 	sub	r3,r4,r3
40810138:	18c00044 	addi	r3,r3,1
4081013c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
40810140:	e0bff717 	ldw	r2,-36(fp)
40810144:	1004913a 	slli	r2,r2,4
40810148:	e0fffd17 	ldw	r3,-12(fp)
4081014c:	18a1883a 	add	r16,r3,r2
40810150:	e0fffe17 	ldw	r3,-8(fp)
40810154:	e0bff717 	ldw	r2,-36(fp)
40810158:	1004913a 	slli	r2,r2,4
4081015c:	1885883a 	add	r2,r3,r2
40810160:	10800e04 	addi	r2,r2,56
40810164:	10c00017 	ldw	r3,0(r2)
40810168:	e0bffe17 	ldw	r2,-8(fp)
4081016c:	10803f17 	ldw	r2,252(r2)
40810170:	100b883a 	mov	r5,r2
40810174:	1809883a 	mov	r4,r3
40810178:	080b0740 	call	4080b074 <__divsi3>
4081017c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
40810180:	e0bff717 	ldw	r2,-36(fp)
40810184:	1004913a 	slli	r2,r2,4
40810188:	e0fffd17 	ldw	r3,-12(fp)
4081018c:	1885883a 	add	r2,r3,r2
40810190:	e0fffe17 	ldw	r3,-8(fp)
40810194:	18c03f17 	ldw	r3,252(r3)
40810198:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
4081019c:	e0bff717 	ldw	r2,-36(fp)
408101a0:	10800044 	addi	r2,r2,1
408101a4:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
408101a8:	e0bffe17 	ldw	r2,-8(fp)
408101ac:	10803917 	ldw	r2,228(r2)
408101b0:	10800058 	cmpnei	r2,r2,1
408101b4:	10002f1e 	bne	r2,zero,40810274 <altera_onchip_flash_init+0x3dc>
408101b8:	e0bffb17 	ldw	r2,-20(fp)
408101bc:	10804020 	cmpeqi	r2,r2,256
408101c0:	10002c1e 	bne	r2,zero,40810274 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
408101c4:	e0bff717 	ldw	r2,-36(fp)
408101c8:	1004913a 	slli	r2,r2,4
408101cc:	e0fffd17 	ldw	r3,-12(fp)
408101d0:	1885883a 	add	r2,r3,r2
408101d4:	e0fffe17 	ldw	r3,-8(fp)
408101d8:	18c03a17 	ldw	r3,232(r3)
408101dc:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
408101e0:	e0bff717 	ldw	r2,-36(fp)
408101e4:	1004913a 	slli	r2,r2,4
408101e8:	e0fffd17 	ldw	r3,-12(fp)
408101ec:	1885883a 	add	r2,r3,r2
408101f0:	e0fffe17 	ldw	r3,-8(fp)
408101f4:	19003b17 	ldw	r4,236(r3)
408101f8:	e0fffe17 	ldw	r3,-8(fp)
408101fc:	18c03a17 	ldw	r3,232(r3)
40810200:	20c7c83a 	sub	r3,r4,r3
40810204:	18c00044 	addi	r3,r3,1
40810208:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
4081020c:	e0bff717 	ldw	r2,-36(fp)
40810210:	1004913a 	slli	r2,r2,4
40810214:	e0fffd17 	ldw	r3,-12(fp)
40810218:	18a1883a 	add	r16,r3,r2
4081021c:	e0fffe17 	ldw	r3,-8(fp)
40810220:	e0bff717 	ldw	r2,-36(fp)
40810224:	1004913a 	slli	r2,r2,4
40810228:	1885883a 	add	r2,r3,r2
4081022c:	10800e04 	addi	r2,r2,56
40810230:	10c00017 	ldw	r3,0(r2)
40810234:	e0bffe17 	ldw	r2,-8(fp)
40810238:	10803f17 	ldw	r2,252(r2)
4081023c:	100b883a 	mov	r5,r2
40810240:	1809883a 	mov	r4,r3
40810244:	080b0740 	call	4080b074 <__divsi3>
40810248:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
4081024c:	e0bff717 	ldw	r2,-36(fp)
40810250:	1004913a 	slli	r2,r2,4
40810254:	e0fffd17 	ldw	r3,-12(fp)
40810258:	1885883a 	add	r2,r3,r2
4081025c:	e0fffe17 	ldw	r3,-8(fp)
40810260:	18c03f17 	ldw	r3,252(r3)
40810264:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
40810268:	e0bff717 	ldw	r2,-36(fp)
4081026c:	10800044 	addi	r2,r2,1
40810270:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
40810274:	e0bffe17 	ldw	r2,-8(fp)
40810278:	10803c17 	ldw	r2,240(r2)
4081027c:	10800058 	cmpnei	r2,r2,1
40810280:	10002f1e 	bne	r2,zero,40810340 <altera_onchip_flash_init+0x4a8>
40810284:	e0bffc17 	ldw	r2,-16(fp)
40810288:	10808020 	cmpeqi	r2,r2,512
4081028c:	10002c1e 	bne	r2,zero,40810340 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
40810290:	e0bff717 	ldw	r2,-36(fp)
40810294:	1004913a 	slli	r2,r2,4
40810298:	e0fffd17 	ldw	r3,-12(fp)
4081029c:	1885883a 	add	r2,r3,r2
408102a0:	e0fffe17 	ldw	r3,-8(fp)
408102a4:	18c03d17 	ldw	r3,244(r3)
408102a8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
408102ac:	e0bff717 	ldw	r2,-36(fp)
408102b0:	1004913a 	slli	r2,r2,4
408102b4:	e0fffd17 	ldw	r3,-12(fp)
408102b8:	1885883a 	add	r2,r3,r2
408102bc:	e0fffe17 	ldw	r3,-8(fp)
408102c0:	19003e17 	ldw	r4,248(r3)
408102c4:	e0fffe17 	ldw	r3,-8(fp)
408102c8:	18c03d17 	ldw	r3,244(r3)
408102cc:	20c7c83a 	sub	r3,r4,r3
408102d0:	18c00044 	addi	r3,r3,1
408102d4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
408102d8:	e0bff717 	ldw	r2,-36(fp)
408102dc:	1004913a 	slli	r2,r2,4
408102e0:	e0fffd17 	ldw	r3,-12(fp)
408102e4:	18a1883a 	add	r16,r3,r2
408102e8:	e0fffe17 	ldw	r3,-8(fp)
408102ec:	e0bff717 	ldw	r2,-36(fp)
408102f0:	1004913a 	slli	r2,r2,4
408102f4:	1885883a 	add	r2,r3,r2
408102f8:	10800e04 	addi	r2,r2,56
408102fc:	10c00017 	ldw	r3,0(r2)
40810300:	e0bffe17 	ldw	r2,-8(fp)
40810304:	10803f17 	ldw	r2,252(r2)
40810308:	100b883a 	mov	r5,r2
4081030c:	1809883a 	mov	r4,r3
40810310:	080b0740 	call	4080b074 <__divsi3>
40810314:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
40810318:	e0bff717 	ldw	r2,-36(fp)
4081031c:	1004913a 	slli	r2,r2,4
40810320:	e0fffd17 	ldw	r3,-12(fp)
40810324:	1885883a 	add	r2,r3,r2
40810328:	e0fffe17 	ldw	r3,-8(fp)
4081032c:	18c03f17 	ldw	r3,252(r3)
40810330:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
40810334:	e0bff717 	ldw	r2,-36(fp)
40810338:	10800044 	addi	r2,r2,1
4081033c:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
40810340:	e0bffe17 	ldw	r2,-8(fp)
40810344:	e0fff717 	ldw	r3,-36(fp)
40810348:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
4081034c:	e0bffe17 	ldw	r2,-8(fp)
40810350:	1009883a 	mov	r4,r2
40810354:	080f5e40 	call	4080f5e4 <alt_flash_device_register>
}
40810358:	0001883a 	nop
4081035c:	e6ffff04 	addi	sp,fp,-4
40810360:	dfc00217 	ldw	ra,8(sp)
40810364:	df000117 	ldw	fp,4(sp)
40810368:	dc000017 	ldw	r16,0(sp)
4081036c:	dec00304 	addi	sp,sp,12
40810370:	f800283a 	ret

40810374 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
40810374:	defffa04 	addi	sp,sp,-24
40810378:	dfc00515 	stw	ra,20(sp)
4081037c:	df000415 	stw	fp,16(sp)
40810380:	df000404 	addi	fp,sp,16
40810384:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
40810388:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
4081038c:	008002f4 	movhi	r2,11
40810390:	10ab9804 	addi	r2,r2,-20896
40810394:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
40810398:	008002f4 	movhi	r2,11
4081039c:	10ab9804 	addi	r2,r2,-20896
408103a0:	e0bffd15 	stw	r2,-12(fp)

    while (
408103a4:	00000c06 	br	408103d8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
408103a8:	01000044 	movi	r4,1
408103ac:	08106500 	call	40810650 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
408103b0:	e0bffe17 	ldw	r2,-8(fp)
408103b4:	10000826 	beq	r2,zero,408103d8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
408103b8:	e0bffd17 	ldw	r2,-12(fp)
408103bc:	10bfffc4 	addi	r2,r2,-1
408103c0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
408103c4:	e0bffd17 	ldw	r2,-12(fp)
408103c8:	1000031e 	bne	r2,zero,408103d8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
408103cc:	00bfe304 	movi	r2,-116
408103d0:	e0bffc15 	stw	r2,-16(fp)
                break;
408103d4:	00000506 	br	408103ec <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
408103d8:	e0bfff17 	ldw	r2,-4(fp)
408103dc:	10802f17 	ldw	r2,188(r2)
408103e0:	10800037 	ldwio	r2,0(r2)
408103e4:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
408103e8:	103fef1e 	bne	r2,zero,408103a8 <__alt_mem_onchip_flash_0_data+0xff7d03a8>
                break;
            }
        }
    }

    return ret_code;
408103ec:	e0bffc17 	ldw	r2,-16(fp)
}
408103f0:	e037883a 	mov	sp,fp
408103f4:	dfc00117 	ldw	ra,4(sp)
408103f8:	df000017 	ldw	fp,0(sp)
408103fc:	dec00204 	addi	sp,sp,8
40810400:	f800283a 	ret

40810404 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
40810404:	defffa04 	addi	sp,sp,-24
40810408:	dfc00515 	stw	ra,20(sp)
4081040c:	df000415 	stw	fp,16(sp)
40810410:	df000404 	addi	fp,sp,16
40810414:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
40810418:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
4081041c:	008002f4 	movhi	r2,11
40810420:	10ab9804 	addi	r2,r2,-20896
40810424:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
40810428:	008002f4 	movhi	r2,11
4081042c:	10ab9804 	addi	r2,r2,-20896
40810430:	e0bffd15 	stw	r2,-12(fp)

    while (
40810434:	00000c06 	br	40810468 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
40810438:	01000044 	movi	r4,1
4081043c:	08106500 	call	40810650 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
40810440:	e0bffe17 	ldw	r2,-8(fp)
40810444:	10000826 	beq	r2,zero,40810468 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
40810448:	e0bffd17 	ldw	r2,-12(fp)
4081044c:	10bfffc4 	addi	r2,r2,-1
40810450:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
40810454:	e0bffd17 	ldw	r2,-12(fp)
40810458:	1000031e 	bne	r2,zero,40810468 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
4081045c:	00bfe304 	movi	r2,-116
40810460:	e0bffc15 	stw	r2,-16(fp)
                break;
40810464:	00000506 	br	4081047c <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
40810468:	e0bfff17 	ldw	r2,-4(fp)
4081046c:	10802f17 	ldw	r2,188(r2)
40810470:	10800037 	ldwio	r2,0(r2)
40810474:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
40810478:	103fef26 	beq	r2,zero,40810438 <__alt_mem_onchip_flash_0_data+0xff7d0438>
                break;
            }
        }
    }

    return ret_code;
4081047c:	e0bffc17 	ldw	r2,-16(fp)
}
40810480:	e037883a 	mov	sp,fp
40810484:	dfc00117 	ldw	ra,4(sp)
40810488:	df000017 	ldw	fp,0(sp)
4081048c:	dec00204 	addi	sp,sp,8
40810490:	f800283a 	ret

40810494 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
40810494:	defffa04 	addi	sp,sp,-24
40810498:	dfc00515 	stw	ra,20(sp)
4081049c:	df000415 	stw	fp,16(sp)
408104a0:	df000404 	addi	fp,sp,16
408104a4:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
408104a8:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
408104ac:	008002f4 	movhi	r2,11
408104b0:	10ab9804 	addi	r2,r2,-20896
408104b4:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
408104b8:	008002f4 	movhi	r2,11
408104bc:	10ab9804 	addi	r2,r2,-20896
408104c0:	e0bffd15 	stw	r2,-12(fp)

    while (
408104c4:	00000c06 	br	408104f8 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
408104c8:	01000044 	movi	r4,1
408104cc:	08106500 	call	40810650 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
408104d0:	e0bffe17 	ldw	r2,-8(fp)
408104d4:	10000826 	beq	r2,zero,408104f8 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
408104d8:	e0bffd17 	ldw	r2,-12(fp)
408104dc:	10bfffc4 	addi	r2,r2,-1
408104e0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
408104e4:	e0bffd17 	ldw	r2,-12(fp)
408104e8:	1000031e 	bne	r2,zero,408104f8 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
408104ec:	00bfe304 	movi	r2,-116
408104f0:	e0bffc15 	stw	r2,-16(fp)
                break;
408104f4:	00000506 	br	4081050c <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
408104f8:	e0bfff17 	ldw	r2,-4(fp)
408104fc:	10802f17 	ldw	r2,188(r2)
40810500:	10800037 	ldwio	r2,0(r2)
40810504:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
40810508:	103fef26 	beq	r2,zero,408104c8 <__alt_mem_onchip_flash_0_data+0xff7d04c8>
                break;
            }
        }
    }

    return ret_code;
4081050c:	e0bffc17 	ldw	r2,-16(fp)
}
40810510:	e037883a 	mov	sp,fp
40810514:	dfc00117 	ldw	ra,4(sp)
40810518:	df000017 	ldw	fp,0(sp)
4081051c:	dec00204 	addi	sp,sp,8
40810520:	f800283a 	ret

40810524 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
40810524:	defff504 	addi	sp,sp,-44
40810528:	df000a15 	stw	fp,40(sp)
4081052c:	df000a04 	addi	fp,sp,40
40810530:	e13ffc15 	stw	r4,-16(fp)
40810534:	e17ffd15 	stw	r5,-12(fp)
40810538:	e1bffe15 	stw	r6,-8(fp)
4081053c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
40810540:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
40810544:	d0a03717 	ldw	r2,-32548(gp)
  
  if (alt_ticks_per_second ())
40810548:	10003c26 	beq	r2,zero,4081063c <alt_alarm_start+0x118>
  {
    if (alarm)
4081054c:	e0bffc17 	ldw	r2,-16(fp)
40810550:	10003826 	beq	r2,zero,40810634 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
40810554:	e0bffc17 	ldw	r2,-16(fp)
40810558:	e0fffe17 	ldw	r3,-8(fp)
4081055c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
40810560:	e0bffc17 	ldw	r2,-16(fp)
40810564:	e0ffff17 	ldw	r3,-4(fp)
40810568:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
4081056c:	0005303a 	rdctl	r2,status
40810570:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40810574:	e0fff917 	ldw	r3,-28(fp)
40810578:	00bfff84 	movi	r2,-2
4081057c:	1884703a 	and	r2,r3,r2
40810580:	1001703a 	wrctl	status,r2
  
  return context;
40810584:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
40810588:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
4081058c:	d0a03817 	ldw	r2,-32544(gp)
      
      current_nticks = alt_nticks();
40810590:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
40810594:	e0fffd17 	ldw	r3,-12(fp)
40810598:	e0bff617 	ldw	r2,-40(fp)
4081059c:	1885883a 	add	r2,r3,r2
408105a0:	10c00044 	addi	r3,r2,1
408105a4:	e0bffc17 	ldw	r2,-16(fp)
408105a8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
408105ac:	e0bffc17 	ldw	r2,-16(fp)
408105b0:	10c00217 	ldw	r3,8(r2)
408105b4:	e0bff617 	ldw	r2,-40(fp)
408105b8:	1880042e 	bgeu	r3,r2,408105cc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
408105bc:	e0bffc17 	ldw	r2,-16(fp)
408105c0:	00c00044 	movi	r3,1
408105c4:	10c00405 	stb	r3,16(r2)
408105c8:	00000206 	br	408105d4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
408105cc:	e0bffc17 	ldw	r2,-16(fp)
408105d0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
408105d4:	e0bffc17 	ldw	r2,-16(fp)
408105d8:	d0e02104 	addi	r3,gp,-32636
408105dc:	e0fffa15 	stw	r3,-24(fp)
408105e0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
408105e4:	e0bffb17 	ldw	r2,-20(fp)
408105e8:	e0fffa17 	ldw	r3,-24(fp)
408105ec:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
408105f0:	e0bffa17 	ldw	r2,-24(fp)
408105f4:	10c00017 	ldw	r3,0(r2)
408105f8:	e0bffb17 	ldw	r2,-20(fp)
408105fc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
40810600:	e0bffa17 	ldw	r2,-24(fp)
40810604:	10800017 	ldw	r2,0(r2)
40810608:	e0fffb17 	ldw	r3,-20(fp)
4081060c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
40810610:	e0bffa17 	ldw	r2,-24(fp)
40810614:	e0fffb17 	ldw	r3,-20(fp)
40810618:	10c00015 	stw	r3,0(r2)
4081061c:	e0bff817 	ldw	r2,-32(fp)
40810620:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40810624:	e0bff717 	ldw	r2,-36(fp)
40810628:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
4081062c:	0005883a 	mov	r2,zero
40810630:	00000306 	br	40810640 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
40810634:	00bffa84 	movi	r2,-22
40810638:	00000106 	br	40810640 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
4081063c:	00bfde84 	movi	r2,-134
  }
}
40810640:	e037883a 	mov	sp,fp
40810644:	df000017 	ldw	fp,0(sp)
40810648:	dec00104 	addi	sp,sp,4
4081064c:	f800283a 	ret

40810650 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
40810650:	defffa04 	addi	sp,sp,-24
40810654:	dfc00515 	stw	ra,20(sp)
40810658:	df000415 	stw	fp,16(sp)
4081065c:	df000404 	addi	fp,sp,16
40810660:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
40810664:	008000c4 	movi	r2,3
40810668:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
4081066c:	e0fffd17 	ldw	r3,-12(fp)
40810670:	008003f4 	movhi	r2,15
40810674:	10909004 	addi	r2,r2,16960
40810678:	1885383a 	mul	r2,r3,r2
4081067c:	100b883a 	mov	r5,r2
40810680:	01017db4 	movhi	r4,1526
40810684:	21384004 	addi	r4,r4,-7936
40810688:	080b16c0 	call	4080b16c <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
4081068c:	100b883a 	mov	r5,r2
40810690:	01200034 	movhi	r4,32768
40810694:	213fffc4 	addi	r4,r4,-1
40810698:	080b16c0 	call	4080b16c <__udivsi3>
4081069c:	100b883a 	mov	r5,r2
408106a0:	e13fff17 	ldw	r4,-4(fp)
408106a4:	080b16c0 	call	4080b16c <__udivsi3>
408106a8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
408106ac:	e0bffe17 	ldw	r2,-8(fp)
408106b0:	10002a26 	beq	r2,zero,4081075c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
408106b4:	e03ffc15 	stw	zero,-16(fp)
408106b8:	00001706 	br	40810718 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
408106bc:	00a00034 	movhi	r2,32768
408106c0:	10bfffc4 	addi	r2,r2,-1
408106c4:	10bfffc4 	addi	r2,r2,-1
408106c8:	103ffe1e 	bne	r2,zero,408106c4 <__alt_mem_onchip_flash_0_data+0xff7d06c4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
408106cc:	e0fffd17 	ldw	r3,-12(fp)
408106d0:	008003f4 	movhi	r2,15
408106d4:	10909004 	addi	r2,r2,16960
408106d8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
408106dc:	100b883a 	mov	r5,r2
408106e0:	01017db4 	movhi	r4,1526
408106e4:	21384004 	addi	r4,r4,-7936
408106e8:	080b16c0 	call	4080b16c <__udivsi3>
408106ec:	100b883a 	mov	r5,r2
408106f0:	01200034 	movhi	r4,32768
408106f4:	213fffc4 	addi	r4,r4,-1
408106f8:	080b16c0 	call	4080b16c <__udivsi3>
408106fc:	1007883a 	mov	r3,r2
40810700:	e0bfff17 	ldw	r2,-4(fp)
40810704:	10c5c83a 	sub	r2,r2,r3
40810708:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
4081070c:	e0bffc17 	ldw	r2,-16(fp)
40810710:	10800044 	addi	r2,r2,1
40810714:	e0bffc15 	stw	r2,-16(fp)
40810718:	e0fffc17 	ldw	r3,-16(fp)
4081071c:	e0bffe17 	ldw	r2,-8(fp)
40810720:	18bfe616 	blt	r3,r2,408106bc <__alt_mem_onchip_flash_0_data+0xff7d06bc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
40810724:	e0fffd17 	ldw	r3,-12(fp)
40810728:	008003f4 	movhi	r2,15
4081072c:	10909004 	addi	r2,r2,16960
40810730:	1885383a 	mul	r2,r3,r2
40810734:	100b883a 	mov	r5,r2
40810738:	01017db4 	movhi	r4,1526
4081073c:	21384004 	addi	r4,r4,-7936
40810740:	080b16c0 	call	4080b16c <__udivsi3>
40810744:	1007883a 	mov	r3,r2
40810748:	e0bfff17 	ldw	r2,-4(fp)
4081074c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
40810750:	10bfffc4 	addi	r2,r2,-1
40810754:	103ffe1e 	bne	r2,zero,40810750 <__alt_mem_onchip_flash_0_data+0xff7d0750>
40810758:	00000d06 	br	40810790 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
4081075c:	e0fffd17 	ldw	r3,-12(fp)
40810760:	008003f4 	movhi	r2,15
40810764:	10909004 	addi	r2,r2,16960
40810768:	1885383a 	mul	r2,r3,r2
4081076c:	100b883a 	mov	r5,r2
40810770:	01017db4 	movhi	r4,1526
40810774:	21384004 	addi	r4,r4,-7936
40810778:	080b16c0 	call	4080b16c <__udivsi3>
4081077c:	1007883a 	mov	r3,r2
40810780:	e0bfff17 	ldw	r2,-4(fp)
40810784:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
40810788:	10bfffc4 	addi	r2,r2,-1
4081078c:	00bffe16 	blt	zero,r2,40810788 <__alt_mem_onchip_flash_0_data+0xff7d0788>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
40810790:	0005883a 	mov	r2,zero
}
40810794:	e037883a 	mov	sp,fp
40810798:	dfc00117 	ldw	ra,4(sp)
4081079c:	df000017 	ldw	fp,0(sp)
408107a0:	dec00204 	addi	sp,sp,8
408107a4:	f800283a 	ret

408107a8 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
408107a8:	defffb04 	addi	sp,sp,-20
408107ac:	df000415 	stw	fp,16(sp)
408107b0:	df000404 	addi	fp,sp,16
408107b4:	e13ffe15 	stw	r4,-8(fp)
408107b8:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
408107bc:	e0fffe17 	ldw	r3,-8(fp)
408107c0:	e0bfff17 	ldw	r2,-4(fp)
408107c4:	1885883a 	add	r2,r3,r2
408107c8:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
408107cc:	e0bffe17 	ldw	r2,-8(fp)
408107d0:	e0bffc15 	stw	r2,-16(fp)
408107d4:	00000506 	br	408107ec <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
408107d8:	e0bffc17 	ldw	r2,-16(fp)
408107dc:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
408107e0:	e0bffc17 	ldw	r2,-16(fp)
408107e4:	10800804 	addi	r2,r2,32
408107e8:	e0bffc15 	stw	r2,-16(fp)
408107ec:	e0fffc17 	ldw	r3,-16(fp)
408107f0:	e0bffd17 	ldw	r2,-12(fp)
408107f4:	18bff836 	bltu	r3,r2,408107d8 <__alt_mem_onchip_flash_0_data+0xff7d07d8>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
408107f8:	e0bffe17 	ldw	r2,-8(fp)
408107fc:	108007cc 	andi	r2,r2,31
40810800:	10000226 	beq	r2,zero,4081080c <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
40810804:	e0bffc17 	ldw	r2,-16(fp)
40810808:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
4081080c:	0001883a 	nop
40810810:	e037883a 	mov	sp,fp
40810814:	df000017 	ldw	fp,0(sp)
40810818:	dec00104 	addi	sp,sp,4
4081081c:	f800283a 	ret

40810820 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40810820:	defffe04 	addi	sp,sp,-8
40810824:	dfc00115 	stw	ra,4(sp)
40810828:	df000015 	stw	fp,0(sp)
4081082c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40810830:	d0a01a17 	ldw	r2,-32664(gp)
40810834:	10000326 	beq	r2,zero,40810844 <alt_get_errno+0x24>
40810838:	d0a01a17 	ldw	r2,-32664(gp)
4081083c:	103ee83a 	callr	r2
40810840:	00000106 	br	40810848 <alt_get_errno+0x28>
40810844:	d0a03204 	addi	r2,gp,-32568
}
40810848:	e037883a 	mov	sp,fp
4081084c:	dfc00117 	ldw	ra,4(sp)
40810850:	df000017 	ldw	fp,0(sp)
40810854:	dec00204 	addi	sp,sp,8
40810858:	f800283a 	ret

4081085c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
4081085c:	defffa04 	addi	sp,sp,-24
40810860:	dfc00515 	stw	ra,20(sp)
40810864:	df000415 	stw	fp,16(sp)
40810868:	df000404 	addi	fp,sp,16
4081086c:	e13ffe15 	stw	r4,-8(fp)
40810870:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
40810874:	e0bffe17 	ldw	r2,-8(fp)
40810878:	10000326 	beq	r2,zero,40810888 <alt_dev_llist_insert+0x2c>
4081087c:	e0bffe17 	ldw	r2,-8(fp)
40810880:	10800217 	ldw	r2,8(r2)
40810884:	1000061e 	bne	r2,zero,408108a0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
40810888:	08108200 	call	40810820 <alt_get_errno>
4081088c:	1007883a 	mov	r3,r2
40810890:	00800584 	movi	r2,22
40810894:	18800015 	stw	r2,0(r3)
    return -EINVAL;
40810898:	00bffa84 	movi	r2,-22
4081089c:	00001306 	br	408108ec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
408108a0:	e0bffe17 	ldw	r2,-8(fp)
408108a4:	e0ffff17 	ldw	r3,-4(fp)
408108a8:	e0fffc15 	stw	r3,-16(fp)
408108ac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
408108b0:	e0bffd17 	ldw	r2,-12(fp)
408108b4:	e0fffc17 	ldw	r3,-16(fp)
408108b8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
408108bc:	e0bffc17 	ldw	r2,-16(fp)
408108c0:	10c00017 	ldw	r3,0(r2)
408108c4:	e0bffd17 	ldw	r2,-12(fp)
408108c8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
408108cc:	e0bffc17 	ldw	r2,-16(fp)
408108d0:	10800017 	ldw	r2,0(r2)
408108d4:	e0fffd17 	ldw	r3,-12(fp)
408108d8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
408108dc:	e0bffc17 	ldw	r2,-16(fp)
408108e0:	e0fffd17 	ldw	r3,-12(fp)
408108e4:	10c00015 	stw	r3,0(r2)

  return 0;  
408108e8:	0005883a 	mov	r2,zero
}
408108ec:	e037883a 	mov	sp,fp
408108f0:	dfc00117 	ldw	ra,4(sp)
408108f4:	df000017 	ldw	fp,0(sp)
408108f8:	dec00204 	addi	sp,sp,8
408108fc:	f800283a 	ret

40810900 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
40810900:	defffd04 	addi	sp,sp,-12
40810904:	dfc00215 	stw	ra,8(sp)
40810908:	df000115 	stw	fp,4(sp)
4081090c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
40810910:	00902074 	movhi	r2,16513
40810914:	10863804 	addi	r2,r2,6368
40810918:	e0bfff15 	stw	r2,-4(fp)
4081091c:	00000606 	br	40810938 <_do_ctors+0x38>
        (*ctor) (); 
40810920:	e0bfff17 	ldw	r2,-4(fp)
40810924:	10800017 	ldw	r2,0(r2)
40810928:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
4081092c:	e0bfff17 	ldw	r2,-4(fp)
40810930:	10bfff04 	addi	r2,r2,-4
40810934:	e0bfff15 	stw	r2,-4(fp)
40810938:	e0ffff17 	ldw	r3,-4(fp)
4081093c:	00902074 	movhi	r2,16513
40810940:	10863904 	addi	r2,r2,6372
40810944:	18bff62e 	bgeu	r3,r2,40810920 <__alt_mem_onchip_flash_0_data+0xff7d0920>
        (*ctor) (); 
}
40810948:	0001883a 	nop
4081094c:	e037883a 	mov	sp,fp
40810950:	dfc00117 	ldw	ra,4(sp)
40810954:	df000017 	ldw	fp,0(sp)
40810958:	dec00204 	addi	sp,sp,8
4081095c:	f800283a 	ret

40810960 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
40810960:	defffd04 	addi	sp,sp,-12
40810964:	dfc00215 	stw	ra,8(sp)
40810968:	df000115 	stw	fp,4(sp)
4081096c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
40810970:	00902074 	movhi	r2,16513
40810974:	10863804 	addi	r2,r2,6368
40810978:	e0bfff15 	stw	r2,-4(fp)
4081097c:	00000606 	br	40810998 <_do_dtors+0x38>
        (*dtor) (); 
40810980:	e0bfff17 	ldw	r2,-4(fp)
40810984:	10800017 	ldw	r2,0(r2)
40810988:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
4081098c:	e0bfff17 	ldw	r2,-4(fp)
40810990:	10bfff04 	addi	r2,r2,-4
40810994:	e0bfff15 	stw	r2,-4(fp)
40810998:	e0ffff17 	ldw	r3,-4(fp)
4081099c:	00902074 	movhi	r2,16513
408109a0:	10863904 	addi	r2,r2,6372
408109a4:	18bff62e 	bgeu	r3,r2,40810980 <__alt_mem_onchip_flash_0_data+0xff7d0980>
        (*dtor) (); 
}
408109a8:	0001883a 	nop
408109ac:	e037883a 	mov	sp,fp
408109b0:	dfc00117 	ldw	ra,4(sp)
408109b4:	df000017 	ldw	fp,0(sp)
408109b8:	dec00204 	addi	sp,sp,8
408109bc:	f800283a 	ret

408109c0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
408109c0:	defffc04 	addi	sp,sp,-16
408109c4:	dfc00315 	stw	ra,12(sp)
408109c8:	df000215 	stw	fp,8(sp)
408109cc:	df000204 	addi	fp,sp,8
408109d0:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
408109d4:	d1601e04 	addi	r5,gp,-32648
408109d8:	e13fff17 	ldw	r4,-4(fp)
408109dc:	08112780 	call	40811278 <alt_find_dev>
408109e0:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
408109e4:	e0bffe17 	ldw	r2,-8(fp)
408109e8:	10000926 	beq	r2,zero,40810a10 <alt_flash_open_dev+0x50>
408109ec:	e0bffe17 	ldw	r2,-8(fp)
408109f0:	10800317 	ldw	r2,12(r2)
408109f4:	10000626 	beq	r2,zero,40810a10 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
408109f8:	e0bffe17 	ldw	r2,-8(fp)
408109fc:	10800317 	ldw	r2,12(r2)
40810a00:	e17fff17 	ldw	r5,-4(fp)
40810a04:	e13ffe17 	ldw	r4,-8(fp)
40810a08:	103ee83a 	callr	r2
40810a0c:	00000106 	br	40810a14 <alt_flash_open_dev+0x54>
  }

  return dev;
40810a10:	e0bffe17 	ldw	r2,-8(fp)
}
40810a14:	e037883a 	mov	sp,fp
40810a18:	dfc00117 	ldw	ra,4(sp)
40810a1c:	df000017 	ldw	fp,0(sp)
40810a20:	dec00204 	addi	sp,sp,8
40810a24:	f800283a 	ret

40810a28 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
40810a28:	defffd04 	addi	sp,sp,-12
40810a2c:	dfc00215 	stw	ra,8(sp)
40810a30:	df000115 	stw	fp,4(sp)
40810a34:	df000104 	addi	fp,sp,4
40810a38:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
40810a3c:	e0bfff17 	ldw	r2,-4(fp)
40810a40:	10000826 	beq	r2,zero,40810a64 <alt_flash_close_dev+0x3c>
40810a44:	e0bfff17 	ldw	r2,-4(fp)
40810a48:	10800417 	ldw	r2,16(r2)
40810a4c:	10000526 	beq	r2,zero,40810a64 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
40810a50:	e0bfff17 	ldw	r2,-4(fp)
40810a54:	10800417 	ldw	r2,16(r2)
40810a58:	e13fff17 	ldw	r4,-4(fp)
40810a5c:	103ee83a 	callr	r2
  }
  return;
40810a60:	0001883a 	nop
40810a64:	0001883a 	nop
}
40810a68:	e037883a 	mov	sp,fp
40810a6c:	dfc00117 	ldw	ra,4(sp)
40810a70:	df000017 	ldw	fp,0(sp)
40810a74:	dec00204 	addi	sp,sp,8
40810a78:	f800283a 	ret

40810a7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
40810a7c:	defff904 	addi	sp,sp,-28
40810a80:	dfc00615 	stw	ra,24(sp)
40810a84:	df000515 	stw	fp,20(sp)
40810a88:	df000504 	addi	fp,sp,20
40810a8c:	e13ffc15 	stw	r4,-16(fp)
40810a90:	e17ffd15 	stw	r5,-12(fp)
40810a94:	e1bffe15 	stw	r6,-8(fp)
40810a98:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
40810a9c:	e0800217 	ldw	r2,8(fp)
40810aa0:	d8800015 	stw	r2,0(sp)
40810aa4:	e1ffff17 	ldw	r7,-4(fp)
40810aa8:	e1bffe17 	ldw	r6,-8(fp)
40810aac:	e17ffd17 	ldw	r5,-12(fp)
40810ab0:	e13ffc17 	ldw	r4,-16(fp)
40810ab4:	0810c2c0 	call	40810c2c <alt_iic_isr_register>
}  
40810ab8:	e037883a 	mov	sp,fp
40810abc:	dfc00117 	ldw	ra,4(sp)
40810ac0:	df000017 	ldw	fp,0(sp)
40810ac4:	dec00204 	addi	sp,sp,8
40810ac8:	f800283a 	ret

40810acc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
40810acc:	defff904 	addi	sp,sp,-28
40810ad0:	df000615 	stw	fp,24(sp)
40810ad4:	df000604 	addi	fp,sp,24
40810ad8:	e13ffe15 	stw	r4,-8(fp)
40810adc:	e17fff15 	stw	r5,-4(fp)
40810ae0:	e0bfff17 	ldw	r2,-4(fp)
40810ae4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40810ae8:	0005303a 	rdctl	r2,status
40810aec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40810af0:	e0fffb17 	ldw	r3,-20(fp)
40810af4:	00bfff84 	movi	r2,-2
40810af8:	1884703a 	and	r2,r3,r2
40810afc:	1001703a 	wrctl	status,r2
  
  return context;
40810b00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40810b04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
40810b08:	00c00044 	movi	r3,1
40810b0c:	e0bffa17 	ldw	r2,-24(fp)
40810b10:	1884983a 	sll	r2,r3,r2
40810b14:	1007883a 	mov	r3,r2
40810b18:	d0a03617 	ldw	r2,-32552(gp)
40810b1c:	1884b03a 	or	r2,r3,r2
40810b20:	d0a03615 	stw	r2,-32552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40810b24:	d0a03617 	ldw	r2,-32552(gp)
40810b28:	100170fa 	wrctl	ienable,r2
40810b2c:	e0bffc17 	ldw	r2,-16(fp)
40810b30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40810b34:	e0bffd17 	ldw	r2,-12(fp)
40810b38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40810b3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
40810b40:	0001883a 	nop
}
40810b44:	e037883a 	mov	sp,fp
40810b48:	df000017 	ldw	fp,0(sp)
40810b4c:	dec00104 	addi	sp,sp,4
40810b50:	f800283a 	ret

40810b54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
40810b54:	defff904 	addi	sp,sp,-28
40810b58:	df000615 	stw	fp,24(sp)
40810b5c:	df000604 	addi	fp,sp,24
40810b60:	e13ffe15 	stw	r4,-8(fp)
40810b64:	e17fff15 	stw	r5,-4(fp)
40810b68:	e0bfff17 	ldw	r2,-4(fp)
40810b6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40810b70:	0005303a 	rdctl	r2,status
40810b74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40810b78:	e0fffb17 	ldw	r3,-20(fp)
40810b7c:	00bfff84 	movi	r2,-2
40810b80:	1884703a 	and	r2,r3,r2
40810b84:	1001703a 	wrctl	status,r2
  
  return context;
40810b88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
40810b8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
40810b90:	00c00044 	movi	r3,1
40810b94:	e0bffa17 	ldw	r2,-24(fp)
40810b98:	1884983a 	sll	r2,r3,r2
40810b9c:	0084303a 	nor	r2,zero,r2
40810ba0:	1007883a 	mov	r3,r2
40810ba4:	d0a03617 	ldw	r2,-32552(gp)
40810ba8:	1884703a 	and	r2,r3,r2
40810bac:	d0a03615 	stw	r2,-32552(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
40810bb0:	d0a03617 	ldw	r2,-32552(gp)
40810bb4:	100170fa 	wrctl	ienable,r2
40810bb8:	e0bffc17 	ldw	r2,-16(fp)
40810bbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40810bc0:	e0bffd17 	ldw	r2,-12(fp)
40810bc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
40810bc8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
40810bcc:	0001883a 	nop
}
40810bd0:	e037883a 	mov	sp,fp
40810bd4:	df000017 	ldw	fp,0(sp)
40810bd8:	dec00104 	addi	sp,sp,4
40810bdc:	f800283a 	ret

40810be0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
40810be0:	defffc04 	addi	sp,sp,-16
40810be4:	df000315 	stw	fp,12(sp)
40810be8:	df000304 	addi	fp,sp,12
40810bec:	e13ffe15 	stw	r4,-8(fp)
40810bf0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
40810bf4:	000530fa 	rdctl	r2,ienable
40810bf8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
40810bfc:	00c00044 	movi	r3,1
40810c00:	e0bfff17 	ldw	r2,-4(fp)
40810c04:	1884983a 	sll	r2,r3,r2
40810c08:	1007883a 	mov	r3,r2
40810c0c:	e0bffd17 	ldw	r2,-12(fp)
40810c10:	1884703a 	and	r2,r3,r2
40810c14:	1004c03a 	cmpne	r2,r2,zero
40810c18:	10803fcc 	andi	r2,r2,255
}
40810c1c:	e037883a 	mov	sp,fp
40810c20:	df000017 	ldw	fp,0(sp)
40810c24:	dec00104 	addi	sp,sp,4
40810c28:	f800283a 	ret

40810c2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
40810c2c:	defff504 	addi	sp,sp,-44
40810c30:	dfc00a15 	stw	ra,40(sp)
40810c34:	df000915 	stw	fp,36(sp)
40810c38:	df000904 	addi	fp,sp,36
40810c3c:	e13ffc15 	stw	r4,-16(fp)
40810c40:	e17ffd15 	stw	r5,-12(fp)
40810c44:	e1bffe15 	stw	r6,-8(fp)
40810c48:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
40810c4c:	00bffa84 	movi	r2,-22
40810c50:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
40810c54:	e0bffd17 	ldw	r2,-12(fp)
40810c58:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
40810c5c:	e0bff817 	ldw	r2,-32(fp)
40810c60:	10800808 	cmpgei	r2,r2,32
40810c64:	1000271e 	bne	r2,zero,40810d04 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
40810c68:	0005303a 	rdctl	r2,status
40810c6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
40810c70:	e0fffb17 	ldw	r3,-20(fp)
40810c74:	00bfff84 	movi	r2,-2
40810c78:	1884703a 	and	r2,r3,r2
40810c7c:	1001703a 	wrctl	status,r2
  
  return context;
40810c80:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
40810c84:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
40810c88:	00902074 	movhi	r2,16513
40810c8c:	1093e404 	addi	r2,r2,20368
40810c90:	e0fff817 	ldw	r3,-32(fp)
40810c94:	180690fa 	slli	r3,r3,3
40810c98:	10c5883a 	add	r2,r2,r3
40810c9c:	e0fffe17 	ldw	r3,-8(fp)
40810ca0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
40810ca4:	00902074 	movhi	r2,16513
40810ca8:	1093e404 	addi	r2,r2,20368
40810cac:	e0fff817 	ldw	r3,-32(fp)
40810cb0:	180690fa 	slli	r3,r3,3
40810cb4:	10c5883a 	add	r2,r2,r3
40810cb8:	10800104 	addi	r2,r2,4
40810cbc:	e0ffff17 	ldw	r3,-4(fp)
40810cc0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
40810cc4:	e0bffe17 	ldw	r2,-8(fp)
40810cc8:	10000526 	beq	r2,zero,40810ce0 <alt_iic_isr_register+0xb4>
40810ccc:	e0bff817 	ldw	r2,-32(fp)
40810cd0:	100b883a 	mov	r5,r2
40810cd4:	e13ffc17 	ldw	r4,-16(fp)
40810cd8:	0810acc0 	call	40810acc <alt_ic_irq_enable>
40810cdc:	00000406 	br	40810cf0 <alt_iic_isr_register+0xc4>
40810ce0:	e0bff817 	ldw	r2,-32(fp)
40810ce4:	100b883a 	mov	r5,r2
40810ce8:	e13ffc17 	ldw	r4,-16(fp)
40810cec:	0810b540 	call	40810b54 <alt_ic_irq_disable>
40810cf0:	e0bff715 	stw	r2,-36(fp)
40810cf4:	e0bffa17 	ldw	r2,-24(fp)
40810cf8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40810cfc:	e0bff917 	ldw	r2,-28(fp)
40810d00:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
40810d04:	e0bff717 	ldw	r2,-36(fp)
}
40810d08:	e037883a 	mov	sp,fp
40810d0c:	dfc00117 	ldw	ra,4(sp)
40810d10:	df000017 	ldw	fp,0(sp)
40810d14:	dec00204 	addi	sp,sp,8
40810d18:	f800283a 	ret

40810d1c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
40810d1c:	defff904 	addi	sp,sp,-28
40810d20:	dfc00615 	stw	ra,24(sp)
40810d24:	df000515 	stw	fp,20(sp)
40810d28:	df000504 	addi	fp,sp,20
40810d2c:	e13ffc15 	stw	r4,-16(fp)
40810d30:	e17ffd15 	stw	r5,-12(fp)
40810d34:	e1bffe15 	stw	r6,-8(fp)
40810d38:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
40810d3c:	e1bfff17 	ldw	r6,-4(fp)
40810d40:	e17ffe17 	ldw	r5,-8(fp)
40810d44:	e13ffd17 	ldw	r4,-12(fp)
40810d48:	0810f5c0 	call	40810f5c <open>
40810d4c:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
40810d50:	e0bffb17 	ldw	r2,-20(fp)
40810d54:	10001c16 	blt	r2,zero,40810dc8 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
40810d58:	00902074 	movhi	r2,16513
40810d5c:	1089b604 	addi	r2,r2,9944
40810d60:	e0fffb17 	ldw	r3,-20(fp)
40810d64:	18c00324 	muli	r3,r3,12
40810d68:	10c5883a 	add	r2,r2,r3
40810d6c:	10c00017 	ldw	r3,0(r2)
40810d70:	e0bffc17 	ldw	r2,-16(fp)
40810d74:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
40810d78:	00902074 	movhi	r2,16513
40810d7c:	1089b604 	addi	r2,r2,9944
40810d80:	e0fffb17 	ldw	r3,-20(fp)
40810d84:	18c00324 	muli	r3,r3,12
40810d88:	10c5883a 	add	r2,r2,r3
40810d8c:	10800104 	addi	r2,r2,4
40810d90:	10c00017 	ldw	r3,0(r2)
40810d94:	e0bffc17 	ldw	r2,-16(fp)
40810d98:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
40810d9c:	00902074 	movhi	r2,16513
40810da0:	1089b604 	addi	r2,r2,9944
40810da4:	e0fffb17 	ldw	r3,-20(fp)
40810da8:	18c00324 	muli	r3,r3,12
40810dac:	10c5883a 	add	r2,r2,r3
40810db0:	10800204 	addi	r2,r2,8
40810db4:	10c00017 	ldw	r3,0(r2)
40810db8:	e0bffc17 	ldw	r2,-16(fp)
40810dbc:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
40810dc0:	e13ffb17 	ldw	r4,-20(fp)
40810dc4:	080de3c0 	call	4080de3c <alt_release_fd>
  }
} 
40810dc8:	0001883a 	nop
40810dcc:	e037883a 	mov	sp,fp
40810dd0:	dfc00117 	ldw	ra,4(sp)
40810dd4:	df000017 	ldw	fp,0(sp)
40810dd8:	dec00204 	addi	sp,sp,8
40810ddc:	f800283a 	ret

40810de0 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
40810de0:	defffb04 	addi	sp,sp,-20
40810de4:	dfc00415 	stw	ra,16(sp)
40810de8:	df000315 	stw	fp,12(sp)
40810dec:	df000304 	addi	fp,sp,12
40810df0:	e13ffd15 	stw	r4,-12(fp)
40810df4:	e17ffe15 	stw	r5,-8(fp)
40810df8:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
40810dfc:	01c07fc4 	movi	r7,511
40810e00:	01800044 	movi	r6,1
40810e04:	e17ffd17 	ldw	r5,-12(fp)
40810e08:	01102074 	movhi	r4,16513
40810e0c:	2109b904 	addi	r4,r4,9956
40810e10:	0810d1c0 	call	40810d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
40810e14:	01c07fc4 	movi	r7,511
40810e18:	000d883a 	mov	r6,zero
40810e1c:	e17ffe17 	ldw	r5,-8(fp)
40810e20:	01102074 	movhi	r4,16513
40810e24:	2109b604 	addi	r4,r4,9944
40810e28:	0810d1c0 	call	40810d1c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
40810e2c:	01c07fc4 	movi	r7,511
40810e30:	01800044 	movi	r6,1
40810e34:	e17fff17 	ldw	r5,-4(fp)
40810e38:	01102074 	movhi	r4,16513
40810e3c:	2109bc04 	addi	r4,r4,9968
40810e40:	0810d1c0 	call	40810d1c <alt_open_fd>
}  
40810e44:	0001883a 	nop
40810e48:	e037883a 	mov	sp,fp
40810e4c:	dfc00117 	ldw	ra,4(sp)
40810e50:	df000017 	ldw	fp,0(sp)
40810e54:	dec00204 	addi	sp,sp,8
40810e58:	f800283a 	ret

40810e5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
40810e5c:	defffe04 	addi	sp,sp,-8
40810e60:	dfc00115 	stw	ra,4(sp)
40810e64:	df000015 	stw	fp,0(sp)
40810e68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
40810e6c:	d0a01a17 	ldw	r2,-32664(gp)
40810e70:	10000326 	beq	r2,zero,40810e80 <alt_get_errno+0x24>
40810e74:	d0a01a17 	ldw	r2,-32664(gp)
40810e78:	103ee83a 	callr	r2
40810e7c:	00000106 	br	40810e84 <alt_get_errno+0x28>
40810e80:	d0a03204 	addi	r2,gp,-32568
}
40810e84:	e037883a 	mov	sp,fp
40810e88:	dfc00117 	ldw	ra,4(sp)
40810e8c:	df000017 	ldw	fp,0(sp)
40810e90:	dec00204 	addi	sp,sp,8
40810e94:	f800283a 	ret

40810e98 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
40810e98:	defffd04 	addi	sp,sp,-12
40810e9c:	df000215 	stw	fp,8(sp)
40810ea0:	df000204 	addi	fp,sp,8
40810ea4:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
40810ea8:	e0bfff17 	ldw	r2,-4(fp)
40810eac:	10800217 	ldw	r2,8(r2)
40810eb0:	10d00034 	orhi	r3,r2,16384
40810eb4:	e0bfff17 	ldw	r2,-4(fp)
40810eb8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40810ebc:	e03ffe15 	stw	zero,-8(fp)
40810ec0:	00001d06 	br	40810f38 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40810ec4:	00902074 	movhi	r2,16513
40810ec8:	1089b604 	addi	r2,r2,9944
40810ecc:	e0fffe17 	ldw	r3,-8(fp)
40810ed0:	18c00324 	muli	r3,r3,12
40810ed4:	10c5883a 	add	r2,r2,r3
40810ed8:	10c00017 	ldw	r3,0(r2)
40810edc:	e0bfff17 	ldw	r2,-4(fp)
40810ee0:	10800017 	ldw	r2,0(r2)
40810ee4:	1880111e 	bne	r3,r2,40810f2c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
40810ee8:	00902074 	movhi	r2,16513
40810eec:	1089b604 	addi	r2,r2,9944
40810ef0:	e0fffe17 	ldw	r3,-8(fp)
40810ef4:	18c00324 	muli	r3,r3,12
40810ef8:	10c5883a 	add	r2,r2,r3
40810efc:	10800204 	addi	r2,r2,8
40810f00:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
40810f04:	1000090e 	bge	r2,zero,40810f2c <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
40810f08:	e0bffe17 	ldw	r2,-8(fp)
40810f0c:	10c00324 	muli	r3,r2,12
40810f10:	00902074 	movhi	r2,16513
40810f14:	1089b604 	addi	r2,r2,9944
40810f18:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
40810f1c:	e0bfff17 	ldw	r2,-4(fp)
40810f20:	18800226 	beq	r3,r2,40810f2c <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
40810f24:	00bffcc4 	movi	r2,-13
40810f28:	00000806 	br	40810f4c <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
40810f2c:	e0bffe17 	ldw	r2,-8(fp)
40810f30:	10800044 	addi	r2,r2,1
40810f34:	e0bffe15 	stw	r2,-8(fp)
40810f38:	d0a01917 	ldw	r2,-32668(gp)
40810f3c:	1007883a 	mov	r3,r2
40810f40:	e0bffe17 	ldw	r2,-8(fp)
40810f44:	18bfdf2e 	bgeu	r3,r2,40810ec4 <__alt_mem_onchip_flash_0_data+0xff7d0ec4>
    }
  }
  
  /* The device is not locked */
 
  return 0;
40810f48:	0005883a 	mov	r2,zero
}
40810f4c:	e037883a 	mov	sp,fp
40810f50:	df000017 	ldw	fp,0(sp)
40810f54:	dec00104 	addi	sp,sp,4
40810f58:	f800283a 	ret

40810f5c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
40810f5c:	defff604 	addi	sp,sp,-40
40810f60:	dfc00915 	stw	ra,36(sp)
40810f64:	df000815 	stw	fp,32(sp)
40810f68:	df000804 	addi	fp,sp,32
40810f6c:	e13ffd15 	stw	r4,-12(fp)
40810f70:	e17ffe15 	stw	r5,-8(fp)
40810f74:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
40810f78:	00bfffc4 	movi	r2,-1
40810f7c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
40810f80:	00bffb44 	movi	r2,-19
40810f84:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
40810f88:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
40810f8c:	d1601704 	addi	r5,gp,-32676
40810f90:	e13ffd17 	ldw	r4,-12(fp)
40810f94:	08112780 	call	40811278 <alt_find_dev>
40810f98:	e0bff815 	stw	r2,-32(fp)
40810f9c:	e0bff817 	ldw	r2,-32(fp)
40810fa0:	1000051e 	bne	r2,zero,40810fb8 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
40810fa4:	e13ffd17 	ldw	r4,-12(fp)
40810fa8:	08113080 	call	40811308 <alt_find_file>
40810fac:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
40810fb0:	00800044 	movi	r2,1
40810fb4:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
40810fb8:	e0bff817 	ldw	r2,-32(fp)
40810fbc:	10002926 	beq	r2,zero,40811064 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
40810fc0:	e13ff817 	ldw	r4,-32(fp)
40810fc4:	08114100 	call	40811410 <alt_get_fd>
40810fc8:	e0bff915 	stw	r2,-28(fp)
40810fcc:	e0bff917 	ldw	r2,-28(fp)
40810fd0:	1000030e 	bge	r2,zero,40810fe0 <open+0x84>
    {
      status = index;
40810fd4:	e0bff917 	ldw	r2,-28(fp)
40810fd8:	e0bffa15 	stw	r2,-24(fp)
40810fdc:	00002306 	br	4081106c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
40810fe0:	e0bff917 	ldw	r2,-28(fp)
40810fe4:	10c00324 	muli	r3,r2,12
40810fe8:	00902074 	movhi	r2,16513
40810fec:	1089b604 	addi	r2,r2,9944
40810ff0:	1885883a 	add	r2,r3,r2
40810ff4:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
40810ff8:	e0fffe17 	ldw	r3,-8(fp)
40810ffc:	00900034 	movhi	r2,16384
40811000:	10bfffc4 	addi	r2,r2,-1
40811004:	1886703a 	and	r3,r3,r2
40811008:	e0bffc17 	ldw	r2,-16(fp)
4081100c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
40811010:	e0bffb17 	ldw	r2,-20(fp)
40811014:	1000051e 	bne	r2,zero,4081102c <open+0xd0>
40811018:	e13ffc17 	ldw	r4,-16(fp)
4081101c:	0810e980 	call	40810e98 <alt_file_locked>
40811020:	e0bffa15 	stw	r2,-24(fp)
40811024:	e0bffa17 	ldw	r2,-24(fp)
40811028:	10001016 	blt	r2,zero,4081106c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
4081102c:	e0bff817 	ldw	r2,-32(fp)
40811030:	10800317 	ldw	r2,12(r2)
40811034:	10000826 	beq	r2,zero,40811058 <open+0xfc>
40811038:	e0bff817 	ldw	r2,-32(fp)
4081103c:	10800317 	ldw	r2,12(r2)
40811040:	e1ffff17 	ldw	r7,-4(fp)
40811044:	e1bffe17 	ldw	r6,-8(fp)
40811048:	e17ffd17 	ldw	r5,-12(fp)
4081104c:	e13ffc17 	ldw	r4,-16(fp)
40811050:	103ee83a 	callr	r2
40811054:	00000106 	br	4081105c <open+0x100>
40811058:	0005883a 	mov	r2,zero
4081105c:	e0bffa15 	stw	r2,-24(fp)
40811060:	00000206 	br	4081106c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
40811064:	00bffb44 	movi	r2,-19
40811068:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
4081106c:	e0bffa17 	ldw	r2,-24(fp)
40811070:	1000090e 	bge	r2,zero,40811098 <open+0x13c>
  {
    alt_release_fd (index);  
40811074:	e13ff917 	ldw	r4,-28(fp)
40811078:	080de3c0 	call	4080de3c <alt_release_fd>
    ALT_ERRNO = -status;
4081107c:	0810e5c0 	call	40810e5c <alt_get_errno>
40811080:	1007883a 	mov	r3,r2
40811084:	e0bffa17 	ldw	r2,-24(fp)
40811088:	0085c83a 	sub	r2,zero,r2
4081108c:	18800015 	stw	r2,0(r3)
    return -1;
40811090:	00bfffc4 	movi	r2,-1
40811094:	00000106 	br	4081109c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
40811098:	e0bff917 	ldw	r2,-28(fp)
}
4081109c:	e037883a 	mov	sp,fp
408110a0:	dfc00117 	ldw	ra,4(sp)
408110a4:	df000017 	ldw	fp,0(sp)
408110a8:	dec00204 	addi	sp,sp,8
408110ac:	f800283a 	ret

408110b0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
408110b0:	defffa04 	addi	sp,sp,-24
408110b4:	df000515 	stw	fp,20(sp)
408110b8:	df000504 	addi	fp,sp,20
408110bc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
408110c0:	0005303a 	rdctl	r2,status
408110c4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
408110c8:	e0fffc17 	ldw	r3,-16(fp)
408110cc:	00bfff84 	movi	r2,-2
408110d0:	1884703a 	and	r2,r3,r2
408110d4:	1001703a 	wrctl	status,r2
  
  return context;
408110d8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
408110dc:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
408110e0:	e0bfff17 	ldw	r2,-4(fp)
408110e4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
408110e8:	e0bffd17 	ldw	r2,-12(fp)
408110ec:	10800017 	ldw	r2,0(r2)
408110f0:	e0fffd17 	ldw	r3,-12(fp)
408110f4:	18c00117 	ldw	r3,4(r3)
408110f8:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
408110fc:	e0bffd17 	ldw	r2,-12(fp)
40811100:	10800117 	ldw	r2,4(r2)
40811104:	e0fffd17 	ldw	r3,-12(fp)
40811108:	18c00017 	ldw	r3,0(r3)
4081110c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
40811110:	e0bffd17 	ldw	r2,-12(fp)
40811114:	e0fffd17 	ldw	r3,-12(fp)
40811118:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
4081111c:	e0bffd17 	ldw	r2,-12(fp)
40811120:	e0fffd17 	ldw	r3,-12(fp)
40811124:	10c00015 	stw	r3,0(r2)
40811128:	e0bffb17 	ldw	r2,-20(fp)
4081112c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
40811130:	e0bffe17 	ldw	r2,-8(fp)
40811134:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
40811138:	0001883a 	nop
4081113c:	e037883a 	mov	sp,fp
40811140:	df000017 	ldw	fp,0(sp)
40811144:	dec00104 	addi	sp,sp,4
40811148:	f800283a 	ret

4081114c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
4081114c:	defffb04 	addi	sp,sp,-20
40811150:	dfc00415 	stw	ra,16(sp)
40811154:	df000315 	stw	fp,12(sp)
40811158:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
4081115c:	d0a02117 	ldw	r2,-32636(gp)
40811160:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
40811164:	d0a03817 	ldw	r2,-32544(gp)
40811168:	10800044 	addi	r2,r2,1
4081116c:	d0a03815 	stw	r2,-32544(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
40811170:	00002e06 	br	4081122c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
40811174:	e0bffd17 	ldw	r2,-12(fp)
40811178:	10800017 	ldw	r2,0(r2)
4081117c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
40811180:	e0bffd17 	ldw	r2,-12(fp)
40811184:	10800403 	ldbu	r2,16(r2)
40811188:	10803fcc 	andi	r2,r2,255
4081118c:	10000426 	beq	r2,zero,408111a0 <alt_tick+0x54>
40811190:	d0a03817 	ldw	r2,-32544(gp)
40811194:	1000021e 	bne	r2,zero,408111a0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
40811198:	e0bffd17 	ldw	r2,-12(fp)
4081119c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
408111a0:	e0bffd17 	ldw	r2,-12(fp)
408111a4:	10800217 	ldw	r2,8(r2)
408111a8:	d0e03817 	ldw	r3,-32544(gp)
408111ac:	18801d36 	bltu	r3,r2,40811224 <alt_tick+0xd8>
408111b0:	e0bffd17 	ldw	r2,-12(fp)
408111b4:	10800403 	ldbu	r2,16(r2)
408111b8:	10803fcc 	andi	r2,r2,255
408111bc:	1000191e 	bne	r2,zero,40811224 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
408111c0:	e0bffd17 	ldw	r2,-12(fp)
408111c4:	10800317 	ldw	r2,12(r2)
408111c8:	e0fffd17 	ldw	r3,-12(fp)
408111cc:	18c00517 	ldw	r3,20(r3)
408111d0:	1809883a 	mov	r4,r3
408111d4:	103ee83a 	callr	r2
408111d8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
408111dc:	e0bfff17 	ldw	r2,-4(fp)
408111e0:	1000031e 	bne	r2,zero,408111f0 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
408111e4:	e13ffd17 	ldw	r4,-12(fp)
408111e8:	08110b00 	call	408110b0 <alt_alarm_stop>
408111ec:	00000d06 	br	40811224 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
408111f0:	e0bffd17 	ldw	r2,-12(fp)
408111f4:	10c00217 	ldw	r3,8(r2)
408111f8:	e0bfff17 	ldw	r2,-4(fp)
408111fc:	1887883a 	add	r3,r3,r2
40811200:	e0bffd17 	ldw	r2,-12(fp)
40811204:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
40811208:	e0bffd17 	ldw	r2,-12(fp)
4081120c:	10c00217 	ldw	r3,8(r2)
40811210:	d0a03817 	ldw	r2,-32544(gp)
40811214:	1880032e 	bgeu	r3,r2,40811224 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
40811218:	e0bffd17 	ldw	r2,-12(fp)
4081121c:	00c00044 	movi	r3,1
40811220:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
40811224:	e0bffe17 	ldw	r2,-8(fp)
40811228:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
4081122c:	e0fffd17 	ldw	r3,-12(fp)
40811230:	d0a02104 	addi	r2,gp,-32636
40811234:	18bfcf1e 	bne	r3,r2,40811174 <__alt_mem_onchip_flash_0_data+0xff7d1174>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
40811238:	0001883a 	nop
}
4081123c:	0001883a 	nop
40811240:	e037883a 	mov	sp,fp
40811244:	dfc00117 	ldw	ra,4(sp)
40811248:	df000017 	ldw	fp,0(sp)
4081124c:	dec00204 	addi	sp,sp,8
40811250:	f800283a 	ret

40811254 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
40811254:	deffff04 	addi	sp,sp,-4
40811258:	df000015 	stw	fp,0(sp)
4081125c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
40811260:	000170fa 	wrctl	ienable,zero
}
40811264:	0001883a 	nop
40811268:	e037883a 	mov	sp,fp
4081126c:	df000017 	ldw	fp,0(sp)
40811270:	dec00104 	addi	sp,sp,4
40811274:	f800283a 	ret

40811278 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
40811278:	defffa04 	addi	sp,sp,-24
4081127c:	dfc00515 	stw	ra,20(sp)
40811280:	df000415 	stw	fp,16(sp)
40811284:	df000404 	addi	fp,sp,16
40811288:	e13ffe15 	stw	r4,-8(fp)
4081128c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
40811290:	e0bfff17 	ldw	r2,-4(fp)
40811294:	10800017 	ldw	r2,0(r2)
40811298:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
4081129c:	e13ffe17 	ldw	r4,-8(fp)
408112a0:	08011d80 	call	408011d8 <strlen>
408112a4:	10800044 	addi	r2,r2,1
408112a8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
408112ac:	00000d06 	br	408112e4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
408112b0:	e0bffc17 	ldw	r2,-16(fp)
408112b4:	10800217 	ldw	r2,8(r2)
408112b8:	e0fffd17 	ldw	r3,-12(fp)
408112bc:	180d883a 	mov	r6,r3
408112c0:	e17ffe17 	ldw	r5,-8(fp)
408112c4:	1009883a 	mov	r4,r2
408112c8:	081159c0 	call	4081159c <memcmp>
408112cc:	1000021e 	bne	r2,zero,408112d8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
408112d0:	e0bffc17 	ldw	r2,-16(fp)
408112d4:	00000706 	br	408112f4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
408112d8:	e0bffc17 	ldw	r2,-16(fp)
408112dc:	10800017 	ldw	r2,0(r2)
408112e0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
408112e4:	e0fffc17 	ldw	r3,-16(fp)
408112e8:	e0bfff17 	ldw	r2,-4(fp)
408112ec:	18bff01e 	bne	r3,r2,408112b0 <__alt_mem_onchip_flash_0_data+0xff7d12b0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
408112f0:	0005883a 	mov	r2,zero
}
408112f4:	e037883a 	mov	sp,fp
408112f8:	dfc00117 	ldw	ra,4(sp)
408112fc:	df000017 	ldw	fp,0(sp)
40811300:	dec00204 	addi	sp,sp,8
40811304:	f800283a 	ret

40811308 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
40811308:	defffb04 	addi	sp,sp,-20
4081130c:	dfc00415 	stw	ra,16(sp)
40811310:	df000315 	stw	fp,12(sp)
40811314:	df000304 	addi	fp,sp,12
40811318:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
4081131c:	d0a01517 	ldw	r2,-32684(gp)
40811320:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
40811324:	00003106 	br	408113ec <alt_find_file+0xe4>
  {
    len = strlen(next->name);
40811328:	e0bffd17 	ldw	r2,-12(fp)
4081132c:	10800217 	ldw	r2,8(r2)
40811330:	1009883a 	mov	r4,r2
40811334:	08011d80 	call	408011d8 <strlen>
40811338:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
4081133c:	e0bffd17 	ldw	r2,-12(fp)
40811340:	10c00217 	ldw	r3,8(r2)
40811344:	e0bffe17 	ldw	r2,-8(fp)
40811348:	10bfffc4 	addi	r2,r2,-1
4081134c:	1885883a 	add	r2,r3,r2
40811350:	10800003 	ldbu	r2,0(r2)
40811354:	10803fcc 	andi	r2,r2,255
40811358:	1080201c 	xori	r2,r2,128
4081135c:	10bfe004 	addi	r2,r2,-128
40811360:	10800bd8 	cmpnei	r2,r2,47
40811364:	1000031e 	bne	r2,zero,40811374 <alt_find_file+0x6c>
    {
      len -= 1;
40811368:	e0bffe17 	ldw	r2,-8(fp)
4081136c:	10bfffc4 	addi	r2,r2,-1
40811370:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
40811374:	e0bffe17 	ldw	r2,-8(fp)
40811378:	e0ffff17 	ldw	r3,-4(fp)
4081137c:	1885883a 	add	r2,r3,r2
40811380:	10800003 	ldbu	r2,0(r2)
40811384:	10803fcc 	andi	r2,r2,255
40811388:	1080201c 	xori	r2,r2,128
4081138c:	10bfe004 	addi	r2,r2,-128
40811390:	10800be0 	cmpeqi	r2,r2,47
40811394:	1000081e 	bne	r2,zero,408113b8 <alt_find_file+0xb0>
40811398:	e0bffe17 	ldw	r2,-8(fp)
4081139c:	e0ffff17 	ldw	r3,-4(fp)
408113a0:	1885883a 	add	r2,r3,r2
408113a4:	10800003 	ldbu	r2,0(r2)
408113a8:	10803fcc 	andi	r2,r2,255
408113ac:	1080201c 	xori	r2,r2,128
408113b0:	10bfe004 	addi	r2,r2,-128
408113b4:	10000a1e 	bne	r2,zero,408113e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
408113b8:	e0bffd17 	ldw	r2,-12(fp)
408113bc:	10800217 	ldw	r2,8(r2)
408113c0:	e0fffe17 	ldw	r3,-8(fp)
408113c4:	180d883a 	mov	r6,r3
408113c8:	e17fff17 	ldw	r5,-4(fp)
408113cc:	1009883a 	mov	r4,r2
408113d0:	081159c0 	call	4081159c <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
408113d4:	1000021e 	bne	r2,zero,408113e0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
408113d8:	e0bffd17 	ldw	r2,-12(fp)
408113dc:	00000706 	br	408113fc <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
408113e0:	e0bffd17 	ldw	r2,-12(fp)
408113e4:	10800017 	ldw	r2,0(r2)
408113e8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
408113ec:	e0fffd17 	ldw	r3,-12(fp)
408113f0:	d0a01504 	addi	r2,gp,-32684
408113f4:	18bfcc1e 	bne	r3,r2,40811328 <__alt_mem_onchip_flash_0_data+0xff7d1328>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
408113f8:	0005883a 	mov	r2,zero
}
408113fc:	e037883a 	mov	sp,fp
40811400:	dfc00117 	ldw	ra,4(sp)
40811404:	df000017 	ldw	fp,0(sp)
40811408:	dec00204 	addi	sp,sp,8
4081140c:	f800283a 	ret

40811410 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
40811410:	defffc04 	addi	sp,sp,-16
40811414:	df000315 	stw	fp,12(sp)
40811418:	df000304 	addi	fp,sp,12
4081141c:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
40811420:	00bffa04 	movi	r2,-24
40811424:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
40811428:	e03ffd15 	stw	zero,-12(fp)
4081142c:	00001906 	br	40811494 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
40811430:	00902074 	movhi	r2,16513
40811434:	1089b604 	addi	r2,r2,9944
40811438:	e0fffd17 	ldw	r3,-12(fp)
4081143c:	18c00324 	muli	r3,r3,12
40811440:	10c5883a 	add	r2,r2,r3
40811444:	10800017 	ldw	r2,0(r2)
40811448:	10000f1e 	bne	r2,zero,40811488 <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
4081144c:	00902074 	movhi	r2,16513
40811450:	1089b604 	addi	r2,r2,9944
40811454:	e0fffd17 	ldw	r3,-12(fp)
40811458:	18c00324 	muli	r3,r3,12
4081145c:	10c5883a 	add	r2,r2,r3
40811460:	e0ffff17 	ldw	r3,-4(fp)
40811464:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
40811468:	d0e01917 	ldw	r3,-32668(gp)
4081146c:	e0bffd17 	ldw	r2,-12(fp)
40811470:	1880020e 	bge	r3,r2,4081147c <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
40811474:	e0bffd17 	ldw	r2,-12(fp)
40811478:	d0a01915 	stw	r2,-32668(gp)
      }
      rc = i;
4081147c:	e0bffd17 	ldw	r2,-12(fp)
40811480:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
40811484:	00000606 	br	408114a0 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
40811488:	e0bffd17 	ldw	r2,-12(fp)
4081148c:	10800044 	addi	r2,r2,1
40811490:	e0bffd15 	stw	r2,-12(fp)
40811494:	e0bffd17 	ldw	r2,-12(fp)
40811498:	10800810 	cmplti	r2,r2,32
4081149c:	103fe41e 	bne	r2,zero,40811430 <__alt_mem_onchip_flash_0_data+0xff7d1430>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
408114a0:	e0bffe17 	ldw	r2,-8(fp)
}
408114a4:	e037883a 	mov	sp,fp
408114a8:	df000017 	ldw	fp,0(sp)
408114ac:	dec00104 	addi	sp,sp,4
408114b0:	f800283a 	ret

408114b4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
408114b4:	defffe04 	addi	sp,sp,-8
408114b8:	df000115 	stw	fp,4(sp)
408114bc:	df000104 	addi	fp,sp,4
408114c0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
408114c4:	e0bfff17 	ldw	r2,-4(fp)
408114c8:	10bffe84 	addi	r2,r2,-6
408114cc:	10c00428 	cmpgeui	r3,r2,16
408114d0:	18001a1e 	bne	r3,zero,4081153c <alt_exception_cause_generated_bad_addr+0x88>
408114d4:	100690ba 	slli	r3,r2,2
408114d8:	00902074 	movhi	r2,16513
408114dc:	10853b04 	addi	r2,r2,5356
408114e0:	1885883a 	add	r2,r3,r2
408114e4:	10800017 	ldw	r2,0(r2)
408114e8:	1000683a 	jmp	r2
408114ec:	4081152c 	andhi	r2,r8,1108
408114f0:	4081152c 	andhi	r2,r8,1108
408114f4:	4081153c 	xorhi	r2,r8,1108
408114f8:	4081153c 	xorhi	r2,r8,1108
408114fc:	4081153c 	xorhi	r2,r8,1108
40811500:	4081152c 	andhi	r2,r8,1108
40811504:	40811534 	orhi	r2,r8,1108
40811508:	4081153c 	xorhi	r2,r8,1108
4081150c:	4081152c 	andhi	r2,r8,1108
40811510:	4081152c 	andhi	r2,r8,1108
40811514:	4081153c 	xorhi	r2,r8,1108
40811518:	4081152c 	andhi	r2,r8,1108
4081151c:	40811534 	orhi	r2,r8,1108
40811520:	4081153c 	xorhi	r2,r8,1108
40811524:	4081153c 	xorhi	r2,r8,1108
40811528:	4081152c 	andhi	r2,r8,1108
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
4081152c:	00800044 	movi	r2,1
40811530:	00000306 	br	40811540 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
40811534:	0005883a 	mov	r2,zero
40811538:	00000106 	br	40811540 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
4081153c:	0005883a 	mov	r2,zero
  }
}
40811540:	e037883a 	mov	sp,fp
40811544:	df000017 	ldw	fp,0(sp)
40811548:	dec00104 	addi	sp,sp,4
4081154c:	f800283a 	ret

40811550 <atexit>:
40811550:	200b883a 	mov	r5,r4
40811554:	000f883a 	mov	r7,zero
40811558:	000d883a 	mov	r6,zero
4081155c:	0009883a 	mov	r4,zero
40811560:	08116181 	jmpi	40811618 <__register_exitproc>

40811564 <exit>:
40811564:	defffe04 	addi	sp,sp,-8
40811568:	000b883a 	mov	r5,zero
4081156c:	dc000015 	stw	r16,0(sp)
40811570:	dfc00115 	stw	ra,4(sp)
40811574:	2021883a 	mov	r16,r4
40811578:	08117300 	call	40811730 <__call_exitprocs>
4081157c:	00902074 	movhi	r2,16513
40811580:	108eae04 	addi	r2,r2,15032
40811584:	11000017 	ldw	r4,0(r2)
40811588:	20800f17 	ldw	r2,60(r4)
4081158c:	10000126 	beq	r2,zero,40811594 <exit+0x30>
40811590:	103ee83a 	callr	r2
40811594:	8009883a 	mov	r4,r16
40811598:	08118b00 	call	408118b0 <_exit>

4081159c <memcmp>:
4081159c:	01c000c4 	movi	r7,3
408115a0:	3980192e 	bgeu	r7,r6,40811608 <memcmp+0x6c>
408115a4:	2144b03a 	or	r2,r4,r5
408115a8:	11c4703a 	and	r2,r2,r7
408115ac:	10000f26 	beq	r2,zero,408115ec <memcmp+0x50>
408115b0:	20800003 	ldbu	r2,0(r4)
408115b4:	28c00003 	ldbu	r3,0(r5)
408115b8:	10c0151e 	bne	r2,r3,40811610 <memcmp+0x74>
408115bc:	31bfff84 	addi	r6,r6,-2
408115c0:	01ffffc4 	movi	r7,-1
408115c4:	00000406 	br	408115d8 <memcmp+0x3c>
408115c8:	20800003 	ldbu	r2,0(r4)
408115cc:	28c00003 	ldbu	r3,0(r5)
408115d0:	31bfffc4 	addi	r6,r6,-1
408115d4:	10c00e1e 	bne	r2,r3,40811610 <memcmp+0x74>
408115d8:	21000044 	addi	r4,r4,1
408115dc:	29400044 	addi	r5,r5,1
408115e0:	31fff91e 	bne	r6,r7,408115c8 <__alt_mem_onchip_flash_0_data+0xff7d15c8>
408115e4:	0005883a 	mov	r2,zero
408115e8:	f800283a 	ret
408115ec:	20c00017 	ldw	r3,0(r4)
408115f0:	28800017 	ldw	r2,0(r5)
408115f4:	18bfee1e 	bne	r3,r2,408115b0 <__alt_mem_onchip_flash_0_data+0xff7d15b0>
408115f8:	31bfff04 	addi	r6,r6,-4
408115fc:	21000104 	addi	r4,r4,4
40811600:	29400104 	addi	r5,r5,4
40811604:	39bff936 	bltu	r7,r6,408115ec <__alt_mem_onchip_flash_0_data+0xff7d15ec>
40811608:	303fe91e 	bne	r6,zero,408115b0 <__alt_mem_onchip_flash_0_data+0xff7d15b0>
4081160c:	003ff506 	br	408115e4 <__alt_mem_onchip_flash_0_data+0xff7d15e4>
40811610:	10c5c83a 	sub	r2,r2,r3
40811614:	f800283a 	ret

40811618 <__register_exitproc>:
40811618:	defffa04 	addi	sp,sp,-24
4081161c:	dc000315 	stw	r16,12(sp)
40811620:	04102074 	movhi	r16,16513
40811624:	840eae04 	addi	r16,r16,15032
40811628:	80c00017 	ldw	r3,0(r16)
4081162c:	dc400415 	stw	r17,16(sp)
40811630:	dfc00515 	stw	ra,20(sp)
40811634:	18805217 	ldw	r2,328(r3)
40811638:	2023883a 	mov	r17,r4
4081163c:	10003726 	beq	r2,zero,4081171c <__register_exitproc+0x104>
40811640:	10c00117 	ldw	r3,4(r2)
40811644:	010007c4 	movi	r4,31
40811648:	20c00e16 	blt	r4,r3,40811684 <__register_exitproc+0x6c>
4081164c:	1a000044 	addi	r8,r3,1
40811650:	8800221e 	bne	r17,zero,408116dc <__register_exitproc+0xc4>
40811654:	18c00084 	addi	r3,r3,2
40811658:	18c7883a 	add	r3,r3,r3
4081165c:	18c7883a 	add	r3,r3,r3
40811660:	12000115 	stw	r8,4(r2)
40811664:	10c7883a 	add	r3,r2,r3
40811668:	19400015 	stw	r5,0(r3)
4081166c:	0005883a 	mov	r2,zero
40811670:	dfc00517 	ldw	ra,20(sp)
40811674:	dc400417 	ldw	r17,16(sp)
40811678:	dc000317 	ldw	r16,12(sp)
4081167c:	dec00604 	addi	sp,sp,24
40811680:	f800283a 	ret
40811684:	00800034 	movhi	r2,0
40811688:	10800004 	addi	r2,r2,0
4081168c:	10002626 	beq	r2,zero,40811728 <__register_exitproc+0x110>
40811690:	01006404 	movi	r4,400
40811694:	d9400015 	stw	r5,0(sp)
40811698:	d9800115 	stw	r6,4(sp)
4081169c:	d9c00215 	stw	r7,8(sp)
408116a0:	00000000 	call	40000000 <__alt_mem_new_sdram_controller_0-0x800000>
408116a4:	d9400017 	ldw	r5,0(sp)
408116a8:	d9800117 	ldw	r6,4(sp)
408116ac:	d9c00217 	ldw	r7,8(sp)
408116b0:	10001d26 	beq	r2,zero,40811728 <__register_exitproc+0x110>
408116b4:	81000017 	ldw	r4,0(r16)
408116b8:	10000115 	stw	zero,4(r2)
408116bc:	02000044 	movi	r8,1
408116c0:	22405217 	ldw	r9,328(r4)
408116c4:	0007883a 	mov	r3,zero
408116c8:	12400015 	stw	r9,0(r2)
408116cc:	20805215 	stw	r2,328(r4)
408116d0:	10006215 	stw	zero,392(r2)
408116d4:	10006315 	stw	zero,396(r2)
408116d8:	883fde26 	beq	r17,zero,40811654 <__alt_mem_onchip_flash_0_data+0xff7d1654>
408116dc:	18c9883a 	add	r4,r3,r3
408116e0:	2109883a 	add	r4,r4,r4
408116e4:	1109883a 	add	r4,r2,r4
408116e8:	21802215 	stw	r6,136(r4)
408116ec:	01800044 	movi	r6,1
408116f0:	12406217 	ldw	r9,392(r2)
408116f4:	30cc983a 	sll	r6,r6,r3
408116f8:	4992b03a 	or	r9,r9,r6
408116fc:	12406215 	stw	r9,392(r2)
40811700:	21c04215 	stw	r7,264(r4)
40811704:	01000084 	movi	r4,2
40811708:	893fd21e 	bne	r17,r4,40811654 <__alt_mem_onchip_flash_0_data+0xff7d1654>
4081170c:	11006317 	ldw	r4,396(r2)
40811710:	218cb03a 	or	r6,r4,r6
40811714:	11806315 	stw	r6,396(r2)
40811718:	003fce06 	br	40811654 <__alt_mem_onchip_flash_0_data+0xff7d1654>
4081171c:	18805304 	addi	r2,r3,332
40811720:	18805215 	stw	r2,328(r3)
40811724:	003fc606 	br	40811640 <__alt_mem_onchip_flash_0_data+0xff7d1640>
40811728:	00bfffc4 	movi	r2,-1
4081172c:	003fd006 	br	40811670 <__alt_mem_onchip_flash_0_data+0xff7d1670>

40811730 <__call_exitprocs>:
40811730:	defff504 	addi	sp,sp,-44
40811734:	df000915 	stw	fp,36(sp)
40811738:	dd400615 	stw	r21,24(sp)
4081173c:	dc800315 	stw	r18,12(sp)
40811740:	dfc00a15 	stw	ra,40(sp)
40811744:	ddc00815 	stw	r23,32(sp)
40811748:	dd800715 	stw	r22,28(sp)
4081174c:	dd000515 	stw	r20,20(sp)
40811750:	dcc00415 	stw	r19,16(sp)
40811754:	dc400215 	stw	r17,8(sp)
40811758:	dc000115 	stw	r16,4(sp)
4081175c:	d9000015 	stw	r4,0(sp)
40811760:	2839883a 	mov	fp,r5
40811764:	04800044 	movi	r18,1
40811768:	057fffc4 	movi	r21,-1
4081176c:	00902074 	movhi	r2,16513
40811770:	108eae04 	addi	r2,r2,15032
40811774:	12000017 	ldw	r8,0(r2)
40811778:	45005217 	ldw	r20,328(r8)
4081177c:	44c05204 	addi	r19,r8,328
40811780:	a0001c26 	beq	r20,zero,408117f4 <__call_exitprocs+0xc4>
40811784:	a0800117 	ldw	r2,4(r20)
40811788:	15ffffc4 	addi	r23,r2,-1
4081178c:	b8000d16 	blt	r23,zero,408117c4 <__call_exitprocs+0x94>
40811790:	14000044 	addi	r16,r2,1
40811794:	8421883a 	add	r16,r16,r16
40811798:	8421883a 	add	r16,r16,r16
4081179c:	84402004 	addi	r17,r16,128
408117a0:	a463883a 	add	r17,r20,r17
408117a4:	a421883a 	add	r16,r20,r16
408117a8:	e0001e26 	beq	fp,zero,40811824 <__call_exitprocs+0xf4>
408117ac:	80804017 	ldw	r2,256(r16)
408117b0:	e0801c26 	beq	fp,r2,40811824 <__call_exitprocs+0xf4>
408117b4:	bdffffc4 	addi	r23,r23,-1
408117b8:	843fff04 	addi	r16,r16,-4
408117bc:	8c7fff04 	addi	r17,r17,-4
408117c0:	bd7ff91e 	bne	r23,r21,408117a8 <__alt_mem_onchip_flash_0_data+0xff7d17a8>
408117c4:	00800034 	movhi	r2,0
408117c8:	10800004 	addi	r2,r2,0
408117cc:	10000926 	beq	r2,zero,408117f4 <__call_exitprocs+0xc4>
408117d0:	a0800117 	ldw	r2,4(r20)
408117d4:	1000301e 	bne	r2,zero,40811898 <__call_exitprocs+0x168>
408117d8:	a0800017 	ldw	r2,0(r20)
408117dc:	10003226 	beq	r2,zero,408118a8 <__call_exitprocs+0x178>
408117e0:	a009883a 	mov	r4,r20
408117e4:	98800015 	stw	r2,0(r19)
408117e8:	00000000 	call	40000000 <__alt_mem_new_sdram_controller_0-0x800000>
408117ec:	9d000017 	ldw	r20,0(r19)
408117f0:	a03fe41e 	bne	r20,zero,40811784 <__alt_mem_onchip_flash_0_data+0xff7d1784>
408117f4:	dfc00a17 	ldw	ra,40(sp)
408117f8:	df000917 	ldw	fp,36(sp)
408117fc:	ddc00817 	ldw	r23,32(sp)
40811800:	dd800717 	ldw	r22,28(sp)
40811804:	dd400617 	ldw	r21,24(sp)
40811808:	dd000517 	ldw	r20,20(sp)
4081180c:	dcc00417 	ldw	r19,16(sp)
40811810:	dc800317 	ldw	r18,12(sp)
40811814:	dc400217 	ldw	r17,8(sp)
40811818:	dc000117 	ldw	r16,4(sp)
4081181c:	dec00b04 	addi	sp,sp,44
40811820:	f800283a 	ret
40811824:	a0800117 	ldw	r2,4(r20)
40811828:	80c00017 	ldw	r3,0(r16)
4081182c:	10bfffc4 	addi	r2,r2,-1
40811830:	15c01426 	beq	r2,r23,40811884 <__call_exitprocs+0x154>
40811834:	80000015 	stw	zero,0(r16)
40811838:	183fde26 	beq	r3,zero,408117b4 <__alt_mem_onchip_flash_0_data+0xff7d17b4>
4081183c:	95c8983a 	sll	r4,r18,r23
40811840:	a0806217 	ldw	r2,392(r20)
40811844:	a5800117 	ldw	r22,4(r20)
40811848:	2084703a 	and	r2,r4,r2
4081184c:	10000b26 	beq	r2,zero,4081187c <__call_exitprocs+0x14c>
40811850:	a0806317 	ldw	r2,396(r20)
40811854:	2088703a 	and	r4,r4,r2
40811858:	20000c1e 	bne	r4,zero,4081188c <__call_exitprocs+0x15c>
4081185c:	89400017 	ldw	r5,0(r17)
40811860:	d9000017 	ldw	r4,0(sp)
40811864:	183ee83a 	callr	r3
40811868:	a0800117 	ldw	r2,4(r20)
4081186c:	15bfbf1e 	bne	r2,r22,4081176c <__alt_mem_onchip_flash_0_data+0xff7d176c>
40811870:	98800017 	ldw	r2,0(r19)
40811874:	153fcf26 	beq	r2,r20,408117b4 <__alt_mem_onchip_flash_0_data+0xff7d17b4>
40811878:	003fbc06 	br	4081176c <__alt_mem_onchip_flash_0_data+0xff7d176c>
4081187c:	183ee83a 	callr	r3
40811880:	003ff906 	br	40811868 <__alt_mem_onchip_flash_0_data+0xff7d1868>
40811884:	a5c00115 	stw	r23,4(r20)
40811888:	003feb06 	br	40811838 <__alt_mem_onchip_flash_0_data+0xff7d1838>
4081188c:	89000017 	ldw	r4,0(r17)
40811890:	183ee83a 	callr	r3
40811894:	003ff406 	br	40811868 <__alt_mem_onchip_flash_0_data+0xff7d1868>
40811898:	a0800017 	ldw	r2,0(r20)
4081189c:	a027883a 	mov	r19,r20
408118a0:	1029883a 	mov	r20,r2
408118a4:	003fb606 	br	40811780 <__alt_mem_onchip_flash_0_data+0xff7d1780>
408118a8:	0005883a 	mov	r2,zero
408118ac:	003ffb06 	br	4081189c <__alt_mem_onchip_flash_0_data+0xff7d189c>

408118b0 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
408118b0:	defffd04 	addi	sp,sp,-12
408118b4:	df000215 	stw	fp,8(sp)
408118b8:	df000204 	addi	fp,sp,8
408118bc:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
408118c0:	0001883a 	nop
408118c4:	e0bfff17 	ldw	r2,-4(fp)
408118c8:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
408118cc:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
408118d0:	10000226 	beq	r2,zero,408118dc <_exit+0x2c>
    ALT_SIM_FAIL();
408118d4:	002af070 	cmpltui	zero,zero,43969
408118d8:	00000106 	br	408118e0 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
408118dc:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
408118e0:	003fff06 	br	408118e0 <__alt_mem_onchip_flash_0_data+0xff7d18e0>
