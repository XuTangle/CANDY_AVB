/*
 * i2c.c
 *
 *  Created on: 2019/01/17
 *      Author: Shunichi Yamamoto
 */

#include "i2c.h"

void i2c_start(long sclk, long sdat)
{
	//SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 1);

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 1);
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
	SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 0);
	SCL_DELAY;
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
	SCL_DELAY;
}

void i2c_stop(long sclk, long sdat)
{
	//SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 1);

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 0);
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
	SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, 1);
	SCL_DELAY;
	//IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
}

void i2c_send_bit(long sclk, long sdat, int data)
{
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 1);

	IOWR_ALTERA_AVALON_PIO_DATA(sdat, data ? 1 : 0);
	SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);
	SCL_DELAY;
	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
	SCL_DELAY;
}

int i2c_receive_bit(long sclk, long sdat)
{
	int data;

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);
	SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 1);

	IOWR_ALTERA_AVALON_PIO_DIRECTION(sdat, 0);
	data = IORD_ALTERA_AVALON_PIO_DATA(sdat);
	SCL_DELAY;

	IOWR_ALTERA_AVALON_PIO_DATA(sclk, 0);

	return data;
}

int i2c_send_byte(long sclk, long sdat, unsigned short data)
{
	unsigned short mask = 1 << (8 - 1);
	int i;

	for (i = 0; i < 8; i++)
	{
		i2c_send_bit(sclk, sdat, data & mask);
		mask >>= 1;
	}

	return i2c_receive_bit(sclk, sdat);
}

int i2c_receive_byte(long sclk, long sdat)
{
	unsigned short data = 0;
	int i;

	for (i = 0; i < 8; i++)
	{
		data <<= 1;
		if (i2c_receive_bit(sclk, sdat))
		{
			data |= 0x01;
		}
	}

	i2c_send_bit(sclk, sdat, 1);

	return data;
}

bool i2c_multiple_write(long sclk, long sdat, uint8_t DeviceAddr, uint16_t ControlAddr, uint8_t szData[], uint16_t len){
    bool bSuccess = TRUE;
    uint_8 AddrHigh, AddrLow;
    int i;

    AddrHigh = (ControlAddr >> 8) & 0xFF;
    AddrLow  = ControlAddr & 0xFF;


    i2c_start(sclk, sdat);
    if (!i2c_send_byte(sclk, sdat, DeviceAddr)){  // send ID
        bSuccess = FALSE;
        //I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrHigh)){ // send sub-address
        bSuccess = FALSE;
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }
    if (bSuccess && !i2c_send_byte(sclk, sdat, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        //I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i = 0; i < len && bSuccess; i++){
            bSuccess = i2c_send_byte(clk_base, data_base, szData[i]);
        }
        //bSuccess = FALSE;
        if (!bSuccess)
        {
            //I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
        }
    }
    i2c_stop(sclk, sdat);

    usleep(7 * 1000); // delay to wait EE2 ready (at least 5 ms delay is required)

    return bSuccess;
}
